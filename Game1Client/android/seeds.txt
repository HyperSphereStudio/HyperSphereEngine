com.esotericsoftware.kryo.io.UnsafeOutput: void writeInts(int[],boolean)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField
com.badlogic.gdx.math.Vector3: Vector3(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.Input: int getDeltaX()
com.badlogic.gdx.scenes.scene2d.Actor: float originY
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: long CullFace
com.badlogic.gdx.math.Intersector: boolean intersectLinePolygon(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Polygon)
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean,boolean,boolean,boolean)
com.badlogic.gdx.graphics.GL30: int GL_SRGB
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider: com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config config
com.badlogic.gdx.graphics.GLTexture
com.badlogic.gdx.scenes.scene2d.Actor: float getScaleX()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: void removeField(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField)
com.google.android.material.datepicker.MaterialCalendar: MaterialCalendar()
com.badlogic.gdx.graphics.GL20: int GL_UNSIGNED_INT
com.badlogic.gdx.scenes.scene2d.ui.List: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setY(float)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getWrapSpace()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float minHeight
com.badlogic.gdx.graphics.GL30: int GL_PIXEL_PACK_BUFFER_BINDING
com.badlogic.gdx.input.RemoteInput: int getDeltaX(int)
com.badlogic.gdx.graphics.g2d.Sprite: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color lerp(float,float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_RG8UI
com.badlogic.gdx.math.Intersector: boolean overlapConvexPolygons(float[],int,int,float[],int,int,com.badlogic.gdx.math.Intersector$MinimumTranslationVector)
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.graphics.g3d.Environment environment
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_KERNING_UNFITTED
com.esotericsoftware.kryo.io.Output: int capacity
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: float endX
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction
com.google.android.material.chip.Chip: void setTextAppearanceResource(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void dispose()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_GETFIELD
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: DefaultShader$Inputs()
com.badlogic.gdx.utils.Queue: int indexOf(java.lang.Object,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setPremultipliedAlpha(boolean)
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: float length
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: float upperTranslation
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String)
com.badlogic.gdx.audio.Music: float getPosition()
com.badlogic.gdx.graphics.g2d.Batch: int X1
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getHint()
com.badlogic.gdx.graphics.GL30: void glDrawElements(int,int,int,java.nio.Buffer)
com.badlogic.gdx.net.HttpStatus: int SC_RESET_CONTENT
com.badlogic.gdx.backends.android.AndroidGraphics: AndroidGraphics(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.utils.UBJsonWriter$JsonObject: boolean array
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(float)
com.badlogic.gdx.graphics.GL30: void glCullFace(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,float,float,float,float)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedField(java.lang.reflect.Field,int,int)
com.badlogic.gdx.Graphics: boolean isGL30Available()
com.badlogic.gdx.math.Vector2: java.lang.String toString()
com.badlogic.gdx.InputAdapter: boolean scrolled(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindRenderbuffer(int,int)
androidx.fragment.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)
com.badlogic.gdx.Input$Buttons: int MIDDLE
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean focused
com.badlogic.gdx.utils.ShortArray: boolean removeValue(short)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.physics.box2d.Shape: Shape()
androidx.viewpager2.adapter.FragmentStateAdapter$FragmentMaxLifecycleEnforcer$3
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: ShapeCache(int,int,com.badlogic.gdx.graphics.VertexAttributes,int)
com.badlogic.gdx.physics.box2d.Fixture: long jniGetShape(long)
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation smoother
com.badlogic.gdx.utils.IntIntMap$Keys: boolean hasNext()
com.badlogic.gdx.graphics.g3d.model.MeshPart: com.badlogic.gdx.graphics.g3d.model.MeshPart set(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,int,int)
com.badlogic.gdx.graphics.GL30: void glDeleteProgram(int)
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.utils.Pool usedKeyEvents
com.badlogic.gdx.graphics.g3d.environment.PointLight: boolean equals(com.badlogic.gdx.graphics.g3d.environment.PointLight)
com.badlogic.gdx.math.GridPoint2: float dst(com.badlogic.gdx.math.GridPoint2)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 tmpVec
com.HyperSphere.Connection.PacketObjects.Map.Tile: Tile(int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Sprite: void setScale(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: boolean equals(com.badlogic.gdx.graphics.g3d.particles.ParticleShader)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector[] controlPoints
com.badlogic.gdx.utils.BooleanArray: com.badlogic.gdx.utils.BooleanArray with(boolean[])
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode EnabledUntilCycleEnd
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.files.FileHandle resolve(com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.assets.AssetDescriptor)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float xHeight
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers: DefaultArraySerializers()
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: int hashCode()
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)
com.badlogic.gdx.utils.PooledLinkedList: java.lang.Object next()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: boolean isBound
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureTriangles(int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer copy()
com.badlogic.gdx.utils.ArrayMap$Values: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.scenes.scene2d.ui.Label: void setAlignment(int,int)
com.badlogic.gdx.graphics.g2d.NinePatch: float getTotalHeight()
com.badlogic.gdx.utils.reflect.Field: java.lang.String getName()
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 ip
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: int offsetX
com.badlogic.gdx.physics.box2d.Body: boolean isActive()
com.badlogic.gdx.graphics.GL30: void glUniform2iv(int,int,int[],int)
com.badlogic.gdx.graphics.Camera: float viewportHeight
com.google.android.material.textfield.TextInputLayout: android.widget.TextView getSuffixTextView()
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter object()
com.badlogic.gdx.utils.XmlReader$Element: boolean getBoolean(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails
com.badlogic.gdx.scenes.scene2d.ui.TextField: void initialize()
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2: int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type
com.google.android.material.card.MaterialCardView: int getStrokeWidth()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: void scroll(float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: java.lang.String TAG
com.google.android.material.chip.Chip: void setCloseIconVisible(int)
com.badlogic.gdx.utils.Array: java.lang.Object[] toArray()
com.badlogic.gdx.utils.IntArray: void add(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void removeAll()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item[] H
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getSuffixText()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetJointTranslation(long)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.minlog.Log: boolean TRACE
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: void begin()
com.badlogic.gdx.scenes.scene2d.ui.TextField: float textHeight
com.esotericsoftware.kryo.serializers.BeanSerializer: java.lang.Object access
com.badlogic.gdx.utils.JsonValue: JsonValue(long,java.lang.String)
com.badlogic.gdx.math.Matrix3: int M20
com.badlogic.gdx.backends.android.AndroidInput$3: java.lang.String val$text
com.badlogic.gdx.utils.ObjectMap$Entries: java.lang.Object next()
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult
com.badlogic.gdx.graphics.profiling.GLProfiler: int getDrawCalls()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: java.lang.Object castProperty(java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: int value
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setHigh(float)
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType WebGL
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int[] mValue
com.esotericsoftware.kryo.Kryo
com.esotericsoftware.kryo.io.Input: void readBytes(byte[],int,int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField
com.badlogic.gdx.utils.PooledLinkedList: void addFirst(java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newConst(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.scenes.scene2d.Actor touchDownTarget
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder
com.badlogic.gdx.graphics.GL20: void glUniform2iv(int,int,int[],int)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc,float)
com.esotericsoftware.kryonet.TcpConnection: boolean bufferPositionFix
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnHeight()
com.esotericsoftware.kryo.serializers.FieldSerializer: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.actions.AfterAction: AfterAction()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float getY()
com.badlogic.gdx.files.FileHandleStream: com.badlogic.gdx.files.FileHandle sibling(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: boolean focused
com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String readValue(java.io.BufferedReader)
com.badlogic.gdx.utils.IntIntMap$MapIterator: int currentIndex
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetRepLen1Price(int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINECAP_BUTT
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending SourceOver
com.badlogic.gdx.utils.IntSet: void addAll(com.badlogic.gdx.utils.IntSet)
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType
com.HyperSphere.Connection.PacketObjects.Entities.Creature: float getCollisionPosX()
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: int[] counts
com.esotericsoftware.jsonbeans.Json: java.lang.String prettyPrint(java.lang.Object,com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings)
com.badlogic.gdx.net.HttpStatus: int SC_NOT_ACCEPTABLE
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: boolean began
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int SASTORE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label k
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void begin(long,int)
com.google.firebase.datatransport.TransportRegistrar: java.util.List getComponents()
com.badlogic.gdx.backends.android.AndroidZipFileHandle
com.esotericsoftware.kryo.io.ByteBufferInput: int fill(java.nio.ByteBuffer,int,int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: int logLevel
com.badlogic.gdx.graphics.GL20: void glUniform4fv(int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: void setTarget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.DataInput: java.lang.String readString()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target: boolean drag(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,float,float,int)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)
com.badlogic.gdx.utils.IntMap$MapIterator: void reset()
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector cpy()
com.badlogic.gdx.maps.MapObjects: com.badlogic.gdx.utils.Array objects
com.badlogic.gdx.math.BSpline: int degree
androidx.appcompat.widget.SearchView: int getSuggestionCommitIconResId()
com.badlogic.gdx.math.DelaunayTriangulator: float EPSILON
com.badlogic.gdx.utils.Json: void setDeprecated(java.lang.Class,java.lang.String,boolean)
com.badlogic.gdx.backends.android.AndroidInput: boolean isKeyPressed(int)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: void init()
com.badlogic.gdx.scenes.scene2d.utils.Layout: float getMaxWidth()
com.badlogic.gdx.graphics.GL20: int GL_LINE_STRIP
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel)
com.badlogic.gdx.net.Socket: boolean isConnected()
com.badlogic.gdx.graphics.g2d.SpriteCache: void beginCache()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float computedPadBottom
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean canCacheMoreS
com.badlogic.gdx.net.NetJavaImpl$2
com.badlogic.gdx.graphics.GL30: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo: com.badlogic.gdx.graphics.Cubemap cubemap
com.badlogic.gdx.graphics.profiling.GLInterceptor: void reset()
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: int getPrimitiveType()
com.badlogic.gdx.utils.Base64Coder$CharMap: Base64Coder$CharMap(char,char)
com.hyperspherestudio.kryonet.Packets.PacketStream: PacketStream()
com.badlogic.gdx.utils.StringBuilder: char[] chars
com.badlogic.gdx.utils.compression.Lzma$CommandLine: boolean FbIsDefined
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector setLength(float)
com.badlogic.gdx.utils.Queue: void ensureCapacity(int)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void modifyData(int,int,float,float,float[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int SKIP_FRAMES
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion
com.hyperspherestudio.kryonet.Packets.PacketStream: java.lang.String idNum
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: com.badlogic.gdx.utils.Array getActions()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: ParticleShader$Config()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float min
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Vector2 getScale(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.Kryo: java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float minAmount
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: ObjectSpace$RemoteInvocationHandler(com.esotericsoftware.kryonet.Connection,int)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 trn(float,float)
com.badlogic.gdx.utils.IntIntMap$Values: int next()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: int ROTATE_180
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Diffuse
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float getAverage(float[],int)
com.badlogic.gdx.scenes.scene2d.InputEvent: void reset()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: FreeType$Bitmap(long)
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_SWIZZLE_R
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.assets.AssetLoadingTask: java.lang.Object asset
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean expanded
com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType[] values()
com.badlogic.gdx.utils.viewport.Viewport: int getScreenHeight()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Cell getLabelCell()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float)
com.esotericsoftware.kryonet.util.ObjectIntMap: void removeStashIndex(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: int getTag()
com.google.android.material.textfield.TextInputEditText: java.lang.CharSequence getHint()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell expandX()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glFinish()
com.badlogic.gdx.physics.box2d.World: long jniCreateMotorJoint(long,long,long,boolean,float,float,float,float,float,float)
com.badlogic.gdx.maps.MapObject: com.badlogic.gdx.maps.MapProperties properties
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1: Dialog$1(com.badlogic.gdx.scenes.scene2d.ui.Dialog)
com.badlogic.gdx.math.Interpolation$1: Interpolation$1()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float newHighValue()
com.badlogic.gdx.utils.Array$ArrayIterator: Array$ArrayIterator(com.badlogic.gdx.utils.Array,boolean)
com.esotericsoftware.kryo.ClassResolver
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: UnweightedMeshSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDepthRangef(float,float)
com.badlogic.gdx.backends.android.AndroidPreferences: void remove(java.lang.String)
com.badlogic.gdx.utils.Json$Serializer
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: int api
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: ParticleControllerInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform2iv(int,int,int[],int)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackgroundResource(int)
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput()
com.badlogic.gdx.graphics.g2d.NinePatch: void setPadding(float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(java.lang.String)
com.badlogic.gdx.utils.BooleanArray: void truncate(int)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: ObjLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.assets.loaders.AssetLoader: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: java.lang.String fragmentFileSuffix
com.badlogic.gdx.utils.ObjectFloatMap$Entries: void reset()
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction
com.badlogic.gdx.utils.compression.lzma.Base: int StateUpdateShortRep(int)
com.badlogic.gdx.graphics.GL30: void glStencilOp(int,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: boolean renderGlyph(int)
com.esotericsoftware.kryonet.Connection: int getTcpWriteBufferSize()
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Class getType()
com.badlogic.gdx.scenes.scene2d.Actor: float getX(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int u
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 translate(float,float,float)
com.badlogic.gdx.Input$Keys: int D
com.badlogic.gdx.utils.PerformanceCounter: void start()
com.esotericsoftware.kryonet.Connection: boolean isConnected()
com.fasterxml.jackson.annotation.JsonTypeInfo$Id: com.fasterxml.jackson.annotation.JsonTypeInfo$Id[] values()
com.badlogic.gdx.utils.IntIntMap: void resize(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearStencil(int)
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 set(int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryonet.FrameworkMessage: com.esotericsoftware.kryonet.FrameworkMessage$KeepAlive keepAlive
com.badlogic.gdx.scenes.scene2d.ui.Container: float fillY
com.badlogic.gdx.utils.viewport.ExtendViewport: ExtendViewport(float,float,com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])
com.badlogic.gdx.graphics.Pixmap: void fill()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type FLOAT_TYPE
com.badlogic.gdx.utils.JsonReader: byte[] init__json_trans_actions_0()
com.badlogic.gdx.math.MathUtils: float random(float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setContinuous(boolean)
com.badlogic.gdx.utils.JsonValue: boolean getBoolean(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void setObject(com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_CURRENT_PROGRAM
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean drawVelocities
com.badlogic.gdx.graphics.g3d.model.Node: boolean removeChild(com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.graphics.glutils.InstanceData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.physics.box2d.Fixture: void setRestitution(float)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: void reload()
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.badlogic.gdx.utils.PerformanceCounters: PerformanceCounters()
com.badlogic.gdx.scenes.scene2d.ui.Container: float getMinHeight()
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: java.lang.String PlastEffectID
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: com.badlogic.gdx.math.Matrix3 normalTransform
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: TaggedFieldSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.esotericsoftware.kryo.serializers.MapSerializer: void setKeyClass(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.math.Matrix4: Matrix4(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.backends.android.AndroidNet: com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: int usage
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int GOTO
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.math.Rectangle getViewBounds()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: void addAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.utils.BufferUtils: long findFloats(java.nio.Buffer,int,float[],int)
com.badlogic.gdx.utils.Bits
com.badlogic.gdx.utils.Bits: int numBits()
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.graphics.g2d.BitmapFontCache cache
com.badlogic.gdx.utils.JsonValue: java.lang.String getString(int)
com.google.android.material.behavior.HideBottomViewOnScrollBehavior: HideBottomViewOnScrollBehavior(android.content.Context,android.util.AttributeSet)
androidx.navigation.fragment.DialogFragmentNavigator$1
com.esotericsoftware.kryo.util.UnsafeUtil: sun.misc.Unsafe unsafe()
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo: CubemapLoader$CubemapLoaderInfo()
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: com.badlogic.gdx.math.Vector2 pointer1
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.floatingactionbutton.FloatingActionButtonImpl getImpl()
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.math.Matrix4 combinedMatrix
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: PixmapPackerIO$ImageFormat(java.lang.String,int,java.lang.String)
com.esotericsoftware.kryo.util.Util: int swapInt(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: float[] getColors()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: long getGlyph(long)
com.esotericsoftware.kryo.io.Input
com.esotericsoftware.kryo.util.ObjectMap: float loadFactor
com.badlogic.gdx.math.Polygon: Polygon()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String AmbientLightAlias
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page
com.badlogic.gdx.graphics.Pixmap$Blending: Pixmap$Blending(java.lang.String,int)
com.badlogic.gdx.physics.box2d.Fixture: java.lang.Object userData
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide Front
com.badlogic.gdx.utils.JsonValue: void indent(int,java.io.Writer)
com.badlogic.gdx.graphics.profiling.GLProfiler: void reset()
com.badlogic.gdx.input.GestureDetector: long maxFlingDelay
com.HyperSphere.Connection.PacketObjects.Misc.ParticleEffectPacket
com.esotericsoftware.kryo.io.Output: int position
com.badlogic.gdx.utils.Align: int left
com.badlogic.gdx.graphics.g2d.BitmapFontCache: boolean integer
com.badlogic.gdx.graphics.g3d.decals.Decal: void transformVertices()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int engineFormat
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void end()
com.badlogic.gdx.math.MathUtils: float randomTriangular(float,float)
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1: com.badlogic.gdx.graphics.g2d.PixmapPacker$Page this$0
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getJointTranslation()
androidx.appcompat.widget.AppCompatSpinner: void setBackgroundResource(int)
com.badlogic.gdx.graphics.GLTexture: int glHandle
com.esotericsoftware.kryo.io.Output: int position()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DCMPG
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter[] o
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.utils.Array getSprites()
com.badlogic.gdx.graphics.GL20: int GL_SAMPLE_BUFFERS
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int getOffset()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter u
com.badlogic.gdx.net.HttpStatus: int SC_PARTIAL_CONTENT
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: com.badlogic.gdx.graphics.GLTexture getColorBufferTexture()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.utils.Array sprites
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Referer
com.badlogic.gdx.utils.BufferUtils: void copy(float[],java.nio.Buffer,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IALOAD
com.badlogic.gdx.graphics.GL20: int GL_BLEND_SRC_ALPHA
com.badlogic.gdx.utils.PropertiesUtils: java.lang.String LINE_SEPARATOR
androidx.appcompat.widget.Toolbar: android.view.Menu getMenu()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField
com.badlogic.gdx.scenes.scene2d.ui.Widget: boolean layoutEnabled
com.google.android.material.textfield.TextInputLayout: void setCounterTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.glutils.IndexData: int getNumMaxIndices()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,java.lang.String,boolean,boolean,boolean)
com.badlogic.gdx.utils.StringBuilder: boolean contains(java.lang.String)
com.esotericsoftware.kryo.io.KryoDataOutput: KryoDataOutput(com.esotericsoftware.kryo.io.Output)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: void a(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean readBoolean(java.io.BufferedReader,java.lang.String)
com.badlogic.gdx.utils.LittleEndianInputStream: float readFloat()
com.badlogic.gdx.backends.android.AndroidGL30: void glClearBufferfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.ModelBatch: void begin(com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row: int height
com.badlogic.gdx.math.DelaunayTriangulator: float[] superTriangle
com.badlogic.gdx.utils.viewport.ExtendViewport: void setMinWorldHeight(float)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Matrix4 invProjectionView
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: DynamicsModifier$CentripetalAcceleration(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration)
com.badlogic.gdx.scenes.scene2d.ui.Value$1: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.math.Vector2: float y
com.badlogic.gdx.graphics.g3d.model.MeshPart: void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,boolean)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide NegativeX
com.badlogic.gdx.scenes.scene2d.ui.TextButton: TextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService
com.esotericsoftware.jsonbeans.JsonReader: short[] _json_index_offsets
androidx.fragment.app.Fragment: boolean mMenuVisible
com.badlogic.gdx.utils.compression.lz.BinTree: int kNumHashDirectBytes
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float y
com.badlogic.gdx.math.Intersector$SplitTriangle: int frontOffset
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: int Decode(com.badlogic.gdx.utils.compression.rangecoder.Decoder,int)
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_RANGE
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: PointSpriteParticleBatch()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.model.Node node
com.esotericsoftware.jsonbeans.JsonValue: JsonValue(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput: int keyCount
com.badlogic.gdx.net.Socket: java.io.InputStream getInputStream()
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPadBottom()
com.badlogic.gdx.utils.compression.lzma.Encoder: int _alignPriceCount
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setDisabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float)
com.badlogic.gdx.math.RandomXS128: long getState(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: GLFrameBuffer$FrameBufferCubemapBuilder(int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.utils.JsonWriter$1: int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType
com.badlogic.gdx.graphics.GL30: void glGenTransformFeedbacks(int,int[],int)
com.esotericsoftware.kryo.io.ByteBufferInput: char[] readChars(int)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Pow pow5
com.badlogic.gdx.utils.Base64Coder: java.lang.String decodeString(java.lang.String)
com.google.android.material.chip.Chip: void setChipTextResource(int)
com.badlogic.gdx.utils.Logger: Logger(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: void killParticles(int,int)
com.badlogic.gdx.graphics.GL20: int GL_POLYGON_OFFSET_UNITS
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createNormal(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.backends.android.AndroidGraphics: int[] value
com.esotericsoftware.kryo.util.ObjectMap$Keys: java.util.ArrayList toArray()
com.badlogic.gdx.math.WindowedMean: boolean dirty
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getOriginX()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float velocity
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: boolean uncheckLast
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell columnDefaults(int)
com.badlogic.gdx.utils.QuickSelect: QuickSelect()
com.badlogic.gdx.net.NetJavaImpl$2: void run()
com.badlogic.gdx.utils.Predicate$PredicateIterator: void remove()
com.badlogic.gdx.scenes.scene2d.ui.Label: void setWrap(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter emitter
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Input getInput()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onDestroy()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_FIXED_SIZES
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: float update(float)
com.badlogic.gdx.scenes.scene2d.ui.Image: int align
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2: com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0
com.badlogic.gdx.graphics.g3d.model.Node: void detach()
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: DefaultSerializers$ClassSerializer()
com.badlogic.gdx.utils.Array: int selectRankedIndex(java.util.Comparator,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INEG
com.badlogic.gdx.Input: float getPitch()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat[] values()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color SLATE
com.badlogic.gdx.maps.MapLayers: com.badlogic.gdx.utils.Array getByType(java.lang.Class)
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Polyline: float originY
com.HyperSphere.Connection.PacketObjects.Map.MapObject: boolean hasRenderBounds()
com.HyperSphere.Connection.PacketObjects.Map.MapObject: MapObject(int,int,int,int,int,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setText(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int getMaxTextureUnits()
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider: void dispose()
com.badlogic.gdx.utils.IntArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.graphics.GL20: int GL_INVALID_OPERATION
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: float getX()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isPanning()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: boolean isStatic
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy
com.badlogic.gdx.physics.box2d.Joint: void jniGetAnchorB(long,float[])
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int bindTextureWeighted(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.backends.android.AndroidInput$3$1$1: AndroidInput$3$1$1(com.badlogic.gdx.backends.android.AndroidInput$3$1)
com.badlogic.gdx.Input$Keys: int COMMA
com.badlogic.gdx.scenes.scene2d.ui.Window: int edge
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: ParticleControllerRenderer(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData)
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: GLFrameBuffer$FrameBufferBuilder(int,int)
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: float[] timeline
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.Shader shader
com.esotericsoftware.kryo.io.ByteBufferInput: int readInt_slow(boolean)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row: int x
com.badlogic.gdx.graphics.glutils.ShapeRenderer: boolean autoShapeType
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: PluggableGroupStrategy()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_cameraPosition
com.badlogic.gdx.backends.android.AndroidNet: com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
com.badlogic.gdx.scenes.scene2d.ui.Value$7
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearDepthf(float)
com.esotericsoftware.kryo.Kryo: boolean registrationRequired
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: java.lang.String SlastEffectID
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(java.lang.Object[])
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int linesShowing
com.badlogic.gdx.graphics.g2d.TextureRegion: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.graphics.profiling.GLInterceptor: int getShaderSwitches()
com.badlogic.gdx.math.Ellipse
com.badlogic.gdx.Net$HttpRequest: java.lang.String getMethod()
com.badlogic.gdx.graphics.PixmapIO: PixmapIO()
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: com.badlogic.gdx.scenes.scene2d.Actor target
com.badlogic.gdx.utils.reflect.Field: java.lang.Class getDeclaringClass()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int GPU_POSITION_OFFSET
com.badlogic.gdx.scenes.scene2d.utils.DragListener: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getVertBearingX(long)
com.badlogic.gdx.utils.IntIntMap: void putResize(int,int)
com.badlogic.gdx.backends.android.AndroidFileHandle: boolean exists()
com.badlogic.gdx.utils.IdentityMap: int PRIME1
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction
com.esotericsoftware.jsonbeans.JsonValue: byte getByte(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int,int,float,float,float,float)
com.badlogic.gdx.utils.XmlWriter: boolean indentNextClose
com.badlogic.gdx.utils.ObjectIntMap: ObjectIntMap(int)
androidx.appcompat.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: Tree$TreeStyle()
com.badlogic.gdx.graphics.GL30: void glGetFloatv(int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Entries entries1
com.badlogic.gdx.utils.IntArray: void add(int,int,int,int)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeBytes(java.lang.Object,long,long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: java.lang.String h
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: java.lang.ref.WeakReference mGLSurfaceViewWeakRef
com.badlogic.gdx.utils.FloatArray: void swap(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String CacheControl
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Actor firstAscendant(java.lang.Class)
com.badlogic.gdx.utils.BufferUtils: int positionInBytes(java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.g2d.SpriteCache$Cache currentCache
com.esotericsoftware.kryo.Kryo: byte NULL
com.badlogic.gdx.scenes.scene2d.Actor: void setUserObject(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(int,int,int)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createEmissive(com.badlogic.gdx.graphics.g2d.TextureRegion)
androidx.fragment.app.Fragment: android.os.Bundle mArguments
com.badlogic.gdx.utils.ObjectIntMap$Values: boolean hasNext()
com.badlogic.gdx.utils.FloatArray: int size
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.esotericsoftware.kryo.io.Input: java.lang.String readAscii_slow()
com.badlogic.gdx.graphics.GL30: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.Mesh: float[] getVertices(int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: void updateRelative(float)
com.badlogic.gdx.graphics.GL20: int GL_SAMPLE_COVERAGE_INVERT
com.badlogic.gdx.assets.loaders.ModelLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.Application: com.badlogic.gdx.Preferences getPreferences(java.lang.String)
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String)
com.badlogic.gdx.utils.StringBuilder: char[] getValue()
com.badlogic.gdx.backends.android.AndroidWallpaperListener: void offsetChange(float,float,float,float,int,int)
com.badlogic.gdx.graphics.GL30: java.lang.String glGetActiveUniformBlockName(int,int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void dispose()
com.badlogic.gdx.utils.SerializationException: SerializationException(java.lang.Throwable)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void scaleEffect(float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter filter
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode[] $VALUES
com.badlogic.gdx.utils.viewport.Viewport: Viewport()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel: com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0
com.badlogic.gdx.utils.IntSet: int PRIME2
com.badlogic.gdx.math.collision.BoundingBox: boolean contains(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.Attributes combineAttributes(com.badlogic.gdx.graphics.g3d.Renderable)
com.HyperSphere.Connection.PacketObjects.Map.Tile: Tile(int,int,int)
com.badlogic.gdx.math.MathUtils: float degFull
com.badlogic.gdx.utils.IntFloatMap: void resize(int)
com.badlogic.gdx.math.Interpolation$ExpOut: Interpolation$ExpOut(float,float)
com.esotericsoftware.jsonbeans.ObjectMap: void shrink(int)
com.HyperSphere.Connection.PacketObjects.Misc.Item: short currentQuantity
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object findKey(java.lang.Object,boolean)
com.google.android.material.bottomappbar.BottomAppBar$Behavior
com.esotericsoftware.kryo.io.ByteBufferOutput: java.nio.ByteOrder order()
com.esotericsoftware.kryo.io.FastOutput: FastOutput()
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight set(float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String prependVertexCode
com.badlogic.gdx.physics.box2d.World: boolean jniIsLocked(long)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: ImageButton(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager getInstance()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D copy()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container top()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: void setActive(boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTransformFeedbackVaryings(int,java.lang.String[],int)
com.fasterxml.jackson.annotation.PropertyAccessor: com.fasterxml.jackson.annotation.PropertyAccessor valueOf(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilMaskSeparate(int,int)
com.badlogic.gdx.utils.Logger: void info(java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraPosition
com.badlogic.gdx.InputEventQueue: boolean keyDown(int)
com.badlogic.gdx.scenes.scene2d.Actor: void setPosition(float,float,int)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float[] meanY
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,double)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void fling(float,float,float)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.view.Window getApplicationWindow()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.Texture: int getDepth()
com.badlogic.gdx.utils.FloatArray: void mul(int,float)
com.google.android.material.textfield.TextInputLayout: void setCounterEnabled(boolean)
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: ParticleValue(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue)
com.badlogic.gdx.Input$Keys: int SEARCH
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glStencilMask(int)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: ParticleEmitterBox2D(com.badlogic.gdx.physics.box2d.World,java.io.BufferedReader)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_emissiveTexture
com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField: java.lang.Object getField(java.lang.Object)
com.HyperSphere.Connection.PacketObjects.Misc.ParticleEffectPacket: int posY
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.reflect.Method sortFieldsByOffsetMethod
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,com.badlogic.gdx.graphics.g3d.decals.DecalMaterial)
com.badlogic.gdx.utils.IntSet$IntSetIterator: int nextIndex
com.badlogic.gdx.maps.MapLayer: float offsetY
com.badlogic.gdx.Input$Keys: int J
com.badlogic.gdx.utils.IntArray: IntArray(com.badlogic.gdx.utils.IntArray)
com.badlogic.gdx.Version: boolean isHigherEqual(int,int,int)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute
com.badlogic.gdx.utils.PooledLinkedList: PooledLinkedList(int)
com.badlogic.gdx.backends.android.AndroidPreferences: boolean contains(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void addActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer
com.badlogic.gdx.Application: int getVersion()
com.esotericsoftware.kryo.util.IntArray: void addAll(com.esotericsoftware.kryo.util.IntArray,int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteBuffer(int)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_MAG_FILTER
com.esotericsoftware.kryo.util.IdentityMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node foundNode
com.badlogic.gdx.utils.Base64Coder$CharMap: byte[] decodingMap
com.badlogic.gdx.utils.Queue: java.util.Iterator iterator()
com.badlogic.gdx.backends.android.AndroidInput: android.hardware.SensorEventListener rotationVectorListener
com.badlogic.gdx.graphics.Pixmap: boolean disposed
com.badlogic.gdx.input.GestureDetector: boolean touchUp(float,float,int,int)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE
com.badlogic.gdx.Input$Keys: int BUTTON_C
com.badlogic.gdx.graphics.g2d.Batch: int V1
com.badlogic.gdx.Game: com.badlogic.gdx.Screen screen
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode ViewPoint
androidx.lifecycle.ReflectiveGenericLifecycleObserver
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.scenes.scene2d.ui.Slider: boolean isDragging()
com.badlogic.gdx.physics.box2d.joints.RopeJointDef: float maxLength
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])
com.badlogic.gdx.backends.android.AndroidInput$SensorListener: com.badlogic.gdx.backends.android.AndroidInput this$0
com.badlogic.gdx.graphics.g2d.SpriteBatch: int getBlendSrcFunc()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer
com.badlogic.gdx.utils.LongMap: java.lang.Object[] valueTable
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner001(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.JsonWriter$OutputType: java.lang.String quoteName(java.lang.String)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector limit(float)
com.HyperSphere.Connection.PacketObjects.Misc.HashMapEntry: HyperCollections.HyperSphereListObject alterable
com.badlogic.gdx.graphics.glutils.IndexData: void bind()
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart: java.lang.String meshPartId
com.badlogic.gdx.graphics.g2d.Sprite: void setRegion(float,float,float,float)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField: UnsafeCacheFields$UnsafeStringField(java.lang.reflect.Field)
com.esotericsoftware.kryo.Kryo: void addDefaultSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.ApplicationListener: void dispose()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.math.Vector3 tmpV1
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter
com.esotericsoftware.kryonet.Listener$QueuedListener$3: com.esotericsoftware.kryonet.Listener$QueuedListener this$0
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,java.lang.String[])
com.badlogic.gdx.utils.IdentityMap: int threshold
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int kBenchmak
com.badlogic.gdx.backends.android.AndroidInput: boolean onTouch(android.view.View,android.view.MotionEvent)
com.esotericsoftware.kryonet.util.InputStreamSender: java.lang.Object next(byte[])
com.google.android.material.textfield.TextInputLayout: void setStartIconCheckable(boolean)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillTriangle(int,int,int,int,int,int,int)
androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)
com.badlogic.gdx.utils.IdentityMap$Values
com.HyperSphere.Connection.PacketObjects.Misc.DropBox: long gold
com.badlogic.gdx.utils.LongArray: long pop()
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void put(java.lang.Object,int)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.glutils.ShaderProgram shader
com.badlogic.gdx.graphics.g2d.freetype.FreeType
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.InputListener createInputListener()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory: GLSurfaceView20$ContextFactory()
com.badlogic.gdx.backends.android.AndroidEventListener: void onActivityResult(int,int,android.content.Intent)
com.badlogic.gdx.input.RemoteInput: void cancelVibrate()
com.badlogic.gdx.utils.IntSet: IntSet(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String BINORMAL_ATTRIBUTE
com.badlogic.gdx.graphics.glutils.ShaderProgram: int loadShader(int,java.lang.String)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect: com.badlogic.gdx.graphics.g2d.ParticleEffectPool this$0
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.esotericsoftware.kryonet.rmi.ObjectSpace: java.lang.Object instancesLock
com.badlogic.gdx.math.Path: float locate(java.lang.Object)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLenSymbols
com.badlogic.gdx.utils.BinaryHeap: boolean equals(java.lang.Object)
com.badlogic.gdx.utils.StringBuilder: int numChars(int,int)
com.google.android.material.datepicker.MaterialTextInputPicker: MaterialTextInputPicker()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String c
com.badlogic.gdx.utils.ArrayMap: void truncate(int)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: int cullFace
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3
com.badlogic.gdx.graphics.g2d.GlyphLayout: float height
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: android.view.Window getApplicationWindow()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isForceScrollY()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void convert(int)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner110(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Cell: void reset()
com.esotericsoftware.kryo.util.IdentityMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.jsonbeans.Json: java.lang.String typeName
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer instance
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider: BaseShaderProvider()
com.HyperSphere.Connection.PacketObjects.Map.Tile: Tile(int,int,int,int,int,float,float)
com.badlogic.gdx.math.BSpline: int spanCount
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 triangleCentroid(float,float,float,float,float,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder formEncodedContent(java.util.Map)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell getCell(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int R
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean selectable
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: int getHeight()
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.model.Node loadNode(com.badlogic.gdx.graphics.g3d.model.data.ModelNode)
com.badlogic.gdx.graphics.glutils.VertexArray: java.nio.FloatBuffer buffer
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: int viewHeight
com.badlogic.gdx.utils.IntSet: IntSet(com.badlogic.gdx.utils.IntSet)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String)
com.badlogic.gdx.graphics.Mesh$1
com.badlogic.gdx.maps.MapObject: boolean isVisible()
com.badlogic.gdx.math.Quaternion: int hashCode()
com.badlogic.gdx.math.Rectangle: boolean equals(java.lang.Object)
com.badlogic.gdx.assets.AssetDescriptor: java.lang.Class type
com.esotericsoftware.kryonet.TcpConnection: java.nio.channels.SelectionKey accept(java.nio.channels.Selector,java.nio.channels.SocketChannel)
com.badlogic.gdx.graphics.g2d.PolygonBatch
androidx.appcompat.widget.SearchView: int getSuggestionRowLayout()
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getEmission()
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidApplication: void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.g3d.Model: java.lang.Iterable getManagedDisposables()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getType(java.lang.String)
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue require(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix2fv(int,int,boolean,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.Table$1: java.lang.Object newObject()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_2D_ARRAY
com.badlogic.gdx.utils.TimSort: void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: void restart()
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void setContainerPosition(com.badlogic.gdx.scenes.scene2d.Actor,float,float)
com.esotericsoftware.kryonet.rmi.RemoteObject: java.lang.Object waitForResponse(byte)
com.badlogic.gdx.utils.PooledLinkedList$Item
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Matrix4 isoTransform
com.badlogic.gdx.math.Interpolation$BounceOut
com.HyperSphere.Connection.PacketObjects.Map.Mark: java.lang.String ID
com.badlogic.gdx.physics.box2d.EdgeShape: void jniSetVertex0(long,float,float)
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.FloatArray computePolygon(float[],int,int,boolean)
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void setAlignment(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.math.Vector2 uv
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getAngle()
com.badlogic.gdx.utils.IntIntMap$Entry: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute copy()
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell cellDefaults
com.esotericsoftware.kryo.util.ObjectMap: ObjectMap(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Rectangle widgetAreaBounds
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.graphics.g2d.PolygonRegion region
com.esotericsoftware.kryo.io.OutputChunked: OutputChunked()
com.esotericsoftware.kryo.Kryo: void setMaxDepth(int)
com.google.android.material.button.MaterialButton: int getStrokeWidth()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: float getRotatedPackedWidth()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector setZero()
com.badlogic.gdx.utils.ObjectSet: boolean isEmpty()
com.esotericsoftware.kryo.Generics: void resetParentScope()
com.badlogic.gdx.utils.FloatArray: float first()
com.esotericsoftware.kryonet.util.ObjectIntMap: int get(java.lang.Object,int)
androidx.cardview.widget.CardView: int getContentPaddingLeft()
com.badlogic.gdx.utils.IntIntMap$Keys: com.badlogic.gdx.utils.IntArray toArray()
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: void update(float)
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: boolean hasInheritableReplaceMethod(java.lang.Class,java.lang.String)
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput(int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int ZOffset
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setOrigin(float,float)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int srcY
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean setCharSize(int,int,int,int)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.glutils.ShaderProgram getCustomShader()
com.badlogic.gdx.utils.FloatArray: FloatArray(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size: FreeType$Size(long)
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Skin$4: Skin$4(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: boolean a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void useImmersiveMode(boolean)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundResource(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4: com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: boolean isDirty
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float getDampingRatio()
com.badlogic.gdx.math.DelaunayTriangulator
com.badlogic.gdx.graphics.g2d.BitmapFontCache: BitmapFontCache(com.badlogic.gdx.graphics.g2d.BitmapFont)
com.badlogic.gdx.Input$Keys: int F12
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue spawnHeightValue
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHeight()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getDescender(long)
com.esotericsoftware.kryo.util.IntMap: void putResize(int,java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getHeightRatio()
com.badlogic.gdx.physics.box2d.World: boolean contactFilter(long,long)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: void setResetOnTouchUp(boolean)
com.badlogic.gdx.physics.box2d.Shape
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setTranslation(float,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void flipY()
com.badlogic.gdx.graphics.g2d.ParticleEffect: void draw(com.badlogic.gdx.graphics.g2d.Batch)
com.esotericsoftware.kryo.io.InputChunked: InputChunked(int)
com.badlogic.gdx.utils.IntArray: IntArray(int[])
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Elastic elastic
com.HyperSphere.Connection.PacketObjects.Misc.HyperSoundFx: boolean isMusic
com.google.android.material.chip.ChipGroup: java.util.List getCheckedChipIds()
com.badlogic.gdx.math.Interpolation$Bounce: float out(float)
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter object(java.lang.String)
com.badlogic.gdx.utils.StreamUtils: void copyStream(java.io.InputStream,java.io.OutputStream)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getUpperLimit()
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: int getBindCount()
com.google.android.material.button.MaterialButton$SavedState: android.os.Parcelable$Creator CREATOR
com.esotericsoftware.kryo.util.FastestStreamFactory: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.maps.objects.TextureMapObject: TextureMapObject(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidthFocused(int)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: MouseJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.utils.IntArray: int[] setSize(int)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE30
com.badlogic.gdx.graphics.GL30: int GL_COPY_READ_BUFFER
com.badlogic.gdx.utils.async.AsyncResult: AsyncResult(java.util.concurrent.Future)
com.badlogic.gdx.graphics.GL30: int GL_PACK_SKIP_PIXELS
com.badlogic.gdx.backends.android.AndroidDaydream: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType PrismaticJoint
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.badlogic.gdx.Files: boolean isExternalStorageAvailable()
com.badlogic.gdx.graphics.glutils.ETC1: int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void setView(com.badlogic.gdx.graphics.OrthographicCamera)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttribI4i(int,int,int,int,int)
com.badlogic.gdx.math.Intersector: boolean intersectSegments(float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void begin()
com.badlogic.gdx.graphics.GL20: int GL_ALWAYS
com.badlogic.gdx.graphics.glutils.KTXTextureData: boolean isManaged()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_BINDING
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.utils.Base64Coder: com.badlogic.gdx.utils.Base64Coder$CharMap urlsafeMap
com.esotericsoftware.jsonbeans.ObjectMap$Entries: void remove()
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: float newLowValue()
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.graphics.Texture loadTexture(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void setMaxMotorTorque(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: int button
com.badlogic.gdx.scenes.scene2d.ui.Label: void setFontScale(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void start()
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMinTextSize()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color getColorByBody(com.badlogic.gdx.physics.box2d.Body)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: ParticleSystem()
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean passwordMode
com.badlogic.gdx.scenes.scene2d.ui.List$1
com.badlogic.gdx.scenes.scene2d.ui.Tree: void collapseAll()
com.badlogic.gdx.Graphics: float getRawDeltaTime()
com.google.android.material.chip.Chip: android.text.TextUtils$TruncateAt getEllipsize()
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor()
com.badlogic.gdx.utils.IntIntMap: int remove(int,int)
com.badlogic.gdx.backends.android.AndroidInputThreePlus: com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler
com.badlogic.gdx.input.RemoteInput: float getPitch()
androidx.appcompat.widget.Toolbar: int getContentInsetLeft()
com.badlogic.gdx.assets.loaders.MusicLoader: com.badlogic.gdx.audio.Music music
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: com.badlogic.gdx.scenes.scene2d.Actor getInvalidDragActor()
com.badlogic.gdx.math.Circle: float y
com.badlogic.gdx.utils.AtomicQueue: boolean put(java.lang.Object)
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation: com.badlogic.gdx.utils.Array nodeAnimations
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: com.badlogic.gdx.graphics.Texture[] textures
com.badlogic.gdx.graphics.GL30: int GL_COMPARE_REF_TO_TEXTURE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DSTORE
com.badlogic.gdx.graphics.g2d.ParticleEffect: void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.Gdx: com.badlogic.gdx.Application app
com.badlogic.gdx.physics.box2d.PolygonShape: int getVertexCount()
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: int getMinParticleCount()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$LayoutManager getLayoutManager()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glClearDepthf(float)
com.badlogic.gdx.graphics.PixmapIO$PNG: byte PAETH
com.esotericsoftware.kryo.util.DefaultStreamFactory: DefaultStreamFactory()
com.google.firebase.components.ComponentDiscoveryService
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: float x
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(char[])
com.badlogic.gdx.utils.ObjectSet: java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.IntIntMap: int findKey(int,int)
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setRequired(boolean)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setRange(float,float)
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDECRC
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction: float lastPercent
com.google.android.material.textfield.TextInputLayout: int getErrorCurrentTextColors()
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3,float,float,float,float)
com.badlogic.gdx.utils.ObjectIntMap: int pushIterations
com.badlogic.gdx.graphics.PixmapIO$PNG: int IHDR
com.badlogic.gdx.graphics.Color: void argb8888ToColor(com.badlogic.gdx.graphics.Color,int)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: boolean dirty
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: void setup(float,float,float,float)
com.badlogic.gdx.utils.IntArray: int hashCode()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: boolean getFlipHorizontally()
com.badlogic.gdx.graphics.g3d.Attributes: long getMask()
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: com.badlogic.gdx.graphics.Color end
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int originalWidth
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Files getFiles()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector putInt(int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup left()
com.badlogic.gdx.utils.ArrayMap$Keys: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker: void done(long)
com.badlogic.gdx.backends.android.ZipResourceFile: java.util.HashMap mZipFiles
com.badlogic.gdx.graphics.g2d.Sprite: void setV(float)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Container: void layout()
com.badlogic.gdx.graphics.GL30: int GL_DEPTH_STENCIL
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil unsafeUtil
com.badlogic.gdx.graphics.glutils.IndexBufferObject: IndexBufferObject(int)
com.badlogic.gdx.net.SocketHints: int performancePrefLatency
com.google.android.material.circularreveal.cardview.CircularRevealCardView: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int getLines()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: com.badlogic.gdx.utils.Pool groupPool
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: float pinchZoomFactor
com.badlogic.gdx.utils.IntSet: boolean notEmpty()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float[][] pageVertices
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: android.text.Editable editable
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.Json: void writeType(java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])
com.esotericsoftware.kryo.io.ByteBufferInput: double readDouble()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter: com.badlogic.gdx.utils.Array batches
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getFormat()
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters defaultParameters
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.math.Vector2 getAnchorA()
com.esotericsoftware.kryo.util.IntMap: java.lang.Object zeroValue
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput(byte[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.Serializer: void setAcceptsNull(boolean)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String[] uniformNames
com.badlogic.gdx.backends.android.AndroidAudioDevice: boolean isMono
com.badlogic.gdx.utils.ReflectionPool: ReflectionPool(java.lang.Class,int,int)
com.badlogic.gdx.maps.MapLayers: void add(com.badlogic.gdx.maps.MapLayer)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath
com.badlogic.gdx.graphics.g2d.SpriteCache: SpriteCache()
com.badlogic.gdx.utils.ObjectFloatMap: int PRIME1
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: boolean convertObjectToTileSpace
com.badlogic.gdx.physics.box2d.Body: void jniSetBullet(long,boolean)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: DynamicsModifier$Rotational2D()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int spaceX
com.google.android.material.internal.NavigationMenuItemView: void setHorizontalPadding(int)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float changeSpeedY
com.google.android.material.behavior.HideBottomViewOnScrollBehavior: HideBottomViewOnScrollBehavior()
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: boolean valid
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.math.Vector2 tmp2
com.badlogic.gdx.utils.StringBuilder: void append0(char)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsLoc
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14: DefaultShader$Setters$14()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: Touchpad(float,com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup grow()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel: void add(int,java.lang.Object[])
com.esotericsoftware.reflectasm.FieldAccess: int getFieldCount()
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setClipboard(com.badlogic.gdx.utils.Clipboard)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void setInstanceData(float[],int,int)
com.esotericsoftware.kryonet.EndPoint: void removeListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.math.Interpolation$SwingOut
com.badlogic.gdx.utils.ObjectSet: float loadFactor
com.badlogic.gdx.utils.compression.lz.OutWindow: int _pos
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void ellipse(float,float,float,float)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue$ValueType type()
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 tmp1
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: ImageButton(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel: void setCapacity(int)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 fromString(java.lang.String)
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.util.List getComponents()
com.badlogic.gdx.math.collision.BoundingBox: float getDepth()
com.badlogic.gdx.utils.ObjectMap: ObjectMap()
com.badlogic.gdx.graphics.g3d.decals.Decal: int U2
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isAssignableFrom(java.lang.Class,java.lang.Class)
com.google.firebase.messaging.FirebaseMessagingService: FirebaseMessagingService()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.badlogic.gdx.physics.box2d.Body: boolean isBullet()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
androidx.cardview.widget.CardView
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: EffectDetails()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: float getLowMax()
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.RenderableSorter)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int method
com.badlogic.gdx.utils.Json: boolean getIgnoreUnknownFields()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: float v2
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle loadBundleChain(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.List,int,com.badlogic.gdx.utils.I18NBundle)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: void swap(int,int)
com.badlogic.gdx.utils.LongMap$Keys: long next()
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: long Type
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glStencilMaskSeparate(int,int)
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction: void updateRelative(float)
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: int bind(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.physics.box2d.Transform: float getRotation()
com.badlogic.gdx.scenes.scene2d.Stage: void cancelTouchFocus()
com.google.firebase.iid.Registrar: java.util.List getComponents()
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: int FOREVER
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel strengthChannel
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.g2d.NinePatch)
com.google.firebase.messaging.FirebaseMessaging: com.google.firebase.messaging.FirebaseMessaging getInstance(com.google.firebase.FirebaseApp)
com.badlogic.gdx.maps.objects.EllipseMapObject: EllipseMapObject(float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge c
androidx.fragment.app.Fragment: boolean performOptionsItemSelected(android.view.MenuItem)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: ShaderProgramLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver,java.lang.String,java.lang.String)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToScaling(float,float)
com.badlogic.gdx.utils.IntMap: java.lang.Object put(int,java.lang.Object)
com.google.android.material.internal.NavigationMenuItemView: void setMaxLines(int)
com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings
com.badlogic.gdx.backends.android.AndroidTouchHandler: boolean supportsMultitouch(android.content.Context)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder bufferBuilder
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Pow pow3
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setAttributef(java.lang.String,float,float,float,float)
com.badlogic.gdx.utils.StringBuilder: void insert0(int,char[])
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getVelocityY()
com.badlogic.gdx.utils.IntMap$Keys: void reset()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3: boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ICMPLE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: int e
com.badlogic.gdx.utils.Scaling: Scaling(java.lang.String,int)
com.esotericsoftware.kryo.util.MapReferenceResolver: MapReferenceResolver()
com.badlogic.gdx.math.WindowedMean: boolean hasEnoughData()
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilFuncSeparate(int,int,int,int)
com.esotericsoftware.kryo.serializers.DeflateSerializer
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: int[] particleIndices
com.HyperSphere.Connection.PacketObjects.Map.Mark: short type
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.Texture,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.io.Input: char readChar()
com.badlogic.gdx.graphics.GL20: void glUseProgram(int)
com.badlogic.gdx.utils.IntMap$Keys
com.badlogic.gdx.Input: int getDeltaY()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: MeshBuilder()
com.badlogic.gdx.files.FileHandle: void emptyDirectory(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: ParticleEmitter$ScaledNumericValue()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_4
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18: DefaultShader$Setters$18()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter pop()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute
com.badlogic.gdx.graphics.g3d.decals.Decal: void setDimensions(float,float)
com.badlogic.gdx.math.GridPoint3: GridPoint3(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: DynamicsModifier$PolarAcceleration(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void setPosition(float,float,int)
com.esotericsoftware.kryo.Kryo: void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setTextFieldListener(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.math.Vector2 rayPoint
com.badlogic.gdx.utils.PerformanceCounter: com.badlogic.gdx.math.FloatCounter load
com.badlogic.gdx.graphics.g2d.Sprite: void setOrigin(float,float)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String)
com.badlogic.gdx.utils.IntFloatMap: void putResize(int,float)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: void begin()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.maps.tiled.TiledMapTile: void setOffsetX(float)
com.esotericsoftware.kryonet.KryoSerialization: int getLengthLength()
com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader getParentClassLoader(java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: java.lang.String toString()
com.badlogic.gdx.utils.viewport.ExtendViewport: ExtendViewport(float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader: java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.esotericsoftware.kryo.util.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
androidx.fragment.app.Fragment: void onPictureInPictureModeChanged(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Label: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.utils.async.AsyncExecutor$1: java.lang.Thread newThread(java.lang.Runnable)
com.badlogic.gdx.files.FileHandle$1: int[] $SwitchMap$com$badlogic$gdx$Files$FileType
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: int getNumMaxInstances()
com.badlogic.gdx.backends.android.AndroidApplication: android.content.Context getContext()
com.badlogic.gdx.backends.android.AndroidApplicationBase: int MINIMUM_SDK
com.badlogic.gdx.graphics.GL20: int GL_ACTIVE_UNIFORM_MAX_LENGTH
com.badlogic.gdx.math.Vector3: float len()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void showAction(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)
com.badlogic.gdx.physics.box2d.Body: void jniSetLinearDamping(long,float)
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: java.lang.Object get(java.lang.Object)
com.esotericsoftware.kryo.util.DefaultClassResolver: DefaultClassResolver()
com.badlogic.gdx.input.RemoteSender: RemoteSender(java.lang.String,int)
com.badlogic.gdx.math.Circle: void setY(float)
com.esotericsoftware.kryo.serializers.CollectionSerializer: CollectionSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int MONITOREXIT
com.badlogic.gdx.utils.Align: int right
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getWorldPoint(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColor(float,float,float,float)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preTranslate(float,float)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(float,float,float,com.badlogic.gdx.math.Vector3)
com.google.android.material.textfield.TextInputLayout: void setSuffixTextAppearance(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader
com.badlogic.gdx.graphics.GL30: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.Array androidEventListeners
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 worldVector
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean fling(float,float,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer: ParticleChannels$ScaleInitializer()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setPreserveEGLContextOnPause(boolean)
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.math.Matrix3: int M10
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy
com.google.android.material.bottomappbar.BottomAppBar: int getFabAnimationMode()
com.badlogic.gdx.backends.android.ZipResourceFile: java.nio.ByteBuffer mLEByteBuffer
com.badlogic.gdx.utils.JsonValue: long[] asLongArray()
com.badlogic.gdx.graphics.g3d.decals.Decal: int C3
com.badlogic.gdx.input.GestureDetector: boolean touchDown(float,float,int,int)
com.badlogic.gdx.scenes.scene2d.Group: java.lang.String toString()
com.badlogic.gdx.Preferences: com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean)
com.badlogic.gdx.graphics.GL20: int GL_VENDOR
com.badlogic.gdx.utils.BooleanArray: boolean ordered
com.badlogic.gdx.graphics.GL30: void glFlush()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 getTranslation(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.FlushablePool: FlushablePool(int,int)
com.badlogic.gdx.utils.LongMap: int capacity
com.badlogic.gdx.utils.async.ThreadUtils
com.badlogic.gdx.backends.android.AndroidInput: float getRoll()
androidx.recyclerview.widget.StaggeredGridLayoutManager: StaggeredGridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput
com.esotericsoftware.kryonet.rmi.ObjectSpace$1: ObjectSpace$1(com.esotericsoftware.kryonet.rmi.ObjectSpace)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGraphics: void setContinuousRendering(boolean)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getLife()
com.badlogic.gdx.graphics.GL20: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setBlend(long,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: int width
com.badlogic.gdx.utils.StringBuilder: boolean containsIgnoreCase(java.lang.String)
com.badlogic.gdx.scenes.scene2d.Stage: void act()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item c(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float padRight
com.badlogic.gdx.utils.JsonValue: boolean isValue()
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type GLES
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue)
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy: int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal)
com.badlogic.gdx.assets.loaders.TextureAtlasLoader: com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data
com.badlogic.gdx.graphics.GL30: void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.JsonReader: byte[] init__json_actions_0()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: boolean isValidTarget
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: boolean isContinuous()
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle getStyle()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_SWIZZLE_A
com.esotericsoftware.kryonet.Connection: com.esotericsoftware.kryonet.EndPoint endPoint
com.badlogic.gdx.graphics.GL30: void glDrawArraysInstanced(int,int,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_WIND
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void index(short,short,short,short)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor cv
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void dispose()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random
com.badlogic.gdx.graphics.GL20: int GL_POLYGON_OFFSET_FACTOR
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: float getUnitScale()
com.badlogic.gdx.math.Intersector: boolean isPointInPolygon(float[],int,int,float,float)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2
com.badlogic.gdx.backends.android.AndroidNet$1: android.net.Uri val$uri
com.badlogic.gdx.Input$Keys: int NUM_5
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean scrollBarTouch
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue
com.esotericsoftware.kryonet.TcpConnection: long lastReadTime
com.badlogic.gdx.Input: int getX(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4
com.badlogic.gdx.Net$Protocol: com.badlogic.gdx.Net$Protocol valueOf(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: int m_NumPrevBits
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel: void swap(int,int)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: boolean isWhitespace(char)
com.esotericsoftware.kryo.io.ByteBufferInput: java.lang.String readAscii()
com.badlogic.gdx.utils.SharedLibraryLoader: java.io.File extractFile(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.Timer$Task: com.badlogic.gdx.utils.Timer timer
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Entries entries2
com.esotericsoftware.kryo.util.ObjectMap: int hash2(int)
com.badlogic.gdx.scenes.scene2d.Actor: boolean hasActions()
com.badlogic.gdx.graphics.GL20: int GL_MAX_TEXTURE_UNITS
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: short[] m_Encoders
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: void update()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor HorizontalResize
com.badlogic.gdx.graphics.GL30: int GL_MAP_INVALIDATE_BUFFER_BIT
com.badlogic.gdx.math.Matrix3: java.lang.String toString()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.StreamFactory getStreamFactory()
com.badlogic.gdx.utils.IntFloatMap$MapIterator: int nextIndex
com.badlogic.gdx.graphics.g2d.PolygonRegion: float[] getVertices()
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart: int[][] uvMapping
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1
com.badlogic.gdx.graphics.g2d.NinePatch: float middleWidth
com.badlogic.gdx.utils.FloatArray: float peek()
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: boolean flipVertically
com.badlogic.gdx.utils.BufferUtils: void copy(char[],int,java.nio.Buffer,int)
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Body getBody()
com.badlogic.gdx.maps.MapObjects: void remove(int)
com.badlogic.gdx.scenes.scene2d.Actor: float getScaleY()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: boolean isUncompressed()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float dragX
com.badlogic.gdx.graphics.profiling.GL30Interceptor: com.badlogic.gdx.graphics.GL30 gl30
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int WOffset
com.esotericsoftware.kryo.util.DefaultClassResolver: java.lang.Class getTypeByName(java.lang.String)
com.badlogic.gdx.graphics.GL30: void glGetUniformuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getAscender()
com.badlogic.gdx.scenes.scene2d.ui.Label: void layout()
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: java.lang.String id
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,float)
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Connection[] getConnections()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.Input: void cancelVibrate()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOpen
com.esotericsoftware.kryonet.rmi.ObjectSpace: java.lang.Object getRemoteObject(com.esotericsoftware.kryonet.Connection,int,java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.Tile
com.badlogic.gdx.utils.ArrayMap: boolean containsValue(java.lang.Object,boolean)
com.badlogic.gdx.utils.BinaryHeap: int size
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: com.badlogic.gdx.graphics.Color temp
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int loopDuration
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell space(float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform2fv(int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.InputEvent: void setScrollAmount(int)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: ImageTextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(long)
com.badlogic.gdx.graphics.GL30: void glUniformBlockBinding(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getPadTop()
com.badlogic.gdx.utils.Array: void clear()
com.badlogic.gdx.graphics.g3d.decals.Decal: void translateZ(float)
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.ObjectMap classToSerializer
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: boolean isLimitEnabled()
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: TextButton$TextButtonStyle()
com.badlogic.gdx.math.Plane: void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.PooledLinkedList$Item: PooledLinkedList$Item()
com.badlogic.gdx.utils.compression.lzma.Encoder: int EMatchFinderTypeBT4
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_INVOKEVIRTUAL
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_ATTACH_DETACH
com.badlogic.gdx.backends.android.AndroidGraphics: boolean isFullscreen()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnWidthValue
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 setLength(float)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: com.badlogic.gdx.math.Matrix4 getVertexTransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_BUFFER_START
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preShear(float,float)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: boolean delegate(float)
com.google.android.material.behavior.HideBottomViewOnScrollBehavior
com.badlogic.gdx.math.Polygon: void scale(float)
com.badlogic.gdx.utils.Array: int lastIndexOf(java.lang.Object,boolean)
com.badlogic.gdx.net.SocketHints: SocketHints()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setEulerAngles(float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor
com.badlogic.gdx.physics.box2d.Box2D: Box2D()
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.BaseLight[])
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.QuickSelect
com.badlogic.gdx.scenes.scene2d.InputListener: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenSamplers(int,int[],int)
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: CubemapAttribute(long,com.badlogic.gdx.graphics.Cubemap)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager getManager()
com.badlogic.gdx.Input: void setCursorPosition(int,int)
com.badlogic.gdx.utils.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.ByteArray: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart: short[] indices
com.badlogic.gdx.utils.ObjectMap$Entry
com.badlogic.gdx.utils.ObjectIntMap: int[] valueTable
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitJumpInsn(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.scenes.scene2d.Event
com.badlogic.gdx.physics.box2d.Fixture: void jniGetFilterData(long,short[])
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format Intensity
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 scl(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: int strideSize
com.badlogic.gdx.utils.ObjectIntMap: java.lang.Object findKey(int)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float highMax
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.Actor getWidget()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void requestExitAndWait()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell fill()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float minWidth
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setSplitAmount(float)
com.badlogic.gdx.utils.viewport.ScalingViewport: void update(int,int,boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_projViewTrans
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float getPrefWidth()
com.badlogic.gdx.utils.XmlReader: char[] _xml_trans_keys
com.badlogic.gdx.utils.AtomicQueue: java.util.concurrent.atomic.AtomicInteger writeIndex
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle fitOutside(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.utils.IntFloatMap: boolean hasZeroValue
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean)
com.badlogic.gdx.graphics.g3d.ModelCache$2: java.lang.Object newObject()
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer: ParticleControllerControllerRenderer()
com.esotericsoftware.minlog.Log$Logger: long firstLogTime
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_IsRepG0Decoders
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.badlogic.gdx.utils.FloatArray: void addAll(float[],int,int)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2: com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0
com.badlogic.gdx.math.FloatCounter: void reset()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getPrefWidth()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.graphics.Texture$TextureWrap uWrap
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.utils.Array getChildren()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float wind
com.google.android.material.textfield.TextInputLayout: void setHelperTextEnabled(boolean)
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Entries iterator()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int VOID
com.badlogic.gdx.maps.MapObject: com.badlogic.gdx.graphics.Color color
androidx.fragment.app.Fragment: void setEnterTransition(java.lang.Object)
com.badlogic.gdx.graphics.glutils.IndexArray: java.nio.ShortBuffer buffer
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ACMPEQ
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: int currentIndex
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDragDistance()
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.utils.JsonValue: short asShort()
com.badlogic.gdx.utils.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)
com.badlogic.gdx.Graphics: int getWidth()
com.badlogic.gdx.graphics.Cubemap: int getDepth()
com.badlogic.gdx.utils.XmlReader: byte[] _xml_range_lengths
com.badlogic.gdx.graphics.GL30: int glGetFragDataLocation(int,java.lang.String)
com.google.android.material.card.MaterialCardView: android.content.res.ColorStateList getCardBackgroundColor()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: int f
com.esotericsoftware.kryo.io.Output: void writeLong(long)
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Entries entries2
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int HalfHeightOffset
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp3
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration memoizedClassIdValue
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.utils.ComparableTimSort
com.esotericsoftware.kryo.util.IntMap: java.lang.Object put(int,java.lang.Object)
com.badlogic.gdx.physics.box2d.World$1: com.badlogic.gdx.physics.box2d.World this$0
com.badlogic.gdx.utils.BooleanArray: BooleanArray(boolean,boolean[],int,int)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source dragSource
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: java.lang.Object next()
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector tmp2
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidInput: int getDeltaY()
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones: float[] bones
com.badlogic.gdx.utils.Timer$TimerThread: com.badlogic.gdx.Files files
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries: com.badlogic.gdx.utils.ObjectMap$Entry next()
com.badlogic.gdx.utils.IntFloatMap: float getStash(int,float)
com.badlogic.gdx.Input$Keys: int SYM
com.badlogic.gdx.utils.IntIntMap$MapIterator: boolean valid
com.badlogic.gdx.utils.compression.lz.OutWindow: int _windowSize
com.badlogic.gdx.graphics.Texture: void load(com.badlogic.gdx.graphics.TextureData)
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Float onef
com.badlogic.gdx.utils.OrderedSet
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.ObjectSet textures
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute Tangent()
com.google.android.material.button.MaterialButton: void setIconGravity(int)
com.badlogic.gdx.utils.SortedIntList: java.lang.Object insert(int,java.lang.Object)
com.esotericsoftware.kryo.util.IntMap
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 rotateRad(float)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: DecalBatch(com.badlogic.gdx.graphics.g3d.decals.GroupStrategy)
com.badlogic.gdx.utils.FloatArray: float[] shrink()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int readUnsignedShort(int)
com.esotericsoftware.kryo.io.Output: java.io.OutputStream getOutputStream()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: SpecialString(java.lang.String,float,float,float,int,int,float[],int)
com.badlogic.gdx.math.Polyline: float getY()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitEnd()
com.badlogic.gdx.scenes.scene2d.ui.List: java.lang.Object getSelected()
com.badlogic.gdx.physics.box2d.World: void clearForces()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: ObjectIntMap$MapIterator(com.badlogic.gdx.utils.ObjectIntMap)
com.badlogic.gdx.graphics.g2d.SpriteCache: int renderCalls
com.badlogic.gdx.backends.android.ZipResourceFile: int swapEndian(short)
androidx.appcompat.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)
com.badlogic.gdx.graphics.Pixmap: int color
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void triangle(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: boolean onKey(android.view.View,int,android.view.KeyEvent)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.TimSort: int minRunLength(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_reflectionUVTransform
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container fill(float,float)
androidx.fragment.app.Fragment: int mContentLayoutId
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int DEBUG_LOG_GL_CALLS
com.badlogic.gdx.graphics.g2d.TextureAtlas$1: int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region)
com.badlogic.gdx.maps.MapObject: com.badlogic.gdx.maps.MapProperties getProperties()
com.badlogic.gdx.backends.android.AndroidMusic: boolean isPlaying()
com.badlogic.gdx.utils.JsonValue: java.lang.String getString(java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void rect(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.reflect.Method: boolean isPrivate()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide NegativeZ
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getVisualScrollX()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator
com.badlogic.gdx.backends.android.AndroidFiles: android.content.res.AssetManager assets
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel interpolationChannel
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction: boolean isVisible()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: float tapSquareSize
com.badlogic.gdx.utils.ObjectMap: int stashCapacity
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter: TextureAtlasLoader$TextureAtlasParameter(boolean)
com.badlogic.gdx.utils.PooledLinkedList$Item: com.badlogic.gdx.utils.PooledLinkedList$Item next
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.util.IntMap$Keys
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.BitmapFont generateFont(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData)
com.esotericsoftware.kryo.util.IdentityMap: void putResize(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: float getMinHeight()
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: java.lang.String toString()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: void visitEnd()
com.badlogic.gdx.graphics.GL20: int GL_PACK_ALIGNMENT
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable insert(int,java.lang.CharSequence,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: int glGenRenderbuffer()
com.badlogic.gdx.backends.android.AndroidClipboard
com.badlogic.gdx.graphics.GL20: boolean glIsFramebuffer(int)
com.HyperSphere.Connection.PacketObjects.Misc.Item: int Range
com.badlogic.gdx.scenes.scene2d.ui.Tree: float plusMinusWidth()
com.badlogic.gdx.backends.android.AndroidApplicationBase: void addLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: boolean isDirect
com.badlogic.gdx.utils.ShortArray: void mul(int,short)
com.badlogic.gdx.utils.IntFloatMap: int PRIME3
com.badlogic.gdx.physics.box2d.World: long jniCreateWheelJoint(long,long,long,boolean,float,float,float,float,float,float,boolean,float,float,float,float)
com.badlogic.gdx.utils.CharArray: CharArray(char[])
com.badlogic.gdx.maps.objects.PolygonMapObject: void setPolygon(com.badlogic.gdx.math.Polygon)
com.badlogic.gdx.backends.android.AndroidGL20: void glUseProgram(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: int refCount
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 sub(float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup pad(float,float,float,float)
com.esotericsoftware.jsonbeans.JsonValue: boolean has(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: com.badlogic.gdx.graphics.g2d.NinePatch patch
com.badlogic.gdx.backends.android.AndroidGraphics: void setGL20(com.badlogic.gdx.graphics.GL20)
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: void sort(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glSampleCoverage(float,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Skin$3: java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.math.Bezier: float approximate(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.maps.MapProperties: void putAll(com.badlogic.gdx.maps.MapProperties)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape line
com.badlogic.gdx.physics.box2d.Body: void applyAngularImpulse(float,boolean)
com.badlogic.gdx.backends.android.AndroidInput: android.hardware.SensorEventListener gyroscopeListener
com.badlogic.gdx.math.GridPoint3: int x
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDrawElements(int,int,int,java.nio.Buffer)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: StaticTiledMapTile(com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile)
com.badlogic.gdx.utils.Array: java.lang.Object[] shrink()
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniEnableLimit(long,boolean)
com.badlogic.gdx.math.GridPoint2: GridPoint2()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter a
com.badlogic.gdx.backends.android.AndroidGL30: void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
com.badlogic.gdx.Net: com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
com.badlogic.gdx.input.RemoteInput: float remoteWidth
com.badlogic.gdx.scenes.scene2d.Action: com.badlogic.gdx.utils.Pool getPool()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: void setCapacity(int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.Color transparentColor
androidx.fragment.app.Fragment: void startActivityForResult(android.content.Intent,int)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1: DragScrollListener$1(com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane)
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean isChecked()
com.badlogic.gdx.files.FileHandle: java.io.InputStream read()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.badlogic.gdx.InputEventQueue: boolean keyUp(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void setVertexData()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.physics.box2d.BodyDef: float linearDamping
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void initialize()
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_10F_11F_11F_REV
com.google.android.gms.common.internal.ResolveAccountResponse: android.os.Parcelable$Creator CREATOR
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: void setString(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.math.Interpolation$BounceOut: float apply(float)
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: ProgressBar$ProgressBarStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.math.Rectangle: Rectangle(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.utils.IdentityMap: boolean isEmpty()
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: boolean keyUp(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random copy()
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Vector3 TMP_V1
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.ui.Label titleLabel
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$1: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager this$0
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator comparator
com.badlogic.gdx.physics.box2d.joints.WeldJoint: void jniGetLocalAnchorB(long,float[])
com.badlogic.gdx.math.Matrix3: float det()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: GLFrameBuffer(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
com.esotericsoftware.jsonbeans.JsonValue: boolean isDouble()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: com.badlogic.gdx.graphics.g3d.Renderable renderable
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter: BaseShader$GlobalSetter()
com.badlogic.gdx.input.RemoteInput: boolean multiTouch
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float gravity
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.scenes.scene2d.InputListener getKeyListener()
com.badlogic.gdx.utils.OrderedSet: com.badlogic.gdx.utils.Array orderedItems()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 trn(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void cylinder(float,float,float,int)
com.badlogic.gdx.graphics.g3d.Attribute: java.lang.String toString()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void setFrameBufferViewport()
com.badlogic.gdx.utils.PerformanceCounter: void stop()
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float getFrequency()
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode Logical
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: Encoder$LiteralEncoder$Encoder2(com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder)
com.badlogic.gdx.Input$Keys: int BUTTON_X
com.badlogic.gdx.graphics.Pixmap: com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float fadeDelay
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INVOKESPECIAL
com.badlogic.gdx.maps.tiled.TiledMapTileSet: com.badlogic.gdx.maps.MapProperties properties
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1: boolean deleteSurroundingText(int,int)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String DiffuseAlias
com.esotericsoftware.kryonet.Server$1: void received(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.esotericsoftware.kryo.io.ByteBufferOutput: void order(java.nio.ByteOrder)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18
com.badlogic.gdx.scenes.scene2d.utils.Selection: void choose(java.lang.Object)
com.badlogic.gdx.utils.BufferUtils: long findFloats(float[],int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void apply(com.badlogic.gdx.graphics.g3d.model.Animation,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getComputedPadBottom()
com.badlogic.gdx.graphics.GL30: void glBeginQuery(int,int)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float bottomHeight
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: boolean isStatic
com.badlogic.gdx.scenes.scene2d.ui.Skin: void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.badlogic.gdx.graphics.g3d.model.Node: Node()
com.badlogic.gdx.input.RemoteInput: RemoteInput()
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long mOffset
com.esotericsoftware.kryo.util.ObjectMap$Entries: void reset()
com.badlogic.gdx.scenes.scene2d.Actor: void setBounds(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable corner
com.badlogic.gdx.graphics.GL30: int GL_DEPTH
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: SphereShapeBuilder()
com.badlogic.gdx.utils.ObjectIntMap$Keys: void reset()
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: int m_NumPosBits
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformBlockBinding(int,int,int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.badlogic.gdx.net.NetJavaServerSocketImpl: com.badlogic.gdx.Net$Protocol protocol
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: void save(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: IndexBufferObject(boolean,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.math.Polygon: float scaleY
com.esotericsoftware.kryonet.Listener$ReflectionListener: java.util.HashMap classToMethod
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction: com.badlogic.gdx.scenes.scene2d.Touchable getTouchable()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int kNumMoveBits
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void notifyPreviewState()
androidx.fragment.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getRippleColorStateList()
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: com.badlogic.gdx.utils.ObjectMap data
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload getDragPayload()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getType(java.lang.reflect.Method)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void fetchUniforms()
com.HyperSphere.Connection.PacketObjects.Misc.PathProgress: int quantityOfResources
com.badlogic.gdx.scenes.scene2d.ui.Window: void keepWithinStage()
com.badlogic.gdx.utils.ShortArray: boolean notEmpty()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.List$2
com.badlogic.gdx.utils.BufferUtils: int elementsToBytes(java.nio.Buffer,int)
com.esotericsoftware.kryo.util.IdentityMap$Entry: IdentityMap$Entry()
com.badlogic.gdx.math.Rectangle: boolean contains(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.badlogic.gdx.graphics.GL20: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenerateMipmap(int)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float edgeDistance
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: boolean attach
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_ADOBE_STANDARD
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels particleChannels
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1: int compare(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.GL30: int GL_R16I
com.google.android.material.card.MaterialCardView: int getStrokeColor()
com.google.firebase.datatransport.TransportRegistrar: TransportRegistrar()
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: void removeElement(int)
com.badlogic.gdx.utils.Queue: void addFirst(java.lang.Object)
com.badlogic.gdx.math.GeometryUtils: void ensureCCW(float[],int,int)
com.badlogic.gdx.math.CatmullRomSpline: float locate(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source getDragSource()
com.badlogic.gdx.utils.XmlWriter: void close()
com.badlogic.gdx.scenes.scene2d.InputEvent: int pointer
com.esotericsoftware.kryonet.Listener$ThreadedListener: Listener$ThreadedListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.utils.compression.lz.InWindow: java.io.InputStream _stream
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapObjects,com.badlogic.gdx.utils.XmlReader$Element,float)
com.badlogic.gdx.backends.android.APKExpansionSupport: java.lang.String EXP_PATH
com.badlogic.gdx.utils.SharedLibraryLoader: java.io.File getExtractedFile(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue parent
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTrnScl(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_trans_targs_0()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatElevation(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.compression.lz.BinTree: int _hashSizeSum
com.badlogic.gdx.utils.BinaryHeap$Node: BinaryHeap$Node(float)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: boolean isComplete()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setX(float)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: int textureCount
com.badlogic.gdx.utils.BufferUtils: void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.Array: void add(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float)
com.badlogic.gdx.graphics.GL30: boolean glIsFramebuffer(int)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float dragLastY
com.badlogic.gdx.backends.android.AndroidGL30: void glGenSamplers(int,int[],int)
androidx.coordinatorlayout.widget.CoordinatorLayout: int getNestedScrollAxes()
com.badlogic.gdx.scenes.scene2d.ui.TextField$1: TextField$1(com.badlogic.gdx.scenes.scene2d.ui.TextField)
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.graphics.g3d.model.MeshPart meshPart
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: PointLightsAttribute()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getStageTouchDownY()
com.badlogic.gdx.graphics.TextureArray: TextureArray(com.badlogic.gdx.files.FileHandle[])
com.HyperSphere.Connection.PacketObjects.Misc.Item: java.lang.String classType
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: float getX()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void getTransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell bottom()
androidx.appcompat.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()
com.badlogic.gdx.scenes.scene2d.ui.Window$3: boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)
com.badlogic.gdx.Files
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Tree$1
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void setTapSquareSize(float)
com.badlogic.gdx.utils.IntMap$Entries: com.badlogic.gdx.utils.IntMap$Entry entry
androidx.fragment.app.FragmentContainerView
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: android.view.View createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void rotate90(boolean)
com.HyperSphere.Connection.PacketObjects.Misc.EntityParticleEffect: boolean isMonster
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory: java.lang.reflect.Constructor fieldSerializerUnsafeUtilConstructor
com.badlogic.gdx.graphics.g2d.GlyphLayout: void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: float minPulleyLength
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createSpecular(com.badlogic.gdx.graphics.Color)
com.esotericsoftware.jsonbeans.JsonReader: int json_en_array
com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch)
com.badlogic.gdx.math.GridPoint2: java.lang.String toString()
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT11
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float jniGetRatio(long)
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction
com.badlogic.gdx.utils.IntFloatMap$Values: IntFloatMap$Values(com.badlogic.gdx.utils.IntFloatMap)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.utils.Array actions
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.google.android.material.snackbar.Snackbar$SnackbarLayout
com.esotericsoftware.kryo.io.UnsafeInput: double readDouble()
com.badlogic.gdx.utils.OrderedMap: com.badlogic.gdx.utils.ObjectMap$Entries entries()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.FrameBuffer build()
com.badlogic.gdx.graphics.GL30: void glSamplerParameterf(int,int,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int,float,float,boolean)
com.esotericsoftware.kryonet.TcpConnection: java.nio.ByteBuffer readBuffer
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries: void reset()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type)
com.badlogic.gdx.graphics.g3d.ModelInstance: java.lang.Object userData
com.badlogic.gdx.graphics.Mesh$VertexDataType
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: java.lang.Object o
androidx.fragment.app.Fragment: void setNextTransition(int)
com.badlogic.gdx.utils.I18NBundle: void setExceptionOnMissingKey(boolean)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()
com.esotericsoftware.jsonbeans.OutputType$1: int[] $SwitchMap$com$esotericsoftware$jsonbeans$OutputType
com.google.android.material.bottomappbar.BottomAppBar: void setSubtitle(java.lang.CharSequence)
com.badlogic.gdx.utils.viewport.Viewport: void apply(boolean)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledBackground
com.google.android.material.chip.Chip: void setElevation(float)
com.badlogic.gdx.graphics.GL30: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.utils.IntSet$IntSetIterator: IntSet$IntSetIterator(com.badlogic.gdx.utils.IntSet)
com.esotericsoftware.kryonet.Serialization: java.lang.Object read(com.esotericsoftware.kryonet.Connection,java.nio.ByteBuffer)
com.badlogic.gdx.input.RemoteInput: float getPressure()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: void prepare()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: long optionalAttributes
com.badlogic.gdx.graphics.glutils.ETC1TextureData: com.badlogic.gdx.files.FileHandle file
com.badlogic.gdx.utils.ByteArray: void set(int,byte)
com.badlogic.gdx.utils.XmlWriter: int indent
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mRedSize
com.badlogic.gdx.graphics.Pixmap: void dispose()
com.badlogic.gdx.utils.compression.lz.BinTree: void SetType(int)
com.badlogic.gdx.backends.android.AndroidInput: float[] accelerometerValues
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: float speed
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitMultiANewArrayInsn(java.lang.String,int)
com.badlogic.gdx.backends.android.AndroidDaydream$1: AndroidDaydream$1(com.badlogic.gdx.backends.android.AndroidDaydream)
com.badlogic.gdx.math.Quaternion: Quaternion(com.badlogic.gdx.math.Quaternion)
com.esotericsoftware.jsonbeans.ObjectMap$Entries: java.lang.Object next()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int NEWARRAY
com.badlogic.gdx.maps.objects.TextureMapObject: void setOriginX(float)
com.badlogic.gdx.math.collision.Segment: float len()
com.badlogic.gdx.math.Quaternion: float x
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: float value
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel
com.badlogic.gdx.graphics.g2d.SpriteCache
com.badlogic.gdx.backends.android.AndroidAudio: AndroidAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String)
com.badlogic.gdx.utils.IntIntMap$MapIterator
com.badlogic.gdx.utils.LongMap$Values: void remove()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DCMPL
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int getHeight()
com.badlogic.gdx.input.RemoteInput$KeyEvent: int keyCode
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue()
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float)
com.badlogic.gdx.utils.SerializationException: java.lang.String getMessage()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void jniSetCorrectionFactor(long,float)
com.esotericsoftware.kryo.util.ObjectMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.Input: long getCurrentEventTime()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.graphics.GLTexture)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.drawable.Drawable getContentBackground()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollBarHeight()
com.badlogic.gdx.files.FileHandle: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int originalHeight
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue lifeOffsetValue
com.badlogic.gdx.physics.box2d.Fixture: float getRestitution()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void cylinder(float,float,float,int,float,float,boolean)
com.google.android.material.internal.NavigationMenuItemView: void setTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: float[] matrix
com.badlogic.gdx.utils.BufferUtils: void transformV2M3Jni(float[],int,int,float[],int)
com.badlogic.gdx.graphics.GL30: void glProgramParameteri(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: ImageTextButton$ImageTextButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeLongs(long[],boolean)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(char)
com.badlogic.gdx.utils.Json: void writeValue(java.lang.String,java.lang.Object,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: ImageButton$ImageButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle)
com.badlogic.gdx.ScreenAdapter
com.badlogic.gdx.math.Vector2: boolean isPerpendicular(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.math.Intersector: float distanceSegmentPoint(float,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput: long getCurrentEventTime()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory access$400(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.badlogic.gdx.utils.JsonValue: java.lang.String toJson(com.badlogic.gdx.utils.JsonWriter$OutputType)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollPercentY()
com.badlogic.gdx.math.Vector3: boolean hasOppositeDirection(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mPaused
com.esotericsoftware.kryo.KryoException: java.lang.StringBuffer trace
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_BINDING_2D
com.badlogic.gdx.utils.Json: java.lang.Object[] equals1
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int activeCount
com.badlogic.gdx.utils.ObjectIntMap: void putResize(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: com.badlogic.gdx.graphics.g3d.utils.CameraInputController controller
com.badlogic.gdx.graphics.Pixmap: Pixmap(int,int,com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.GL20: int GL_INFO_LOG_LENGTH
com.badlogic.gdx.math.Quaternion
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle parent
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_RENDER_MODE_MAX
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: java.lang.String toString()
com.badlogic.gdx.utils.LongMap: int mask
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Shape shape
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void calculateBoundingBox()
com.badlogic.gdx.graphics.GL20: void glDeleteShader(int)
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.scenes.scene2d.ui.Value$1: Value$1()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int page
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE22
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: Stage$TouchFocus()
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory asmFieldFactory
androidx.appcompat.widget.ActionBarOverlayLayout: void setOverlayMode(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3
com.badlogic.gdx.physics.box2d.Transform: com.badlogic.gdx.math.Vector2 getPosition()
com.badlogic.gdx.math.Quaternion: boolean isIdentity(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String getDesc()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap getBitmap()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_BUMP
com.google.android.material.textfield.TextInputEditText: java.lang.CharSequence getHintFromLayout()
com.badlogic.gdx.graphics.g3d.Material: Material()
com.esotericsoftware.kryo.factories.PseudoSerializerFactory
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel: void add(int,java.lang.Object[])
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap Repeat
com.badlogic.gdx.Input: void vibrate(long[],int)
com.badlogic.gdx.ApplicationAdapter: void pause()
com.badlogic.gdx.graphics.profiling.GLProfiler: int getTextureBindings()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.math.Vector3 direction
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.FlushablePool: java.lang.Object obtain()
com.badlogic.gdx.graphics.GL20: int GL_GENERATE_MIPMAP_HINT
com.badlogic.gdx.backends.android.AndroidInput: float getAccelerometerX()
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createLineGrid(int,int,float,float,com.badlogic.gdx.graphics.g3d.Material,long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior: BaseTransientBottomBar$Behavior()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilFunc(int,int,int)
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: boolean getCapture()
com.badlogic.gdx.physics.box2d.Body: void setMassData(com.badlogic.gdx.physics.box2d.MassData)
com.badlogic.gdx.maps.tiled.TiledMap: void setOwnedResources(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField: AsmCacheFields$AsmCharField()
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: BufferedParticleBatch(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getPrefHeightValue()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: boolean getResetOnTouchUp()
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas()
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int kNumMoveBits
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: com.badlogic.gdx.utils.Array getControllers()
com.badlogic.gdx.physics.box2d.BodyDef: float angularDamping
com.badlogic.gdx.graphics.GL30: int GL_RG32UI
com.badlogic.gdx.utils.LongArray: long first()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: void setSpan(java.lang.Object,int,int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: int getNumIndices()
androidx.appcompat.widget.SearchView$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight setIntensity(float)
com.esotericsoftware.minlog.Log: void trace(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2: com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy this$0
com.badlogic.gdx.graphics.g3d.environment.SpotLight: SpotLight()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int n
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void invalidateHierarchy()
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver: com.badlogic.gdx.utils.ObjectMap images
com.badlogic.gdx.graphics.Camera: float near
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void setPrefRows(float)
com.badlogic.gdx.backends.android.AndroidInputFactory
com.badlogic.gdx.math.Bezier: Bezier(com.badlogic.gdx.utils.Array,int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: int getNumMaxVertices()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glAttachShader(int,int)
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.XmlReader$Element getChildByNameRecursive(java.lang.String)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 cnt
com.esotericsoftware.jsonbeans.JsonWriter: java.io.Writer getWriter()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform4fv(int,int,float[],int)
com.badlogic.gdx.backends.android.AndroidGraphics: AndroidGraphics(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table center()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: float v2
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: Slider$1(com.badlogic.gdx.scenes.scene2d.ui.Slider)
com.badlogic.gdx.files.FileHandle: java.io.File file
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2: void Init()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUseProgram(int)
com.badlogic.gdx.utils.SharedLibraryLoader: boolean canWrite(java.io.File)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int,int)
com.badlogic.gdx.Input$Keys: int BUTTON_SELECT
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: int logLevel
com.google.android.material.floatingactionbutton.FloatingActionButton: void setExpandedComponentIdHint(int)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOnDisabled
com.badlogic.gdx.utils.compression.lzma.Encoder: int kNumFastBytesDefault
androidx.appcompat.widget.AppCompatImageButton: void setImageDrawable(android.graphics.drawable.Drawable)
com.google.android.material.datepicker.DateValidatorPointForward: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int)
com.esotericsoftware.kryo.ClassResolver: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int compareTo(com.badlogic.gdx.graphics.g3d.Shader)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object findKey(java.lang.Object,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Window$3
com.badlogic.gdx.scenes.scene2d.ui.Tree: Tree(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer
androidx.fragment.app.Fragment: void requestPermissions(java.lang.String[],int)
com.badlogic.gdx.utils.IdentityMap$Entries: void reset()
com.badlogic.gdx.assets.loaders.TextureLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
com.esotericsoftware.jsonbeans.Json: java.lang.String toJson(java.lang.Object,java.lang.Class,java.lang.Class)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,char[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int a(byte[],int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: com.badlogic.gdx.utils.Array regions
androidx.appcompat.widget.Toolbar: int getTitleMarginEnd()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,float,float,float,float,float,float,float,float)
com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken[] values()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitInsn(int)
com.badlogic.gdx.scenes.scene2d.InputListener: InputListener()
com.badlogic.gdx.utils.reflect.Method: boolean isAnnotationPresent(java.lang.Class)
com.badlogic.gdx.graphics.GL20: int GL_LINE_WIDTH
com.badlogic.gdx.utils.IntIntMap$MapIterator: void reset()
com.badlogic.gdx.physics.box2d.MassData: com.badlogic.gdx.math.Vector2 center
com.badlogic.gdx.graphics.GL20: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void translate(float,float)
com.badlogic.gdx.assets.loaders.PixmapLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[],com.badlogic.gdx.utils.Base64Coder$CharMap)
com.badlogic.gdx.scenes.scene2d.ui.Skin: void add(java.lang.String,java.lang.Object)
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: boolean genMipMaps
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitAttribute(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Expect
com.esotericsoftware.kryo.io.Output: int maxCapacity
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer NULL
com.badlogic.gdx.graphics.glutils.FileTextureData: int height
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DASTORE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitTryCatchBlock(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,java.lang.String)
com.badlogic.gdx.utils.Timer$TimerThread: void resume()
com.badlogic.gdx.backends.android.AndroidInput$2
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int getW()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float touchDownX
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(long,int)
com.badlogic.gdx.graphics.g2d.NinePatch: float getTotalWidth()
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType booleanValue
com.badlogic.gdx.utils.SharedLibraryLoader
com.badlogic.gdx.utils.Array$ArrayIterator: com.badlogic.gdx.utils.Array array
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: boolean isDirect
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.math.Polygon: void rotate(float)
com.esotericsoftware.kryo.io.ByteBufferInput: int[] readInts(int)
com.badlogic.gdx.graphics.GL20: int GL_NUM_COMPRESSED_TEXTURE_FORMATS
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniGetLocalAnchorB(long,float[])
com.badlogic.gdx.utils.async.AsyncResult
com.badlogic.gdx.graphics.GL30: void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.GL20: int GL_ONE_MINUS_DST_COLOR
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: FreeTypeFontGenerator$Hinting(java.lang.String,int)
com.esotericsoftware.kryo.io.Input: short readShort()
com.google.android.material.chip.Chip: float getChipCornerRadius()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float y
com.google.android.material.bottomappbar.BottomAppBar$Behavior: BottomAppBar$Behavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.BufferUtils: long getBufferAddress(java.nio.Buffer)
com.badlogic.gdx.utils.compression.CRC: void Update(byte[])
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: float[] vertex
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsTexture(int)
com.badlogic.gdx.math.Vector3: boolean hasSameDirection(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.math.collision.BoundingBox: float min(float,float)
com.badlogic.gdx.utils.compression.lzma.Decoder: boolean Code(java.io.InputStream,java.io.OutputStream,long)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
com.badlogic.gdx.utils.ObjectSet: int hashShift
com.badlogic.gdx.utils.Base64Coder: byte[] decodeLines(java.lang.String,com.badlogic.gdx.utils.Base64Coder$CharMap)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO: void save(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PixmapPacker,com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters)
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: AlphaAction()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: java.lang.Object[] getSpans(int,int,java.lang.Class)
com.badlogic.gdx.math.collision.BoundingBox: float getHeight()
com.badlogic.gdx.utils.ObjectIntMap: int remove(java.lang.Object,int)
com.badlogic.gdx.graphics.GL30: int GL_SIGNALED
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1: int val$objectID
com.badlogic.gdx.graphics.GL30: int GL_UNPACK_IMAGE_HEIGHT
com.esotericsoftware.kryonet.Client: void reconnect(int)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLitContextBitsMax
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer: java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int BIPUSH
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.Actor getDragActor()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean rotateRightPressed
com.badlogic.gdx.math.Vector3: float dot(float,float,float)
com.badlogic.gdx.utils.reflect.Annotation
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setupMatrices()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnob
com.badlogic.gdx.graphics.g3d.Material: int counter
androidx.appcompat.widget.ActionMenuView: int getWindowAnimations()
com.badlogic.gdx.math.FloatCounter: float average
com.badlogic.gdx.graphics.GL30: void glActiveTexture(int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine linkedEngine
com.badlogic.gdx.physics.box2d.Transform: int SIN
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single: ModelInfluencer$Single(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue lifeValue
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.graphics.Color fontColorUnselected
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform worldTrans
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: boolean kerning
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newHandle(int,java.lang.String,java.lang.String,java.lang.String)
com.esotericsoftware.kryo.util.IntArray: void insert(int,int)
com.badlogic.gdx.graphics.GL30: void glBindBuffer(int,int)
com.badlogic.gdx.utils.reflect.Field
com.badlogic.gdx.assets.loaders.SoundLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram customShader
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute
com.badlogic.gdx.utils.ObjectIntMap: int stashCapacity
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String EmissiveAlias
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: com.badlogic.gdx.math.Vector3 pick(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: java.lang.String defaultFragmentShader
com.badlogic.gdx.files.FileHandle: FileHandle(java.io.File)
com.badlogic.gdx.maps.tiled.TiledMapTileSets: com.badlogic.gdx.maps.tiled.TiledMapTileSet getTileSet(int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void onDetach()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int getWidth()
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void cancel()
com.badlogic.gdx.graphics.PixmapIO$PNG: void setFlipY(boolean)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: java.lang.Runnable getRunnable()
com.badlogic.gdx.utils.SortedIntList$NodePool: java.lang.Object newObject()
com.badlogic.gdx.backends.android.AndroidDaydream$1: void dispose()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_5
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_diffuseUVTransform
com.badlogic.gdx.scenes.scene2d.ui.Container: void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float)
com.badlogic.gdx.graphics.GL20: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int lifeDiff
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.Array getExecutedRunnables()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1: com.badlogic.gdx.scenes.scene2d.actions.EventAction this$0
com.badlogic.gdx.physics.box2d.World$1
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader
com.esotericsoftware.kryo.io.UnsafeOutput: void writeDouble(double)
com.badlogic.gdx.assets.AssetDescriptor: com.badlogic.gdx.assets.AssetLoaderParameters params
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.assets.loaders.AssetLoader loader
com.badlogic.gdx.maps.MapLayer: com.badlogic.gdx.maps.MapLayer parent
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: java.lang.String[] shaderUniformNames
com.badlogic.gdx.utils.CharArray: void addAll(char[])
androidx.appcompat.view.menu.ActionMenuItemView: void setChecked(boolean)
com.google.android.material.button.MaterialButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.glutils.FileTextureData: boolean useMipMaps
com.google.android.material.chip.Chip: void setTextStartPadding(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glEnable(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config config
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setPosition(float,float)
com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature[] values()
com.badlogic.gdx.utils.LongMap$MapIterator: void remove()
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType Lambert
com.esotericsoftware.kryonet.ServerDiscoveryHandler$1: boolean onDiscoverHost(com.esotericsoftware.kryonet.UdpConnection,java.net.InetSocketAddress,com.esotericsoftware.kryonet.Serialization)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.badlogic.gdx.utils.Pool packetPool
com.badlogic.gdx.scenes.scene2d.ui.Table: int getRows()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer
com.badlogic.gdx.graphics.GL30: void glUniform1fv(int,int,float[],int)
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void touchDown(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: RepeatablePolygonSprite()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,char)
com.badlogic.gdx.maps.MapLayer: float opacity
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: Box2DDebugRenderer(boolean,boolean,boolean,boolean,boolean,boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.math.GridPoint3: boolean equals(java.lang.Object)
com.HyperSphere.Connection.PacketObjects.Map.MapChange: java.util.ArrayList removeList
com.badlogic.gdx.scenes.scene2d.Actor: void setRotation(float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer: java.util.Map createCopy(com.esotericsoftware.kryo.Kryo,java.util.Map)
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue get(java.lang.String)
com.esotericsoftware.kryonet.Connection: boolean isIdle()
com.badlogic.gdx.graphics.GL30: int GL_R32UI
com.badlogic.gdx.assets.RefCountedContainer: int getRefCount()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: java.lang.Object readExternal(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.jsonbeans.JsonValue: boolean hasChild(java.lang.String)
com.badlogic.gdx.graphics.g3d.decals.Decal: float getScaleX()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int emissionDiff
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.ObjectMap getAll(java.lang.Class)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getSpringDampingRatio()
com.esotericsoftware.kryo.io.ByteBufferInput: void readBytes(byte[],int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int POP
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_TINT
com.badlogic.gdx.Input: void setOnscreenKeyboardVisible(boolean)
com.google.firebase.iid.FirebaseInstanceId: com.google.firebase.iid.FirebaseInstanceId getInstance(com.google.firebase.FirebaseApp)
androidx.appcompat.widget.AppCompatRadioButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField: ObjectField$ObjectLongField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup grow()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setCleansUpBlendFunction(boolean)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.BitmapFont getFont()
com.esotericsoftware.kryo.io.KryoDataInput: com.esotericsoftware.kryo.io.Input input
com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField: void copy(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.kryo.io.Output: void writeInts(int[],boolean)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int biNorOffset
com.badlogic.gdx.graphics.TextureArray: int getNumManagedTextureArrays()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue getSpawnShape()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder part(java.lang.String,int,com.badlogic.gdx.graphics.VertexAttributes,com.badlogic.gdx.graphics.g3d.Material)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int xadvance
com.esotericsoftware.kryonet.KryoSerialization: void writeLength(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode getSpriteMode()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int mStencilSize
com.badlogic.gdx.Preferences: java.lang.String getString(java.lang.String)
com.badlogic.gdx.utils.Base64Coder: java.lang.String encodeLines(byte[])
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Value$10: com.badlogic.gdx.scenes.scene2d.Actor val$actor
com.esotericsoftware.kryo.io.UnsafeMemoryInput: char readChar()
com.badlogic.gdx.utils.StringBuilder: void ensureCapacity(int)
com.badlogic.gdx.utils.PerformanceCounters: float nano2seconds
com.badlogic.gdx.graphics.g2d.GlyphLayout: java.lang.String toString()
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: void setOffsetY(float)
com.esotericsoftware.kryo.Kryo: java.lang.Object newInstance(java.lang.Class)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.glutils.ShaderProgram customShader
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float wrapSpace
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: FrictionJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.graphics.g3d.ModelInstance: void getRenderables(com.badlogic.gdx.graphics.g3d.model.Node,com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LALOAD
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniGetTarget(long,float[])
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean scrollbarsOnTop
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int cpOffset
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Quaternion getRotation()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: ParticleShader$Config(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int g
com.badlogic.gdx.utils.IntIntMap$Entries
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPadX()
com.google.android.material.textfield.TextInputLayout: void setHelperText(java.lang.CharSequence)
com.badlogic.gdx.math.Polyline
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short)
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType[] values()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 lerp(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int height
com.badlogic.gdx.graphics.g3d.utils.AnimationController: boolean paused
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean pan(float,float,float,float)
com.badlogic.gdx.graphics.g3d.ModelBatch: boolean ownsRenderContext()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: java.lang.String getExtension()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
com.badlogic.gdx.utils.BinaryHeap: boolean contains(com.badlogic.gdx.utils.BinaryHeap$Node,boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glFinish()
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: void begin()
com.badlogic.gdx.utils.reflect.Method: java.lang.Class getDeclaringClass()
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.IntArray edges
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowCallback(android.view.Window$Callback)
com.google.android.material.textfield.TextInputLayout: void setPlaceholderText(java.lang.CharSequence)
com.google.android.material.textfield.TextInputLayout: int getErrorTextCurrentColor()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: java.util.concurrent.locks.ReentrantLock lock
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_MAX_LEVEL
androidx.fragment.app.Fragment: java.lang.Object getHost()
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction: RemoveAction()
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2: void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.reflect.Field: com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Listener dispatchListener
com.badlogic.gdx.utils.JsonReader: int json_start
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.Renderable allocRenderable()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.utils.FloatArray verts
com.esotericsoftware.kryonet.UdpConnection: int keepAliveMillis
com.badlogic.gdx.utils.SharedLibraryLoader: boolean is64Bit
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter B
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.InputListener getDefaultInputListener()
com.badlogic.gdx.graphics.GL20: void glBindAttribLocation(int,int,java.lang.String)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniGetLocalAnchorB(long,float[])
com.badlogic.gdx.physics.box2d.joints.RopeJointDef
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setImeVisibility(boolean)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setRotationZ(float)
com.esotericsoftware.minlog.Log: void warn(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.Screen: void resume()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.CubemapData: void prepare()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.utils.JsonWriter: JsonWriter(java.io.Writer)
androidx.fragment.app.Fragment: java.lang.CharSequence getText(int)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidAudio audio
com.badlogic.gdx.math.GeometryUtils: float triangleArea(float,float,float,float,float,float)
com.badlogic.gdx.graphics.GL20: int GL_INT_VEC4
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.Stack: void computeSize()
com.esotericsoftware.kryo.util.IntArray: void truncate(int)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getIconTint()
androidx.fragment.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: void buildNormals(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.g3d.Renderable,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.util.ObjectMap: int capacity
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.backends.android.AndroidApplicationBase app
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_actions_0()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getHeight()
com.badlogic.gdx.graphics.PixmapIO: void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color cpy()
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: void run()
com.badlogic.gdx.Input$Keys: int DPAD_LEFT
com.esotericsoftware.reflectasm.AccessClassLoader: void remove(java.lang.ClassLoader)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean additive
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: com.badlogic.gdx.scenes.scene2d.Actor validDragActor
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: HexagonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: float prefWidth
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector setToRandomDirection()
androidx.fragment.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)
com.badlogic.gdx.Graphics$BufferFormat: int g
com.badlogic.gdx.physics.box2d.Body: float jniGetInertia(long)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer: DefaultSerializers$EnumSerializer(java.lang.Class)
com.badlogic.gdx.math.Polygon: void setVertices(float[])
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: int srcBlendFactor
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_SAMPLER_CUBE
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter
com.badlogic.gdx.utils.BinaryHeap
com.badlogic.gdx.physics.box2d.JointDef: com.badlogic.gdx.physics.box2d.JointDef$JointType type
com.badlogic.gdx.scenes.scene2d.ui.Window$1
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color premultiplyAlpha()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields: UnsafeCacheFields()
com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.math.Affine2: float m01
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Fog
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsVertexArray(int)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.utils.Array getAssets()
com.badlogic.gdx.math.Interpolation$BounceIn: Interpolation$BounceIn(int)
com.badlogic.gdx.utils.GdxRuntimeException: GdxRuntimeException(java.lang.Throwable)
com.badlogic.gdx.math.EarClippingTriangulator: int CONVEX
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: boolean touched
com.badlogic.gdx.utils.XmlReader$Element: XmlReader$Element(java.lang.String,com.badlogic.gdx.utils.XmlReader$Element)
com.esotericsoftware.kryonet.KryoNetException: KryoNetException(java.lang.String,java.lang.Throwable)
com.esotericsoftware.kryo.util.IntMap: int findKey(java.lang.Object,boolean,int)
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
com.badlogic.gdx.scenes.scene2d.ui.List: void layout()
androidx.core.widget.NestedScrollView: void setNestedScrollingEnabled(boolean)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: void remove()
com.badlogic.gdx.math.CumulativeDistribution: void setInterval(java.lang.Object,float)
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback
com.badlogic.gdx.net.NetJavaImpl$2: com.badlogic.gdx.net.NetJavaImpl this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setY(float)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void remove(com.badlogic.gdx.scenes.scene2d.ui.Button)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void clearSelection()
com.badlogic.gdx.utils.Disposable
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: BaseTmxMapLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g3d.Attributes: void sort()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float padLeft
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: CameraInputController$CameraGestureListener()
com.badlogic.gdx.utils.async.AsyncExecutor$2: com.badlogic.gdx.utils.async.AsyncTask val$task
com.badlogic.gdx.graphics.GL30: int GL_STENCIL
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenTransformFeedbacks(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.MapSerializer: boolean keysCanBeNull
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setMultiple(boolean)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.graphics.g3d.Attributes combinedAttributes
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: boolean isVertical()
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: com.badlogic.gdx.utils.Array glyphs
com.badlogic.gdx.graphics.GL30: int GL_ANY_SAMPLES_PASSED_CONSERVATIVE
com.badlogic.gdx.Input$Keys: int R
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.math.Vector2 temp
com.badlogic.gdx.backends.android.AndroidInput$3: void run()
com.badlogic.gdx.scenes.scene2d.ui.Stack: Stack()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getMaxValue()
com.badlogic.gdx.utils.IntFloatMap: boolean equals(java.lang.Object)
com.badlogic.gdx.utils.ArrayMap: void putAll(com.badlogic.gdx.utils.ArrayMap,int,int)
com.badlogic.gdx.backends.android.AndroidMusic: AndroidMusic(com.badlogic.gdx.backends.android.AndroidAudio,android.media.MediaPlayer)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean forceScrollX
com.badlogic.gdx.utils.ArrayMap: java.lang.Object getKeyAt(int)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int bind(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.graphics.profiling.GLErrorListener$2
com.badlogic.gdx.utils.LongMap: int hash3(long)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void translate(float,float,float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.Mesh end()
com.esotericsoftware.kryonet.Client: Client()
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle getStyle()
com.badlogic.gdx.assets.AssetManager: AssetManager(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.utils.ObjectMap$Keys: com.badlogic.gdx.utils.ObjectMap$Keys iterator()
com.badlogic.gdx.utils.XmlReader: byte[] _xml_actions
com.esotericsoftware.jsonbeans.JsonWriter: JsonWriter(java.io.Writer)
com.badlogic.gdx.utils.compression.lzma.Encoder: void FillDistancesPrices()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Audio getAudio()
com.esotericsoftware.kryonet.EndPoint: void stop()
com.badlogic.gdx.utils.Json$FieldMetadata: java.lang.Class elementType
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g2d.NinePatch: float getTopHeight()
com.badlogic.gdx.math.Vector3: boolean epsilonEquals(float,float,float,float)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2: Kryo$DefaultInstantiatorStrategy$2(com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy,java.lang.reflect.Constructor,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Vector3 TMP_V4
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel: void swap(int,int)
com.esotericsoftware.kryo.io.UnsafeOutput: boolean isLittleEndian
com.badlogic.gdx.math.GridPoint3: float dst2(int,int,int)
com.badlogic.gdx.utils.JsonValue: java.lang.String name
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LADD
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: void update(float)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: ShapeRenderer$ShapeType(java.lang.String,int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGenTexture()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single: ModelInfluencer$Single()
androidx.fragment.app.Fragment: Fragment(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.graphics.g2d.BitmapFont font
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.ObjectMap nodePartBones
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.utils.OrderedSet: void clear(int)
com.google.android.material.chip.Chip: float getIconEndPadding()
com.badlogic.gdx.physics.box2d.Body: void reset(long)
com.esotericsoftware.reflectasm.MethodAccess: com.esotericsoftware.reflectasm.MethodAccess get(java.lang.Class)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.ObjectSet getTextures()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniformMatrix4fv(int,int,boolean,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean getWrap()
com.badlogic.gdx.math.GridPoint2: int x
com.badlogic.gdx.graphics.g3d.decals.Decal: float getX()
com.badlogic.gdx.graphics.g2d.NinePatch: void setPadLeft(float)
com.badlogic.gdx.scenes.scene2d.ui.Skin: java.lang.Class[] defaultTagClasses
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: boolean isDragging()
com.badlogic.gdx.maps.tiled.TiledMapTileSet: com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent
com.badlogic.gdx.Input: void getRotationMatrix(float[])
com.badlogic.gdx.math.MathUtils: int SIN_BITS
com.badlogic.gdx.assets.loaders.MusicLoader: MusicLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart getMeshPart()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STYLE_FLAG_BOLD
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int z
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.ApplicationListener getApplicationListener()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: java.lang.String lastText
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: GLFrameBuffer$FrameBufferTextureAttachmentSpec(int,int,int)
com.badlogic.gdx.utils.ObjectSet: int hash3(int)
com.badlogic.gdx.scenes.scene2d.ui.Widget: float getMaxWidth()
com.badlogic.gdx.Input$Keys: int LEFT
com.badlogic.gdx.utils.LongMap: LongMap(int)
com.badlogic.gdx.utils.I18NBundle: java.util.List getCandidateLocales(java.util.Locale)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_specularTexture
com.esotericsoftware.jsonbeans.OutputType$1
com.badlogic.gdx.maps.MapObjects: MapObjects()
com.badlogic.gdx.utils.ObjectMap$Entry: java.lang.Object key
androidx.lifecycle.FullLifecycleObserverAdapter
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer get()
com.badlogic.gdx.graphics.GL30: void glPauseTransformFeedback()
com.badlogic.gdx.backends.android.AndroidGL30: void glGenQueries(int,int[],int)
com.badlogic.gdx.graphics.PixmapIO$PNG: byte[] SIGNATURE
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: com.badlogic.gdx.graphics.Texture getTexture()
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checked
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(int)
com.esotericsoftware.jsonbeans.ObjectMap: com.esotericsoftware.jsonbeans.ObjectMap$Entries entries()
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType FaceA
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.SnapshotArray lifecycleListeners
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue remove(int)
com.badlogic.gdx.math.BSpline: int nearest(com.badlogic.gdx.math.Vector,int,int)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.utils.DelayedRemovalArray captureListeners
com.badlogic.gdx.scenes.scene2d.ui.Table: Table(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.utils.ShortArray: java.lang.String toString()
com.esotericsoftware.kryonet.Listener$QueuedListener: void disconnected(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.ApplicationAdapter: void resume()
com.badlogic.gdx.Input$Keys: int NUM_6
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: ParticleEmitter$SpawnShapeValue()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: int DEFAULT_SIZE
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getMouseWheelX()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: boolean hasStencilRenderBuffer
com.badlogic.gdx.utils.Scaling$1: int[] $SwitchMap$com$badlogic$gdx$utils$Scaling
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: boolean act(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label P
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool: ModelBatch$RenderablePool()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath
com.google.android.material.textfield.TextInputLayout: int getEndIconMode()
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.math.Vector3 direction
com.google.android.material.internal.NavigationMenuItemView: void setIconTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide top
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int stashSize
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void setUVRange(float,float,float,float)
com.esotericsoftware.kryo.serializers.MapSerializer: java.lang.Class keyGenericType
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix4fv(java.lang.String,float[],int,int)
com.badlogic.gdx.graphics.Color: float toFloatBits(float,float,float,float)
com.esotericsoftware.kryo.io.FastInput: FastInput(byte[])
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.math.Vector2 gravity
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: com.badlogic.gdx.graphics.Color titleFontColor
androidx.fragment.app.Fragment: void postponeEnterTransition()
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: com.esotericsoftware.kryo.Serializer serializer
com.badlogic.gdx.physics.box2d.JointEdge: com.badlogic.gdx.physics.box2d.Joint joint
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table debugAll()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraPosition
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 nor()
androidx.appcompat.widget.ActionBarContainer
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.utils.IntFloatMap: boolean containsValue(float,float)
com.google.firebase.messaging.FirebaseMessagingRegistrar: com.google.firebase.messaging.FirebaseMessaging lambda$getComponents$0$FirebaseMessagingRegistrar(com.google.firebase.components.ComponentContainer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void d(int)
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver
com.badlogic.gdx.utils.ObjectFloatMap: void put(java.lang.Object,float)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 add(float,float,float)
com.esotericsoftware.kryonet.Client: int connectTcpPort
com.google.android.material.textfield.TextInputLayout: void setStartIconOnClickListener(android.view.View$OnClickListener)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag valueOf(java.lang.String)
com.badlogic.gdx.utils.IntArray: java.lang.String toString()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer
com.badlogic.gdx.Preferences: long getLong(java.lang.String)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: boolean checkEqual(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] $VALUES
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17: DefaultShader$Setters$17()
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.math.Rectangle getCullingArea()
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: void setDegreesPerPixel(float)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createSpecular(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color MAROON
com.esotericsoftware.kryonet.JsonSerialization: boolean prettyPrint
com.badlogic.gdx.scenes.scene2d.ui.Label: void setEllipsis(java.lang.String)
com.esotericsoftware.kryo.util.DefaultStreamFactory: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.g2d.ParticleEffect: float motionScale
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: com.badlogic.gdx.maps.tiled.TiledMapTile getTile()
com.badlogic.gdx.utils.CharArray: void add(char)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Window: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.OrderedMap getFields(java.lang.Class)
com.esotericsoftware.kryonet.rmi.RemoteObject: void close()
com.badlogic.gdx.graphics.Cursor$SystemCursor
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: com.badlogic.gdx.graphics.g3d.Attributes tmpAttributes
androidx.appcompat.widget.Toolbar: void setCollapsible(boolean)
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: float getValue()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(java.lang.Object)
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: short lastIndex()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(int,int)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder delete(int,int)
com.badlogic.gdx.graphics.GL20: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getUniformSize(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glViewport(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Input getInput()
com.badlogic.gdx.graphics.TextureData: void prepare()
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Values values1
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.graphics.g2d.Batch batch
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int getPressedPointer()
com.badlogic.gdx.Graphics$Monitor: int virtualX
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String POSITION_ATTRIBUTE
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int id
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int format
com.badlogic.gdx.math.Polygon: com.badlogic.gdx.math.Rectangle bounds
com.esotericsoftware.reflectasm.AccessClassLoader
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: float getY()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_INDEX
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: java.lang.Class valueClass
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeInt(int,boolean)
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isWindows
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: com.badlogic.gdx.backends.android.AndroidLiveWallpaper app
com.badlogic.gdx.graphics.g3d.particles.ParticleController: ParticleController(java.lang.String,com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter,com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer,com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer[])
com.badlogic.gdx.math.Bezier: Bezier()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder
com.esotericsoftware.kryo.util.IntMap: float loadFactor
androidx.appcompat.widget.LinearLayoutCompat: int getOrientation()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getPixel(int,int)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData: ResourceData$AssetData()
com.badlogic.gdx.Input$Keys: int BUTTON_L1
com.badlogic.gdx.graphics.GL30: int GL_MAX_FRAGMENT_INPUT_COMPONENTS
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryonet.TcpConnection: java.nio.channels.SelectionKey selectionKey
com.esotericsoftware.kryo.io.UnsafeOutput: void supportVarInts(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glValidateProgram(int)
com.badlogic.gdx.scenes.scene2d.Stage: boolean scrolled(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.io.Input: void rewind()
com.esotericsoftware.kryo.io.ByteBufferOutputStream
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: java.lang.Object next()
com.badlogic.gdx.scenes.scene2d.Stage: int mouseScreenX
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer: IsometricStaggeredTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer UNINITIALIZED_THIS
com.badlogic.gdx.scenes.scene2d.ui.Container: float fillX
com.badlogic.gdx.scenes.scene2d.Stage: int[] pointerScreenY
com.google.android.material.internal.FlowLayout: FlowLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: long attributesMask
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput(java.io.InputStream,int)
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector limit(float)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: FrameBufferCubemap(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean,boolean)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumPosStatesEncodingMax
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform screenWidth
com.badlogic.gdx.maps.MapLayer: float getOffsetY()
com.badlogic.gdx.utils.IntMap$MapIterator: int nextIndex
com.esotericsoftware.kryo.KryoCopyable: java.lang.Object copy(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single: ModelInfluencer$Single(com.badlogic.gdx.graphics.g3d.Model[])
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float lineHeight
androidx.cardview.widget.CardView: void setCardElevation(float)
com.badlogic.gdx.backends.android.AndroidInput: float getAccelerometerY()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int blendDstFunc
com.google.android.material.bottomappbar.BottomAppBar: float getFabCradleRoundedCornerRadius()
com.badlogic.gdx.scenes.scene2d.ui.Cell: boolean getUniformX()
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Keys keys2
com.badlogic.gdx.graphics.glutils.KTXTextureData: int GL_TEXTURE_2D_ARRAY_EXT
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String SetCookie
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: InputEvent$Type(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container center()
com.badlogic.gdx.utils.BufferUtils: com.badlogic.gdx.utils.Array unsafeBuffers
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: com.badlogic.gdx.utils.IntArray assets
com.esotericsoftware.kryo.io.ByteBufferInput: int readUtf8Length(int)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object removeKey(java.lang.Object)
com.badlogic.gdx.utils.Base64Coder$CharMap: char[] encodingMap
com.badlogic.gdx.graphics.TextureArray: void invalidateAllTextureArrays(com.badlogic.gdx.Application)
com.google.android.material.textfield.TextInputLayout: void setEndIconContentDescription(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int M
com.badlogic.gdx.Input$Keys: int DPAD_CENTER
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.utils.Array imagePaths
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int GL_DEPTH24_STENCIL8_OES
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell expand(boolean,boolean)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
com.badlogic.gdx.graphics.glutils.IndexBufferObject: int bufferHandle
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.List: float getPrefHeight()
com.google.firebase.messaging.FirebaseMessagingService
com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion)
com.esotericsoftware.kryo.io.UnsafeInput: int readInt()
com.badlogic.gdx.net.NetJavaServerSocketImpl: com.badlogic.gdx.net.Socket accept(com.badlogic.gdx.net.SocketHints)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 tra()
com.badlogic.gdx.graphics.PixmapIO$PNG: com.badlogic.gdx.utils.ByteArray prevLineBytes
com.esotericsoftware.kryo.io.ByteBufferInput: int readInt(boolean)
com.esotericsoftware.kryonet.Server: java.nio.channels.ServerSocketChannel serverChannel
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidInput$4: boolean val$visible
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int istart
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle
com.esotericsoftware.kryonet.Client: java.lang.Object udpRegistrationLock
com.badlogic.gdx.graphics.g3d.model.Node: int addChild(com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.maps.MapLayers: com.badlogic.gdx.maps.MapLayer get(java.lang.String)
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction: boolean isEnabled()
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: FloatAttribute(long,float)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.scenes.scene2d.Actor: void toBack()
androidx.fragment.app.Fragment: void onAttach(android.content.Context)
com.badlogic.gdx.math.WindowedMean: void clear()
com.badlogic.gdx.utils.BufferUtils: void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction
com.badlogic.gdx.utils.ArrayMap: ArrayMap()
com.badlogic.gdx.utils.SharedLibraryLoader: java.lang.String nativesJar
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.utils.FloatArray vertices
com.badlogic.gdx.scenes.scene2d.ui.Button
com.esotericsoftware.kryo.io.Output: int writeVarInt(int,boolean)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean getMultiple()
com.badlogic.gdx.graphics.GL20: int GL_FRONT
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: boolean delegate(float)
com.badlogic.gdx.input.GestureDetector$1: GestureDetector$1(com.badlogic.gdx.input.GestureDetector)
androidx.cardview.widget.CardView: void setMinimumWidth(int)
com.badlogic.gdx.net.HttpRequestHeader
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F_APPEND
com.badlogic.gdx.physics.box2d.Contact: boolean jniIsEnabled(long)
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: float[] vertices
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue)
com.badlogic.gdx.graphics.GL20: int GL_TRIANGLE_STRIP
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction: void begin()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter normalMatrix
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter getTextFieldFilter()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_UNICODE
com.badlogic.gdx.graphics.Mesh$1: int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Entries entries1
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(int,float,float)
com.google.android.material.internal.ForegroundLinearLayout: ForegroundLinearLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.backends.android.AndroidApplication: int getVersion()
com.badlogic.gdx.utils.viewport.ExtendViewport: float minWorldHeight
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh: ModelMesh()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel)
com.badlogic.gdx.scenes.scene2d.ui.Window: void drawStageBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle getZipFileHandleIfExists(com.badlogic.gdx.files.FileHandle,java.lang.String)
com.badlogic.gdx.physics.box2d.CircleShape: void jniGetPosition(long,float[])
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.backends.android.AndroidMouseHandler: int deltaY
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.graphics.g2d.Batch getBatch()
androidx.appcompat.widget.SearchView: void setOnQueryTextListener(androidx.appcompat.widget.SearchView$OnQueryTextListener)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: short G
com.HyperSphere.Connection.PacketObjects.Misc.QuestPage: java.lang.String text
com.esotericsoftware.kryo.Registration: com.esotericsoftware.kryo.Serializer serializer
com.esotericsoftware.jsonbeans.JsonValue: JsonValue(boolean)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glEnableVertexAttribArray(int)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder,int,int)
com.badlogic.gdx.graphics.glutils.IndexData: void invalidate()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.badlogic.gdx.utils.async.AsyncTask: java.lang.Object call()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathStart(float)
com.badlogic.gdx.math.Interpolation$Exp: float value
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_normalTexture
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getLinearVelocityFromLocalPoint(com.badlogic.gdx.math.Vector2)
com.google.android.material.appbar.MaterialToolbar: void setElevation(float)
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: WheelJointDef()
com.badlogic.gdx.backends.android.AndroidInput: int SUPPORTED_KEYS
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void init()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glStencilFuncSeparate(int,int,int,int)
com.esotericsoftware.jsonbeans.JsonValue: JsonValue(double)
com.badlogic.gdx.graphics.GLTexture: void uploadImageData(int,com.badlogic.gdx.graphics.TextureData)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawElements(int,int,int,java.nio.Buffer)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCachedField: AsmCacheFields$AsmCachedField()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: RegionInfluencer(com.badlogic.gdx.graphics.g2d.TextureRegion[])
com.badlogic.gdx.input.RemoteInput: int getRotation()
com.google.android.material.card.MaterialCardView: float getCardViewRadius()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: ParticleEmitter$SpawnEllipseSide(java.lang.String,int)
androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.utils.Array textures
com.badlogic.gdx.assets.loaders.MusicLoader: com.badlogic.gdx.audio.Music getLoadedMusic()
com.badlogic.gdx.math.MathUtils$Sin
com.badlogic.gdx.input.RemoteInput: float remoteHeight
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config: float defaultAlphaTest
com.esotericsoftware.kryo.Serializer: Serializer()
com.badlogic.gdx.assets.loaders.TextureLoader: TextureLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: void allocateChannels()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureCapacity(int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform2iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.model.Node: void attachTo(com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: void allocateChannels()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single
com.badlogic.gdx.physics.box2d.World: void jniSetAutoClearForces(long,boolean)
com.badlogic.gdx.files.FileHandle: java.io.OutputStream write(boolean,int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard: void show(boolean)
com.badlogic.gdx.graphics.glutils.KTXTextureData: java.nio.ByteBuffer compressedData
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle style
com.badlogic.gdx.utils.ObjectFloatMap: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getActorWidth()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: FreeType()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item h
com.badlogic.gdx.math.MathUtils: float sinDeg(float)
com.badlogic.gdx.graphics.PixmapIO$PNG: byte INTERLACE_NONE
com.badlogic.gdx.graphics.PixmapIO$PNG: java.util.zip.Deflater deflater
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.backends.android.AndroidWallpaperListener
com.badlogic.gdx.utils.ObjectSet: int stashCapacity
com.badlogic.gdx.backends.android.AndroidInput$3$1
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float velocityX
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Diffuse
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: com.badlogic.gdx.graphics.Color color
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1: com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod val$invokeMethod
com.google.android.material.chip.Chip: void setLayoutDirection(int)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queued
com.badlogic.gdx.utils.JsonValue: double getDouble(java.lang.String,double)
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getAttributeSize(java.lang.String)
androidx.recyclerview.widget.RecyclerView: void setEdgeEffectFactory(androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void draw()
androidx.appcompat.widget.FitWindowsFrameLayout: FitWindowsFrameLayout(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAlignedChildIndex(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDepthRangef(float,float)
com.badlogic.gdx.utils.QuickSelect: void swap(int,int)
com.HyperSphere.Connection.PacketObjects.Entities.Monster: Monster()
com.badlogic.gdx.graphics.g3d.ModelCache: void add(com.badlogic.gdx.graphics.g3d.RenderableProvider)
com.badlogic.gdx.backends.android.AndroidGL20: void glEnable(int)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: com.badlogic.gdx.math.Vector2 groundAnchorA
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: ImageButton(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.graphics.glutils.VertexArray: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.math.Vector3 tmpNormal
com.badlogic.gdx.input.RemoteSender: int COMPASS
com.badlogic.gdx.utils.LongArray: java.lang.String toString()
com.badlogic.gdx.utils.Array$ArrayIterable: Array$ArrayIterable(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: float velocity
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void box(com.badlogic.gdx.math.Matrix4)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: java.util.Collection createCopy(com.esotericsoftware.kryo.Kryo,java.util.Collection)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value padTop
com.badlogic.gdx.graphics.g3d.ModelCache: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.Texture$TextureFilter: boolean isMipMap()
androidx.core.widget.NestedScrollView: int getMaxScrollAmount()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1: void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 scale(float,float)
com.badlogic.gdx.utils.Queue: Queue()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setPasswordCharacter(char)
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(com.badlogic.gdx.graphics.g3d.RenderableProvider,com.badlogic.gdx.graphics.g3d.Shader)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1: void run()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void updateChildren()
com.badlogic.gdx.input.GestureDetector$GestureListener
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: java.lang.Object[] args
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_MidCoder
com.badlogic.gdx.graphics.glutils.ShaderProgram: void enableVertexAttribute(java.lang.String)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int mEGLContextClientVersion
com.badlogic.gdx.math.FloatCounter: int count
com.badlogic.gdx.utils.Timer$Task: long intervalMillis
com.google.android.material.chip.ChipGroup: void setChipSpacingHorizontal(int)
com.badlogic.gdx.graphics.Mesh: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: boolean useGPU
com.badlogic.gdx.graphics.GL20: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.badlogic.gdx.utils.Select: com.badlogic.gdx.utils.Select instance()
com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks
com.badlogic.gdx.utils.BooleanArray: void add(boolean,boolean,boolean)
com.badlogic.gdx.net.HttpStatus: int SC_OK
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: java.nio.ShortBuffer buffer
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide OnPlane
androidx.fragment.app.Fragment: int mContainerId
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void render(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.Preferences: float getFloat(java.lang.String,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFinish()
com.esotericsoftware.kryo.serializers.BlowfishSerializer: javax.crypto.spec.SecretKeySpec keySpec
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getVelocity()
com.badlogic.gdx.utils.IntSet: void addAll(int[])
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniGetLocalAnchorB(long,float[])
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,int,int)
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String asString()
com.badlogic.gdx.math.Matrix4: int M21
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: float tolerance
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.graphics.Color disabledFontColor
com.badlogic.gdx.graphics.GL20: int GL_LINEAR_MIPMAP_LINEAR
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(com.badlogic.gdx.graphics.g3d.RenderableProvider,com.badlogic.gdx.graphics.g3d.Environment,com.badlogic.gdx.graphics.g3d.Shader)
com.badlogic.gdx.files.FileHandle: void copyFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.IntFloatMap: void put(int,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F2L
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.math.Vector3 normal
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
com.esotericsoftware.kryo.Kryo: int getDepth()
com.google.android.material.textview.MaterialTextView: MaterialTextView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.ObjectIntMap$Values: void reset()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glPolygonOffset(float,float)
com.google.android.material.floatingactionbutton.FloatingActionButton: int getExpandedComponentIdHint()
com.badlogic.gdx.utils.Array: boolean removeValue(java.lang.Object,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_RENDER_MODE_LCD_V
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F_SAME1
com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField: ObjectField$ObjectCharField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable: java.lang.String name
com.badlogic.gdx.graphics.profiling.GLErrorListener: com.badlogic.gdx.graphics.profiling.GLErrorListener LOGGING_LISTENER
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: float getValue()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target: DragAndDrop$Target(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LAND
com.badlogic.gdx.graphics.GL30: int GL_DEPTH_COMPONENT24
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.Input$Keys: int P
com.badlogic.gdx.Graphics: int getHeight()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,float,float,int,float,float,float,float,float,float)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder includeCredentials(boolean)
com.badlogic.gdx.math.Vector: boolean hasSameDirection(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: ParticleControllerInfluencer(com.badlogic.gdx.graphics.g3d.particles.ParticleController[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float[] tint
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Entries entries2
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: boolean defaultFramebufferHandleInitialized
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGenTexture()
androidx.appcompat.widget.AppCompatRadioButton: android.content.res.ColorStateList getSupportButtonTintList()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void setMap(com.badlogic.gdx.maps.tiled.TiledMap)
com.esotericsoftware.jsonbeans.OutputType
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int toInt(int)
com.google.android.material.textfield.TextInputLayout: TextInputLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator
com.esotericsoftware.kryo.io.ByteBufferInput: void setVarIntsEnabled(boolean)
com.esotericsoftware.kryonet.FrameworkMessage$RegisterUDP: int connectionID
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: float correctionFactor
com.badlogic.gdx.utils.IntIntMap: int hash2(int)
com.badlogic.gdx.utils.BufferUtils: int bytesToElements(java.nio.Buffer,int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setUseIntegerPositions(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL30: void glVertexAttrib1f(int,float)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: com.badlogic.gdx.graphics.g3d.Material mat
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 Z
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPrefWidth()
com.badlogic.gdx.graphics.GL30: int GL_NUM_SAMPLE_COUNTS
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: java.lang.reflect.Method method
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadLayerGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver)
com.badlogic.gdx.utils.JsonReader: byte[] init__json_range_lengths_0()
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.esotericsoftware.kryo.util.Util: boolean isWrapperClass(java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26: DefaultShader$Setters$26()
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.JsonWriter writer
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: SpawnInfluencer()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.Batch
com.badlogic.gdx.scenes.scene2d.ui.Tree$1: com.badlogic.gdx.scenes.scene2d.ui.Tree this$0
com.badlogic.gdx.graphics.g3d.decals.Decal: void setPackedColor(float)
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean _longestMatchWasFound
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: com.badlogic.gdx.scenes.scene2d.Actor previousScrollFocus
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: void reset()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: float getDuration()
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: boolean enableLimit
com.badlogic.gdx.utils.ObjectMap$Entry: java.lang.Object value
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: int mRenderMode
com.badlogic.gdx.graphics.GL30: int GL_SEPARATE_ATTRIBS
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter)
com.badlogic.gdx.utils.IntIntMap: int[] keyTable
com.badlogic.gdx.scenes.scene2d.InputListener: boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)
com.badlogic.gdx.InputAdapter: boolean touchDown(int,int,int,int)
com.badlogic.gdx.graphics.GL20: int GL_ARRAY_BUFFER_BINDING
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1: void run()
com.badlogic.gdx.graphics.glutils.MipMapTextureData: com.badlogic.gdx.graphics.TextureData[] mips
com.badlogic.gdx.assets.AssetManager: void clear()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform2fv(java.lang.String,float[],int,int)
com.badlogic.gdx.utils.JsonValue: java.lang.String[] asStringArray()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: int NUM_VERTICES
com.badlogic.gdx.utils.TimeUtils: TimeUtils()
com.esotericsoftware.kryo.serializers.ObjectField: java.lang.Object getField(java.lang.Object)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.VertexAttributes: com.badlogic.gdx.graphics.VertexAttribute[] attributes
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp6
com.badlogic.gdx.math.Quaternion: float getRollRad()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: void init()
com.badlogic.gdx.physics.box2d.Joint: Joint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.utils.IntIntMap$Entry: int value
com.badlogic.gdx.graphics.GL30: void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setProgrammaticChangeEvents(boolean)
androidx.fragment.app.Fragment: void onAttachFragment(androidx.fragment.app.Fragment)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: ProgressBar(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.Selection: void cleanup()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: ModelInfluencer(com.badlogic.gdx.graphics.g3d.Model[])
com.badlogic.gdx.InputMultiplexer: boolean touchDragged(int,int,int)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeString(java.lang.String)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String COLOR_ATTRIBUTE
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer timeZoneSerializer
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: java.lang.String name
com.badlogic.gdx.physics.box2d.World: void jniStep(long,float,int,int)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 f
com.esotericsoftware.kryonet.Server: void bind(java.net.InetSocketAddress,java.net.InetSocketAddress)
com.badlogic.gdx.scenes.scene2d.ui.List: float itemHeight
com.badlogic.gdx.physics.box2d.EdgeShape: void setVertex0(float,float)
com.badlogic.gdx.utils.OrderedMap: com.badlogic.gdx.utils.Array orderedKeys()
com.badlogic.gdx.math.Plane: Plane(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: com.badlogic.gdx.math.Vector3 spawn(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.BitmapFont font
com.esotericsoftware.kryo.StreamFactory
com.badlogic.gdx.scenes.scene2d.ui.Cell: void setTable(com.badlogic.gdx.scenes.scene2d.ui.Table)
com.badlogic.gdx.utils.UBJsonReader: long readUInt(java.io.DataInputStream)
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.math.Matrix4[] bones
com.badlogic.gdx.math.Vector3: Vector3()
com.esotericsoftware.kryonet.Connection: java.net.InetSocketAddress getRemoteAddressTCP()
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.utils.LongMap: void clear()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
com.esotericsoftware.kryonet.ServerDiscoveryHandler: com.esotericsoftware.kryonet.ServerDiscoveryHandler DEFAULT
com.badlogic.gdx.scenes.scene2d.ui.Image: java.lang.String toString()
com.esotericsoftware.kryo.Kryo: void setRegistrationRequired(boolean)
com.google.android.material.chip.ChipGroup: void setChipSpacingHorizontalResource(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.math.GridPoint3: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int bindTexture(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor,boolean)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeInts(int[])
com.google.android.material.chip.Chip: void setCheckedIconEnabledResource(int)
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: FreetypeFontLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Vector2 getSize(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType stringValue
com.esotericsoftware.kryo.io.ByteBufferInput: long readLong(boolean)
androidx.appcompat.widget.AppCompatCheckedTextView: void setCheckMarkDrawable(int)
androidx.appcompat.widget.ViewStubCompat
com.HyperSphere.Connection.PacketObjects.Misc.DropBox
com.badlogic.gdx.graphics.glutils.FloatTextureData: boolean isPrepared()
com.badlogic.gdx.graphics.g2d.ParticleEffectPool: void free(com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect)
com.esotericsoftware.jsonbeans.ObjectMap$Entry: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: float tickSecs
com.badlogic.gdx.utils.OrderedSet: com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator1
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: int getTop()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float blankLineScale
com.badlogic.gdx.scenes.scene2d.ui.Skin$5: com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.utils.RenderContext getRenderContext()
com.esotericsoftware.kryo.io.Input: boolean canReadInt()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int CALOAD
com.badlogic.gdx.utils.compression.lzma.Encoder: int _dictionarySizePrev
com.badlogic.gdx.graphics.GL20: int GL_FLOAT_VEC2
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_PASS_DEPTH_PASS
com.badlogic.gdx.graphics.g2d.ParticleEffect: void scaleEffect(float)
com.badlogic.gdx.utils.LongMap: int PRIME2
com.esotericsoftware.jsonbeans.ObjectMap: void resize(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsSampler(int)
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void setBottomHeight(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer: void activateParticles(int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int depthbufferHandle
androidx.fragment.app.Fragment: void performSaveInstanceState(android.os.Bundle)
com.badlogic.gdx.physics.box2d.World: void destroyFixture(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Fixture)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$1
com.esotericsoftware.minlog.Log: void NONE()
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor valueOf(java.lang.String)
com.badlogic.gdx.utils.ShortArray: short[] setSize(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: boolean isVertexTransformationEnabled()
com.badlogic.gdx.utils.SerializationException: com.badlogic.gdx.utils.StringBuilder trace
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINEJOIN_ROUND
com.badlogic.gdx.utils.compression.lzma.Base
com.badlogic.gdx.math.MathUtils: float lerp(float,float,float)
com.esotericsoftware.kryo.io.ByteBufferInputStream: int read()
com.badlogic.gdx.utils.TimSort: void mergeCollapse()
androidx.appcompat.widget.AppCompatTextView: void setAutoSizeTextTypeWithDefaults(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer: java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue
com.badlogic.gdx.backends.android.AndroidInput: float[] gyroscopeValues
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromAxis(float,float,float,float)
com.badlogic.gdx.utils.compression.lzma.Encoder: int _numLiteralContextBits
com.badlogic.gdx.utils.CharArray: void add(char,char)
com.badlogic.gdx.scenes.scene2d.ui.TextButton
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.physics.box2d.Manifold: void jniGetLocalPoint(long,float[])
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.math.Vector2 tmp
com.badlogic.gdx.assets.AssetManager: boolean contains(java.lang.String,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.Actor: int getZIndex()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setImageDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.assets.AssetManager: void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor)
com.badlogic.gdx.physics.box2d.ChainShape: void createLoop(com.badlogic.gdx.math.Vector2[])
com.badlogic.gdx.maps.Map
com.badlogic.gdx.utils.LongMap$Values: LongMap$Values(com.badlogic.gdx.utils.LongMap)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1: com.badlogic.gdx.utils.Array newObject()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel
com.esotericsoftware.kryonet.ServerDiscoveryHandler$1: java.nio.ByteBuffer emptyBuffer
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter: java.lang.String prependFragmentCode
com.badlogic.gdx.utils.FloatArray: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.EventListener: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.esotericsoftware.kryo.util.IntArray: int[] ensureCapacity(int)
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean touchDown(float,float,int,int)
androidx.recyclerview.widget.RecyclerView: androidx.core.view.NestedScrollingChildHelper getScrollingChildHelper()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newMemoryFace(byte[],int,int)
com.badlogic.gdx.utils.LongArray: long[] toArray()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: java.lang.ref.WeakReference mThisWeakRef
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: java.lang.String toString()
com.badlogic.gdx.utils.IdentityMap: java.lang.Object get(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: void begin()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setPadding(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getFillX()
com.esotericsoftware.kryonet.Listener$QueuedListener
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter b
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getError()
com.badlogic.gdx.utils.IdentityMap$Keys
com.badlogic.gdx.math.collision.Segment: com.badlogic.gdx.math.Vector3 b
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform1f(int,float)
com.google.firebase.iid.FirebaseInstanceIdReceiver: FirebaseInstanceIdReceiver()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: void setColors(float[])
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureWrap vWrap
com.google.android.material.chip.Chip: float getIconStartPadding()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.math.GridPoint2: int y
com.badlogic.gdx.physics.box2d.ChainShape
androidx.appcompat.view.menu.ExpandedMenuView: int getWindowAnimations()
com.google.android.material.bottomappbar.BottomAppBar: int getRightInset()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: float startY
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int getPrimitiveType()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void end()
com.badlogic.gdx.physics.box2d.joints.GearJointDef: com.badlogic.gdx.physics.box2d.Joint joint1
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
com.badlogic.gdx.assets.AssetLoadingTask: int ticks
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float)
com.esotericsoftware.kryo.Kryo: void setDefaultSerializer(java.lang.Class)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 scale(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] getFrameTiles()
com.badlogic.gdx.physics.box2d.Fixture: void reset(com.badlogic.gdx.physics.box2d.Body,long)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: AndroidLiveWallpaper(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int vertexIndex
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,boolean[])
com.esotericsoftware.kryo.Generics: void add(java.lang.String,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.utils.IntMap: IntMap()
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES
com.esotericsoftware.reflectasm.FieldAccess: void insertGetString(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.util.ArrayList)
com.badlogic.gdx.utils.IntSet: float loadFactor
com.badlogic.gdx.graphics.glutils.IndexData
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder m_RepLenDecoder
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: double[] copy(com.esotericsoftware.kryo.Kryo,double[])
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform tmpT
com.badlogic.gdx.utils.StreamUtils: StreamUtils()
com.google.android.material.floatingactionbutton.FloatingActionButton
com.badlogic.gdx.scenes.scene2d.Action: void restart()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void invalidate()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int firstLineShowing
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.kryonet.Client: com.esotericsoftware.kryonet.ClientDiscoveryHandler discoveryHandler
com.esotericsoftware.kryo.io.ByteBufferOutput: java.nio.ByteOrder nativeOrder
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter parameter
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDENameLen
com.badlogic.gdx.graphics.GL20: int GL_SAMPLER_CUBE
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_TARGET_LCD
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void rect(short,short,short,short)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidFiles files
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float transparency
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_TARGET_NORMAL
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeByte(int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: boolean isAnyParentFragmentRemoving()
com.badlogic.gdx.physics.box2d.World: int getContactCount()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void scale(float)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1: com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int sizeAndRotationUsage
androidx.appcompat.widget.AppCompatTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.badlogic.gdx.math.Interpolation$BounceIn: Interpolation$BounceIn(float[],float[])
com.badlogic.gdx.utils.GdxBuild: void main(java.lang.String[])
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Label label
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle: Label$LabelStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int[] a
com.badlogic.gdx.Input$Keys: int Z
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float transparencyDiff
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape square
com.badlogic.gdx.graphics.Cubemap: com.badlogic.gdx.graphics.CubemapData data
com.badlogic.gdx.scenes.scene2d.utils.Selection: void set(java.lang.Object)
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String name()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(double)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Field getField(java.lang.Class,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void end()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.io.Input: int available()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void render()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
com.esotericsoftware.kryo.io.UnsafeOutput: boolean supportVarInts()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float angleDiff
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: boolean round
com.badlogic.gdx.utils.IdentityMap: int PRIME2
com.badlogic.gdx.physics.box2d.Body: void resetMassData()
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: float getLeftWidth()
com.badlogic.gdx.scenes.scene2d.actions.AfterAction: boolean delegate(float)
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: java.util.Iterator iterator()
com.badlogic.gdx.graphics.GL20: void glBindTexture(int,int)
com.esotericsoftware.kryo.serializers.FieldSerializerAnnotationsUtil: FieldSerializerAnnotationsUtil(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int[] i
com.badlogic.gdx.graphics.Cubemap$1: Cubemap$1(int)
com.badlogic.gdx.maps.tiled.TiledMapTileSets: com.badlogic.gdx.maps.tiled.TiledMapTileSet getTileSet(java.lang.String)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: boolean isGpuOnly
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.graphics.glutils.VertexArray: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: int currentIndex
com.badlogic.gdx.files.FileHandleStream
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter json(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Button$2: Button$2(com.badlogic.gdx.scenes.scene2d.ui.Button)
com.badlogic.gdx.graphics.GL20: void glCompileShader(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter projViewTrans
com.badlogic.gdx.utils.FloatArray: boolean removeAll(com.badlogic.gdx.utils.FloatArray)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] $VALUES
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: int currentSize
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.math.Vector2 handlePosition
com.badlogic.gdx.utils.I18NBundle: java.util.Locale getLocale()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,float,float,float,float,float,float)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int colorID
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: void done(long)
com.badlogic.gdx.math.WindowedMean: WindowedMean(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void addVertex(float[],int)
com.badlogic.gdx.graphics.GL30: void glGetQueryiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.decals.Decal: int C1
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getAdvanceY()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.utils.Array getRootNodes()
com.esotericsoftware.kryo.util.IntMap$MapIterator: void reset()
com.esotericsoftware.jsonbeans.JsonValue: boolean isLong()
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.Shape,float)
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh: float[] vertices
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane scroll
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$1: TextTooltip$1(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: HorizontalGroup()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraNearFar
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys: OrderedMap$OrderedMapKeys(com.badlogic.gdx.utils.OrderedMap)
com.badlogic.gdx.backends.android.AndroidAudio: void pause()
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: MeshSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue)
com.badlogic.gdx.physics.box2d.Filter: short groupIndex
com.esotericsoftware.kryonet.FrameworkMessage$RegisterTCP: int connectionID
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: OrthoCachedTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion tmp1
com.badlogic.gdx.utils.Predicate$PredicateIterator: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.ui.Slider: Slider(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle)
com.badlogic.gdx.utils.TextFormatter: java.lang.String format(java.lang.String,java.lang.Object[])
com.badlogic.gdx.physics.box2d.joints.WheelJoint: com.badlogic.gdx.math.Vector2 localAxisA
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_bones
com.badlogic.gdx.utils.compression.lzma.Encoder: void MovePos(int)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentMD5
com.badlogic.gdx.graphics.GL30: void glFramebufferRenderbuffer(int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel
com.badlogic.gdx.utils.JsonReader: byte[] _json_single_lengths
com.badlogic.gdx.backends.android.AndroidGL20
com.badlogic.gdx.graphics.Camera: void translate(float,float,float)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.maps.MapProperties getProperties()
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(int)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup align(int)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setCancelTouchFocus(boolean)
com.badlogic.gdx.utils.BooleanArray: boolean[] resize(int)
com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry: com.esotericsoftware.kryo.factories.SerializerFactory serializerFactory
com.esotericsoftware.kryo.util.IntArray: IntArray(int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padBottom(float)
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.utils.Array renderables
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Vector3 translation
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell add()
com.esotericsoftware.kryo.serializers.CollectionSerializer: CollectionSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.IntArray quicksortStack
com.badlogic.gdx.input.GestureDetector: long tapCountInterval
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1: com.esotericsoftware.kryonet.rmi.ObjectSpace$1 this$1
com.badlogic.gdx.math.DelaunayTriangulator: int INCOMPLETE
com.badlogic.gdx.utils.compression.lz.BinTree: int _cyclicBufferSize
com.badlogic.gdx.graphics.GL30: int GL_SYNC_CONDITION
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setInstanceData(float[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip$1
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer
com.badlogic.gdx.utils.FloatArray: int hashCode()
com.badlogic.gdx.physics.box2d.Body: void jniSetFixedRotation(long,boolean)
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters: com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter textureParameter
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void setMotorSpeed(float)
com.badlogic.gdx.physics.box2d.EdgeShape: void setVertex3(float,float)
com.badlogic.gdx.graphics.GL30: int GL_RG32F
com.badlogic.gdx.backends.android.AndroidDaydream: void addLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String[] getInterfaces()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: boolean hasNorms
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getStartIconContentDescription()
com.esotericsoftware.jsonbeans.Json: void writeValue(java.lang.Object)
com.badlogic.gdx.utils.ByteArray: void add(byte,byte,byte,byte)
com.badlogic.gdx.scenes.scene2d.InputEvent: void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute ColorPacked()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.graphics.g3d.utils.RenderContext context
com.esotericsoftware.kryonet.Client: boolean shutdown
com.google.android.material.bottomappbar.BottomAppBar: void setTitle(java.lang.CharSequence)
com.badlogic.gdx.physics.box2d.Body: float jniGetGravityScale(long)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser
com.esotericsoftware.jsonbeans.JsonValue$1: int[] $SwitchMap$com$esotericsoftware$jsonbeans$JsonValue$ValueType
com.esotericsoftware.kryo.util.DefaultClassResolver
com.badlogic.gdx.utils.TimSort: void doSort(java.lang.Object[],java.util.Comparator,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getHeight(long)
com.esotericsoftware.kryonet.rmi.ObjectSpace$3: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult)
com.badlogic.gdx.files.FileHandle$1
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: void setDuration(float)
com.badlogic.gdx.graphics.PixmapIO$PNG: int lastLineLen
com.badlogic.gdx.graphics.g3d.particles.ParticleController: int findIndex(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Container: int align
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void end()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean)
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: float getEnd()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.util.ObjectMap$Entry
com.badlogic.gdx.graphics.glutils.IndexBufferObject: boolean empty
com.badlogic.gdx.utils.BufferUtils: void transformV3M4Jni(java.nio.Buffer,int,int,float[],int)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Label: boolean fontScaleChanged
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.utils.Pool: java.lang.Object obtain()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getPitch(long)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.utils.Array animations
com.badlogic.gdx.utils.JsonValue: float getFloat(java.lang.String,float)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float getKnobPercentY()
com.badlogic.gdx.math.Matrix4: int M11
com.badlogic.gdx.graphics.g2d.Sprite: Sprite()
com.badlogic.gdx.graphics.GL30: int GL_STREAM_COPY
com.esotericsoftware.kryo.io.Input: float[] readFloats(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void goHome(boolean)
com.badlogic.gdx.graphics.GL30: void glGenBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.Actor
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel)
com.badlogic.gdx.physics.box2d.World: int jniGetProxyCount(long)
androidx.fragment.app.Fragment: boolean isVisible()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void allocateChannels(int)
com.badlogic.gdx.physics.box2d.Manifold: int jniGetType(long)
com.esotericsoftware.kryonet.rmi.ObjectSpace$CachedMethod: ObjectSpace$CachedMethod()
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$TimerThread thread()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidInput getInput()
com.badlogic.gdx.utils.Bits: boolean intersects(com.badlogic.gdx.utils.Bits)
com.badlogic.gdx.scenes.scene2d.ui.TextField: char ENTER_DESKTOP
com.badlogic.gdx.math.RandomXS128: long nextLong(long)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.GL30: int GL_PROGRAM_BINARY_FORMATS
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType valueOf(java.lang.String)
com.esotericsoftware.jsonbeans.ObjectMap$Entries: com.esotericsoftware.jsonbeans.ObjectMap$Entry next()
com.badlogic.gdx.utils.PerformanceCounter: float current
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void sizeChanged()
com.badlogic.gdx.physics.box2d.ChainShape: void jniGetVertex(long,int,float[])
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getDescender(long)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: void reset()
com.esotericsoftware.jsonbeans.Json: void writeObjectStart(java.lang.Class,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setForceScroll(boolean,boolean)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void onDeepPauseApplication()
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean programmaticChangeEvents
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void onPause()
com.badlogic.gdx.graphics.glutils.ShaderProgram: int linkProgram(int)
com.HyperSphere.Connection.PacketObjects.Misc.Item: int damage
com.badlogic.gdx.Net$HttpRequest: java.lang.String httpMethod
com.badlogic.gdx.scenes.scene2d.Stage: boolean debugUnderMouse
com.esotericsoftware.kryo.Kryo: boolean copyReferences
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int button
com.badlogic.gdx.utils.PerformanceCounters: long lastTick
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer: void allocateChannels()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: long vertexMask
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor PreviousPosition
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_CHAR
com.badlogic.gdx.utils.ObjectMap: int PRIME2
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1: DragAndDrop$1(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source)
com.badlogic.gdx.graphics.GL30: int GL_MAX_UNIFORM_BUFFER_BINDINGS
com.google.android.gms.common.internal.ReflectedParcelable
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToScaling(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.viewport.ExtendViewport: float maxWorldWidth
com.badlogic.gdx.math.MathUtils: boolean isZero(float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup
com.badlogic.gdx.utils.async.AsyncTask
com.google.android.material.button.MaterialButton: void setCheckable(boolean)
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: com.badlogic.gdx.utils.ObjectFloatMap map
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int yIconDrop
com.badlogic.gdx.graphics.GL20: void glUniform3fv(int,int,float[],int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.Array getAll(java.lang.Class,com.badlogic.gdx.utils.Array)
com.HyperSphere.Connection.PacketObjects.Map.InteractiveObject: InteractiveObject()
androidx.appcompat.widget.FitWindowsFrameLayout
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER7
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: TextureRegionDrawable(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: float dragActorX
com.badlogic.gdx.maps.tiled.TmxMapLoader: void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: List$ListStyle()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer: java.util.Currency read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.InputListener: boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setEnsureMinTouchTargetSize(boolean)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling stretchX
com.badlogic.gdx.math.Vector3: boolean isPerpendicular(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int emissionDiff
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_cameraDirection
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean backwardPressed
com.badlogic.gdx.utils.IntFloatMap: int mask
com.esotericsoftware.kryo.serializers.AsmCachedFieldFactory
com.badlogic.gdx.physics.box2d.Transform: int COS
com.esotericsoftware.jsonbeans.ObjectMap: void clear()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: boolean flipHorizontally
com.badlogic.gdx.graphics.Texture
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: float scaleU
com.badlogic.gdx.math.MathUtils: boolean randomBoolean()
com.badlogic.gdx.graphics.glutils.ETC1: int PKM_HEADER_SIZE
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo: java.lang.String filename
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: short[] _choice
com.badlogic.gdx.net.NetJavaImpl
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollX()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: GLSurfaceViewAPI18$ComponentSizeChooser(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean selectSize(int)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(byte[],int)
com.badlogic.gdx.graphics.GL30: boolean glIsProgram(int)
com.badlogic.gdx.graphics.g3d.decals.Decal: Decal()
com.badlogic.gdx.graphics.VertexAttributes$Usage: int ColorPacked
com.badlogic.gdx.math.Interpolation$Exp: float apply(float)
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter: I18NBundleLoader$I18NBundleParameter(java.util.Locale)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder
com.badlogic.gdx.scenes.scene2d.Actor: void positionChanged()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform newObject()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BITS
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
androidx.core.widget.NestedScrollView: int getNestedScrollAxes()
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPadBottom()
com.badlogic.gdx.backends.android.AndroidGL30: void glGenVertexArrays(int,int[],int)
com.badlogic.gdx.utils.FlushablePool: void freeAll(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean ignoreSyntheticFields
com.badlogic.gdx.utils.ObjectIntMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.utils.XmlWriter: boolean startElementContent()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
com.esotericsoftware.kryo.util.ObjectMap$Entry: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Dialog
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: short vertex(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.utils.SortedIntList$NodePool
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAligned(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: short[] indices
com.badlogic.gdx.graphics.GL30: void glShaderSource(int,java.lang.String)
com.badlogic.gdx.graphics.GL30: void glDrawElements(int,int,int,int)
com.badlogic.gdx.graphics.glutils.ETC1
com.badlogic.gdx.physics.box2d.PolygonShape: int jniGetVertexCount(long)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean variableSizeKnobs
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector putLong(long)
com.google.android.material.chip.Chip: float getCloseIconEndPadding()
com.badlogic.gdx.utils.async.ThreadUtils: void yield()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion mulLeft(float,float,float,float)
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult: ObjectSpace$InvokeMethodResult()
com.badlogic.gdx.utils.reflect.ReflectionException
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue velocityValue
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config: boolean depthBufferOnly
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,double[])
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform3iv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.CollectionSerializer$BindCollection
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator: void remove()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int mDebugFlags
com.esotericsoftware.kryo.util.IdentityMap: int PRIME1
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: boolean isIndependent()
com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: java.lang.Class serializerClass
com.esotericsoftware.jsonbeans.OutputType: java.lang.String quoteName(java.lang.String)
com.esotericsoftware.jsonbeans.ObjectMap: void putStash(java.lang.Object,java.lang.Object)
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter pop()
com.badlogic.gdx.maps.objects.TextureMapObject: void setOriginY(float)
com.badlogic.gdx.graphics.GL30: void glClearDepthf(float)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeString(java.lang.CharSequence)
com.badlogic.gdx.utils.JsonValue: JsonValue(long)
com.badlogic.gdx.utils.IdentityMap$Keys: java.lang.Object next()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_WRAP_R
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Group parent
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue emissionValue
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDrawElements(int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.model.Node: boolean hasChildren()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onTouchEvent(android.view.MotionEvent)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: void setAmount(float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService service
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib4f(int,float,float,float,float)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color add(float,float,float,float)
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral OnscreenKeyboard
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.util.ObjectMap classToRegistration
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4$1
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField: AsmCacheFields$AsmDoubleField()
com.badlogic.gdx.math.RandomXS128: double nextDouble()
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean SetAlgorithm(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float)
com.esotericsoftware.kryo.Kryo: void reference(java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider: com.badlogic.gdx.graphics.g3d.Shader getShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.Mesh: void clearAllMeshes(com.badlogic.gdx.Application)
com.badlogic.gdx.graphics.OrthographicCamera
com.badlogic.gdx.graphics.Mesh: Mesh(boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor: int id
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void setVertexTransformationEnabled(boolean)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters: boolean flipV
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: java.lang.String vertexShader
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g2d.GlyphLayout: com.badlogic.gdx.utils.Array runs
com.badlogic.gdx.math.Matrix4: void mulVec(float[],float[],int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int AASTORE
com.badlogic.gdx.utils.PauseableThread
com.badlogic.gdx.graphics.VertexAttribute: int getSizeInBytes()
com.badlogic.gdx.utils.IntArray: boolean contains(int)
com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration getRegistration(int)
com.badlogic.gdx.scenes.scene2d.ui.Value: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryonet.EndPoint: void close()
com.badlogic.gdx.math.Affine2: float m02
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeChars(char[])
com.badlogic.gdx.graphics.g2d.SpriteBatch
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: com.badlogic.gdx.graphics.GLTexture[] textures
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: void set(com.badlogic.gdx.graphics.GLTexture,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.utils.BinaryHeap$Node
com.badlogic.gdx.utils.NumberUtils: NumberUtils()
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$1: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager val$manager
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: java.lang.String CullFaceAlias
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: void findNextIndex()
com.badlogic.gdx.graphics.glutils.MipMapTextureData: void prepare()
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight set(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,float)
androidx.fragment.app.Fragment: void onViewStateRestored(android.os.Bundle)
com.badlogic.gdx.utils.compression.lzma.Decoder: boolean SetDictionarySize(int)
com.badlogic.gdx.scenes.scene2d.actions.EventAction: void restart()
com.badlogic.gdx.net.HttpStatus: int SC_MOVED_TEMPORARILY
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters: BaseTmxMapLoader$Parameters()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: float offsetV
com.esotericsoftware.kryo.io.UnsafeInput: void readBytes(java.lang.Object,long,long,int)
com.badlogic.gdx.backends.android.AndroidInput$3$2$1: com.badlogic.gdx.backends.android.AndroidInput$3$2 this$2
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setAlignment(int)
com.badlogic.gdx.graphics.GL20: int GL_UNSIGNED_SHORT_4_4_4_4
com.badlogic.gdx.utils.LongArray: int hashCode()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights0position
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.esotericsoftware.kryo.serializers.FieldSerializer: int compare(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField,com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField)
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider: DepthShaderProvider()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: boolean firstResume
com.badlogic.gdx.graphics.g2d.BitmapFont: void setOwnsTexture(boolean)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void fling(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void begin()
com.badlogic.gdx.graphics.GL20: int GL_LUMINANCE
com.badlogic.gdx.utils.ReflectionPool: com.badlogic.gdx.utils.reflect.Constructor constructor
com.badlogic.gdx.graphics.glutils.MipMapGenerator: void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.math.Matrix3: int M11
com.badlogic.gdx.physics.box2d.PolygonShape
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.utils.FocusListener focusListener
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long mUncompressedLength
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.backends.android.AndroidGL30: void glBindSampler(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: Touchpad(float,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void allocateChannels()
com.badlogic.gdx.scenes.scene2d.ui.Slider: float snap(float)
com.badlogic.gdx.backends.android.AndroidGL30: void glReadBuffer(int)
com.esotericsoftware.kryo.io.KryoObjectInput
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetString(int)
com.badlogic.gdx.utils.ScreenUtils
com.badlogic.gdx.backends.android.AndroidInput$3: java.lang.String val$title
com.google.android.material.circularreveal.CircularRevealFrameLayout: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: boolean always
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float xScaleDiff
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Pow pow2
com.badlogic.gdx.utils.IntMap: float loadFactor
com.badlogic.gdx.utils.IntSet: int stashCapacity
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: int alignment
com.esotericsoftware.kryo.util.ObjectMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraUp
com.badlogic.gdx.math.Vector2: boolean isPerpendicular(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.Preferences: com.badlogic.gdx.Preferences put(java.util.Map)
com.badlogic.gdx.utils.compression.ICodeProgress
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean overscrollY
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1: com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy this$0
com.badlogic.gdx.utils.ShortArray: short get(int)
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction: RotateByAction()
com.badlogic.gdx.scenes.scene2d.ui.Value: float get()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOnOver
com.esotericsoftware.jsonbeans.ObjectMap$Entries: com.esotericsoftware.jsonbeans.ObjectMap$Entry entry
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.Array meshParts
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1: void onDestroy()
com.badlogic.gdx.graphics.GLTexture: GLTexture(int)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void setUncheckLast(boolean)
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: com.badlogic.gdx.maps.tiled.TiledMapTile getTile()
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK
com.badlogic.gdx.graphics.GL30: void glVertexAttribI4ui(int,int,int,int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: boolean ownsBuffer
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean ChangePair(int,int)
com.badlogic.gdx.backends.android.AndroidMusic: void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener)
com.badlogic.gdx.graphics.g2d.Sprite: void scale(float)
com.badlogic.gdx.graphics.VertexAttributes: com.badlogic.gdx.graphics.VertexAttribute findByUsage(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: float getPrefWidth()
com.google.android.material.chip.ChipGroup: void setSingleSelection(int)
com.google.firebase.iid.Registrar: Registrar()
com.badlogic.gdx.InputMultiplexer: boolean keyDown(int)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: com.badlogic.gdx.scenes.scene2d.ui.Label getLabel()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: ImageButton$ImageButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.net.HttpStatus: int SC_REQUEST_TOO_LONG
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String[] getAttributes()
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: void afterGroups()
com.badlogic.gdx.assets.AssetDescriptor: AssetDescriptor(com.badlogic.gdx.files.FileHandle,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value minWidth
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator generator
com.badlogic.gdx.graphics.g2d.BitmapFont: void setFixedWidthGlyphs(java.lang.CharSequence)
com.badlogic.gdx.utils.LongMap$Entries
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void line(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.math.Ellipse: com.badlogic.gdx.math.Ellipse setPosition(float,float)
com.esotericsoftware.jsonbeans.Json: Json()
com.badlogic.gdx.scenes.scene2d.Stage: void addAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.utils.IntSet: void addResize(int)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: com.badlogic.gdx.scenes.scene2d.Actor getValidDragActor()
com.badlogic.gdx.math.Frustum: Frustum()
com.google.android.material.chip.ChipGroup: void setSingleLine(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle: Touchpad$TouchpadStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.math.collision.BoundingBox boundingBox
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void b()
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput(byte[])
com.badlogic.gdx.utils.JsonValue: int asInt()
com.badlogic.gdx.graphics.GL20: int GL_ACTIVE_UNIFORMS
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: void setEdges(boolean)
com.badlogic.gdx.utils.Timer$TimerThread: Timer$TimerThread()
com.badlogic.gdx.utils.ShortArray: void add(short,short,short,short)
androidx.appcompat.view.menu.ListMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glSampleCoverage(float,boolean)
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings: JsonValue$PrettyPrintSettings()
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle local(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput: int[] deltaX
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE31
com.badlogic.gdx.math.Matrix4: int M31
com.badlogic.gdx.physics.box2d.PolygonShape: void set(float[])
com.esotericsoftware.kryo.io.UnsafeMemoryInput: char[] readChars(int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector scl(float)
com.badlogic.gdx.ApplicationAdapter: void create()
androidx.appcompat.widget.AppCompatSpinner: java.lang.CharSequence getPrompt()
com.HyperSphere.Connection.PacketObjects.Misc.QuestPage: boolean cannotClose
com.badlogic.gdx.utils.Bits: void or(com.badlogic.gdx.utils.Bits)
com.badlogic.gdx.scenes.scene2d.Action: void setTarget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: float depthRangeFar
com.badlogic.gdx.utils.IntFloatMap: void push(int,float,int,int,int,int,int,int)
com.badlogic.gdx.graphics.glutils.VertexData: int getNumMaxVertices()
com.badlogic.gdx.utils.compression.rangecoder.Encoder: long _position
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void cancel()
com.badlogic.gdx.math.Interpolation$2: float apply(float)
com.esotericsoftware.minlog.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 rotateRad(float)
com.badlogic.gdx.math.Vector3: boolean isOnLine(com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryo.io.FastOutput: FastOutput(int)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: float u
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 t
com.badlogic.gdx.utils.async.AsyncExecutor$1
com.badlogic.gdx.physics.box2d.JointDef$JointType: int getValue()
com.badlogic.gdx.utils.ObjectFloatMap: float remove(java.lang.Object,float)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float delayTimer
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: com.google.android.material.animation.MotionSpec getExtendMotionSpec()
com.badlogic.gdx.math.collision.Ray: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: int depth
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int[] mConfigAttribs
com.google.android.material.button.MaterialButton: void setBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void addSource(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source)
com.esotericsoftware.kryo.util.IdentityMap: int mask
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeLong(long)
com.badlogic.gdx.Graphics: void setTitle(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL30: void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.io.InputChunked: int chunkSize
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: float value
androidx.core.widget.NestedScrollView: float getTopFadingEdgeStrength()
com.badlogic.gdx.math.CatmullRomSpline: java.lang.Object derivativeAt(java.lang.Object,float)
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.math.Matrix4 getWorldTransform()
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction: boolean act(float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: int getW(int)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,boolean)
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_WRITEMASK
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Sprite: float y
com.badlogic.gdx.utils.Pool: int getFree()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float)
com.badlogic.gdx.utils.IntMap: int stashSize
com.badlogic.gdx.backends.android.AndroidInput$3$3: com.badlogic.gdx.backends.android.AndroidInput$3 this$1
com.badlogic.gdx.utils.reflect.Method: boolean isAbstract()
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.ui.Table getTitleTable()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: DragAndDrop()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: ColorAttribute(long)
androidx.appcompat.widget.ActionBarContainer: void setTransitioning(boolean)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setScaleX(float)
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.ObjectMap typeToFields
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DCONST_1
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: FloatAttribute(long)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.Array runnables
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: void validate()
com.badlogic.gdx.math.MathUtils: float lerpAngleDeg(float,float,float)
com.badlogic.gdx.graphics.g2d.GlyphLayout: GlyphLayout(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 localPoint
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String d
com.google.android.material.bottomsheet.BottomSheetBehavior
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: void activateParticles(int,int)
com.esotericsoftware.reflectasm.FieldAccess: void setByte(java.lang.Object,int,byte)
com.badlogic.gdx.graphics.g2d.Animation: void setPlayMode(com.badlogic.gdx.graphics.g2d.Animation$PlayMode)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: com.badlogic.gdx.scenes.scene2d.ui.Cell getLabelCell()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table debugTable()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.VisibleAction hide()
androidx.appcompat.widget.ActionBarOverlayLayout: void setHideOnContentScrollEnabled(boolean)
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.Array meshes
com.badlogic.gdx.backends.android.AndroidApplication: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getMinWidth()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void triangle(short,short,short)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: ClassReader(java.io.InputStream)
com.badlogic.gdx.utils.LongArray: boolean removeAll(com.badlogic.gdx.utils.LongArray)
com.HyperSphere.Connection.PacketObjects.Misc.ParticleEffectPacket: int posX
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item j
com.badlogic.gdx.graphics.GL20: int GL_GEQUAL
com.google.android.material.card.MaterialCardView: int getContentPaddingBottom()
com.badlogic.gdx.graphics.GL30: int GL_MAX_3D_TEXTURE_SIZE
com.badlogic.gdx.backends.android.AndroidInput: void postTap(int,int)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: int destFunction
com.badlogic.gdx.utils.ObjectFloatMap: ObjectFloatMap(int)
com.badlogic.gdx.net.ServerSocketHints: int receiveBufferSize
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: long dragValidTime
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector cubic(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryonet.util.TcpIdleSender
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table align(int)
com.badlogic.gdx.math.RandomXS128: long seed0
com.badlogic.gdx.graphics.g2d.Sprite: Sprite(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.scenes.scene2d.utils.Drawable: float getMinWidth()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: BaseShader$Uniform(java.lang.String,long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getLinearVertAdvance()
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_ENABLED
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g2d.SpriteCache: boolean drawing
com.badlogic.gdx.maps.MapLayers: MapLayers()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void cancelTouchFocusExcept(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source)
com.badlogic.gdx.graphics.glutils.IndexArray: int getNumIndices()
com.badlogic.gdx.graphics.OrthographicCamera: void update(boolean)
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.environment.ShadowMap shadowMap
com.badlogic.gdx.utils.ByteArray: void reverse()
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String IfRange
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int)
com.google.android.material.textview.MaterialTextView
com.esotericsoftware.kryonet.Server: void stop()
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeColorStateList(android.content.res.ColorStateList)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: void render(int,int,int)
com.google.android.material.card.MaterialCardView: void setRippleColor(android.content.res.ColorStateList)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short,int[])
com.badlogic.gdx.utils.BaseJsonReader: com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.SerializationException: SerializationException(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider
com.badlogic.gdx.backends.android.AndroidGL20: void glFramebufferRenderbuffer(int,int,int,int)
com.esotericsoftware.kryo.util.IntArray: int peek()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: void addElement(java.lang.Object[])
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.scenes.scene2d.ui.Button: void setProgrammaticChangeEvents(boolean)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE27
com.badlogic.gdx.utils.ObjectMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entries iterator()
com.badlogic.gdx.math.Vector2: float len()
com.badlogic.gdx.scenes.scene2d.ui.Image: com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable
com.badlogic.gdx.graphics.g2d.SpriteBatch: float[] vertices
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] $VALUES
com.esotericsoftware.kryonet.Server: void sendToAllExceptUDP(int,java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue
com.badlogic.gdx.graphics.Texture: void invalidateAllTextures(com.badlogic.gdx.Application)
com.HyperSphere.Connection.PacketObjects.Map.InteractiveObject: int interactionType
com.badlogic.gdx.scenes.scene2d.ui.Stack: float getPrefHeight()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value minHeight
com.badlogic.gdx.utils.SharedLibraryLoader: java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File)
androidx.navigation.NavController$1
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float maxAmount
com.badlogic.gdx.math.Intersector: float intersectSegmentCircleDisplace(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
androidx.appcompat.widget.ViewStubCompat: void setInflatedId(int)
com.badlogic.gdx.scenes.scene2d.ui.Value$5
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Serializer getSerializer(java.lang.Class)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getRippleColor()
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 up
com.badlogic.gdx.maps.MapLayer
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.utils.Selection: com.badlogic.gdx.utils.OrderedSet old
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: java.lang.String I
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: BitTreeEncoder(int)
androidx.fragment.app.Fragment: java.lang.String mWho
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setButton(int)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1: AndroidOnscreenKeyboard$2$1(com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2)
com.badlogic.gdx.input.GestureDetector$1: void run()
com.badlogic.gdx.graphics.Camera: void normalizeUp()
com.esotericsoftware.jsonbeans.OutputType: java.util.regex.Pattern minimalValuePattern
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void setMaxTileSize(float,float)
com.badlogic.gdx.physics.box2d.World: boolean getAutoClearForces()
com.HyperSphere.Connection.PacketObjects.Misc.Item: int getItemType(java.lang.String)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight set(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float,float)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteObjectSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
androidx.appcompat.widget.Toolbar: void setTitleMarginTop(int)
com.esotericsoftware.jsonbeans.ObjectMap: ObjectMap(int)
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element current
com.esotericsoftware.kryo.util.Util
com.badlogic.gdx.maps.tiled.TmxMapLoader: com.badlogic.gdx.utils.Array getDependencyFileHandles(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.scenes.scene2d.ui.Label: void setFontScaleY(float)
com.badlogic.gdx.scenes.scene2d.ui.Button: float getPrefHeight()
com.badlogic.gdx.scenes.scene2d.ui.Table: float getRowMinHeight(int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int uvOffset
com.esotericsoftware.kryo.io.ByteBufferInputStream: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.scenes.scene2d.Group: void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.math.CatmullRomSpline: float approxLength(int)
com.badlogic.gdx.utils.LongArray: void insert(int,long)
com.badlogic.gdx.backends.android.AndroidClipboard: void setContents(java.lang.String)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidClipboard clipboard
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getChildFragmentManager()
com.badlogic.gdx.physics.box2d.ContactFilter: boolean shouldCollide(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Fixture)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float[] scaling
com.badlogic.gdx.math.Ellipse: float width
com.badlogic.gdx.utils.StringBuilder: java.lang.CharSequence subSequence(int,int)
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(byte[],int)
com.badlogic.gdx.math.Vector2: boolean isUnit(float)
com.badlogic.gdx.net.SocketHints: int performancePrefBandwidth
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyAnimations(java.lang.Iterable,boolean)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int BackPrev
com.badlogic.gdx.math.Vector: float dot(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BUFFER
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: float u2
com.badlogic.gdx.backends.android.AndroidFileHandle: long lastModified()
com.badlogic.gdx.graphics.profiling.GLProfiler: void enable()
com.badlogic.gdx.audio.AudioRecorder: void read(short[],int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: float halfInvAspectRatio
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: java.lang.String[] getImagePaths()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float,float,float)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Matrix4 view
com.badlogic.gdx.graphics.glutils.PixmapTextureData: PixmapTextureData(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean,boolean,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_2
com.badlogic.gdx.math.collision.BoundingBox
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format RGB565
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue next()
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$4: com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox
com.badlogic.gdx.backends.android.AndroidDaydream: void error(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,float,int,boolean)
androidx.fragment.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)
com.badlogic.gdx.scenes.scene2d.ui.Table: void endRow()
com.google.android.material.chip.Chip: void setChipIconVisible(boolean)
com.google.android.material.chip.Chip: void setChipStrokeWidthResource(int)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLowLenSymbols
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT10
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_BINDING
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float fill
com.esotericsoftware.jsonbeans.JsonSerializer: void write(com.esotericsoftware.jsonbeans.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.IntArray: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: ParticleShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config,java.lang.String)
com.badlogic.gdx.Input$Keys: int APOSTROPHE
com.google.android.material.appbar.AppBarLayout$BaseBehavior: AppBarLayout$BaseBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: boolean isDirty
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: long getJavaHeap()
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: int usage
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation pow3OutInverse
com.badlogic.gdx.utils.Json: void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class)
com.badlogic.gdx.input.RemoteInput: boolean isCatchMenuKey()
com.badlogic.gdx.graphics.GL30: void glGenSamplers(int,int[],int)
com.badlogic.gdx.graphics.g3d.decals.Decal: int C2
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int hashShift
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER3
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.BitmapFontCache getCache()
com.badlogic.gdx.graphics.g2d.PolygonRegion: float[] textureCoords
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.graphics.Camera cam
com.badlogic.gdx.math.Intersector: double detd(double,double,double,double)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void reset()
com.badlogic.gdx.Input$Keys: int BUTTON_THUMBR
com.google.android.material.textfield.TextInputLayout: void setHintAnimationEnabled(boolean)
com.badlogic.gdx.graphics.VertexAttributes$Usage: VertexAttributes$Usage()
com.badlogic.gdx.net.NetJavaImpl$1: com.badlogic.gdx.net.NetJavaImpl this$0
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.ReferenceResolver: java.lang.Object getReadObject(java.lang.Class,int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar
com.badlogic.gdx.scenes.scene2d.Group: boolean hasChildren()
com.badlogic.gdx.scenes.scene2d.ui.Table: void setRound(boolean)
com.badlogic.gdx.scenes.scene2d.ui.TextField: float getPrefHeight()
com.badlogic.gdx.ApplicationLogger: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int originalWidth
com.badlogic.gdx.scenes.scene2d.ui.Table: void setBackground(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.Selection
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL30: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer: DefaultSerializers$BigDecimalSerializer()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: long getNativeHeap()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short,java.lang.Object,java.lang.Object,int[])
com.esotericsoftware.kryo.util.ObjectMap: void removeStashIndex(int)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: boolean Default
com.badlogic.gdx.utils.compression.lzma.Encoder: int EMatchFinderTypeBT2
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.String)
com.google.android.gms.cloudmessaging.zza: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer topi
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: com.badlogic.gdx.math.Rectangle peekScissors()
com.google.android.material.appbar.AppBarLayout: int getTotalScrollRange()
com.badlogic.gdx.backends.android.AndroidApplication: void onDestroy()
com.badlogic.gdx.scenes.scene2d.Stage: boolean setKeyboardFocus(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.backends.android.AndroidApplication$2: AndroidApplication$2(com.badlogic.gdx.backends.android.AndroidApplication)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int PRIME3
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.graphics.Color parseColor(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setPackToTexture(boolean)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: BitTreeDecoder(int)
com.badlogic.gdx.graphics.GL20: int GL_LUMINANCE_ALPHA
com.esotericsoftware.kryo.serializers.AsmCacheFields: AsmCacheFields()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: short maxVerticeInIndices()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getChipIconTint()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setRenderMode(int)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable up
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject: void close()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix3fv(int,int,boolean,float[],int)
com.badlogic.gdx.maps.objects.PolylineMapObject: PolylineMapObject(com.badlogic.gdx.math.Polyline)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void setButton(int)
com.badlogic.gdx.utils.compression.lzma.Decoder: boolean SetLcLpPb(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.List: void setItems(java.lang.Object[])
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] $VALUES
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setOverscroll(boolean,boolean)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue$JsonIterator iterator()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: int pointLightsOffset
com.hyperspherestudio.kryonet.Packets.EncryptedPacket: byte[] serialize(java.lang.Object)
com.esotericsoftware.kryo.util.ObjectMap$Values: void remove()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: com.badlogic.gdx.utils.SortedIntList groupList
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: ProgressBar$ProgressBarStyle()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.IntFloatMap: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Cell: int cellAboveIndex
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.math.Quaternion getRotationAtTime(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float,com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.utils.LongMap$MapIterator: int INDEX_ZERO
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.utils.Array tmp
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType[] values()
com.badlogic.gdx.input.RemoteInput: boolean isCatchBackKey()
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: float getMinHeight()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(float,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput: float pitch
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput(int)
com.badlogic.gdx.graphics.Mesh: void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int padRight
com.badlogic.gdx.physics.box2d.EdgeShape: boolean hasVertex0()
com.esotericsoftware.kryo.serializers.CollectionSerializer
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle style
com.badlogic.gdx.utils.TextFormatter: java.text.MessageFormat messageFormat
androidx.appcompat.widget.AppCompatTextView: void setLineHeight(int)
androidx.navigation.fragment.NavHostFragment: NavHostFragment()
com.esotericsoftware.kryo.util.IdentityMap$Keys: void reset()
com.badlogic.gdx.graphics.g3d.Shader: void render(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.utils.Array items
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean disableX
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,short)
com.badlogic.gdx.maps.MapLayer: float getRenderOffsetY()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidInput input
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: float[] colors
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER11
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup columnRight()
androidx.recyclerview.widget.LinearLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.GL20: void glDepthRangef(float,float)
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues: void reset()
com.badlogic.gdx.utils.compression.lzma.Base: int kNumFullDistances
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void getVertices(float[],int)
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput(java.io.OutputStream,int)
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_range_lengths_0()
com.badlogic.gdx.assets.AssetManager: int getLoadedAssets()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean useMipMaps
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int drawCalls
com.badlogic.gdx.physics.box2d.World: World(com.badlogic.gdx.math.Vector2,boolean)
com.badlogic.gdx.graphics.GL30: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int currentTexture
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float getPrefHeight()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,int,int)
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyAnimation(com.badlogic.gdx.graphics.g3d.model.Animation,boolean)
androidx.fragment.app.Fragment: boolean mIsNewlyAdded
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void setVertexTransformationEnabled(boolean)
com.badlogic.gdx.utils.IntSet: com.badlogic.gdx.utils.IntSet with(int[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int[] e
com.esotericsoftware.jsonbeans.JsonValue: void setPrev(com.esotericsoftware.jsonbeans.JsonValue)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setVisibility(int)
androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle$State mMaxState
com.badlogic.gdx.scenes.scene2d.ui.Tree: void updateRootNodes()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ProxyAuthenticate
com.badlogic.gdx.backends.android.AndroidApplicationLogger: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_SIGNED_RG11_EAC
com.badlogic.gdx.Input: int getDeltaX(int)
com.badlogic.gdx.graphics.g2d.TextureRegion: com.badlogic.gdx.graphics.Texture getTexture()
com.badlogic.gdx.backends.android.AndroidDaydream: android.os.Handler handler
com.badlogic.gdx.utils.Base64Coder: java.lang.String encodeString(java.lang.String)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int posX
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getPrefWidth()
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetJointTranslation(long)
com.esotericsoftware.reflectasm.FieldAccess: int getInt(java.lang.Object,int)
com.badlogic.gdx.net.HttpResponseHeader
com.esotericsoftware.kryo.util.IntArray: IntArray(int[])
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: float getOffsetX()
com.badlogic.gdx.graphics.Camera: void rotate(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.maps.MapObjects: void add(com.badlogic.gdx.maps.MapObject)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: void setScale(float)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(int)
com.badlogic.gdx.graphics.GL20: void glDeleteRenderbuffer(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: int format
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: float start
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.Application app
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int D2L
com.esotericsoftware.kryo.util.IdentityMap: float loadFactor
com.google.android.material.appbar.AppBarLayout: void setOrientation(int)
com.badlogic.gdx.graphics.g2d.NinePatch: void setRightWidth(float)
androidx.fragment.app.Fragment: java.lang.String getString(int)
com.badlogic.gdx.utils.IdentityMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getUniformType(java.lang.String)
com.badlogic.gdx.net.HttpStatus: int SC_LOCKED
com.badlogic.gdx.physics.box2d.Contact: com.badlogic.gdx.physics.box2d.Fixture getFixtureA()
com.badlogic.gdx.utils.compression.lzma.Base: int StateUpdateChar(int)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float getReferenceAngle()
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void setLeftWidth(float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: DefaultSerializers$StringBufferSerializer()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: com.badlogic.gdx.utils.Array effects
com.badlogic.gdx.scenes.scene2d.ui.Value$2
com.badlogic.gdx.graphics.Pixmap$Format
com.badlogic.gdx.math.RandomXS128: void nextBytes(byte[])
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle style
com.badlogic.gdx.net.HttpStatus: int SC_INSUFFICIENT_STORAGE
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void index(short,short,short,short)
com.badlogic.gdx.audio.Music: void dispose()
com.badlogic.gdx.physics.box2d.QueryCallback: boolean reportFixture(com.badlogic.gdx.physics.box2d.Fixture)
com.badlogic.gdx.math.Plane$PlaneSide
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glClearStencil(int)
com.badlogic.gdx.Net$HttpRequest
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.scenes.scene2d.ui.TextButton: java.lang.CharSequence getText()
com.badlogic.gdx.scenes.scene2d.ui.List$1: List$1(com.badlogic.gdx.scenes.scene2d.ui.List)
com.badlogic.gdx.scenes.scene2d.ui.Image: void setAlign(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getPrefWidth()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,char[])
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec
com.badlogic.gdx.graphics.Mesh: void transformUV(com.badlogic.gdx.math.Matrix3,int,int)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE0
com.google.android.material.appbar.HeaderBehavior: HeaderBehavior()
com.badlogic.gdx.graphics.g2d.Animation$1
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.Array executedRunnables
com.badlogic.gdx.graphics.GL20: int GL_BOOL
com.badlogic.gdx.utils.BinaryHeap: BinaryHeap()
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: void setCount(int)
com.badlogic.gdx.Input: void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setIconSpacing(float,float)
com.fasterxml.jackson.annotation.Nulls: com.fasterxml.jackson.annotation.Nulls[] values()
com.google.android.material.chip.Chip: void setChipIconEnabledResource(int)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: int maxParticleCount
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float padBottom
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: com.badlogic.gdx.utils.IntIntMap keys
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int L2I
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getNumGray(long)
com.badlogic.gdx.graphics.glutils.ShaderProgram: boolean isCompiled()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] getParticles()
com.esotericsoftware.kryo.io.KryoDataOutput: void writeLong(long)
com.esotericsoftware.kryonet.Client: int connectTimeout
com.esotericsoftware.kryo.io.FastOutput: FastOutput(java.io.OutputStream)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createSpecular(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics getMetrics()
com.badlogic.gdx.physics.box2d.FixtureDef: float restitution
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: ClickListener()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void next(boolean)
com.badlogic.gdx.scenes.scene2d.InputEvent: int getKeyCode()
com.badlogic.gdx.graphics.GL30: void glPixelStorei(int,int)
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: boolean getRangeSelect()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: float getCursorX()
com.badlogic.gdx.physics.box2d.BodyDef: float angle
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile
com.badlogic.gdx.scenes.scene2d.actions.EventAction: void setTarget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.World world
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.g2d.TextureRegion[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int Q
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.utils.StringBuilder: void insert0(int,java.lang.CharSequence,int,int)
com.badlogic.gdx.backends.android.AndroidGraphics: void logManagedCachesStatus()
com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[])
com.badlogic.gdx.graphics.GL20: void glFramebufferRenderbuffer(int,int,int,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: com.badlogic.gdx.graphics.profiling.GLProfiler glProfiler
com.badlogic.gdx.backends.android.AndroidGL20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.ObjectMap: java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_IsRepG1Decoders
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuilder)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.graphics.GL20: boolean glIsRenderbuffer(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void setTopHeight(float)
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.graphics.Color diffuse
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawArraysInstanced(int,int,int,int)
com.badlogic.gdx.physics.box2d.CircleShape: void setPosition(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Class type
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling valueOf(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int[] a
com.badlogic.gdx.math.DelaunayTriangulator: int quicksortPartition(float[],int,int,short[])
com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType[] values()
com.badlogic.gdx.utils.XmlReader: XmlReader()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField
com.badlogic.gdx.math.RandomXS128: double NORM_FLOAT
com.badlogic.gdx.math.Intersector$MinimumTranslationVector: com.badlogic.gdx.math.Vector2 normal
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int EGL_COVERAGE_BUFFERS_NV
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color set(int)
com.esotericsoftware.kryonet.util.ObjectIntMap: int getAndIncrementStash(java.lang.Object,int,int)
com.esotericsoftware.jsonbeans.ObjectMap: int PRIME1
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup right()
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9: DefaultShader$Setters$9()
com.badlogic.gdx.utils.compression.lzma.Base: int kNumRepDistances
com.badlogic.gdx.math.Polygon: float[] localVertices
com.badlogic.gdx.net.HttpStatus: int SC_ACCEPTED
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: ParticleControllerComponent()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_RENDER_MODE_MONO
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Matrix4 projection
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28: DefaultShader$Setters$28()
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 cpy()
com.badlogic.gdx.backends.android.AndroidGraphics: float ppiX
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String getFragmentShaderSource()
com.badlogic.gdx.graphics.VertexAttribute: boolean normalized
com.badlogic.gdx.math.Vector2: float dst2(float,float)
com.badlogic.gdx.math.Rectangle: float getY()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ArrowShapeBuilder: ArrowShapeBuilder()
com.badlogic.gdx.math.Vector: boolean isPerpendicular(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.Pixmap$Blending
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void enableMotor(boolean)
com.badlogic.gdx.graphics.GL30: void glUniform4fv(int,int,java.nio.FloatBuffer)
androidx.appcompat.widget.AbsActionBarView: void setContentHeight(int)
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: int dstBlendFactor
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean isPrepared()
com.badlogic.gdx.utils.IntIntMap$Entry
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: com.badlogic.gdx.graphics.Texture load(java.lang.String)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setFlipHorizontally(boolean)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,com.badlogic.gdx.math.Vector3)
com.google.android.material.chip.Chip: void setChipBackgroundColorResource(int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int[] k
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setOnLayoutChangeListener(com.google.android.material.snackbar.BaseTransientBottomBar$OnLayoutChangeListener)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 rotateRad(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getRowHeight(int)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getObjectFieldFactory()
com.esotericsoftware.kryo.serializers.FieldSerializer: void initializeCachedFields()
com.esotericsoftware.kryonet.util.ObjectIntMap: ObjectIntMap(int,float)
com.badlogic.gdx.input.RemoteInput: boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int getStash(java.lang.Object,int)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: int GetPrice(boolean,byte,byte)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void polygon(float[],int,int)
com.badlogic.gdx.Input: float getPressure()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,float,float)
com.badlogic.gdx.backends.android.AndroidGraphics: int height
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener: ChangeListener()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform diffuseUVTransform
com.badlogic.gdx.graphics.TextureArrayData: int getGLType()
com.badlogic.gdx.utils.JsonWriter: void write(char[],int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: int hashCode()
com.google.android.material.internal.NavigationMenuItemView: NavigationMenuItemView(android.content.Context,android.util.AttributeSet)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: float scaleY
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.compression.lzma.Decoder: int m_DictionarySizeCheck
com.badlogic.gdx.maps.objects.PolylineMapObject: com.badlogic.gdx.math.Polyline polyline
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService getService()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createBump(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.utils.Json: void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.utils.JsonValue: void setType(com.badlogic.gdx.utils.JsonValue$ValueType)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: java.lang.Appendable append(char)
com.badlogic.gdx.backends.android.AndroidSound: long loop()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glAttachShader(int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGenFramebuffer()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F_FULL
com.badlogic.gdx.Graphics$BufferFormat: Graphics$BufferFormat(int,int,int,int,int,int,int,boolean)
com.badlogic.gdx.utils.Disposable: void dispose()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 lower
com.badlogic.gdx.scenes.scene2d.ui.Table: float tableMinHeight
com.badlogic.gdx.scenes.scene2d.Stage: boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.badlogic.gdx.math.Bresenham2: com.badlogic.gdx.utils.Pool pool
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int mapTileWidth
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput(long,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(int,int,int,int)
com.badlogic.gdx.graphics.GL30: int GL_SAMPLER_BINDING
com.badlogic.gdx.scenes.scene2d.ui.Dialog: Dialog(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getMaxAdvance(long)
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean cleansUpBlendFunction()
com.badlogic.gdx.utils.IntFloatMap$MapIterator: com.badlogic.gdx.utils.IntFloatMap map
com.badlogic.gdx.math.BSpline: float approxLength(int)
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_TEST
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2: com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryonet.rmi.RemoteObject getRemoteObject(com.esotericsoftware.kryonet.Connection,int,java.lang.Class[])
com.esotericsoftware.kryo.serializers.BlowfishSerializer: javax.crypto.Cipher getCipher(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.math.Plane: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: float u2
com.badlogic.gdx.math.Interpolation$ExpOut: float apply(float)
com.badlogic.gdx.scenes.scene2d.actions.EventAction: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean forwardPressed
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int getMaxVertices()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CapsuleShapeBuilder: CapsuleShapeBuilder()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean clamp
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glPolygonOffset(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int D
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: boolean isMRT
androidx.appcompat.widget.AppCompatSpinner: void setPrompt(java.lang.CharSequence)
com.badlogic.gdx.math.Interpolation$8: float apply(float)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float offsetY
androidx.recyclerview.widget.RecyclerView: int getItemDecorationCount()
androidx.appcompat.widget.DropDownListView: void setListSelectionHidden(boolean)
androidx.fragment.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)
com.badlogic.gdx.net.NetJavaImpl$2: com.badlogic.gdx.Net$HttpRequest val$httpRequest
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: void setUseShortestDirection(boolean)
com.badlogic.gdx.graphics.glutils.GLVersion: int minorVersion
com.badlogic.gdx.utils.ObjectIntMap: int PRIME2
com.badlogic.gdx.Input$Keys: int DPAD_RIGHT
com.badlogic.gdx.math.Ellipse: void set(com.badlogic.gdx.math.Circle)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void remove()
com.google.android.material.card.MaterialCardView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.compression.lz.BinTree: void SetCutValue(int)
com.badlogic.gdx.scenes.scene2d.Group
com.badlogic.gdx.maps.MapLayer: boolean isVisible()
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES
com.badlogic.gdx.utils.Scaling$1
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: int getUsage()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void remove(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOn
com.badlogic.gdx.utils.SharedLibraryLoader: void extractFileTo(java.lang.String,java.io.File)
com.badlogic.gdx.graphics.GLTexture: void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.math.WindowedMean: int getValueCount()
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOffDisabled
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: boolean hasPackedStencilDepthRenderBuffer
com.badlogic.gdx.Input$Keys: int EQUALS
com.badlogic.gdx.backends.android.AndroidNet: void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.SnapshotArray: void end()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Vary
com.badlogic.gdx.utils.PropertiesUtils: void load(com.badlogic.gdx.utils.ObjectMap,java.io.Reader)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VelocityStrengthDiffOffset
com.badlogic.gdx.maps.tiled.TiledMap: void dispose()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
com.badlogic.gdx.graphics.g2d.Sprite: float x
com.badlogic.gdx.math.Polygon: boolean contains(float,float)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 mul(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.net.HttpStatus: int SC_PRECONDITION_FAILED
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: float unpressedOffsetY
com.esotericsoftware.kryo.factories.PseudoSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature[] values()
com.esotericsoftware.kryo.io.Input: int read(byte[])
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType Point
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide PositiveZ
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void updateVisualScroll()
com.badlogic.gdx.net.HttpStatus: int SC_NOT_FOUND
com.google.android.datatransport.cct.CctBackendFactory
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: boolean hidden
com.badlogic.gdx.maps.objects.TextureMapObject: float originX
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder _highCoder
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue()
com.badlogic.gdx.utils.compression.lz.InWindow: void ReadBlock()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: AndroidLiveWallpaperService$AndroidWallpaperEngine(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService)
com.badlogic.gdx.utils.Pools: java.lang.Object obtain(java.lang.Class)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2: AndroidLiveWallpaperService$AndroidWallpaperEngine$2(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float areaHeight
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute)
com.badlogic.gdx.scenes.scene2d.ui.Value$7: Value$7(float)
com.badlogic.gdx.graphics.glutils.ETC1: int getWidthPKM(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.glutils.MipMapGenerator: void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: void toBitmap(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: float value
com.badlogic.gdx.backends.android.AndroidDaydream: void initialize(com.badlogic.gdx.ApplicationListener)
com.badlogic.gdx.utils.BufferUtils: void clear(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.g2d.Batch: float getPackedColor()
com.badlogic.gdx.utils.ComparableTimSort: void sort(java.lang.Object[],int,int)
com.badlogic.gdx.graphics.glutils.VertexArray: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(int,int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float)
com.google.android.material.internal.FlowLayout: int getItemSpacing()
com.badlogic.gdx.graphics.g2d.NinePatch: float padLeft
com.badlogic.gdx.graphics.profiling.GLInterceptor: int textureBindings
com.badlogic.gdx.scenes.scene2d.Stage: Stage()
com.badlogic.gdx.utils.OrderedMap: com.badlogic.gdx.utils.ObjectMap$Entries iterator()
com.badlogic.gdx.physics.box2d.Body: void jniSetSleepingAllowed(long,boolean)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 l_vey
com.badlogic.gdx.graphics.PixmapIO$CIM: int BUFFER_SIZE
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder this$1
com.badlogic.gdx.backends.android.AndroidGL30: void glDrawArraysInstanced(int,int,int,int)
com.esotericsoftware.jsonbeans.JsonValue: int size
com.badlogic.gdx.utils.SharedLibraryLoader: java.io.InputStream readFile(java.lang.String)
com.badlogic.gdx.graphics.GL30: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
androidx.appcompat.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.Pixmap: void drawCircle(int,int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter normalTexture
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void vertex(float,float,float)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.ApplicationLogger getApplicationLogger()
com.badlogic.gdx.utils.OrderedMap: com.badlogic.gdx.utils.Array keys
com.esotericsoftware.kryo.util.IntMap$Keys: int next()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidMusic: void setPosition(float)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.glutils.GLVersion: int releaseVersion
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: FreeType$GlyphMetrics(long)
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: long timeStamp
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class,int)
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.graphics.Texture)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void b(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteProgram(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: int height
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float,float,float)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setShrinkMotionSpecResource(int)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField
com.badlogic.gdx.math.Vector2: float dot(float,float)
com.badlogic.gdx.physics.box2d.Body: void destroyFixture(com.badlogic.gdx.physics.box2d.Fixture)
com.badlogic.gdx.maps.objects.TextureMapObject: void setX(float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void onCreateApplication()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer
com.badlogic.gdx.scenes.scene2d.ui.Value$9
com.badlogic.gdx.graphics.g3d.Attributes: void set(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.utils.ArrayMap: void putAll(com.badlogic.gdx.utils.ArrayMap)
com.badlogic.gdx.utils.BooleanArray: void add(boolean)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: int mWidth
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: boolean act(float)
com.badlogic.gdx.utils.IntSet: boolean remove(int)
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.math.Rectangle bounds
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: void setPixelSizes(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Value$7: float val$percent
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: boolean onTouch(android.view.View,android.view.MotionEvent)
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool renderablesPool
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String stringValue
com.HyperSphere.Connection.PacketObjects.Misc.Item: long value
com.esotericsoftware.minlog.Log: int level
com.badlogic.gdx.graphics.GL20: int GL_DECR
com.badlogic.gdx.graphics.glutils.ShapeRenderer: boolean matrixDirty
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value()
com.badlogic.gdx.backends.android.ZipResourceFile: java.io.InputStream getInputStream(java.lang.String)
com.badlogic.gdx.utils.BinaryHeap$Node: java.lang.String toString()
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.FPSLogger: long startTime
androidx.recyclerview.widget.StaggeredGridLayoutManager
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: float referenceAngle
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.minlog.Log: void WARN()
com.badlogic.gdx.utils.BufferUtils: int allocatedUnsafe
com.badlogic.gdx.utils.I18NBundle: boolean checkFileExistence(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.scenes.scene2d.ui.Stack: float getMaxWidth()
com.badlogic.gdx.backends.android.APKExpansionSupport: java.lang.String[] getAPKExpansionFiles(android.content.Context,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDepthRangef(float,float)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean programmaticChangeEvents
com.badlogic.gdx.utils.LittleEndianInputStream: int skipBytes(int)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: void UpdateTable(int)
com.badlogic.gdx.physics.box2d.PolygonShape: com.badlogic.gdx.physics.box2d.Shape$Type getType()
com.badlogic.gdx.graphics.GL20: int GL_GREEN_BITS
com.badlogic.gdx.graphics.g2d.Animation: boolean isAnimationFinished(float)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: long tapCountInterval
com.esotericsoftware.jsonbeans.Json: java.lang.String toJson(java.lang.Object)
com.esotericsoftware.kryo.io.ByteBufferInput: int readByteUnsigned()
com.badlogic.gdx.utils.ObjectMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.graphics.g3d.Attribute: Attribute(long)
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues: void remove()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setMinHeight(float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mHaveEglContext
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver: ExternalFileHandleResolver()
com.badlogic.gdx.utils.ObjectIntMap$Entries: void remove()
com.badlogic.gdx.backends.android.AndroidGraphics: void setResizable(boolean)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: GestureDetector$VelocityTracker()
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setSearchView(androidx.appcompat.widget.SearchView)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: com.badlogic.gdx.scenes.scene2d.Action action
com.badlogic.gdx.math.Polyline: Polyline(float[])
com.badlogic.gdx.utils.compression.lzma.Encoder: int kNumOpts
com.badlogic.gdx.scenes.scene2d.Actor: void setStage(com.badlogic.gdx.scenes.scene2d.Stage)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getHintTextColor()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform ambientUVTransform
com.badlogic.gdx.assets.RefCountedContainer: RefCountedContainer(java.lang.Object)
com.badlogic.gdx.graphics.GL30: void glPolygonOffset(float,float)
com.badlogic.gdx.graphics.GL30: int GL_INT_SAMPLER_CUBE
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle: Label$LabelStyle()
com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType[] values()
com.badlogic.gdx.math.Rectangle: float getX()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHoriBearingX()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Actor debug()
com.google.android.material.bottomappbar.BottomAppBar: void setFabAlignmentMode(int)
com.badlogic.gdx.Input$Keys: int HEADSETHOOK
com.badlogic.gdx.graphics.Texture: Texture(java.lang.String)
com.badlogic.gdx.maps.MapObjects: com.badlogic.gdx.maps.MapObject get(java.lang.String)
com.badlogic.gdx.utils.StringBuilder: void trimToSize()
com.esotericsoftware.kryo.util.UnsafeUtil$1: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: long length()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage,com.badlogic.gdx.scenes.scene2d.Action)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput(java.io.InputStream,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue
com.esotericsoftware.kryo.util.IdentityMap$Values: java.util.ArrayList toArray()
com.google.android.material.card.MaterialCardView: void setStrokeColor(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int pointLightsColorOffset
com.badlogic.gdx.graphics.VertexAttribute: boolean equals(com.badlogic.gdx.graphics.VertexAttribute)
com.esotericsoftware.jsonbeans.JsonValue: boolean getBoolean(java.lang.String,boolean)
com.esotericsoftware.kryo.util.IdentityMap: com.esotericsoftware.kryo.util.IdentityMap$Keys keys()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int touched
com.badlogic.gdx.utils.compression.Lzma$CommandLine: java.lang.String InFile
com.badlogic.gdx.graphics.g3d.Attributes: int compareTo(java.lang.Object)
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter: int compare(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Renderable)
com.HyperSphere.Connection.PacketObjects.Entities.Monster
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int currentId
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int t
com.fasterxml.jackson.annotation.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void renderBodies(com.badlogic.gdx.physics.box2d.World)
com.badlogic.gdx.Graphics$BufferFormat: java.lang.String toString()
com.badlogic.gdx.math.Plane: void set(float,float,float,float)
com.badlogic.gdx.utils.ShortArray: void sort()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isForceScrollX()
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void start()
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.TextureArrayData$Factory
com.badlogic.gdx.math.MathUtils: int random(int)
androidx.appcompat.widget.Toolbar: void setTitleMarginEnd(int)
com.badlogic.gdx.math.collision.BoundingBox: boolean isValid()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute
com.badlogic.gdx.utils.Json: java.lang.String prettyPrint(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.Actor: void setName(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.utils.IntIntMap indicesMap
com.badlogic.gdx.Input$Keys: int SOFT_RIGHT
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void ensureCapacity(int)
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop this$0
com.badlogic.gdx.scenes.scene2d.Actor: float getY()
com.badlogic.gdx.scenes.scene2d.Actor: java.lang.Object getUserObject()
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.utils.Array)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int d
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: boolean touchDragged(int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean getToggle()
com.esotericsoftware.jsonbeans.Json: void writeField(java.lang.Object,java.lang.String,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.utils.StringBuilder getText()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: int texture
com.badlogic.gdx.backends.android.ZipResourceFile: java.util.HashMap mHashMap
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.math.Vector3 scale
com.badlogic.gdx.Input$Keys: int NUMPAD_8
com.badlogic.gdx.physics.box2d.Manifold: long addr
com.badlogic.gdx.net.NetJavaServerSocketImpl: java.net.ServerSocket server
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void deleteVAO()
com.badlogic.gdx.scenes.scene2d.ui.Button$1: void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.graphics.GL30: void glLineWidth(float)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: ParticleShader$Config(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type WebGL
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup expand(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_SUPER
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetEnd()
com.badlogic.gdx.backends.android.AndroidSound: long play(float,float,float)
com.badlogic.gdx.graphics.GL20: void glFlush()
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidFiles: java.lang.String getLocalStoragePath()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.AndroidInput: int[] touchY
com.badlogic.gdx.graphics.Pixmap: void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending)
com.badlogic.gdx.utils.IntFloatMap$Keys: void remove()
com.badlogic.gdx.utils.TimSort: void sort(java.lang.Object[],int,int,java.util.Comparator)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getEndIconDrawable()
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Origin
com.badlogic.gdx.Version: Version()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean isPressed()
com.badlogic.gdx.math.RandomXS128: RandomXS128()
androidx.appcompat.widget.SearchView: androidx.cursoradapter.widget.CursorAdapter getSuggestionsAdapter()
com.badlogic.gdx.graphics.GL20: int GL_DYNAMIC_DRAW
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeAscii(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.badlogic.gdx.math.Frustum: void update(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.GL30: void glTexParameterf(int,int,float)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row
com.badlogic.gdx.graphics.glutils.FileTextureData: int getHeight()
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: java.lang.String EnvironmentMapAlias
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$Monitor[] getMonitors()
com.badlogic.gdx.backends.android.AndroidInput$3: java.lang.String val$hint
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean setFieldsAsAccessible
com.badlogic.gdx.graphics.GL30: int GL_PIXEL_UNPACK_BUFFER_BINDING
com.badlogic.gdx.graphics.g2d.SpriteBatch: int getBlendDstFuncAlpha()
com.badlogic.gdx.scenes.scene2d.ui.Slider: void setVisualInterpolationInverse(com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.input.RemoteInput$EventTrigger: com.badlogic.gdx.input.RemoteInput$TouchEvent touchEvent
com.badlogic.gdx.utils.ObjectFloatMap
com.badlogic.gdx.utils.Logger: void debug(java.lang.String,java.lang.Exception)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: BatchTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int cursorLine
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.utils.Drawable getExpandIcon(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node,float)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int Algorithm
com.badlogic.gdx.graphics.GL30: int GL_SYNC_FENCE
com.badlogic.gdx.utils.Predicate$PredicateIterator: java.lang.Object next()
com.badlogic.gdx.net.HttpStatus: int SC_TEMPORARY_REDIRECT
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: com.badlogic.gdx.scenes.scene2d.ui.List list
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: DynamicsModifier$Rotational2D(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D)
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.utils.RenderableSorter sorter
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType[] $VALUES
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1
com.badlogic.gdx.scenes.scene2d.Event: boolean isCapture()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.Actor previousScrollFocus
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling fill
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container fill()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: com.badlogic.gdx.graphics.g3d.particles.ParticleEffect loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter)
com.badlogic.gdx.graphics.Mesh: void invalidateAllMeshes(com.badlogic.gdx.Application)
com.badlogic.gdx.utils.OrderedSet: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getGravity()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.IntArray tempArray
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: float getAmountX()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttribIPointer(int,int,int,int,int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetMaxMotorTorque(long)
com.esotericsoftware.kryo.io.Output: long total()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1: java.lang.Object newObject()
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: boolean canCheck(com.badlogic.gdx.scenes.scene2d.ui.Button,boolean)
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.utils.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setPosition(float,float,float)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1
com.badlogic.gdx.graphics.Mesh: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.google.android.material.floatingactionbutton.FloatingActionButton: void setUseCompatPadding(boolean)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float distX
com.badlogic.gdx.graphics.GL20
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IINC
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 triangleCircumcenter(float,float,float,float,float,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Rectangle
com.badlogic.gdx.maps.objects.RectangleMapObject: com.badlogic.gdx.math.Rectangle getRectangle()
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: PixmapPacker$PixmapPackerRectangle(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: void removeArray(int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int packedWidth
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters: com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preRotateRad(float)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void initialize()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.SnapshotArray lifecycleListeners
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField: UnsafeCacheFields$UnsafeLongField(java.lang.reflect.Field)
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.io.Reader)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int getDrawCalls()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String TransferEncoding
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.graphics.Camera getCamera()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: SequenceAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.GL20: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int Backs2
com.badlogic.gdx.utils.IdentityMap: int capacity
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_SIZE
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.utils.Array getAssetDescriptors()
com.esotericsoftware.kryo.io.UnsafeOutput: void writeDoubles(double[])
androidx.lifecycle.LiveData$LifecycleBoundObserver
com.badlogic.gdx.graphics.GL20: void glStencilOp(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debug
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_key_offsets_0()
com.badlogic.gdx.input.GestureDetector$GestureListener: void pinchStop()
com.badlogic.gdx.maps.objects.RectangleMapObject: RectangleMapObject()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: MethodVisitor(int)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: void Create(int,int)
com.badlogic.gdx.scenes.scene2d.utils.Layout: float getMinHeight()
com.esotericsoftware.kryonet.Listener$LagListener: void queue(java.lang.Runnable)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 rot(com.badlogic.gdx.math.Matrix4)
androidx.appcompat.widget.AppCompatImageView: void setImageResource(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: boolean relative
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void polyline(float[],int,int)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long AmbientLight
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: long lastTapTime
com.badlogic.gdx.graphics.glutils.ShapeRenderer: float defaultRectLineWidth
com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField: ObjectField$ObjectFloatField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: com.badlogic.gdx.graphics.g3d.Model model
com.badlogic.gdx.graphics.g3d.particles.ParticleController: float deltaTimeSqr
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter C
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean isDisabled()
com.google.android.material.card.MaterialCardView: android.content.res.ColorStateList getCardForegroundColor()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: java.nio.FloatBuffer getBuffer()
com.badlogic.gdx.graphics.GL20: int GL_ELEMENT_ARRAY_BUFFER_BINDING
com.badlogic.gdx.utils.PooledLinkedList: com.badlogic.gdx.utils.PooledLinkedList$Item curr
com.badlogic.gdx.graphics.glutils.IndexArray
com.badlogic.gdx.scenes.scene2d.Stage: boolean mouseMoved(int,int)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void setLength(float)
com.badlogic.gdx.utils.JsonValue: long getLong(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput: float[] R
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup bottom()
com.badlogic.gdx.utils.reflect.Field: boolean isPublic()
com.badlogic.gdx.utils.BufferUtils: void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4,int)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser
com.badlogic.gdx.graphics.Cubemap: java.lang.String getManagedStatus()
com.badlogic.gdx.math.Vector2: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Keys keys2
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void moveCursor(boolean,boolean)
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider: DefaultShaderProvider(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int kEncode
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])
com.badlogic.gdx.Graphics$BufferFormat
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.scenes.scene2d.Actor: boolean clipBegin()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container bottom()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.reflectasm.ConstructorAccess: boolean isNonStaticMemberClass
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ISHR
com.esotericsoftware.kryo.util.IdentityMap: int hash2(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: java.lang.String defaultFragmentShader
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetTarget(long,float,float)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.Texture,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor ParticleController
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isArray(java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: java.lang.String getDefaultFragmentShader()
com.badlogic.gdx.physics.box2d.Body: void setType(com.badlogic.gdx.physics.box2d.BodyDef$BodyType)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer: DefaultSerializers$CollectionsSingletonSetSerializer()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: float[] vertices
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.assets.loaders.BitmapFontLoader
com.esotericsoftware.kryo.Generics: java.lang.Class getConcreteClass(java.lang.String)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glStencilFunc(int,int,int)
com.badlogic.gdx.graphics.GL20: int GL_SHADER_SOURCE_LENGTH
com.badlogic.gdx.utils.compression.lzma.Decoder: int m_PosStateMask
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getPrefHeightValue()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.StreamFactory streamFactory
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
androidx.appcompat.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()
com.badlogic.gdx.graphics.GL30: void glUniform3uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean)
com.badlogic.gdx.utils.ComparableTimSort: java.lang.Object[] a
com.badlogic.gdx.graphics.g2d.NinePatch: int middleCenter
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container fillY()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper mEglHelper
com.badlogic.gdx.utils.DelayedRemovalArray: com.badlogic.gdx.utils.IntArray remove
com.badlogic.gdx.files.FileHandleStream: void copyTo(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDesc
com.esotericsoftware.kryo.io.UnsafeInput: char[] readChars(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void showList()
com.badlogic.gdx.utils.PerformanceCounters: com.badlogic.gdx.utils.Array counters
com.badlogic.gdx.input.GestureDetector: GestureDetector(float,float,float,float,float,com.badlogic.gdx.input.GestureDetector$GestureListener)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int SALOAD
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver: com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas()
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void update(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String log
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.assets.AssetLoaderParameters: AssetLoaderParameters()
com.badlogic.gdx.math.CatmullRomSpline
com.badlogic.gdx.scenes.scene2d.Action: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4$1: Dialog$4$1(com.badlogic.gdx.scenes.scene2d.ui.Dialog$4)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile
com.badlogic.gdx.math.Matrix3: int M01
com.badlogic.gdx.backends.android.AndroidPreferences: java.lang.String getString(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: SelectBox(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Image: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField
com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField
com.badlogic.gdx.utils.BufferUtils: java.nio.LongBuffer newLongBuffer(int)
com.badlogic.gdx.assets.loaders.AssetLoader: AssetLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.math.Vector3: long serialVersionUID
androidx.recyclerview.widget.RecyclerView: void setRecyclerListener(androidx.recyclerview.widget.RecyclerView$RecyclerListener)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Image getImage()
com.badlogic.gdx.utils.TimSort: int INITIAL_TMP_STORAGE_LENGTH
com.google.android.material.transformation.TransformationChildLayout
com.badlogic.gdx.graphics.Mesh: void scale(float,float,float)
com.google.android.material.textfield.MaterialAutoCompleteTextView: java.lang.CharSequence getHint()
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float getStartY()
com.google.android.material.floatingactionbutton.FloatingActionButton: int getCustomSize()
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: FloatAction(float,float)
com.badlogic.gdx.utils.viewport.ExtendViewport: float maxWorldHeight
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int[] valueTable
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: int m_PosMask
com.badlogic.gdx.graphics.Mesh: void getIndices(short[])
androidx.appcompat.widget.AppCompatSpinner$SavedState: android.os.Parcelable$Creator CREATOR
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int yOffset
com.badlogic.gdx.math.Quaternion: long serialVersionUID
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: Encoder$LenEncoder(com.badlogic.gdx.utils.compression.lzma.Encoder)
com.badlogic.gdx.graphics.Pixmap: int getGLFormat()
com.badlogic.gdx.Graphics: void setUndecorated(boolean)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: InstanceBufferObject(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField: UnsafeCacheFields$UnsafeFloatField(java.lang.reflect.Field)
com.badlogic.gdx.backends.android.AndroidSound: void pause(long)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
com.google.android.material.button.MaterialButton: void setChecked(boolean)
com.badlogic.gdx.Graphics: com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
com.badlogic.gdx.backends.android.AndroidGraphics: int width
com.badlogic.gdx.scenes.scene2d.utils.UIUtils
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float getTouchDownX()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraNearFar
com.badlogic.gdx.utils.compression.rangecoder.Encoder: long GetProcessedSizeAdd()
com.badlogic.gdx.graphics.g2d.Sprite: Sprite(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: void reset()
com.badlogic.gdx.utils.Json$Serializable: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty
com.badlogic.gdx.input.RemoteInput$KeyEvent
com.badlogic.gdx.graphics.g2d.PixmapPacker: void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter i
com.badlogic.gdx.utils.ScreenUtils: com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture(int,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController this$0
com.badlogic.gdx.graphics.g3d.decals.DecalBatch
com.badlogic.gdx.utils.ComparableTimSort: int minGallop
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT3
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetMaxMotorForce(long)
com.badlogic.gdx.utils.IdentityMap: void removeStashIndex(int)
com.badlogic.gdx.utils.ObjectMap$MapIterator: void findNextIndex()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.VisibleAction show()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform lerp(com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform,float)
com.badlogic.gdx.utils.XmlReader$Element: int getInt(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.Disableable: void setDisabled(boolean)
com.badlogic.gdx.maps.MapLayer: void setName(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getMaxHeightValue()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: GLSurfaceViewAPI18$EglHelper(java.lang.ref.WeakReference)
androidx.fragment.app.Fragment: java.lang.Object getReturnTransition()
com.esotericsoftware.kryo.serializers.BlowfishSerializer: com.esotericsoftware.kryo.Serializer serializer
com.esotericsoftware.kryo.util.IntMap$Values: boolean hasNext()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
androidx.transition.ChangeBounds$7
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: float getMinWidth()
com.badlogic.gdx.scenes.scene2d.Stage: void setRoot(com.badlogic.gdx.scenes.scene2d.Group)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1: DecalBatch$1(com.badlogic.gdx.graphics.g3d.decals.DecalBatch,int)
com.esotericsoftware.kryonet.FrameworkMessage$RegisterTCP: FrameworkMessage$RegisterTCP()
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean implicitEndRow
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: com.badlogic.gdx.math.Vector2 initialPointer1
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: TextureRegionDrawable(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isMovable()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix4fv(int,int,boolean,float[],int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: boolean isDirect
com.badlogic.gdx.utils.Queue: com.badlogic.gdx.utils.Queue$QueueIterable iterable
com.badlogic.gdx.physics.box2d.RayCastCallback: float reportRayFixture(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
com.esotericsoftware.kryonet.util.ObjectIntMap: void putStash(java.lang.Object,int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: float getTime()
com.google.android.material.card.MaterialCardView: android.content.res.ColorStateList getRippleColor()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: float[] vertices
com.esotericsoftware.kryo.io.OutputChunked: OutputChunked(java.io.OutputStream,int)
com.badlogic.gdx.graphics.GL30: int GL_INT_2_10_10_10_REV
com.badlogic.gdx.utils.compression.lz.BinTree: void MovePos()
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle parent()
com.esotericsoftware.jsonbeans.OutputType: com.esotericsoftware.jsonbeans.OutputType valueOf(java.lang.String)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: void Init()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: RegionInfluencer$Animated()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe: NodeKeyframe(float,java.lang.Object)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String From
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp1
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void setSpringFrequencyHz(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetIntegerv(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float computedPadTop
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Entries entries1
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void addTileObjectGroup(com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element)
androidx.fragment.app.Fragment: void setAllowReturnTransitionOverlap(boolean)
com.badlogic.gdx.math.Polyline: Polyline()
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector tmp
com.badlogic.gdx.math.Rectangle: float getAspectRatio()
androidx.fragment.app.Fragment: androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData
com.badlogic.gdx.graphics.GL20: void glDepthFunc(int)
com.badlogic.gdx.assets.loaders.BitmapFontLoader: BitmapFontLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.scenes.scene2d.actions.AddAction: boolean act(float)
com.badlogic.gdx.scenes.scene2d.ui.Stack
com.esotericsoftware.kryo.io.KryoDataOutput: void writeByte(int)
com.badlogic.gdx.graphics.GL30: boolean glIsVertexArray(int)
com.badlogic.gdx.utils.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 clamp(float,float)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumPosStatesBitsMax
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int a(int,char[],boolean,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int GETFIELD
com.esotericsoftware.kryo.util.ListReferenceResolver: void reset()
com.badlogic.gdx.utils.CharArray: int size
com.badlogic.gdx.math.Bezier: java.lang.Object derivativeAt(java.lang.Object,float)
com.badlogic.gdx.graphics.glutils.VertexData: void dispose()
com.badlogic.gdx.utils.compression.Lzma$CommandLine: boolean Eos
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker: void dispose()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: long readLong(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsDirectionOffset
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean,boolean)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int Backs3
com.badlogic.gdx.graphics.Mesh: void transform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool: com.badlogic.gdx.utils.Array freeMeshes
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly
com.badlogic.gdx.graphics.g3d.decals.Decal: void setRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider: com.badlogic.gdx.utils.Array shaders
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.Logger getLogger()
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(float[])
com.badlogic.gdx.utils.compression.lzma.Encoder: void SetWriteEndMarkerMode(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer: IsometricStaggeredTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch)
com.esotericsoftware.kryo.util.IntMap$MapIterator: IntMap$MapIterator(com.esotericsoftware.kryo.util.IntMap)
com.badlogic.gdx.math.Intersector: boolean intersectSegmentCircle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String[] asStringArray()
com.badlogic.gdx.utils.UBJsonWriter: UBJsonWriter(java.io.OutputStream)
com.badlogic.gdx.utils.SortedIntList: int size()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder
com.HyperSphere.Connection.PacketObjects.Map.MapObject: float scaleX
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: java.util.concurrent.CopyOnWriteArrayList throwables
com.badlogic.gdx.scenes.scene2d.ui.Label: float fontScaleY
com.badlogic.gdx.utils.I18NBundle: void debug(java.lang.String)
com.badlogic.gdx.graphics.glutils.FloatTextureData: FloatTextureData(int,int,int,int,int,boolean)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)
com.badlogic.gdx.assets.loaders.SoundLoader: SoundLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.Input: float getGyroscopeX()
com.badlogic.gdx.utils.TimSort: void pushRun(int,int)
com.badlogic.gdx.physics.box2d.ChainShape: void jniSetNextVertex(long,float,float)
com.esotericsoftware.minlog.Log: void DEBUG()
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsEnabled(int)
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color)
com.google.android.material.internal.NavigationMenuItemView: void setCheckable(boolean)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup columnBottom()
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: ModelInstanceRenderer()
com.google.android.material.transformation.FabTransformationSheetBehavior
androidx.savedstate.Recreator
com.badlogic.gdx.graphics.glutils.HdpiUtils: void glScissor(int,int,int,int)
com.esotericsoftware.kryonet.util.ObjectIntMap: java.lang.Object findKey(int)
com.badlogic.gdx.math.Ellipse: void set(com.badlogic.gdx.math.Ellipse)
com.google.android.material.bottomappbar.BottomAppBar: void setFabCradleMargin(float)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle sibling(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard getOnscreenKeyboard()
com.badlogic.gdx.scenes.scene2d.ui.Label: void setText(java.lang.CharSequence)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F_SAME
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Via
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float)
com.badlogic.gdx.graphics.GL30: int GL_SRGB8
com.esotericsoftware.kryo.serializers.ObjectField: java.lang.Class[] generics
com.badlogic.gdx.assets.loaders.SkinLoader: com.badlogic.gdx.scenes.scene2d.ui.Skin loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void index(short,short,short)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void run()
com.badlogic.gdx.scenes.scene2d.Actor: float getRotation()
com.badlogic.gdx.maps.MapObjects: int getIndex(com.badlogic.gdx.maps.MapObject)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Input getInput()
com.badlogic.gdx.utils.Array: java.lang.Object get(int)
com.badlogic.gdx.physics.box2d.World$2: java.lang.Object newObject()
com.badlogic.gdx.utils.ComparableTimSort: void reverseRange(java.lang.Object[],int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: BillboardParticleBatch(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode,boolean,int,com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute,com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getMaxMotorTorque()
com.badlogic.gdx.graphics.g2d.ParticleEffect: boolean isComplete()
com.badlogic.gdx.graphics.g3d.model.NodeAnimation
com.badlogic.gdx.graphics.g2d.TextureRegion: boolean isFlipY()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int c
com.badlogic.gdx.Gdx: com.badlogic.gdx.Files files
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.utils.FloatArray rowSizes
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.Shader)
com.esotericsoftware.kryo.util.UnsafeUtil: sun.misc.Unsafe _unsafe
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_ROTATION
com.badlogic.gdx.physics.box2d.JointDef
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHoriBearingY()
com.badlogic.gdx.graphics.g2d.Sprite: void setAlpha(float)
com.badlogic.gdx.scenes.scene2d.Group: void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.esotericsoftware.minlog.Log: void info(java.lang.String)
com.badlogic.gdx.math.Intersector$SplitTriangle: float[] front
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getOriginY()
com.esotericsoftware.kryo.util.IntArray: void addAll(com.esotericsoftware.kryo.util.IntArray)
com.badlogic.gdx.net.NetJavaSocketImpl: java.io.OutputStream getOutputStream()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Mask
com.badlogic.gdx.utils.Timer: void clear()
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: DynamicsInfluencer()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Serializer getDefaultSerializer(java.lang.Class)
com.badlogic.gdx.graphics.GL30: int glCreateShader(int)
com.badlogic.gdx.backends.android.AndroidInput: long currentEventTimeStamp
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.esotericsoftware.jsonbeans.JsonSerializer
com.badlogic.gdx.scenes.scene2d.Actor: boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
androidx.navigation.NavControllerViewModel: NavControllerViewModel()
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.graphics.g3d.utils.RenderableSorter sorter
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 localVector
com.badlogic.gdx.graphics.GL30: boolean glIsRenderbuffer(int)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue)
com.badlogic.gdx.utils.JsonValue$JsonIterator: com.badlogic.gdx.utils.JsonValue current
com.badlogic.gdx.utils.SortedIntList: int size
com.badlogic.gdx.utils.Queue: void addLast(java.lang.Object)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: DefaultArraySerializers$FloatArraySerializer()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getSpaceBottom()
com.badlogic.gdx.physics.box2d.Body: void setActive(boolean)
com.badlogic.gdx.Net$HttpRequest: long getContentLength()
com.esotericsoftware.kryo.Kryo: int depth
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.Cubemap)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.utils.UBJsonWriter: boolean named
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue child
com.badlogic.gdx.assets.loaders.SoundLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int Fb
com.badlogic.gdx.graphics.VertexAttribute: int hashCode()
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$GuillotinePage: com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node root
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 obtainV3()
com.esotericsoftware.minlog.Log: boolean WARN
com.badlogic.gdx.math.Intersector
com.badlogic.gdx.graphics.g2d.Sprite: com.badlogic.gdx.graphics.Color getColor()
com.esotericsoftware.kryo.util.IntMap: int hash2(int)
com.google.android.material.chip.Chip: android.content.res.ColorStateList getCheckedIconTint()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: boolean isPrepared
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_projTrans
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog key(int,java.lang.Object)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.assets.loaders.CubemapLoader: CubemapLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField
com.badlogic.gdx.backends.android.AndroidMusic$1: com.badlogic.gdx.backends.android.AndroidMusic this$0
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.Frustum,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: ParallelAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.google.android.material.textfield.TextInputLayout: void setStartIconOnLongClickListener(android.view.View$OnLongClickListener)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell defaults()
com.badlogic.gdx.physics.box2d.Contact: float[] tmp
com.badlogic.gdx.assets.loaders.FileHandleResolver
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Exp exp10
com.badlogic.gdx.math.Interpolation$Pow
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void onDestroy()
com.google.android.material.chip.Chip: void setChipStartPaddingResource(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.badlogic.gdx.scenes.scene2d.ui.List$1: long typeTimeout
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Specular
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int a(java.lang.String,int)
com.badlogic.gdx.utils.BooleanArray: boolean[] items
com.google.android.material.textfield.TextInputLayout: void setTypeface(android.graphics.Typeface)
com.badlogic.gdx.backends.android.AndroidSound: void setPan(long,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
com.esotericsoftware.kryo.io.ByteBufferInput: short readShort()
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegionY(int)
com.badlogic.gdx.physics.box2d.Body: void jniGetLinearVelocityFromLocalPoint(long,float,float,float[])
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: float lowMax
com.badlogic.gdx.scenes.scene2d.Event: com.badlogic.gdx.scenes.scene2d.Stage stage
com.badlogic.gdx.utils.viewport.StretchViewport
com.badlogic.gdx.net.HttpStatus: int statusCode
com.badlogic.gdx.math.Matrix4: Matrix4(float[])
com.esotericsoftware.kryo.io.InputChunked: void nextChunks()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String FogAlias
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.reflect.TypeVariable[] typeParameters
com.badlogic.gdx.utils.IntIntMap$MapIterator: void findNextIndex()
com.badlogic.gdx.graphics.GL20: int GL_REPLACE
com.badlogic.gdx.physics.box2d.Manifold: Manifold(long)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: int uvIndex
androidx.fragment.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)
com.badlogic.gdx.utils.IntFloatMap: float zeroValue
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float,float,float)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter name(java.lang.String)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.Renderable getRenderable(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.utils.ObjectMap$Entries: void reset()
com.badlogic.gdx.Input$Keys: int NOTIFICATION
com.badlogic.gdx.utils.Align
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner000(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getParentFragment()
com.badlogic.gdx.InputProcessor: boolean keyDown(int)
com.badlogic.gdx.graphics.GL30: int GL_MAX_ARRAY_TEXTURE_LAYERS
androidx.fragment.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: int usage
com.google.android.material.textfield.TextInputLayout: int getBoxStrokeWidth()
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegion(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: DragListener()
com.badlogic.gdx.graphics.g3d.Attributes: int size()
com.badlogic.gdx.utils.IntIntMap: IntIntMap(com.badlogic.gdx.utils.IntIntMap)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling fillX
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_5_9_9_9_REV
com.badlogic.gdx.utils.reflect.Method: com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void setPathData(androidx.core.graphics.PathParser$PathDataNode[])
com.esotericsoftware.kryonet.rmi.ObjectSpace$CachedMethod: java.lang.reflect.Method method
com.badlogic.gdx.backends.android.AndroidZipFileHandle: long fdLength
com.badlogic.gdx.input.RemoteInput: long getCurrentEventTime()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: ModelBuilder()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.Image getImage()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: ImageButton(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: void init()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle,java.lang.Object[])
com.google.android.material.radiobutton.MaterialRadioButton
com.badlogic.gdx.backends.android.AndroidInput$2: com.badlogic.gdx.backends.android.AndroidInput$TouchEvent newObject()
com.badlogic.gdx.scenes.scene2d.actions.EventAction: boolean result
androidx.coordinatorlayout.widget.CoordinatorLayout: int getSuggestedMinimumWidth()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.utils.Array getLayouts()
androidx.fragment.app.Fragment: void performPictureInPictureModeChanged(boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: boolean flip
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue require(java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createNormal(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LSTORE
com.badlogic.gdx.utils.Array: int size
com.badlogic.gdx.math.Ellipse: Ellipse()
com.badlogic.gdx.graphics.g2d.NinePatch: int MIDDLE_RIGHT
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool: java.lang.Object obtain()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: DefaultSerializers$StringBuilderSerializer()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: void setText(java.lang.CharSequence)
com.esotericsoftware.jsonbeans.Json: void readField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class,com.esotericsoftware.jsonbeans.JsonValue)
androidx.appcompat.view.menu.ActionMenuItemView
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: com.esotericsoftware.kryo.serializers.JavaSerializer getCachedSerializer(java.lang.Class)
com.badlogic.gdx.Input$Keys: void initializeKeyNames()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: void dispose()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.model.Node node()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap)
com.badlogic.gdx.scenes.scene2d.ui.Skin$2: com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: ImageButton$ImageButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.utils.FloatArray: FloatArray()
com.badlogic.gdx.scenes.scene2d.ui.Window$3: float startY
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 translate(float,float)
com.badlogic.gdx.scenes.scene2d.ui.Label: java.lang.String toString()
com.esotericsoftware.kryo.Kryo: org.objenesis.strategy.InstantiatorStrategy getInstantiatorStrategy()
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer lefti
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector setToRandomDirection()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.Clipboard getClipboard()
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBlendFuncSeparate(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.esotericsoftware.kryo.serializers.MapSerializer: java.lang.Class valueClass
com.badlogic.gdx.graphics.GL30: void glBindAttribLocation(int,int,java.lang.String)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph)
com.badlogic.gdx.input.RemoteInput$RemoteInputListener
com.esotericsoftware.jsonbeans.Json: java.lang.String prettyPrint(java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LSHR
com.google.android.material.chip.Chip: void setChipStartPadding(float)
com.esotericsoftware.jsonbeans.JsonReader: void startObject(java.lang.String)
com.badlogic.gdx.maps.MapRenderer: void render(int[])
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup pad(float)
com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer: CompatibleFieldSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidGL20: void glSampleCoverage(float,boolean)
com.badlogic.gdx.graphics.g3d.Attributes: int compare(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.math.Vector3
com.esotericsoftware.jsonbeans.Json: void readFields(java.lang.Object,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$SwingIn swingIn
com.esotericsoftware.kryo.util.IdentityMap: int hash3(int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void render(int[])
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.graphics.g2d.ParticleEmitter newEmitter(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: MotorJointDef()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onResume()
com.badlogic.gdx.physics.box2d.Body: long jniCreateFixture(long,long,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: void dispose()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: boolean DEBUG
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type CHAR_TYPE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int getMaxStringLength()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int[] splits
com.badlogic.gdx.utils.Json: boolean quoteLongValues
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: void dispose()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter E
com.esotericsoftware.kryo.util.Util: int getDimensionCount(java.lang.Class)
com.badlogic.gdx.physics.box2d.Contact: long addr
com.badlogic.gdx.InputEventQueue: boolean mouseMoved(int,int)
com.badlogic.gdx.math.Polygon: float getOriginX()
com.badlogic.gdx.utils.ObjectFloatMap$Keys: ObjectFloatMap$Keys(com.badlogic.gdx.utils.ObjectFloatMap)
com.badlogic.gdx.math.Matrix4: int M32
com.badlogic.gdx.utils.LongMap: boolean containsKeyStash(long)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void begin()
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: DefaultRenderableSorter()
com.esotericsoftware.kryo.util.ObjectMap$Keys: void remove()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float,float,float)
com.badlogic.gdx.graphics.g2d.Sprite: void translate(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int a(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void putVertex(float[],int,com.badlogic.gdx.math.Vector3,float,float,float,float,float,float)
com.badlogic.gdx.graphics.Camera: void translate(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.compression.lzma.Encoder: int kDefaultDictionaryLogSize
com.badlogic.gdx.graphics.GL30: int GL_R8I
com.badlogic.gdx.graphics.profiling.GLInterceptor: int calls
com.badlogic.gdx.scenes.scene2d.ui.Label: float getFontScaleX()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: void setKerning(int,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateX()
com.badlogic.gdx.scenes.scene2d.actions.AddAction: AddAction()
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.net.HttpParametersUtils: java.lang.String defaultEncoding
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void setUsage(int)
com.badlogic.gdx.graphics.GL30: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: float colorPacked
com.badlogic.gdx.utils.ObjectIntMap$Entries: com.badlogic.gdx.utils.ObjectIntMap$Entries iterator()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteTransformFeedbacks(int,int[],int)
com.badlogic.gdx.graphics.g2d.TextureRegion: void scroll(float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_PAUSE_RESUME
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean lighting
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: float end
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object get(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttribDivisor(int,int)
com.badlogic.gdx.utils.PooledLinkedList: java.lang.Object removeLast()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: char[] breakChars
com.badlogic.gdx.utils.IntIntMap: void shrink(int)
com.esotericsoftware.kryo.io.Input: long[] readLongs(int)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int size
com.badlogic.gdx.utils.PerformanceCounters: com.badlogic.gdx.utils.StringBuilder toString(com.badlogic.gdx.utils.StringBuilder)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int getDepthBufferHandle()
com.badlogic.gdx.math.Interpolation$BounceOut: Interpolation$BounceOut(int)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion mul(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer: PixmapIO$PNG$ChunkBuffer(int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float y1
com.esotericsoftware.kryo.util.ObjectMap$Values: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.ui.Container: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.GL20: int GL_BLEND_DST_ALPHA
com.badlogic.gdx.utils.ObjectFloatMap$Entry: ObjectFloatMap$Entry()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: android.content.Context getContext()
com.badlogic.gdx.assets.loaders.MusicLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToRotation(com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_BLUE_SIZE
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setSelection(int,int)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1: Kryo$DefaultInstantiatorStrategy$1(com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy,com.esotericsoftware.reflectasm.ConstructorAccess,java.lang.Class)
com.badlogic.gdx.utils.Pool
com.badlogic.gdx.physics.box2d.FixtureDef: com.badlogic.gdx.physics.box2d.Shape shape
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: com.esotericsoftware.kryonet.Listener responseListener
com.badlogic.gdx.graphics.Camera: void rotate(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh updateVertices(int,float[],int,int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: float yOffsetStep
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getObjectType(java.lang.String)
com.esotericsoftware.jsonbeans.Json: java.lang.String convertToString(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2: com.badlogic.gdx.scenes.scene2d.ui.Tree this$0
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDetachShader(int,int)
com.badlogic.gdx.Input: int getMaxPointers()
com.badlogic.gdx.utils.reflect.ArrayReflection: ArrayReflection()
com.badlogic.gdx.utils.ByteArray: byte random()
com.badlogic.gdx.graphics.g2d.Animation: Animation(float,com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.g2d.Animation$PlayMode)
com.badlogic.gdx.backends.android.AndroidVisibilityListener: void createListener(com.badlogic.gdx.backends.android.AndroidApplicationBase)
androidx.recyclerview.widget.RecyclerView: void setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.PorterDuff$Mode getBackgroundTintMode()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.math.Vector3 getTranslationAtTime(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float,com.badlogic.gdx.math.Vector3)
androidx.fragment.app.Fragment: android.view.View getView()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: DefaultArraySerializers$DoubleArraySerializer()
com.badlogic.gdx.backends.android.AndroidFileHandle: java.io.File file()
com.badlogic.gdx.graphics.GLTexture: int getDepth()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_EMISSIVE
com.HyperSphere.Connection.PacketObjects.Misc.AlterableKey: AlterableKey()
com.badlogic.gdx.math.MathUtils: float randomTriangular()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glReleaseShaderCompiler()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String)
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: WeldJointDef()
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode getBlendMode()
com.badlogic.gdx.utils.SortedIntList: com.badlogic.gdx.utils.SortedIntList$NodePool nodePool
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer: java.lang.Byte read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.Batch: void enableBlending()
com.badlogic.gdx.scenes.scene2d.InputEvent: void setStageY(float)
com.badlogic.gdx.graphics.GL30: int GL_MAX_VERTEX_OUTPUT_COMPONENTS
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float)
com.badlogic.gdx.graphics.GLTexture: void dispose()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.physics.box2d.Fixture: void jniRefilter(long)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color fromHsv(float,float,float)
androidx.appcompat.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: boolean a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter,int,byte[])
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle style
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleContentDescription(java.lang.CharSequence)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer
androidx.core.app.CoreComponentFactory
com.badlogic.gdx.backends.android.AndroidInput$3: com.badlogic.gdx.backends.android.AndroidInput this$0
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue remove(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGraphics: android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void dispose()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.ShortArray: void shuffle()
com.badlogic.gdx.graphics.GL20: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.Json$ReadOnlySerializer: void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.math.Vector3: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: FreeTypeFontGenerator$FreeTypeBitmapFontData()
com.badlogic.gdx.backends.android.AndroidGL20: void glDrawArrays(int,int,int)
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Serialization getSerialization()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int colSize
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidInput: boolean isButtonPressed(int)
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isDragging()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: com.badlogic.gdx.math.Vector3 TMP_V1
com.badlogic.gdx.utils.ObjectSet: void addStash(java.lang.Object)
com.badlogic.gdx.utils.IntMap: java.lang.Object get(int,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool: com.badlogic.gdx.graphics.g3d.particles.ParticleController newObject()
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: com.badlogic.gdx.math.Vector3 scale
com.badlogic.gdx.physics.box2d.World: long[] contactAddrs
com.esotericsoftware.kryo.util.IdentityMap: boolean containsValue(java.lang.Object,boolean)
com.esotericsoftware.kryo.Kryo: int lowPriorityDefaultSerializerCount
com.badlogic.gdx.utils.JsonValue: double asDouble()
com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature[] values()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: float unpressedOffsetX
com.badlogic.gdx.scenes.scene2d.ui.List: void clearItems()
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.math.Matrix4 getProjViewTrans()
com.badlogic.gdx.utils.IntFloatMap: int hashCode()
com.badlogic.gdx.physics.box2d.joints.WeldJointDef
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getRotation()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean hScrollOnBottom
com.badlogic.gdx.math.Interpolation$Elastic: float scale
com.badlogic.gdx.utils.IdentityMap: java.lang.Object findKey(java.lang.Object,boolean)
com.badlogic.gdx.utils.CharArray: com.badlogic.gdx.utils.CharArray with(char[])
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy
com.badlogic.gdx.files.FileHandleStream: long length()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
com.badlogic.gdx.backends.android.AndroidGL20: void glDetachShader(int,int)
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator: OrderedSet$OrderedSetIterator(com.badlogic.gdx.utils.OrderedSet)
com.badlogic.gdx.physics.box2d.Fixture: Fixture(com.badlogic.gdx.physics.box2d.Body,long)
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: com.badlogic.gdx.net.HttpStatus status
com.badlogic.gdx.graphics.g2d.PolygonSprite: PolygonSprite(com.badlogic.gdx.graphics.g2d.PolygonSprite)
com.badlogic.gdx.physics.box2d.Fixture: int jniGetType(long)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide
com.badlogic.gdx.backends.android.ZipResourceFile: int kZipEntryAdj
com.badlogic.gdx.scenes.scene2d.Actor: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.Input$Keys: int F1
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: void disposeColorTexture(com.badlogic.gdx.graphics.Cubemap)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 fromString(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)
com.badlogic.gdx.utils.IntMap$Entry
com.badlogic.gdx.physics.box2d.Fixture: short[] tmp
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.Array getRunnables()
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusTopStart()
com.badlogic.gdx.audio.Sound: void pause()
com.badlogic.gdx.graphics.PerspectiveCamera: PerspectiveCamera(float,float,float)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.view.View initializeForView(com.badlogic.gdx.ApplicationListener)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean)
com.badlogic.gdx.graphics.GL30: int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
com.badlogic.gdx.scenes.scene2d.ui.Button$1: Button$1(com.badlogic.gdx.scenes.scene2d.ui.Button)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: void rotate(com.badlogic.gdx.graphics.g2d.ParticleEffect,float)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeBytes(java.lang.Object,long,long,long)
com.badlogic.gdx.math.GridPoint3
com.esotericsoftware.kryo.io.Output: void writeInt(int)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int[] animationIntervals
com.badlogic.gdx.physics.box2d.World: void setDestructionListener(com.badlogic.gdx.physics.box2d.DestructionListener)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int mRedSize
com.badlogic.gdx.graphics.g2d.BitmapFontCache
com.esotericsoftware.jsonbeans.ObjectMap: int stashSize
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int CPU_UV_OFFSET
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.fragment.app.Fragment: void callStartTransitionListener()
com.badlogic.gdx.graphics.glutils.IndexArray: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.graphics.g2d.SpriteBatch: void enableBlending()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values()
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer: void init()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void allowCompletion()
com.google.android.material.button.MaterialButton: void setInternalBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.input.GestureDetector getGestureDetector()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setIndices(short[],int,int)
com.esotericsoftware.kryonet.KryoSerialization: java.lang.Object read(com.esotericsoftware.kryonet.Connection,java.nio.ByteBuffer)
com.badlogic.gdx.utils.CharArray: void incr(int,char)
com.badlogic.gdx.audio.Sound: void setVolume(long,float)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle
com.HyperSphere.Connection.PacketObjects.Misc.Item: int attackRate
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: float getValue()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeByte(byte)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion(com.badlogic.gdx.graphics.Texture,int,int,int,int)
com.esotericsoftware.kryonet.ConnectionValues
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void setMinWidth(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: void allocateChannels()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int[] e
com.badlogic.gdx.utils.ObjectFloatMap: boolean isEmpty()
com.badlogic.gdx.assets.loaders.TextureLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter)
com.badlogic.gdx.graphics.g2d.Sprite: void setU(float)
androidx.appcompat.widget.SearchView: void setQueryHint(java.lang.CharSequence)
com.esotericsoftware.kryo.io.Input: int readUtf8Length(int)
com.badlogic.gdx.utils.StringBuilder: StringBuilder(java.lang.String)
com.badlogic.gdx.backends.android.AndroidNet: void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.MapSerializer: java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void addTarget(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target)
com.badlogic.gdx.utils.Array: java.lang.Object random()
com.badlogic.gdx.utils.IntFloatMap: int hash3(int)
com.HyperSphere.Connection.PacketObjects.Misc.QuestPage
com.badlogic.gdx.physics.box2d.PolygonShape: float[] verts
com.badlogic.gdx.Application: com.badlogic.gdx.Input getInput()
com.badlogic.gdx.scenes.scene2d.ui.Slider: Slider(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.Array regions
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: boolean vertexTransformationEnabled
com.badlogic.gdx.graphics.GL30: int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.environment.PointLight[] pointLights
com.badlogic.gdx.backends.android.AndroidGraphics: void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)
com.esotericsoftware.jsonbeans.JsonValue: char[] asCharArray()
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectIntMap uniformSizes
com.badlogic.gdx.utils.compression.lzma.Encoder: long[] processedInSize
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: boolean setBatch(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.utils.IdentityMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.Files: com.badlogic.gdx.files.FileHandle classpath(java.lang.String)
com.esotericsoftware.kryo.serializers.MapSerializer: void setValuesCanBeNull(boolean)
com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings: boolean wrapNumericArrays
com.badlogic.gdx.utils.reflect.Field: boolean isAccessible()
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.Array getRunnables()
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE14
com.badlogic.gdx.graphics.g3d.ModelInstance
androidx.recyclerview.widget.RecyclerView: void setPreserveFocusAfterLayout(boolean)
com.badlogic.gdx.utils.IntArray: boolean ordered
com.badlogic.gdx.graphics.GL20: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.TextureRegion getRegion()
com.badlogic.gdx.scenes.scene2d.ui.Window$1: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void dispose()
com.badlogic.gdx.Graphics$BufferFormat: int b
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int c
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glCreateProgram()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 rotate(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
com.badlogic.gdx.math.RandomXS128: double NORM_DOUBLE
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1
androidx.fragment.app.Fragment: androidx.core.app.SharedElementCallback getExitTransitionCallback()
com.esotericsoftware.kryo.io.OutputChunked
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyMapSerializer: DefaultSerializers$CollectionsEmptyMapSerializer()
com.badlogic.gdx.graphics.GL30: int GL_STREAM_READ
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup wrapSpace(float)
com.badlogic.gdx.utils.BufferUtils: void copyJni(char[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getLinearHoriAdvance()
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_32_UNSIGNED_INT_24_8_REV
com.badlogic.gdx.utils.IntFloatMap: boolean containsKeyStash(int)
com.badlogic.gdx.net.HttpStatus: int SC_FAILED_DEPENDENCY
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor valueChannelDescriptor
com.badlogic.gdx.graphics.g3d.environment.SpotLight: float intensity
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.math.CatmullRomSpline: float approximate(com.badlogic.gdx.math.Vector,int,int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float[] tmp
com.badlogic.gdx.utils.IdentityMap: void shrink(int)
com.badlogic.gdx.backends.android.AndroidMusic$1: void run()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector a(int,int)
com.badlogic.gdx.graphics.GL20: int GL_LINE_LOOP
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_RGBA8I
com.badlogic.gdx.graphics.g3d.decals.Decal: void setColor(float,float,float,float)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache: DistanceFieldFont$DistanceFieldFontCache(com.badlogic.gdx.graphics.g2d.DistanceFieldFont)
com.google.android.material.textfield.TextInputLayout: int getHintCurrentCollapsedTextColor()
com.badlogic.gdx.graphics.g3d.model.MeshPart: MeshPart()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: short vertex(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.maps.MapLayer: float renderOffsetY
androidx.lifecycle.SavedStateHandleController$OnRecreation
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean wrap
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getFill()
com.esotericsoftware.kryo.io.UnsafeOutput: int writeLong(long,boolean)
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Values values2
com.badlogic.gdx.graphics.g3d.Material: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] values()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void b(int,int,int)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createDiffuse(float,float,float,float)
com.badlogic.gdx.utils.IntIntMap$MapIterator: void remove()
com.esotericsoftware.jsonbeans.Json: void setTypeName(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: ImageTextButton$ImageTextButtonStyle()
com.badlogic.gdx.math.MathUtils: int SIN_MASK
com.badlogic.gdx.backends.android.AndroidApplication
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitLineNumber(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.utils.LongMap: int PRIME1
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: float getPercentComplete()
com.badlogic.gdx.graphics.GL20: int GL_ELEMENT_ARRAY_BUFFER
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setMinSize(float,float)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int emission
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void addMesh(com.badlogic.gdx.graphics.Mesh,int,int)
com.badlogic.gdx.graphics.GL30: int glGetUniformBlockIndex(int,java.lang.String)
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: boolean isJavaSerializerRequired(java.lang.Class)
com.badlogic.gdx.physics.box2d.Body: java.lang.Object userData
com.badlogic.gdx.scenes.scene2d.ui.Label: void scaleAndComputePrefSize()
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: PolygonRegionLoader()
com.badlogic.gdx.audio.AudioDevice: void writeSamples(short[],int,int)
com.badlogic.gdx.ApplicationAdapter: void dispose()
com.badlogic.gdx.graphics.g2d.PolygonSprite: float scaleX
com.badlogic.gdx.graphics.GL30: void glBindVertexArray(int)
com.esotericsoftware.kryo.io.ByteBufferInput: void rewind()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.Mesh: float calculateRadius(com.badlogic.gdx.math.Vector3,int,int)
com.google.android.material.card.MaterialCardView: android.graphics.RectF getBoundsAsRectF()
com.badlogic.gdx.maps.MapObject: float opacity
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform emissiveUVTransform
com.badlogic.gdx.Input$Keys: int BUTTON_THUMBL
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: UnweightedMeshSpawnShapeValue()
com.badlogic.gdx.utils.Sort: com.badlogic.gdx.utils.Sort instance
com.badlogic.gdx.utils.JsonWriter: void flush()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.utils.SnapshotArray touchFocuses
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void sphere(float,float,float,int,int)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: BatchTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenTransformFeedbacks(int,int[],int)
com.badlogic.gdx.utils.DelayedRemovalArray: void sort()
com.badlogic.gdx.utils.ObjectMap: boolean isEmpty()
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: com.badlogic.gdx.graphics.g3d.attributes.IntAttribute createCullFace(int)
com.badlogic.gdx.InputMultiplexer: boolean scrolled(int)
com.badlogic.gdx.graphics.VertexAttributes$Usage: int ColorUnpacked
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.esotericsoftware.kryo.io.Input: short[] readShorts(int)
com.esotericsoftware.jsonbeans.ReadOnlySerializer: void write(com.esotericsoftware.jsonbeans.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyNodes(com.badlogic.gdx.utils.Array,java.lang.String[])
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float deltaY
com.esotericsoftware.kryonet.util.InputStreamSender: InputStreamSender(java.io.InputStream,int)
com.badlogic.gdx.graphics.GL20: int GL_EQUAL
com.badlogic.gdx.backends.android.AndroidInput: boolean isCursorCatched()
com.esotericsoftware.minlog.Log: int LEVEL_WARN
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager requireFragmentManager()
com.badlogic.gdx.utils.NumberUtils: int floatToRawIntBits(float)
com.google.android.material.bottomappbar.BottomAppBar: float getCradleVerticalOffset()
com.badlogic.gdx.utils.Queue$QueueIterable: com.badlogic.gdx.utils.Queue$QueueIterator iterator2
com.badlogic.gdx.graphics.GL30: void glBindSampler(int,int)
com.badlogic.gdx.utils.BufferUtils: void copy(double[],int,int,java.nio.Buffer)
com.badlogic.gdx.math.Vector3: float z
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.ObjectMap getAttributes()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue spawnShapeValue
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters: boolean flipY
com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void update(float)
com.badlogic.gdx.utils.LongMap$MapIterator: int nextIndex
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float)
com.badlogic.gdx.Net$Protocol: com.badlogic.gdx.Net$Protocol TCP
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode valueOf(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.utils.Pools: void set(java.lang.Class,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.scenes.scene2d.Stage: void setDebugParentUnderMouse(boolean)
com.badlogic.gdx.utils.Queue$QueueIterator
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void end()
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.utils.TextureProvider)
com.badlogic.gdx.graphics.GL20: void glBlendEquation(int)
com.badlogic.gdx.maps.MapObjects
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Values values()
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral Accelerometer
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void useImmersiveMode(boolean)
com.badlogic.gdx.utils.ObjectMap: int PRIME1
com.badlogic.gdx.graphics.VertexAttributes
com.badlogic.gdx.graphics.g2d.Batch: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: CubemapAttribute(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: int engines
com.badlogic.gdx.graphics.g2d.SpriteBatch: int blendSrcFunc
com.badlogic.gdx.graphics.glutils.FloatTextureData: boolean isManaged()
com.badlogic.gdx.utils.compression.lzma.Encoder: void ReleaseOutStream()
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)
com.esotericsoftware.kryo.util.UnsafeUtil: long shortArrayBaseOffset
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int l
com.badlogic.gdx.utils.IdentityMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.IntFloatMap$Entry: java.lang.String toString()
com.badlogic.gdx.utils.viewport.ScreenViewport: float unitsPerPixel
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: byte[] copy(com.esotericsoftware.kryo.Kryo,byte[])
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,double)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(boolean)
com.badlogic.gdx.InputEventQueue: long getCurrentEventTime()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnWidth()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: Handler()
com.badlogic.gdx.math.Plane: Plane(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.Mesh: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.utils.ObjectMap: void putStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: IntAttribute(long,int)
com.badlogic.gdx.graphics.GL20: int GL_VALIDATE_STATUS
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: int writeVarLong(long,boolean)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.Actor: boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.badlogic.gdx.backends.android.AndroidInput$3$2: AndroidInput$3$2(com.badlogic.gdx.backends.android.AndroidInput$3)
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isLinux
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSize(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter viewTrans
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: GLSurfaceViewAPI18$GLThread(java.lang.ref.WeakReference)
com.badlogic.gdx.utils.IntArray: int[] toArray()
androidx.core.widget.NestedScrollView: void setSmoothScrollingEnabled(boolean)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int getCalls()
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void setAnimationIntervals(int[])
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 set(com.badlogic.gdx.math.GridPoint2)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)
com.badlogic.gdx.utils.SharedLibraryLoader: java.util.HashSet loadedLibraries
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.collision.BoundingBox,com.badlogic.gdx.math.Matrix4)
com.esotericsoftware.minlog.Log: int LEVEL_ERROR
com.esotericsoftware.jsonbeans.Json: void writeValue(java.lang.Object,java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.Mark: java.lang.String uniqueID
com.badlogic.gdx.graphics.profiling.GLErrorListener
com.badlogic.gdx.utils.ObjectIntMap
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.utils.Array getRunnables()
com.badlogic.gdx.physics.box2d.joints.GearJointDef: com.badlogic.gdx.physics.box2d.Joint joint2
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType KinematicBody
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGetUniformLocation(int,java.lang.String)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: com.google.android.material.animation.MotionSpec getShrinkMotionSpec()
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Boolean uniformY
com.badlogic.gdx.scenes.scene2d.InputEvent: boolean isTouchFocusCancel()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: android.view.SurfaceHolder getSurfaceHolder()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationalForceChannel
com.badlogic.gdx.backends.android.AndroidDaydream$2
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container pad(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: void setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: void setValue(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: java.lang.String TAG
com.badlogic.gdx.utils.reflect.Method: boolean isDefaultAccess()
com.badlogic.gdx.audio.Music: void pause()
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void end()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 add(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ILOAD
com.badlogic.gdx.utils.FloatArray: void add(float,float,float)
com.badlogic.gdx.utils.ShortArray
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_IsRepG2Decoders
com.esotericsoftware.kryonet.TcpConnection: int currentObjectLength
com.esotericsoftware.kryo.util.IntMap$Entry
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.utils.Array shown
com.badlogic.gdx.graphics.g2d.Batch: void setColor(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1
androidx.recyclerview.widget.RecyclerView: boolean isLayoutSuppressed()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createArrow(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.g3d.Material,long)
androidx.appcompat.widget.Toolbar$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.backends.android.AndroidGL30: void glBeginTransformFeedback(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.math.Matrix4 combinedMatrix
com.badlogic.gdx.physics.box2d.joints.WeldJoint: void jniSetDampingRatio(long,float)
com.badlogic.gdx.math.Intersector: boolean intersectSegmentRectangle(float,float,float,float,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform4fv(int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.List: java.lang.Object getPressedItem()
com.badlogic.gdx.scenes.scene2d.ui.Table: float tableMinWidth
com.esotericsoftware.kryo.io.InputChunked: int fill(byte[],int,int)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.utils.Pool animationPool
com.badlogic.gdx.audio.Music$OnCompletionListener: void onCompletion(com.badlogic.gdx.audio.Music)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.physics.box2d.Body getBodyB()
com.badlogic.gdx.backends.android.AndroidPreferences: java.lang.String getString(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas: java.lang.String[] tuple
com.badlogic.gdx.utils.reflect.Field: java.lang.Class getType()
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: com.badlogic.gdx.scenes.scene2d.utils.Drawable tint(com.badlogic.gdx.graphics.Color)
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior: FloatingActionButton$BaseBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentLocation
com.esotericsoftware.kryonet.Client: void start()
com.badlogic.gdx.InputMultiplexer: void addProcessor(com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Values values()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color SHAPE_AWAKE
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void setRightWidth(float)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: boolean isManaged()
com.badlogic.gdx.backends.android.AndroidInput$3$1$1: void run()
com.esotericsoftware.kryo.io.ByteBufferInput: int readVarInt(boolean)
androidx.fragment.app.Fragment: androidx.loader.app.LoaderManager getLoaderManager()
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void setMinHeight(float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.utils.ObjectFloatMap$Values: void remove()
com.badlogic.gdx.assets.loaders.ParticleEffectLoader
com.badlogic.gdx.graphics.GL20: int GL_ACTIVE_TEXTURE
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void setY(float)
com.badlogic.gdx.math.Polyline: void setScale(float,float)
com.badlogic.gdx.utils.ObjectIntMap$Keys: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
com.badlogic.gdx.scenes.scene2d.ui.Table: void reset()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_3D
com.badlogic.gdx.graphics.profiling.GLInterceptor: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCustomSize(int)
com.badlogic.gdx.utils.compression.lz.BinTree: int _cyclicBufferPos
com.badlogic.gdx.scenes.scene2d.ui.Tree: float prefHeight
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener: void keyboardFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: com.badlogic.gdx.utils.compression.lzma.Decoder this$0
com.badlogic.gdx.math.Matrix4: float[] val
com.badlogic.gdx.utils.Clipboard
com.badlogic.gdx.graphics.g2d.Animation: Animation(float,java.lang.Object[])
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl: com.esotericsoftware.kryo.serializers.FieldSerializer serializer
com.badlogic.gdx.graphics.Color: void rgb888ToColor(com.badlogic.gdx.graphics.Color,int)
com.badlogic.gdx.Application: com.badlogic.gdx.Application$ApplicationType getType()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glRenderbufferStorageMultisample(int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: Dialog(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.math.Vector2 stageToScreenCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL20: int GL_TRIANGLES
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue parse(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: DynamicsModifier$Angular(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont
com.badlogic.gdx.physics.box2d.Fixture: boolean isSensor()
com.google.android.material.chip.Chip: void setChipIconTint(android.content.res.ColorStateList)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_PROTECTED
com.badlogic.gdx.math.FloatCounter: com.badlogic.gdx.math.WindowedMean mean
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.Clipboard: java.lang.String getContents()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: android.view.SurfaceHolder$Callback view
com.badlogic.gdx.InputMultiplexer: void addProcessor(int,com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.utils.IdentityMap$Values: void remove()
com.badlogic.gdx.graphics.GL20: void glDrawArrays(int,int,int)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int frameCount
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMajor()
com.badlogic.gdx.math.Interpolation$ElasticOut: float apply(float)
com.badlogic.gdx.InputEventQueue: long currentEventTime
com.esotericsoftware.kryonet.Listener$QueuedListener$1: void run()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: DefaultArraySerializers$ObjectArraySerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.backends.android.InputProcessorLW: void touchDrop(int,int)
com.badlogic.gdx.backends.android.AndroidInput: boolean isButtonJustPressed(int)
com.badlogic.gdx.backends.android.AndroidGL30: void glSamplerParameteri(int,int,int)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void arc(float,float,float,float,float,int)
com.esotericsoftware.kryo.serializers.FieldSerializer: void createCachedFields(com.esotericsoftware.kryo.util.IntArray,java.util.List,java.util.List,int)
com.badlogic.gdx.utils.Logger: int level
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: boolean isFloat
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float durationTimer
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: com.badlogic.gdx.scenes.scene2d.ui.Image getImage()
com.badlogic.gdx.backends.android.AndroidDaydream: void onDreamingStarted()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void setTime(float)
com.badlogic.gdx.math.GridPoint3: float dst(int,int,int)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$BounceIn bounceIn
com.badlogic.gdx.backends.android.AndroidApplicationBase: void error(java.lang.String,java.lang.String)
com.google.android.material.appbar.AppBarLayout: void setExpanded(boolean)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean readyToDraw()
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node pop()
com.badlogic.gdx.graphics.GL20: int GL_LINEAR_MIPMAP_NEAREST
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter: java.lang.String fontFileName
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int RET
com.badlogic.gdx.graphics.GL30: int glGenBuffer()
com.badlogic.gdx.graphics.GL20: void glDetachShader(int,int)
com.badlogic.gdx.backends.android.AndroidAudio: java.util.List musics
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: void setEndColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform1i(int,int)
com.badlogic.gdx.graphics.GL20: int GL_FLOAT_MAT3
com.badlogic.gdx.utils.Json: void writeField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class)
com.esotericsoftware.kryo.io.UnsafeOutput: int writeVarLong(long,boolean)
com.badlogic.gdx.math.Vector2: boolean epsilonEquals(float,float)
com.badlogic.gdx.utils.OrderedMap: OrderedMap(int,float)
com.badlogic.gdx.physics.box2d.Body: void jniGetLinearVelocityFromWorldPoint(long,float,float,float[])
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: java.lang.String toString()
com.badlogic.gdx.utils.ObjectIntMap: ObjectIntMap(com.badlogic.gdx.utils.ObjectIntMap)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: FieldVisitor(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor)
androidx.appcompat.widget.Toolbar: int getContentInsetRight()
com.badlogic.gdx.backends.android.AndroidGL30
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.SnapshotArray lifecycleListeners
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: int id
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_DOUBLE
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog text(com.badlogic.gdx.scenes.scene2d.ui.Label)
com.badlogic.gdx.physics.box2d.JointDef: com.badlogic.gdx.physics.box2d.Body bodyA
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: TextureRegionDrawable(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable)
com.badlogic.gdx.math.Vector3: boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.math.Matrix4: float[] tmp
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer: boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: ScaleByAction()
com.badlogic.gdx.input.RemoteInput: int getDeltaY(int)
com.badlogic.gdx.utils.BufferUtils: long findFloats(float[],int,float[],int)
com.esotericsoftware.kryo.util.IdentityMap$Entries: void reset()
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: boolean incremental
com.badlogic.gdx.math.Interpolation$BounceOut: Interpolation$BounceOut(float[],float[])
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: int contactID
com.badlogic.gdx.utils.Base64Coder
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGetFragDataLocation(int,java.lang.String)
com.badlogic.gdx.math.BSpline: float approximate(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: SpotLightsAttribute()
com.badlogic.gdx.graphics.GL30: void glEndTransformFeedback()
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters)
com.badlogic.gdx.utils.ObjectFloatMap: int mask
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: int life
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: boolean dragging
com.badlogic.gdx.graphics.GL20: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser: int[] mConfigSpec
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: android.service.wallpaper.WallpaperService$Engine onCreateEngine()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_KERNING
com.esotericsoftware.kryo.util.IntMap: void shrink(int)
com.badlogic.gdx.graphics.GL30: void glUniform2f(int,float,float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.utils.Array textureAttachmentSpecs
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: void dispose()
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidNet net
com.badlogic.gdx.graphics.GL30: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.Image: float getMinHeight()
com.badlogic.gdx.graphics.GL20: int GL_POINTS
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.maps.MapLayer: boolean visible
com.badlogic.gdx.files.FileHandleStream: boolean exists()
com.badlogic.gdx.physics.box2d.Fixture: float getFriction()
com.google.android.material.card.MaterialCardView: void setCardBackgroundColor(int)
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer: void allocateChannels()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getWidthRatio()
com.badlogic.gdx.utils.BooleanArray: boolean[] ensureCapacity(int)
com.fasterxml.jackson.annotation.JsonCreator$Mode: com.fasterxml.jackson.annotation.JsonCreator$Mode[] values()
com.google.android.material.textfield.TextInputLayout: void setEndIconDrawable(int)
com.badlogic.gdx.utils.ByteArray: ByteArray(int)
com.badlogic.gdx.utils.JsonValue: void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
com.badlogic.gdx.utils.LongArray: void addAll(com.badlogic.gdx.utils.LongArray,int,int)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder timeout(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: byte[] toByteArray()
com.badlogic.gdx.math.collision.Sphere
com.badlogic.gdx.utils.Array: void addAll(com.badlogic.gdx.utils.Array,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glFlush()
com.badlogic.gdx.graphics.GL30: int GL_WAIT_FAILED
com.esotericsoftware.kryo.io.KryoDataInput: void setInput(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.graphics.g2d.GlyphLayout drawItem(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.Object,float,float,float)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: boolean isPrepared()
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: boolean depthMask
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenVertexArrays(int,int[],int)
com.badlogic.gdx.physics.box2d.ContactListener: void preSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.Manifold)
com.badlogic.gdx.math.CatmullRomSpline: float locate(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: float getRotation()
com.badlogic.gdx.physics.box2d.joints.MouseJointDef: float dampingRatio
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean disposed
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: int createBufferObject()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform ambientTexture
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: void render(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.utils.JsonValue: java.lang.String stringValue
com.badlogic.gdx.scenes.scene2d.ui.Label: void setFontScaleX(float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.utils.FloatArray glyphPositions
com.badlogic.gdx.utils.XmlReader$Element: boolean hasChild(java.lang.String)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void onConfigurationChanged(android.content.res.Configuration)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float padLeft
com.badlogic.gdx.math.Vector2: float dot(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float touchDownX
com.badlogic.gdx.utils.IntIntMap: int PRIME1
com.badlogic.gdx.utils.ObjectFloatMap: java.util.Iterator iterator()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.math.Frustum: com.badlogic.gdx.math.Vector3[] planePoints
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: int writeLong(long,boolean)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float)
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.graphics.Pixmap,boolean)
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder m_HighCoder
com.badlogic.gdx.math.Intersector$SplitTriangle: void add(float[],int,int)
com.badlogic.gdx.utils.IntIntMap: int capacity
com.badlogic.gdx.utils.ObjectFloatMap: float get(java.lang.Object,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: void update()
com.badlogic.gdx.input.RemoteSender: int TOUCH_UP
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: int type
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell clearActor()
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Accept
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: com.badlogic.gdx.math.CumulativeDistribution distribution
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: float amountY
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Preferences getPreferences(java.lang.String)
com.esotericsoftware.kryonet.Connection: void setName(java.lang.String)
com.google.android.material.card.MaterialCardView: void setCardForegroundColor(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float maxX
com.badlogic.gdx.math.Affine2: float m12
com.badlogic.gdx.physics.box2d.joints.WheelJoint: boolean jniIsMotorEnabled(long)
com.esotericsoftware.reflectasm.ConstructorAccess: boolean isNonStaticMemberClass()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
androidx.appcompat.widget.AppCompatSpinner: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.utils.ArrayMap: boolean ordered
com.badlogic.gdx.math.GridPoint3: int z
com.badlogic.gdx.utils.LongArray: java.lang.String toString(java.lang.String)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setAnimationMode(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: boolean drawing
com.badlogic.gdx.scenes.scene2d.ui.Cell: int getExpandY()
androidx.cardview.widget.CardView: void setCardBackgroundColor(int)
com.badlogic.gdx.scenes.scene2d.utils.Selection: void revert()
com.badlogic.gdx.graphics.g2d.BitmapFont: float getDescent()
com.badlogic.gdx.utils.XmlWriter: com.badlogic.gdx.utils.XmlWriter text(java.lang.Object)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: FreeTypeFontGenerator$FreeTypeFontParameter()
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: int compareTo(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: ProgressBar$ProgressBarStyle(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)
com.badlogic.gdx.physics.box2d.Body: void jniGetLocalPoint(long,float,float,float[])
com.badlogic.gdx.maps.objects.PolygonMapObject: PolygonMapObject(float[])
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2[] m_Coders
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22
com.badlogic.gdx.scenes.scene2d.Stage: void addActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.GL30: int GL_RGB10_A2UI
com.badlogic.gdx.graphics.GL30: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean cleansUpBlendFunction
com.esotericsoftware.kryo.util.IntMap: void clear()
com.esotericsoftware.kryonet.Server$1: void idle(com.esotericsoftware.kryonet.Connection)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeLittleEndianLong(long)
com.badlogic.gdx.graphics.Mesh: void calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float)
com.badlogic.gdx.utils.ArrayMap: ArrayMap(java.lang.Class,java.lang.Class)
com.badlogic.gdx.maps.ImageResolver
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: boolean cancelTouchFocus
com.badlogic.gdx.maps.MapRenderer
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter: MusicLoader$MusicParameter()
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.utils.Array items
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int height
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: com.esotericsoftware.jsonbeans.JsonValue current
com.badlogic.gdx.input.RemoteInput: void setCatchKey(int,boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter worldViewTrans
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed: com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed valueOf(float)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int Command
com.badlogic.gdx.physics.box2d.joints.RopeJoint: float jniSetMaxLength(long,float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getFillX()
com.HyperSphere.Connection.PacketObjects.Misc.EntityParticleEffect
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput(int,int)
com.badlogic.gdx.graphics.g2d.GlyphLayout
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: boolean equals(java.lang.Object)
com.esotericsoftware.kryonet.Client: void keepAlive()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.esotericsoftware.kryonet.Connection: int id
com.badlogic.gdx.graphics.g2d.Sprite: int SPRITE_SIZE
com.google.android.material.textfield.TextInputLayout: void setCounterTextAppearance(int)
com.badlogic.gdx.Input$Keys: int PAGE_UP
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder
com.badlogic.gdx.backends.android.AndroidFiles: AndroidFiles(android.content.res.AssetManager)
com.esotericsoftware.kryo.util.ObjectMap: int nextPowerOfTwo(int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool: java.lang.Object newObject()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void setVertexTransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.IntFloatMap: int size
com.esotericsoftware.kryo.util.UnsafeUtil$1: int compare(java.lang.reflect.Field,java.lang.reflect.Field)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: RegionInfluencer$Animated(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label readLabel(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.google.android.material.chip.Chip: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: boolean readBoolean()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8: DefaultShader$Setters$8()
com.badlogic.gdx.graphics.g2d.PolygonRegion: float[] vertices
com.badlogic.gdx.graphics.GL30: boolean glIsEnabled(int)
com.badlogic.gdx.scenes.scene2d.ui.Container: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillRect(long,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void setDuration(int)
com.badlogic.gdx.utils.BufferUtils: void copy(short[],int,java.nio.Buffer,int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceTopValue()
com.esotericsoftware.kryo.io.Output: void clear()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: SelectBox$SelectBoxStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle,com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)
com.esotericsoftware.kryonet.Client
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter array(java.lang.String)
com.esotericsoftware.jsonbeans.ObjectMap$Values: void remove()
com.HyperSphere.Connection.PacketObjects.Entities.Creature: int decisionSpeed
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawAABB(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Transform)
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: com.badlogic.gdx.graphics.g2d.Sprite sprite
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object getStash(java.lang.Object,java.lang.Object)
com.HyperSphere.Connection.PacketObjects.Misc.AlterableKey: java.lang.Object keyType
com.badlogic.gdx.maps.MapObject: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.Input: float getAzimuth()
com.badlogic.gdx.scenes.scene2d.ui.Container: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.async.AsyncResult: boolean isDone()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: void goEnd(boolean)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int BackPrev2
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_SCALE
com.esotericsoftware.kryonet.UdpConnection: java.nio.ByteBuffer writeBuffer
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToRotationRad(float)
com.badlogic.gdx.math.collision.Ray: Ray(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setHigh(float,float)
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.ShortArray triangles
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch: void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData)
com.badlogic.gdx.backends.android.AndroidApplicationBase: android.view.Window getApplicationWindow()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int emission
com.badlogic.gdx.utils.ArrayMap: java.lang.Object[] values
com.badlogic.gdx.graphics.g3d.decals.Decal: float[] getVertices()
com.badlogic.gdx.math.RandomXS128: void setSeed(long)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: long strokeBorder(long,long,boolean)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 v0
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void setLogLevel(int)
com.badlogic.gdx.math.Interpolation$Swing: float scale
com.badlogic.gdx.graphics.glutils.GLVersion: int getReleaseVersion()
com.esotericsoftware.kryo.ReferenceResolver: boolean useReferences(java.lang.Class)
com.esotericsoftware.minlog.Log
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: int getCount()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glSamplerParameteri(int,int,int)
com.esotericsoftware.jsonbeans.JsonValue: int[] asIntArray()
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.graphics.glutils.FrameBuffer getFrameBuffer()
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.CubemapData cubemapData
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion mulLeft(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollY(float)
com.badlogic.gdx.graphics.GL30: void glStencilMask(int)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToScaling(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.maps.MapLayer: float getRenderOffsetX()
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteVertexArrays(int,java.nio.IntBuffer)
com.esotericsoftware.jsonbeans.Json: void writeValue(java.lang.String,java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.UBJsonWriter
com.badlogic.gdx.Screen: void hide()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsFramebuffer(int)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.io.Reader)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenBuffers(int,java.nio.IntBuffer)
androidx.appcompat.widget.AbsActionBarView: int getContentHeight()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryonet.Client: com.esotericsoftware.kryo.Kryo getKryo()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: int getSize()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell defaults()
com.badlogic.gdx.math.Intersector$SplitTriangle: void setSide(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell size(float)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int b(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int glInternalFormat
com.google.firebase.messaging.FirebaseMessaging
com.HyperSphere.Connection.PacketObjects.Misc.ParticleEffectPacket: ParticleEffectPacket()
com.esotericsoftware.kryo.io.ByteBufferInput: short[] readShorts(int)
com.badlogic.gdx.backends.android.AndroidApplication: void hideStatusBar(boolean)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void bind()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: void activateParticles(int,int)
com.badlogic.gdx.files.FileHandleStream: void moveTo(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.IntArray: IntArray()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode spriteMode
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.input.GestureDetector detector
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void runOnUiThread(java.lang.Runnable)
com.badlogic.gdx.utils.Predicate$PredicateIterator: void set(java.lang.Iterable,com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source: void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: void setBlendMode(com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: NinePatchDrawable(com.badlogic.gdx.graphics.g2d.NinePatch)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.Cursor newCursor(com.badlogic.gdx.graphics.Pixmap,int,int)
com.google.android.material.textfield.TextInputLayout: void setHelperTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.backends.android.ZipResourceFile: int kMaxCommentLen
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.Color shadowColor
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 fromBarycoord(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: boolean hasNext
com.badlogic.gdx.graphics.glutils.VertexData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
androidx.appcompat.widget.SearchView: void setMaxWidth(int)
com.badlogic.gdx.physics.box2d.World: void setGravity(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidGL30: void glUniform4uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.TextureRegion: int getRegionWidth()
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.RenderContext,com.badlogic.gdx.graphics.g3d.utils.RenderableSorter)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.FixtureDef)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.utils.Predicate$PredicateIterable: java.lang.Iterable iterable
com.badlogic.gdx.physics.box2d.ChainShape: void createLoop(float[])
com.badlogic.gdx.input.RemoteInput$TouchEvent: RemoteInput$TouchEvent(com.badlogic.gdx.input.RemoteInput)
com.badlogic.gdx.graphics.GL30: void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.utils.Array$ArrayIterable: com.badlogic.gdx.utils.Array array
com.badlogic.gdx.backends.android.AndroidApplication$2: void run()
com.fasterxml.jackson.annotation.JsonInclude$Include: com.fasterxml.jackson.annotation.JsonInclude$Include valueOf(java.lang.String)
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType Absolute
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$Adapter getAdapter()
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer: ColorInfluencer()
com.esotericsoftware.kryo.util.IntMap: int PRIME3
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: com.badlogic.gdx.graphics.g3d.particles.ParticleSystem instance
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getVisualScrollY()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: boolean borderStraight
com.badlogic.gdx.graphics.GL30: void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.Input$Keys: int NUMPAD_1
com.badlogic.gdx.backends.android.AndroidApplicationLogger: AndroidApplicationLogger()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide[] values()
com.badlogic.gdx.utils.LittleEndianInputStream: double readDouble()
com.badlogic.gdx.utils.IntFloatMap: void clear(int)
com.badlogic.gdx.utils.compression.lz.InWindow: void ReduceOffsets(int)
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.graphics.Pixmap$Format format
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: boolean isAlwaysActive()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_PUTSTATIC
com.badlogic.gdx.utils.IntSet: com.badlogic.gdx.utils.IntSet$IntSetIterator iterator1
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Graphics getGraphics()
com.google.android.material.textfield.TextInputLayout: void setCounterOverflowTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide PositiveY
com.badlogic.gdx.graphics.glutils.HdpiUtils: void glViewport(int,int,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float velocityDiff
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: boolean checkForBitmapFont()
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP
com.badlogic.gdx.utils.ObjectMap$MapIterator: void remove()
com.badlogic.gdx.net.HttpStatus: int SC_LENGTH_REQUIRED
com.badlogic.gdx.math.WindowedMean: float[] getWindowValues()
com.badlogic.gdx.net.NetJavaServerSocketImpl: com.badlogic.gdx.Net$Protocol getProtocol()
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER12
com.badlogic.gdx.utils.CharArray: void add(char,char,char,char)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 setAngleRad(float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isScrollY()
com.badlogic.gdx.utils.ArrayMap$Values: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.DelayedRemovalArray
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int[] splits
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.utils.Clipboard getClipboard()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers
com.badlogic.gdx.utils.DelayedRemovalArray: java.lang.Object pop()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.nio.Buffer glGetBufferPointerv(int,int)
com.badlogic.gdx.utils.SortedIntList$Node: int index
com.badlogic.gdx.utils.viewport.ScreenViewport: void update(int,int,boolean)
com.esotericsoftware.kryonet.JsonSerialization: java.io.OutputStreamWriter writer
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int pointLightsPositionOffset
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void render(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: boolean cursorOverHandle
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter: com.badlogic.gdx.files.FileHandle imagesDir
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: float duration
com.badlogic.gdx.input.RemoteInput: int getDeltaX()
com.google.android.gms.signin.internal.zah: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.utils.compression.lzma.Base: int kNumPosSlotBits
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard onscreenKeyboard
com.badlogic.gdx.utils.ObjectMap$Entries: boolean hasNext()
com.badlogic.gdx.utils.CharArray: void shuffle()
com.esotericsoftware.kryo.util.UnsafeUtil: java.lang.reflect.Constructor directByteBufferConstr
com.badlogic.gdx.utils.SharedLibraryLoader: void setLoaded(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void addMesh(com.badlogic.gdx.graphics.g3d.model.MeshPart)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float spawnWidth
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Class[][] parameterTypes
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: java.lang.Object value
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 set(int,int,int)
androidx.fragment.app.Fragment: java.lang.Object getReenterTransition()
com.badlogic.gdx.net.NetJavaSocketImpl: void applyHints(com.badlogic.gdx.net.SocketHints)
com.badlogic.gdx.graphics.g3d.environment.ShadowMap: com.badlogic.gdx.math.Matrix4 getProjViewTrans()
com.badlogic.gdx.utils.ByteArray: void add(byte)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder appendCodePoint(int)
com.badlogic.gdx.Input$Keys: int BUTTON_START
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color OLIVE
com.esotericsoftware.kryo.io.UnsafeOutput: void writeInt(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidAudioDevice
com.badlogic.gdx.utils.LongMap$MapIterator: boolean hasNext
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: void setValidDragActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter: SkinLoader$SkinParameter(com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.graphics.Cubemap: void clearAllCubemaps(com.badlogic.gdx.Application)
com.badlogic.gdx.Net$HttpMethods: java.lang.String GET
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: android.view.View val$content
com.esotericsoftware.kryo.io.FastInput
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.ui.List getList()
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int get(java.lang.Object,int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setBounds(float,float,float,float)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1: void disconnected(com.esotericsoftware.kryonet.Connection)
com.esotericsoftware.kryonet.Client: void connect(int,java.lang.String,int,int)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int wCalc
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setSprites(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue delayValue
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateY(float)
com.HyperSphere.Connection.PacketObjects.Misc.HashMapEntry
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.ApplicationListener getApplicationListener()
com.badlogic.gdx.utils.CharArray: CharArray(boolean,int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundColor(int)
com.badlogic.gdx.graphics.GL30: int GL_RGBA8UI
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask: void run()
com.badlogic.gdx.scenes.scene2d.ui.TextField: char DELETE
com.badlogic.gdx.graphics.g2d.TextureAtlas$1
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getWorldVector(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidGraphics: void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: DirectionalLightsAttribute()
com.badlogic.gdx.utils.ObjectFloatMap: int hash2(int)
com.badlogic.gdx.utils.IntFloatMap$Keys: void reset()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence)
com.badlogic.gdx.graphics.glutils.MipMapGenerator: void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int)
com.badlogic.gdx.math.Matrix4: int M02
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: void setPosition(float,float)
com.badlogic.gdx.graphics.Color: void abgr8888ToColor(com.badlogic.gdx.graphics.Color,float)
com.esotericsoftware.kryo.serializers.BlowfishSerializer$1: void close()
com.badlogic.gdx.scenes.scene2d.ui.Skin$5: java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void box(float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: float maxMotorTorque
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: void visitEnd()
com.esotericsoftware.jsonbeans.ObjectMap$Keys: java.util.ArrayList toArray()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group setActiveGroup(java.lang.String)
com.badlogic.gdx.math.Matrix4: float det3x3()
com.badlogic.gdx.scenes.scene2d.Actor: boolean hasScrollFocus()
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: com.badlogic.gdx.math.Vector2 offset
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy
com.esotericsoftware.kryo.io.Output: Output(byte[],int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.Input$Keys: int I
com.badlogic.gdx.scenes.scene2d.ui.Cell: void row()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteVertexArrays(int,int[],int)
com.badlogic.gdx.Input$Keys: int SLASH
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void line(float,float,float,float,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: void save(java.io.Writer)
com.esotericsoftware.kryo.util.IntArray: boolean removeValue(int)
com.google.android.material.transformation.FabTransformationBehavior: FabTransformationBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.VertexAttribute: boolean equals(java.lang.Object)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Range
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet()
com.badlogic.gdx.utils.IntMap$Keys: IntMap$Keys(com.badlogic.gdx.utils.IntMap)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 ep2
com.badlogic.gdx.utils.Pools: void freeAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.Collections: Collections()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform2i(int,int,int)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox clr()
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: java.lang.StringBuilder read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput: int getMaxPointers()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4fv(int,int,float[],int)
com.badlogic.gdx.utils.Queue$QueueIterable: com.badlogic.gdx.utils.Queue$QueueIterator iterator1
com.badlogic.gdx.graphics.Pixmap$Format: int toGlType(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.utils.ObjectMap$Keys: java.lang.Object next()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int getSize()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int vindex
com.badlogic.gdx.maps.tiled.TmxMapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.math.Interpolation$Elastic
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: int draggingPointer
com.badlogic.gdx.backends.android.AndroidDaydream: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.google.android.material.textfield.TextInputLayout: void setEndIconTintList(android.content.res.ColorStateList)
com.badlogic.gdx.math.GridPoint3: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.graphics.g2d.GlyphLayout layout
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Values values1
com.badlogic.gdx.utils.IntFloatMap: void putStash(int,float)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(java.lang.String[])
com.badlogic.gdx.utils.StringBuilder: StringBuilder(int)
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] tempPrices
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion mul(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.backends.android.ZipResourceFile: int kLFHLen
com.badlogic.gdx.scenes.scene2d.Event: com.badlogic.gdx.scenes.scene2d.Actor getTarget()
androidx.fragment.app.Fragment: void startActivity(android.content.Intent)
com.esotericsoftware.kryonet.util.ObjectIntMap: void putResize(java.lang.Object,int)
androidx.appcompat.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: void begin()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap loadTiledMap(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters,com.badlogic.gdx.maps.ImageResolver)
com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken valueOf(java.lang.String)
com.badlogic.gdx.backends.android.AndroidApplicationLogger: void error(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder: int _optimumCurrentIndex
com.badlogic.gdx.scenes.scene2d.actions.EventAction
com.badlogic.gdx.Net$HttpResponse
com.badlogic.gdx.physics.box2d.BodyDef: boolean bullet
androidx.appcompat.widget.AppCompatTextView: int getFirstBaselineToTopHeight()
com.badlogic.gdx.backends.android.AndroidGL20: void glScissor(int,int,int,int)
com.esotericsoftware.kryo.util.UnsafeUtil: void releaseBuffer(java.nio.ByteBuffer)
com.esotericsoftware.kryo.io.Output: void write(byte[])
com.badlogic.gdx.utils.StringBuilder: int numChars(long,int)
com.badlogic.gdx.graphics.glutils.FloatTextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.graphics.g2d.PolygonRegion: com.badlogic.gdx.graphics.g2d.TextureRegion getRegion()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup fill(float)
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: void finish()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: ParticleEffectLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
com.badlogic.gdx.graphics.Pixmap: void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glValidateProgram(int)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.google.android.material.textfield.TextInputLayout: void setStartIconDrawable(int)
com.google.firebase.datatransport.TransportRegistrar: com.google.android.datatransport.TransportFactory lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMaxTextSize()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureRectangles(int,int)
com.esotericsoftware.kryo.io.Output: Output(int,int)
com.badlogic.gdx.math.Ellipse: Ellipse(com.badlogic.gdx.math.Vector2,float,float)
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch
com.badlogic.gdx.graphics.glutils.FloatTextureData: int internalFormat
com.badlogic.gdx.graphics.TextureData$TextureDataType
com.badlogic.gdx.backends.android.AndroidPreferences: float getFloat(java.lang.String,float)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean alt()
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.math.EarClippingTriangulator: int findEarTip()
com.badlogic.gdx.math.Interpolation: float apply(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void setLowMax(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenQueries(int,java.nio.IntBuffer)
com.badlogic.gdx.assets.loaders.CubemapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter)
com.badlogic.gdx.assets.AssetManager: java.lang.Class getAssetType(java.lang.String)
com.badlogic.gdx.scenes.scene2d.actions.DelayAction
com.badlogic.gdx.math.Intersector$SplitTriangle: int numFront
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.AndroidGL20: void glHint(int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: java.nio.ShortBuffer getBuffer()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getPrefWidth()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.net.Socket: void dispose()
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior: FloatingActionButton$Behavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.backends.android.AndroidGL30: void glBindVertexArray(int)
com.badlogic.gdx.graphics.Camera: void rotateAround(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float)
androidx.appcompat.widget.AppCompatButton: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraRight
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindBuffer(int,int)
com.badlogic.gdx.assets.AssetDescriptor
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: boolean DEBUG
androidx.appcompat.widget.Toolbar: int getContentInsetStartWithNavigation()
com.badlogic.gdx.backends.android.AndroidInput: AndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.files.FileHandle
com.hyperspherestudio.kryonet.Packets.PacketStream: int maxSize
com.badlogic.gdx.graphics.profiling.GL20Interceptor: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels
com.badlogic.gdx.graphics.glutils.MipMapTextureData: boolean isPrepared()
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: com.badlogic.gdx.utils.compression.lzma.Encoder this$0
com.badlogic.gdx.graphics.g3d.utils.AnimationController: float transitionTargetTime
com.badlogic.gdx.graphics.TextureData
com.badlogic.gdx.utils.LongMap$Keys
com.badlogic.gdx.utils.reflect.Field: Field(java.lang.reflect.Field)
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1
com.esotericsoftware.kryo.serializers.FieldSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup wrap()
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver: com.badlogic.gdx.assets.AssetManager assetManager
com.badlogic.gdx.scenes.scene2d.ui.Slider: void setSnapToValues(float[],float)
com.badlogic.gdx.assets.loaders.BitmapFontLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter)
com.badlogic.gdx.physics.box2d.EdgeShape: void set(float,float,float,float)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color AABB_COLOR
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color BROWN
com.esotericsoftware.reflectasm.MethodAccess: MethodAccess()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void begin()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int defaultFramebufferHandle
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Label: void setEllipsis(boolean)
com.google.android.material.textfield.TextInputLayout: void setPrefixText(java.lang.CharSequence)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCompileShader(int)
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: int m_NumPosStates
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int originalHeight
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.utils.IntArray counts
com.badlogic.gdx.graphics.GL20: int GL_RGB
com.badlogic.gdx.graphics.g3d.decals.Decal: int Y4
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int c
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_IMMUTABLE_LEVELS
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(float)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion()
com.badlogic.gdx.backends.android.AndroidGL20: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.math.Interpolation$BounceOut: float[] widths
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int GetPrice1(int)
com.badlogic.gdx.assets.loaders.TextureLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.input.RemoteInput: float getGyroscopeX()
com.badlogic.gdx.audio.Sound: void resume(long)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup rowTop()
com.badlogic.gdx.scenes.scene2d.Actor: Actor()
com.badlogic.gdx.utils.Bits: void clear()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int maxParticleCount
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: G3dModelLoader(com.badlogic.gdx.utils.BaseJsonReader,com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.utils.JsonValue: char getChar(java.lang.String)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(java.lang.String,int,int,int,int)
androidx.appcompat.widget.AppCompatSpinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g2d.SpriteBatch: float invTexHeight
com.badlogic.gdx.math.Vector3: boolean isUnit(float)
com.badlogic.gdx.utils.ShortArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.math.CumulativeDistribution: java.lang.Object value()
com.badlogic.gdx.utils.LongMap$MapIterator: int currentIndex
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector cubic(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField: UnsafeCacheFields$UnsafeByteField(java.lang.reflect.Field)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: org.objenesis.strategy.InstantiatorStrategy getFallbackInstantiatorStrategy()
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe: float keytime
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void queueEvent(java.lang.Runnable)
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean drawTitleTable
com.badlogic.gdx.Net$HttpResponse: java.util.Map getHeaders()
com.esotericsoftware.kryo.factories.SerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.Array getExecutedRunnables()
com.badlogic.gdx.utils.ObjectMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String WWWAuthenticate
com.badlogic.gdx.utils.IdentityMap$MapIterator: boolean valid
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void ensureCapacity(int)
com.google.android.material.textfield.TextInputLayout: void setEndIconCheckable(boolean)
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node remove(com.badlogic.gdx.utils.BinaryHeap$Node)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.JsonValue$JsonIterator: com.badlogic.gdx.utils.JsonValue entry
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction
com.badlogic.gdx.utils.IntSet: com.badlogic.gdx.utils.IntSet$IntSetIterator iterator2
com.badlogic.gdx.Net$HttpResponseListener: void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float y
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotY()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void begin()
com.google.android.material.textfield.TextInputLayout: void setStartIconContentDescription(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glFramebufferTexture2D(int,int,int,int,int)
com.badlogic.gdx.utils.ByteArray
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3: com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: boolean isRelative()
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction: boolean act(float)
com.badlogic.gdx.utils.IntFloatMap$Entries: IntFloatMap$Entries(com.badlogic.gdx.utils.IntFloatMap)
com.badlogic.gdx.graphics.GL30: int GL_VERTEX_ARRAY_BINDING
com.badlogic.gdx.utils.Array: Array(boolean,int)
com.badlogic.gdx.graphics.GL30: int GL_RG32I
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder jsonContent(java.lang.Object)
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER2
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void setOffsetY(float)
com.badlogic.gdx.scenes.scene2d.utils.Selection: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.utils.Json: void writeObjectEnd()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean,boolean)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void SetStream(java.io.OutputStream)
com.esotericsoftware.kryo.serializers.ObjectField: java.lang.Class type
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mExited
com.badlogic.gdx.graphics.glutils.KTXTextureData: int numberOfFaces
com.badlogic.gdx.backends.android.AndroidGL30: boolean glIsSampler(int)
com.badlogic.gdx.utils.XmlReader$Element: float getFloat(java.lang.String)
com.badlogic.gdx.graphics.GL20: int GL_NOTEQUAL
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$4: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Ambient
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.utils.Array points
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector nor()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle()
com.HyperSphere.Connection.PacketObjects.Map.WorldKey: WorldKey(java.lang.String,short)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool renderablesPool
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isScrollingDisabledY()
com.badlogic.gdx.math.Matrix4: float getScaleX()
com.badlogic.gdx.physics.box2d.ChainShape: int getVertexCount()
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: com.badlogic.gdx.graphics.g3d.model.data.ModelNode[] children
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter: boolean logOnCompileFailure
com.fasterxml.jackson.annotation.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape[] values()
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.ModelInstance copy()
com.badlogic.gdx.physics.box2d.Fixture: void refilter()
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.utils.ObjectFloatMap: float getStash(java.lang.Object,float)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle()
com.badlogic.gdx.net.HttpRequestBuilder: HttpRequestBuilder()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void updateMatrices()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void addParticles(int)
com.google.android.material.chip.Chip: void setCloseIconEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float computedPadLeft
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: boolean hasScale
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class)
com.badlogic.gdx.utils.UBJsonReader: UBJsonReader()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void onDetachedFromWindow()
com.badlogic.gdx.utils.ObjectMap: ObjectMap(int)
com.badlogic.gdx.utils.IntArray: boolean notEmpty()
com.badlogic.gdx.physics.box2d.Body: void applyForce(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: boolean flipped
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item c(java.lang.String)
androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)
androidx.cardview.widget.CardView: boolean getUseCompatPadding()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable append(char)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType longValue
com.badlogic.gdx.graphics.Camera: void rotate(float,float,float,float)
com.badlogic.gdx.utils.BufferUtils: void copy(int[],int,int,java.nio.Buffer)
com.google.android.material.textfield.TextInputLayout: android.graphics.Typeface getTypeface()
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)
com.esotericsoftware.kryo.util.ObjectMap$Values: java.lang.Object next()
androidx.coordinatorlayout.widget.CoordinatorLayout: int getSuggestedMinimumHeight()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getMaxWidthValue()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void paste(java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: int getAlignment()
com.badlogic.gdx.physics.box2d.BodyDef: BodyDef()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer get()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: boolean loadChar(int)
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType Custom
com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class)
com.badlogic.gdx.maps.tiled.TiledMapTileSets
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void normal(float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.List: int alignment
com.google.android.material.appbar.AppBarLayout: void setStatusBarForegroundColor(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: void write(com.badlogic.gdx.utils.Json)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.math.Frustum: boolean sphereInFrustum(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
androidx.fragment.app.Fragment: void setSharedElementEnterTransition(java.lang.Object)
com.badlogic.gdx.input.RemoteInput$RemoteInputListener: void onConnected()
com.HyperSphere.Connection.PacketObjects.Entities.Monster: int maxMoveFromSpawnRadius
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float getLength2()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()
com.badlogic.gdx.graphics.TextureArray: java.lang.String getManagedStatus()
com.badlogic.gdx.scenes.scene2d.ui.Button: void setDisabled(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: void accept(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor,int)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.IdentityMap originalToCopy
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean isDisabled
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4,float)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: void setObject(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton: float getCompatHoveredFocusedTranslationZ()
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray()
com.badlogic.gdx.graphics.g2d.NinePatch: void scale(float,float)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle parent()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder replace(java.lang.String,java.lang.String)
com.badlogic.gdx.math.Circle: int hashCode()
androidx.fragment.app.Fragment: boolean mRemoving
com.badlogic.gdx.utils.FloatArray: boolean notEmpty()
com.esotericsoftware.minlog.Log: boolean ERROR
com.badlogic.gdx.graphics.GL30: int GL_MAP_UNSYNCHRONIZED_BIT
com.badlogic.gdx.math.EarClippingTriangulator: boolean isEarTip(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType: ParticleShader$ParticleType(java.lang.String,int)
com.badlogic.gdx.input.RemoteInput: boolean[] justPressedKeys
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.esotericsoftware.jsonbeans.ObjectMap$Values: ObjectMap$Values(com.esotericsoftware.jsonbeans.ObjectMap)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle
com.badlogic.gdx.backends.android.AndroidInput$2: com.badlogic.gdx.backends.android.AndroidInput this$0
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setDisabled(boolean)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(int,int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
com.badlogic.gdx.utils.compression.lz.InWindow: void MoveBlock()
com.badlogic.gdx.InputAdapter: boolean mouseMoved(int,int)
com.badlogic.gdx.backends.android.AndroidSound: void setVolume(long,float)
com.badlogic.gdx.math.Interpolation$ElasticIn
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: DynamicsModifier$TangentialAcceleration()
com.badlogic.gdx.math.Frustum: com.badlogic.gdx.math.Vector3 tmpV
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(long,com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setVertexAttribute(int,int,int,boolean,int,int)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData parseModel(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter: void sort(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.KryoException: KryoException(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindTransformFeedback(int,int)
com.badlogic.gdx.utils.IntFloatMap$MapIterator: void findNextIndex()
com.badlogic.gdx.utils.Array$ArrayIterator: boolean valid
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float getScale(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void activateParticles(int,int)
com.badlogic.gdx.graphics.Mesh: Mesh(boolean,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int numVertices
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item)
androidx.fragment.app.Fragment: androidx.lifecycle.LifecycleRegistry mLifecycleRegistry
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int getArgumentsAndReturnSizes(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBindBuffer(int,int)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Frustum frustum
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: com.badlogic.gdx.net.HttpStatus getStatus()
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream,byte)
com.badlogic.gdx.utils.Json$Serializable: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter[] values()
com.esotericsoftware.kryo.io.Output: long total
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer colspan
com.badlogic.gdx.Input$Buttons
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: void setBounds(java.util.ArrayList,int[])
com.badlogic.gdx.Input: boolean isButtonJustPressed(int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void exit()
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2: AndroidGraphicsLiveWallpaper$2(com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper,android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: Gdx2DPixmap(byte[],int,int,int)
com.badlogic.gdx.graphics.GL30: void glGetBooleanv(int,java.nio.Buffer)
com.badlogic.gdx.utils.Json: void writeObjectStart(java.lang.Class,java.lang.Class)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String[] attributeNames
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getRows()
com.badlogic.gdx.graphics.GL20: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.BitmapFontCache cache
com.badlogic.gdx.scenes.scene2d.Group: void toString(java.lang.StringBuilder,int)
com.badlogic.gdx.utils.Json: java.lang.String prettyPrint(java.lang.String,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField: java.lang.Object getField(java.lang.Object)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: long len
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.math.Quaternion tempQ
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getPrefHeight()
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch batch
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: int createBufferObject()
com.badlogic.gdx.graphics.OrthographicCamera: void update()
com.badlogic.gdx.utils.Base64Coder: byte[] decode(char[],com.badlogic.gdx.utils.Base64Coder$CharMap)
com.badlogic.gdx.graphics.GL30: void glClearBufferiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType stringValue
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1
com.badlogic.gdx.math.GeometryUtils
androidx.appcompat.widget.AlertDialogLayout: AlertDialogLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String get(java.lang.String,java.lang.String)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable insert(int,java.lang.CharSequence)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getYppem()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int getCursorPosition()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void cancel()
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: NumericValue()
com.badlogic.gdx.utils.compression.lz.BinTree: int[] _son
com.badlogic.gdx.graphics.glutils.ShaderProgram: void clearAllShaderPrograms(com.badlogic.gdx.Application)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int g
com.badlogic.gdx.InputMultiplexer: com.badlogic.gdx.utils.SnapshotArray getProcessors()
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetJointAngle(long)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.Color getColor(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random copy()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor fv
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter MipMap
com.badlogic.gdx.Files: com.badlogic.gdx.files.FileHandle absolute(java.lang.String)
com.badlogic.gdx.utils.ObjectIntMap$Entry: java.lang.String toString()
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_eof_actions_0()
com.badlogic.gdx.math.Quaternion: void toMatrix(float[])
com.badlogic.gdx.audio.AudioDevice: void setVolume(float)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source: void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.utils.Json: void setWriter(java.io.Writer)
com.badlogic.gdx.utils.ObjectIntMap: void shrink(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: int a
com.badlogic.gdx.utils.reflect.Annotation: Annotation(java.lang.annotation.Annotation)
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getLocalCenter()
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsBuffer(int)
com.esotericsoftware.reflectasm.ConstructorAccess: ConstructorAccess()
com.badlogic.gdx.graphics.g2d.TextureRegion: int getRegionHeight()
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.Json$Serializer defaultSerializer
androidx.fragment.app.Fragment: void setHideReplaced(boolean)
com.badlogic.gdx.assets.loaders.MusicLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.math.collision.Sphere: boolean equals(java.lang.Object)
com.badlogic.gdx.backends.android.InputProcessorLW: boolean keyUp(int)
androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater()
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(java.lang.String)
com.badlogic.gdx.graphics.g2d.GlyphLayout: void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String)
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue: CumulativeDistribution$CumulativeValue(com.badlogic.gdx.math.CumulativeDistribution,java.lang.Object,float,float)
com.badlogic.gdx.graphics.Cubemap
com.badlogic.gdx.utils.JsonValue: byte getByte(java.lang.String,byte)
com.badlogic.gdx.graphics.GL30: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.VertexAttribute: VertexAttribute(int,int,int,boolean,java.lang.String,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.utils.Array velocities
com.badlogic.gdx.math.Circle: void set(float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int letterUnderCursor(float)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,char[],int,int)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.math.WindowedMean mean
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int lifeOffsetDiff
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion idt()
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: NinePatchDrawable(com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute(com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute)
com.badlogic.gdx.utils.GdxNativesLoader: boolean disableNativesLoading
com.badlogic.gdx.backends.android.AndroidApplication: int logLevel
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Keys keys()
com.badlogic.gdx.scenes.scene2d.ui.Label: float lastPrefHeight
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.graphics.Camera getCamera()
com.badlogic.gdx.utils.compression.lz.OutWindow: int _streamPos
com.badlogic.gdx.graphics.VertexAttributes: long getMask()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGL20: void glFrontFace(int)
com.badlogic.gdx.utils.ObjectIntMap: int hash2(int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$4
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: DefaultShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: void setTextureFilters(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: int getH(int)
com.badlogic.gdx.utils.ObjectMap$Keys: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.g2d.Sprite: void flip(boolean,boolean)
com.badlogic.gdx.utils.StringBuilder: boolean equalsIgnoreCase(com.badlogic.gdx.utils.StringBuilder)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Method[] getMethods(java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: SpecialString(java.lang.String)
com.badlogic.gdx.math.Affine2: Affine2(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.utils.ObjectIntMap$Entry: int value
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue gravityValue
com.esotericsoftware.kryonet.ClientDiscoveryHandler$1: void onFinally()
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void setLeftWidth(float)
com.badlogic.gdx.assets.AssetLoadingTask: java.lang.Object call()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable selection
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution: int portraitWidth
com.badlogic.gdx.backends.android.AndroidDaydream: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glClear(int)
com.badlogic.gdx.maps.objects.PolylineMapObject: PolylineMapObject()
com.badlogic.gdx.backends.android.AndroidInput$3$2
com.badlogic.gdx.scenes.scene2d.ui.Label: boolean wrap
com.badlogic.gdx.graphics.GL30: int GL_RGBA32I
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: boolean equals(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight)
com.esotericsoftware.kryo.io.OutputChunked: void flush()
com.HyperSphere.Connection.PacketObjects.Map.MapObject: boolean matrix
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion,int,int)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.physics.box2d.Body getBodyA()
com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer: DefaultSerializers$VoidSerializer()
com.badlogic.gdx.utils.IntMap: void putStash(int,java.lang.Object)
com.badlogic.gdx.utils.compression.lzma.Encoder: int kNumLenSpecSymbols
com.badlogic.gdx.maps.MapObjects: int getIndex(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getLifeOffset()
com.google.android.material.textfield.TextInputLayout: void setEndIconOnClickListener(android.view.View$OnClickListener)
com.badlogic.gdx.physics.box2d.World: void jniDestroyJoint(long,long)
com.badlogic.gdx.graphics.profiling.GLErrorListener: void onError(int)
com.badlogic.gdx.math.Vector: boolean isZero(float)
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.math.Vector2 localPoint
androidx.fragment.app.Fragment: void onDestroy()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.utils.FloatArray norms
com.esotericsoftware.kryonet.JsonSerialization: com.esotericsoftware.jsonbeans.Json json
com.badlogic.gdx.graphics.glutils.KTXTextureData: int getWidth()
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int mAlphaSize
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDELen
com.badlogic.gdx.utils.viewport.Viewport: void setScreenWidth(int)
com.badlogic.gdx.math.Intersector: boolean overlaps(com.badlogic.gdx.math.Circle,com.badlogic.gdx.math.Circle)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setFlingTime(float)
com.badlogic.gdx.graphics.g3d.model.MeshPart: void update()
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: PrismaticJointDef()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.IntMap: java.lang.Object remove(int)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void setIndices(java.nio.ShortBuffer)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.utils.QuickSelect: java.lang.Object[] array
com.badlogic.gdx.graphics.GL30: boolean glIsSampler(int)
com.esotericsoftware.kryo.util.IntArray: int pop()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat
com.badlogic.gdx.graphics.g2d.PolygonBatch: com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
com.badlogic.gdx.graphics.GLTexture: void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector limit(float)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: long[] nativeData
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void setMaxMotorForce(float)
androidx.core.widget.NestedScrollView$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isDragging()
com.esotericsoftware.kryo.io.Input: int readVarInt(boolean)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1: int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$PixmapPackerIO$ImageFormat
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: boolean haveIdentityRealMatrix
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void calculateVertBoundsAndPositions()
com.badlogic.gdx.scenes.scene2d.utils.Drawable: float getTopHeight()
com.badlogic.gdx.Net$HttpRequest: void setIncludeCredentials(boolean)
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 sub(int,int)
com.google.android.material.chip.Chip: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
com.badlogic.gdx.scenes.scene2d.ui.Container: void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.math.Intersector: boolean isPointInPolygon(com.badlogic.gdx.utils.Array,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL30: int GL_PIXEL_UNPACK_BUFFER
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getMinHeightValue()
com.esotericsoftware.kryo.KryoSerializable
androidx.appcompat.widget.SearchView: void setAppSearchData(android.os.Bundle)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void runOnUiThread(java.lang.Runnable)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: java.lang.String name
com.badlogic.gdx.backends.android.AndroidGraphics: long getFrameId()
com.badlogic.gdx.graphics.g2d.Sprite: void setU2(float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void setDampingRatio(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGetError()
com.badlogic.gdx.utils.Json$FieldMetadata: boolean deprecated
com.badlogic.gdx.scenes.scene2d.ui.Value$6: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryonet.Client: void connect(int,java.lang.String,int)
com.badlogic.gdx.backends.android.AndroidInput$3$1: void onClick(android.content.DialogInterface,int)
com.badlogic.gdx.utils.reflect.Field: void setAccessible(boolean)
com.google.android.material.card.MaterialCardView: void setProgress(float)
com.badlogic.gdx.utils.JsonValue: boolean isDouble()
com.badlogic.gdx.scenes.scene2d.Event: boolean cancelled
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(java.lang.String,int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer
com.badlogic.gdx.scenes.scene2d.ui.TextField: TextField(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: int getWidth()
com.badlogic.gdx.utils.Array: Array(boolean,java.lang.Object[],int,int)
com.esotericsoftware.jsonbeans.JsonValue: byte[] asByteArray()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table add(com.badlogic.gdx.scenes.scene2d.Actor[])
com.badlogic.gdx.maps.objects.EllipseMapObject: com.badlogic.gdx.math.Ellipse ellipse
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: SequenceAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable hScrollKnob
com.badlogic.gdx.scenes.scene2d.InputEvent: com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL20: int GL_INVERT
com.badlogic.gdx.input.RemoteSender: boolean connected
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform3iv(int,int,int[],int)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void begin()
com.badlogic.gdx.Net$HttpResponse: byte[] getResult()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void cylinder(float,float,float,int,float,float)
com.badlogic.gdx.scenes.scene2d.Actor: boolean getDebug()
com.badlogic.gdx.math.Polygon: float originX
com.esotericsoftware.kryonet.Server: Server(int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector E
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2
com.badlogic.gdx.graphics.VertexAttributes$Usage: int BiNormal
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue)
com.badlogic.gdx.Audio: com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String getString(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: float getLowMin()
com.badlogic.gdx.graphics.g2d.PixmapPacker: int getPageIndex(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_SAMPLER_3D
com.badlogic.gdx.maps.MapRenderer: void setView(com.badlogic.gdx.graphics.OrthographicCamera)
com.badlogic.gdx.graphics.Color: int toIntBits(int,int,int,int)
com.badlogic.gdx.utils.IntIntMap: int PRIME3
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 nearestSegmentPoint(float,float,float,float,float,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.OrthographicCamera: OrthographicCamera()
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleEnabled(boolean)
com.esotericsoftware.jsonbeans.JsonSerializable: void write(com.esotericsoftware.jsonbeans.Json)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.utils.PauseableThread: boolean exit
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] motionValues
com.badlogic.gdx.Input: void vibrate(int)
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType getType()
com.badlogic.gdx.physics.box2d.PolygonShape: void setAsBox(float,float)
com.esotericsoftware.kryonet.Listener$QueuedListener$3: com.esotericsoftware.kryonet.Connection val$connection
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: boolean useMipMaps()
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: FrameBufferCubemap()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: void dispose()
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: void choose(java.lang.Object)
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object put_internal(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g2d.GlyphLayout: void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int c(java.lang.String)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.utils.FloatArray uvs
com.badlogic.gdx.backends.android.AndroidDaydream: void removeLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.esotericsoftware.kryo.io.InputChunked: void setInputStream(java.io.InputStream)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean touchDown(float,float,int,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup rowAlign(int)
com.badlogic.gdx.utils.ObjectFloatMap: void removeStashIndex(int)
com.badlogic.gdx.input.GestureDetector: boolean longPressFired
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction: TouchableAction()
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float z3
com.badlogic.gdx.graphics.g3d.Material: int hashCode()
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Method[] getDeclaredMethods(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.utils.DelayedRemovalArray getCaptureListeners()
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue
com.badlogic.gdx.graphics.GL20: void glGetFloatv(int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color GOLD
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int degrees
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Class[] getGenerics()
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3: void scrollFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glActiveTexture(int)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling fillY
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidMonitor
com.badlogic.gdx.scenes.scene2d.ui.Widget: void layout()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void flush()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFlush()
com.badlogic.gdx.backends.android.AndroidFileHandle: AndroidFileHandle(android.content.res.AssetManager,java.io.File,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.backends.android.AndroidApplication: void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: GLFrameBuffer$GLFrameBufferBuilder(int,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState
com.badlogic.gdx.maps.Map: com.badlogic.gdx.maps.MapLayers layers
com.badlogic.gdx.math.MathUtils: float PI
com.badlogic.gdx.utils.IntFloatMap$Entries: void remove()
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Stack: float prefHeight
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniEnableLimit(long,boolean)
com.badlogic.gdx.scenes.scene2d.Stage: boolean debugAll
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(long)
com.badlogic.gdx.physics.box2d.WorldManifold
androidx.appcompat.widget.AppCompatTextView: void setPrecomputedText(androidx.core.text.PrecomputedTextCompat)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeDoubles(double[])
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: float[] vertices
androidx.appcompat.widget.LinearLayoutCompat: void setVerticalGravity(int)
com.badlogic.gdx.graphics.OrthographicCamera: void translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL20: int GL_ONE_MINUS_DST_ALPHA
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectMap shaders
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void killParticles(int,int)
com.esotericsoftware.jsonbeans.OutputType: com.esotericsoftware.jsonbeans.OutputType[] values()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup pad(float)
com.badlogic.gdx.physics.box2d.Contact: float jniGetRestitution(long)
com.esotericsoftware.jsonbeans.JsonReader: short[] _json_key_offsets
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int[] z
com.badlogic.gdx.net.ServerSocketHints: boolean reuseAddress
com.badlogic.gdx.graphics.TextureArray: void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.TextureArray)
com.badlogic.gdx.scenes.scene2d.InputEvent: com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor()
com.badlogic.gdx.graphics.glutils.KTXTextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glEndQuery(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData renderData
com.badlogic.gdx.utils.Pools: com.badlogic.gdx.utils.ObjectMap typePools
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute
com.badlogic.gdx.graphics.glutils.FileTextureData: int getWidth()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,int,int,com.badlogic.gdx.graphics.g3d.Material)
com.badlogic.gdx.graphics.Color: float toFloatBits()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: float getDuration()
com.badlogic.gdx.backends.android.ZipResourceFile: java.lang.String LOG_TAG
com.badlogic.gdx.backends.android.AndroidGL20: void glDepthFunc(int)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat CIM
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void begin()
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel regionChannel
com.badlogic.gdx.utils.ObjectFloatMap: ObjectFloatMap()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation sineOut
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_VARYINGS
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float scaleY
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean)
com.badlogic.gdx.utils.IntMap: int mask
com.badlogic.gdx.graphics.Color: float g
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: boolean getDefaultEditable()
com.HyperSphere.AndroidLauncher
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void setLayoutEnabled(boolean)
com.esotericsoftware.jsonbeans.JsonValue: boolean isBoolean()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.esotericsoftware.jsonbeans.JsonException: JsonException(java.lang.String)
com.badlogic.gdx.graphics.GL20: void glUniform1fv(int,int,float[],int)
com.badlogic.gdx.graphics.GL30: int glGetError()
com.badlogic.gdx.backends.android.AndroidAudioDevice: int getLatency()
com.badlogic.gdx.utils.compression.lzma.Encoder: void ReleaseMFStream()
com.badlogic.gdx.utils.ComparableTimSort: int minRunLength(int)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float getMaxForce()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void drawMessageText(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float,float)
com.badlogic.gdx.graphics.g2d.BitmapFont: int indexOf(java.lang.CharSequence,char,int)
com.esotericsoftware.kryo.util.IdentityMap: com.esotericsoftware.kryo.util.IdentityMap$Keys keys
com.badlogic.gdx.utils.IdentityMap: boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_RED_SIZE
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_FORMAT_RGB565
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh
com.badlogic.gdx.utils.ObjectIntMap: void putAll(com.badlogic.gdx.utils.ObjectIntMap)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean tap(float,float,int,int)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Annotation[] getAnnotations(java.lang.Class)
androidx.core.widget.NestedScrollView: void setOnScrollChangeListener(androidx.core.widget.NestedScrollView$OnScrollChangeListener)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.math.Quaternion: float w
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value padLeft
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getPixelMode()
com.badlogic.gdx.Graphics$Monitor: Graphics$Monitor(int,int,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteTransformFeedbacks(int,int[],int)
com.esotericsoftware.kryo.util.IntArray: int[] resize(int)
com.badlogic.gdx.utils.JsonReader: byte[] _json_trans_actions
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type VOID_TYPE
com.badlogic.gdx.graphics.g3d.utils.AnimationController: float transitionCurrentTime
com.badlogic.gdx.utils.Json$Serializable
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory: int EGL_CONTEXT_CLIENT_VERSION
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 inv()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: com.badlogic.gdx.math.Vector2 uvTranslation
com.badlogic.gdx.backends.android.AndroidApplicationBase: int getVersion()
com.esotericsoftware.kryonet.Server$1: Server$1(com.esotericsoftware.kryonet.Server)
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: com.badlogic.gdx.utils.Array array
com.badlogic.gdx.physics.box2d.Body: float jniGetAngularDamping(long)
com.badlogic.gdx.utils.Json: void writeValue(java.lang.String,java.lang.Object)
com.badlogic.gdx.Input$Keys: int NUM_7
com.badlogic.gdx.graphics.glutils.MipMapTextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer get()
com.esotericsoftware.kryo.Kryo: void addDefaultSerializer(java.lang.Class,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.utils.Array$ArrayIterator: void reset()
com.badlogic.gdx.files.FileHandle: long lastModified()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
com.badlogic.gdx.graphics.CubemapData: boolean isManaged()
com.badlogic.gdx.physics.box2d.World: boolean isLocked()
com.badlogic.gdx.net.HttpStatus: int SC_NOT_IMPLEMENTED
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value padBottom
com.badlogic.gdx.utils.ObjectIntMap: void putStash(java.lang.Object,int)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void render(int[])
com.esotericsoftware.kryonet.JsonSerialization: boolean logging
com.badlogic.gdx.utils.StreamUtils: byte[] EMPTY_BYTES
com.badlogic.gdx.physics.box2d.EdgeShape: void setHasVertex0(boolean)
com.badlogic.gdx.backends.android.AndroidAudioRecorder: AndroidAudioRecorder(int,boolean)
com.badlogic.gdx.Application$ApplicationType
com.badlogic.gdx.graphics.GL20: int GL_CURRENT_VERTEX_ATTRIB
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int life
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUseProgram(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPadY()
com.badlogic.gdx.graphics.g3d.Model: void loadMeshes(java.lang.Iterable)
com.badlogic.gdx.utils.Queue$QueueIterator: int index
com.badlogic.gdx.physics.box2d.BodyDef: com.badlogic.gdx.math.Vector2 position
com.badlogic.gdx.utils.I18NBundle: boolean getSimpleFormatter()
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean focused
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.nio.FloatBuffer matrix
com.badlogic.gdx.utils.viewport.ExtendViewport: void update(int,int,boolean)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Net getNet()
com.google.android.material.internal.NavigationMenuItemView
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT15
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: int bufferHandle
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetJointSpeed(long)
com.HyperSphere.Connection.PacketObjects.Entities.Monster: short type
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: float getPrefWidth()
com.badlogic.gdx.backends.android.AndroidApplication$1: com.badlogic.gdx.backends.android.AndroidApplication this$0
com.badlogic.gdx.Input$Peripheral: Input$Peripheral(java.lang.String,int)
androidx.appcompat.widget.Toolbar: int getTitleMarginStart()
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: int getX(int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: void buildNormals(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.g3d.RenderableProvider,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.ObjectMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillCircle(long,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config: BillboardParticleBatch$Config(boolean,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getHeight()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: VertexBufferObject(boolean,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle: TextTooltip$TextTooltipStyle(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)
com.badlogic.gdx.utils.ArrayMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createBox(float,float,float,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.g2d.PixmapPacker: int getPageHeight()
com.badlogic.gdx.graphics.g2d.Batch: int U3
com.hyperspherestudio.kryonet.Packets.EncryptedPacket: java.lang.Object deserialize(byte[])
com.esotericsoftware.kryo.io.KryoObjectOutput
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: float r
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting Medium
com.google.android.material.appbar.AppBarLayout: void setElevation(float)
com.badlogic.gdx.Input$Orientation
com.badlogic.gdx.utils.JsonReader: short[] _json_key_offsets
com.esotericsoftware.reflectasm.FieldAccess: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor insertThrowExceptionForFieldType(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor,java.lang.String)
com.google.android.material.textfield.TextInputLayout
com.badlogic.gdx.utils.IntSet: void ensureCapacity(int)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField: UnsafeCacheFields$UnsafeBooleanField(java.lang.reflect.Field)
com.google.android.material.appbar.AppBarLayout: void setLiftOnScroll(boolean)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1: GLSurfaceView20$1(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20,android.view.View,boolean)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: float[] readFloats(int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getPixel(long,int,int)
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(boolean,int,java.lang.Class)
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.net.HttpStatus: int SC_SEE_OTHER
com.badlogic.gdx.graphics.g3d.ModelBatch: void setCamera(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory: void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors
com.badlogic.gdx.utils.XmlReader: short[] init__xml_index_offsets_0()
com.esotericsoftware.kryo.serializers.FieldSerializer: void setCopyTransient(boolean)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeShort(int)
com.badlogic.gdx.utils.ObjectFloatMap$Values
com.badlogic.gdx.physics.box2d.BodyDef: float gravityScale
com.badlogic.gdx.graphics.g3d.shaders.BaseShader
com.badlogic.gdx.graphics.GL30: boolean glIsQuery(int)
com.badlogic.gdx.files.FileHandle: java.io.BufferedInputStream read(int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: int usage
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1
com.badlogic.gdx.utils.ShortArray: void swap(int,int)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner101(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.compression.CRC: void UpdateByte(int)
com.badlogic.gdx.utils.IntFloatMap$Keys: int next()
com.badlogic.gdx.math.Polyline: boolean calculateLength
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenSamplers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createAmbient(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.files.FileHandle: void copyTo(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: Label()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String AcceptRanges
com.badlogic.gdx.input.RemoteInput: float[] accel
com.esotericsoftware.jsonbeans.JsonValue: long longValue
com.badlogic.gdx.math.Rectangle: float area()
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver: InternalFileHandleResolver()
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular
com.badlogic.gdx.utils.ComparableTimSort: java.lang.Object[] tmp
com.badlogic.gdx.scenes.scene2d.ui.List: List(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 l_vex
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: java.lang.String getDefaultFragmentShader()
com.badlogic.gdx.Graphics: float getPpcY()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: float duration
com.badlogic.gdx.utils.TimeUtils: long nanosPerMilli
com.badlogic.gdx.backends.android.AndroidGL30: void glGenTransformFeedbacks(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL20: int glGetAttribLocation(int,java.lang.String)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 dir
com.badlogic.gdx.backends.android.AndroidAudioRecorder: void read(short[],int,int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 sub(float)
androidx.appcompat.widget.Toolbar: void setOnMenuItemClickListener(androidx.appcompat.widget.Toolbar$OnMenuItemClickListener)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: int getNumVertices()
com.badlogic.gdx.utils.compression.lz.InWindow: InWindow()
com.badlogic.gdx.backends.android.AndroidGraphics
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell left()
com.badlogic.gdx.Screen: void pause()
com.esotericsoftware.kryo.io.Output: void writeShorts(short[])
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean equals(java.lang.Object)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput(java.io.InputStream)
com.badlogic.gdx.scenes.scene2d.ui.Slider: float[] snapValues
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.utils.Array parts
com.badlogic.gdx.math.Interpolation$14
com.badlogic.gdx.physics.box2d.Body: void setLinearVelocity(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.InputListener: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.utils.compression.lzma.Encoder: void SetStreams(java.io.InputStream,java.io.OutputStream,long,long)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute()
com.badlogic.gdx.math.Matrix4: Matrix4()
com.badlogic.gdx.graphics.GL30: void glDeleteQueries(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int mBlueSize
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackgroundColor(int)
com.badlogic.gdx.Input: com.badlogic.gdx.Input$Orientation getNativeOrientation()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGenBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float originalOffsetY
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.utils.ObjectFloatMap$Keys: boolean hasNext()
com.badlogic.gdx.utils.Pool$Poolable: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Cell: void setActorX(float)
com.badlogic.gdx.physics.box2d.joints.GearJoint: long jniGetJoint1(long)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glHint(int,int)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getTitle()
com.badlogic.gdx.scenes.scene2d.utils.Disableable: boolean isDisabled()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: com.badlogic.gdx.utils.ShortArray tmpIndices
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.badlogic.gdx.scenes.scene2d.Group: void setCullingArea(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetInteger64v(int,java.nio.LongBuffer)
com.badlogic.gdx.graphics.GL30: int GL_MAP_WRITE_BIT
com.badlogic.gdx.graphics.g3d.decals.Decal: int Z3
androidx.cardview.widget.CardView: float getRadius()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting hinting
com.badlogic.gdx.utils.IntFloatMap$Keys
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void setLinkedEngine(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glCreateShader(int)
androidx.appcompat.widget.SearchView: void setOnSuggestionListener(androidx.appcompat.widget.SearchView$OnSuggestionListener)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer: DefaultSerializers$CollectionsSingletonMapSerializer()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: void allocateChannels()
com.badlogic.gdx.graphics.g3d.decals.Decal: void lookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.Input: boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
com.badlogic.gdx.utils.compression.lzma.Base: int GetLenToPosState(int)
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: int chatType
com.badlogic.gdx.net.SocketHints: int sendBufferSize
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void setDefaultDepthFunc(int)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder header(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.FlushablePool: FlushablePool()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: void setElementsAreSameType(boolean)
androidx.appcompat.widget.AppCompatEditText: android.view.textclassifier.TextClassifier getTextClassifier()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void selectAll()
com.badlogic.gdx.math.Ellipse: float circumference()
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int kNumBitModelTotalBits
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.utils.ObjectMap values
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glViewport(int,int,int,int)
com.badlogic.gdx.graphics.g3d.Material: Material(java.lang.String,com.badlogic.gdx.graphics.g3d.Material)
com.HyperSphere.Connection.PacketObjects.Map.Mark: int posY
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling stretch
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: void readBytes(java.lang.Object,long,long)
com.badlogic.gdx.utils.SortedIntList$Iterator: com.badlogic.gdx.utils.SortedIntList$Node previousPosition
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.LongMap fixtures
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getBackgroundTintList()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void renderObject(com.badlogic.gdx.maps.MapObject)
com.esotericsoftware.kryo.Kryo: org.objenesis.strategy.InstantiatorStrategy strategy
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters
com.badlogic.gdx.math.CatmullRomSpline: CatmullRomSpline()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void setView(com.badlogic.gdx.graphics.OrthographicCamera)
com.google.android.gms.common.SupportErrorDialogFragment: SupportErrorDialogFragment()
com.badlogic.gdx.graphics.GL30: void glReleaseShaderCompiler()
com.badlogic.gdx.input.RemoteSender: int ACCEL
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void initialize()
com.fasterxml.jackson.annotation.JsonProperty$Access: com.fasterxml.jackson.annotation.JsonProperty$Access[] values()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Serializer newDefaultSerializer(java.lang.Class)
com.badlogic.gdx.physics.box2d.EdgeShape: void setVertex3(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.Json: java.lang.String prettyPrint(java.lang.Object)
com.badlogic.gdx.math.Interpolation$13
com.badlogic.gdx.scenes.scene2d.EventListener
com.badlogic.gdx.utils.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.LongMap: int stashSize
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp8
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item[] e
com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.gameanalytics.sdk.errorreporter.GameAnalyticsExceptionReportService
com.esotericsoftware.kryo.util.IntMap$Values
com.badlogic.gdx.graphics.profiling.GLProfiler: com.badlogic.gdx.math.FloatCounter getVertexCount()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.glutils.IndexData: int getNumIndices()
com.badlogic.gdx.physics.box2d.JointDef: boolean collideConnected
com.badlogic.gdx.utils.Json$Serializer: void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation
com.badlogic.gdx.graphics.g2d.Animation$PlayMode
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode
com.badlogic.gdx.graphics.g3d.model.Animation: java.lang.String id
com.badlogic.gdx.utils.compression.lz.InWindow
com.esotericsoftware.kryonet.ServerDiscoveryHandler: boolean onDiscoverHost(com.esotericsoftware.kryonet.UdpConnection,java.net.InetSocketAddress,com.esotericsoftware.kryonet.Serialization)
com.badlogic.gdx.graphics.GL20: int GL_SRC_COLOR
com.badlogic.gdx.physics.box2d.Fixture: java.lang.Object getUserData()
com.esotericsoftware.minlog.Log$Logger: Log$Logger()
com.badlogic.gdx.utils.ShortArray: void add(int)
com.badlogic.gdx.graphics.GLTexture: boolean isManaged()
com.badlogic.gdx.utils.StringBuilder: void appendNull()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int letterUnderCursor(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(float,float,float,float,float,float)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int _cache
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask keyRepeatTask
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: int CPU_REGION_OFFSET
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader)
com.esotericsoftware.kryo.io.KryoDataOutput: void writeBoolean(boolean)
com.badlogic.gdx.utils.ShortArray: ShortArray(com.badlogic.gdx.utils.ShortArray)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setBlending(int,int)
com.badlogic.gdx.utils.viewport.ExtendViewport: float getMinWorldWidth()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_VERTICAL
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object remove(java.lang.Object)
androidx.appcompat.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.Attributes: void set(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: ShaderProgramLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: RegionInfluencer(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: int CPU_POSITION_OFFSET
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.Color tmpColor3
com.badlogic.gdx.maps.objects.TextureMapObject: float getX()
com.badlogic.gdx.maps.ImageResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.badlogic.gdx.scenes.scene2d.Stage: void setDebugAll(boolean)
androidx.fragment.app.Fragment: boolean isRemoving()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.util.IntArray: IntArray(com.esotericsoftware.kryo.util.IntArray)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 translate(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.GL20: int GL_BLEND_SRC_RGB
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: float getAmountWidth()
com.badlogic.gdx.assets.loaders.I18NBundleLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void initRenderData()
com.badlogic.gdx.files.FileHandle: void writeBytes(byte[],int,int,boolean)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(short[])
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute copy()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void rect(short,short,short,short)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: CameraInputController(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType Applet
com.badlogic.gdx.graphics.g2d.Sprite: Sprite(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.utils.ObjectFloatMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.maps.MapLayer: com.badlogic.gdx.maps.MapLayer getParent()
com.badlogic.gdx.utils.IntMap: int size
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: int f
com.badlogic.gdx.utils.DelayedRemovalArray: void set(int,java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.graphics.g2d.ParticleEmitter newEmitter(java.io.BufferedReader)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void setTransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp2
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: com.HyperSphere.Connection.PacketObjects.Misc.SpecialString clone()
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer
com.badlogic.gdx.Net$HttpRequest: int getTimeOut()
com.esotericsoftware.kryonet.Server: void removeConnection(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.TouchableAction touchable(com.badlogic.gdx.scenes.scene2d.Touchable)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: int numDirectionalLights
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter h
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: Item(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type Chain
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: void setDeadzone(float)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.esotericsoftware.kryo.util.ObjectMap: void putAll(com.esotericsoftware.kryo.util.ObjectMap)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.esotericsoftware.kryo.io.ByteBufferInput: double readDouble(double,boolean)
androidx.fragment.app.Fragment: void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: ParticleControllerInfluencer$Single()
com.badlogic.gdx.math.Vector3: float dot(float,float,float,float,float,float)
com.badlogic.gdx.utils.LittleEndianInputStream: java.lang.String readLine()
com.badlogic.gdx.net.SocketHints: int receiveBufferSize
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidNet net
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,int,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
com.badlogic.gdx.InputMultiplexer: boolean touchUp(int,int,int,int)
com.esotericsoftware.jsonbeans.Json: void readField(java.lang.Object,java.lang.String,java.lang.String,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: long visualPressedTime
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19: DefaultShader$Setters$19()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void end()
com.esotericsoftware.kryo.util.IntMap: java.lang.Object removeStash(int)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.badlogic.gdx.scenes.scene2d.ui.Stack: float getMinWidth()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VelocityPhiStartOffset
com.badlogic.gdx.Input$Buttons: int BACK
com.badlogic.gdx.Files: com.badlogic.gdx.files.FileHandle local(java.lang.String)
com.google.android.material.transformation.FabTransformationSheetBehavior: FabTransformationSheetBehavior(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: void accept(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute[],int)
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: TiledMapTileMapObject(com.badlogic.gdx.maps.tiled.TiledMapTile,boolean,boolean)
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_SPECULAR
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Vector3 translateScreenToIso(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: float dampingRatio
com.esotericsoftware.kryonet.TcpConnection: float idleThreshold
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: void update()
com.badlogic.gdx.utils.Sort: void sort(com.badlogic.gdx.utils.Array,java.util.Comparator)
androidx.core.widget.NestedScrollView
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(java.lang.String,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void updateWidgetPosition()
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType json
com.badlogic.gdx.utils.ObjectIntMap$Keys
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int getCursorLine()
com.badlogic.gdx.physics.box2d.Fixture: void jniSetDensity(long,float)
com.badlogic.gdx.graphics.GL30: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void setFrequency(float)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: com.badlogic.gdx.graphics.g2d.NinePatch getPatch()
com.badlogic.gdx.graphics.g3d.decals.Decal: Decal(com.badlogic.gdx.graphics.g3d.decals.DecalMaterial)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$Monitor getMonitor()
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getCheckedIcon()
com.badlogic.gdx.graphics.Cubemap: Cubemap(com.badlogic.gdx.graphics.CubemapData)
com.google.android.material.card.MaterialCardView: void setPreventCornerOverlap(boolean)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 rotate(float)
com.badlogic.gdx.utils.I18NBundle: boolean simpleFormatter
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void removeAnimation(com.badlogic.gdx.graphics.g3d.model.Animation)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer
com.badlogic.gdx.graphics.GL20: void glVertexAttrib4f(int,float,float,float,float)
com.badlogic.gdx.utils.LongMap: void removeStashIndex(int)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: MapObject(int,int,int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 set(float,float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: boolean edges
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$DisplayMode getDisplayMode()
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void arrow(float,float,float,float,float,float,float,float,int)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int remove(java.lang.Object,int)
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending[] values()
com.badlogic.gdx.math.collision.BoundingBox: long serialVersionUID
com.badlogic.gdx.utils.Json: void readField(java.lang.Object,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1: java.lang.Object newObject()
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Preferences getPreferences(java.lang.String)
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery: TransportBackendDiscovery()
androidx.core.widget.NestedScrollView: float getBottomFadingEdgeStrength()
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object[] valueTable
com.badlogic.gdx.utils.PerformanceCounter: PerformanceCounter(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Cell: void setActorWidth(float)
com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings: int singleLineColumns
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetSpringDampingRatio(long,float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetMotorSpeed(long)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter: BaseShader$LocalSetter()
com.esotericsoftware.kryo.Kryo: void setClassLoader(java.lang.ClassLoader)
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,float,int,boolean)
com.badlogic.gdx.utils.JsonReader: int json_first_final
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IOR
com.esotericsoftware.jsonbeans.Json: void readField(java.lang.Object,java.lang.String,java.lang.Class,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawElements(int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: boolean has2dAngularVelocity
com.badlogic.gdx.Preferences
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue
com.HyperSphere.Connection.PacketObjects.Map.WorldKey: WorldKey()
com.badlogic.gdx.math.Plane: float d
com.esotericsoftware.kryo.util.IntMap: int EMPTY
com.badlogic.gdx.utils.IdentityMap$Keys: IdentityMap$Keys(com.badlogic.gdx.utils.IdentityMap)
com.esotericsoftware.kryo.io.KryoDataOutput: void writeChar(int)
com.badlogic.gdx.utils.IntFloatMap: int threshold
com.badlogic.gdx.Input$Keys: int F6
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.ObjectMap typeToFields
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: float invTexHeight
com.badlogic.gdx.graphics.FPSLogger: void log()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float visualAmountX
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mBlueSize
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: com.badlogic.gdx.graphics.g3d.Renderable renderable
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: float end
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setEGLContextClientVersion(int)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: void bindSide(com.badlogic.gdx.graphics.Cubemap$CubemapSide)
com.esotericsoftware.kryonet.Client: void close()
com.google.android.material.button.MaterialButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.net.HttpStatus: int getStatusCode()
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.ObjectMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.graphics.TextureArray: com.badlogic.gdx.graphics.TextureArrayData data
com.badlogic.gdx.scenes.scene2d.Actor: boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.IntMap: void clear(int)
com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()
com.badlogic.gdx.utils.compression.lz.BinTree
com.badlogic.gdx.math.MathUtils: float cosDeg(float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void clearAllFrameBuffers(com.badlogic.gdx.Application)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: ParticleControllerInfluencer$Random()
com.badlogic.gdx.utils.reflect.Field: java.lang.Class getElementType(int)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: long Type
com.badlogic.gdx.math.collision.BoundingBox: BoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.backends.android.AndroidInput: java.lang.String text
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: int BACKWARD
com.badlogic.gdx.graphics.OrthographicCamera: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.utils.XmlReader$Element root
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.physics.box2d.Transform: com.badlogic.gdx.math.Vector2 orientation
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: java.nio.ByteBuffer getBuffer(long)
androidx.lifecycle.SingleGeneratedAdapterObserver
com.badlogic.gdx.graphics.GL20: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: DistanceJointDef()
com.badlogic.gdx.graphics.glutils.VertexData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.g3d.decals.Decal: int SIZE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader
com.badlogic.gdx.utils.Pool: int max
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: java.nio.IntBuffer tmpHandle
com.google.android.material.chip.Chip: Chip(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable minusOver
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: DynamicsModifier$CentripetalAcceleration()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(boolean)
com.esotericsoftware.kryo.io.Output: void writeByte(byte)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setTexture(com.badlogic.gdx.graphics.Texture)
com.esotericsoftware.kryo.util.IdentityMap: int PRIME2
com.badlogic.gdx.backends.android.InputProcessorLW: boolean mouseMoved(int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void add(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: int getVersion()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VelocityThetaStartOffset
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType[] values()
com.badlogic.gdx.utils.PropertiesUtils: int NONE
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.math.Matrix4 projectionMatrix
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.math.Vector3 position
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib2f(int,float,float)
com.badlogic.gdx.graphics.TextureData$TextureDataType: TextureData$TextureDataType(java.lang.String,int)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowOut pow5Out
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetIntegerv(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: boolean isStencil
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: java.lang.String getImagePath(int)
com.badlogic.gdx.physics.box2d.CircleShape: com.badlogic.gdx.math.Vector2 getPosition()
com.badlogic.gdx.graphics.GL30: void glUniform3iv(int,int,int[],int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void visualScrollY(float)
com.badlogic.gdx.graphics.GL30: int GL_COLOR
com.badlogic.gdx.utils.ObjectMap: java.lang.Object remove(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float getScale(float)
com.badlogic.gdx.math.MathUtils: float cos(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glStencilMaskSeparate(int,int)
com.badlogic.gdx.math.BSpline: float locate(java.lang.Object)
com.badlogic.gdx.utils.Queue: java.lang.Object[] values
com.badlogic.gdx.math.CatmullRomSpline: int spanCount
com.esotericsoftware.kryo.util.ObjectMap$MapIterator
com.esotericsoftware.kryonet.FrameworkMessage
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap getBitmap()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDisableVertexAttribArray(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.Body createBody(com.badlogic.gdx.physics.box2d.BodyDef)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: boolean onPreDraw()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.FrameBufferCubemap build()
com.badlogic.gdx.backends.android.AndroidGL20: int[] ints2
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter object(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: int _tableSize
com.badlogic.gdx.utils.ShortArray: boolean isEmpty()
com.badlogic.gdx.net.NetJavaImpl: java.util.concurrent.ExecutorService executorService
com.badlogic.gdx.graphics.g2d.Sprite: float width
com.badlogic.gdx.utils.LongMap$Entry
androidx.appcompat.widget.LinearLayoutCompat: float getWeightSum()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float padRight
com.badlogic.gdx.utils.CharArray
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: com.badlogic.gdx.graphics.g3d.particles.ResourceData resources
com.badlogic.gdx.utils.IntSet: int hash2(int)
com.esotericsoftware.kryo.io.Input: Input(java.io.InputStream,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBlendEquationSeparate(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(float)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE29
com.badlogic.gdx.backends.android.AndroidGraphics: long frameStart
com.badlogic.gdx.utils.ObjectFloatMap$Keys: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.SpriteCache: SpriteCache(int,com.badlogic.gdx.graphics.glutils.ShaderProgram,boolean)
com.esotericsoftware.kryonet.Connection: java.net.InetSocketAddress udpRemoteAddress
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preTranslate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Table getContentTable()
com.badlogic.gdx.math.Matrix4: Matrix4(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.Sprite: void setPackedColor(float)
androidx.appcompat.widget.Toolbar: int getPopupTheme()
com.badlogic.gdx.backends.android.AndroidInput: android.hardware.SensorEventListener accelerometerListener
com.badlogic.gdx.scenes.scene2d.actions.EventAction: EventAction(java.lang.Class)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float x
com.gameanalytics.sdk.GAErrorSeverity: com.gameanalytics.sdk.GAErrorSeverity valueOf(java.lang.String)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void renderMapLayer(com.badlogic.gdx.maps.MapLayer)
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean getClip()
com.esotericsoftware.kryo.Generics: java.util.Map typeVar2class
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: float getActionTextColorAlpha()
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1: EventAction$1(com.badlogic.gdx.scenes.scene2d.actions.EventAction)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentRange
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.Renderable renderable
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int Range
com.badlogic.gdx.input.RemoteInput: boolean justTouched
com.badlogic.gdx.utils.AtomicQueue: AtomicQueue(int)
com.badlogic.gdx.math.Frustum: boolean pointInFrustum(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromAxis(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.utils.ByteArray: byte[] items
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsQuery(int)
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: int nextIndex
com.google.android.material.button.MaterialButton: void setIconPadding(int)
com.badlogic.gdx.input.GestureDetector: void setTapSquareSize(float)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: long getAverage(long[],int)
com.badlogic.gdx.Input: void setInputProcessor(com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: com.badlogic.gdx.utils.Array scissors
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: DistanceJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.assets.AssetManager: void taskFailed(com.badlogic.gdx.assets.AssetDescriptor,java.lang.RuntimeException)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getSpringFrequencyHz()
com.badlogic.gdx.utils.JsonWriter$1
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: void setAmountHeight(float)
com.fasterxml.jackson.databind.util.AccessPattern: com.fasterxml.jackson.databind.util.AccessPattern valueOf(java.lang.String)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters: boolean generateMipMaps
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: int draggingPointer
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean ableToDraw()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter array(java.lang.String)
com.badlogic.gdx.audio.Music: void play()
com.esotericsoftware.kryo.io.Input: char[] chars
com.badlogic.gdx.utils.LongMap: boolean hasZeroValue
com.badlogic.gdx.utils.viewport.Viewport: int getScreenWidth()
com.badlogic.gdx.utils.LongMap: LongMap()
com.badlogic.gdx.maps.objects.TextureMapObject: com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion()
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_FIXED_WIDTH
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter: java.util.Locale locale
com.esotericsoftware.kryo.io.Output: byte[] toBytes()
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader
com.badlogic.gdx.backends.android.AndroidPreferences: android.content.SharedPreferences sharedPrefs
com.badlogic.gdx.utils.CharArray: char random()
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_24_8
com.badlogic.gdx.input.RemoteInput: int keyCount
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: void allocateChannels()
com.badlogic.gdx.graphics.glutils.ETC1: ETC1()
com.esotericsoftware.jsonbeans.Json: java.lang.Object newInstance(java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.Shop: Shop()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void updateDisplayText()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Table getTable()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetJointSpeed(long)
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue require(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBlendEquationSeparate(int,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String BONEWEIGHT_ATTRIBUTE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: byte[] b
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color SCARLET
com.badlogic.gdx.Graphics: void requestRendering()
com.badlogic.gdx.utils.IntMap: boolean notEmpty()
com.badlogic.gdx.utils.ObjectIntMap$Entries: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.utils.Array getActors()
com.badlogic.gdx.backends.android.ZipResourceFile: int kMaxEOCDSearch
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: void removeField(java.lang.String)
androidx.appcompat.widget.ActionMenuView: int getPopupTheme()
androidx.appcompat.widget.AppCompatEditText: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int d
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode[] $VALUES
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color NAVY
com.esotericsoftware.kryonet.UdpConnection: java.net.InetSocketAddress connectedAddress
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void triangle(short,short,short)
com.google.android.material.card.MaterialCardView: void setBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.Input$Keys: int VOLUME_UP
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object[] keyTable
com.badlogic.gdx.utils.BooleanArray: void addAll(com.badlogic.gdx.utils.BooleanArray)
com.badlogic.gdx.backends.android.AndroidApplicationLogger: void log(java.lang.String,java.lang.String)
com.google.android.material.textfield.TextInputLayout$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean left()
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: float y
com.badlogic.gdx.Preferences: com.badlogic.gdx.Preferences putString(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer)
com.fasterxml.jackson.databind.annotation.JsonSerialize$Typing: com.fasterxml.jackson.databind.annotation.JsonSerialize$Typing[] values()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setSpriteMode(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode)
com.google.android.material.bottomappbar.BottomAppBar: void setElevation(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: void dispose()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void line(float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.graphics.Color debugTableColor
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int degrees
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE11
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short,java.lang.Object,int[])
com.badlogic.gdx.Net$HttpRequest: Net$HttpRequest()
com.badlogic.gdx.utils.BaseJsonReader
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void patch(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,int,int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: java.lang.String createFragmentShader(boolean,boolean,int)
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.g2d.BitmapFont font
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container pad(float)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawJoint(com.badlogic.gdx.physics.box2d.Joint)
com.badlogic.gdx.backends.android.AndroidSound
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getDescender()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniSetLimits(long,float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode[] $VALUES
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: RegionInfluencer$Random()
com.badlogic.gdx.physics.box2d.Contact: int jniGetChildIndexA(long)
com.esotericsoftware.kryo.Kryo: Kryo(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver,com.esotericsoftware.kryo.StreamFactory)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mFinishedCreatingEglSurface
com.badlogic.gdx.math.Vector2: boolean hasSameDirection(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: com.badlogic.gdx.math.Vector3 tmpV1
com.google.android.material.card.MaterialCardView: void setBackgroundInternal(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Table: int getColumns()
com.esotericsoftware.reflectasm.FieldAccess: java.lang.Class[] getFieldTypes()
com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature valueOf(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput: float[] orientation
com.esotericsoftware.jsonbeans.JsonValue: short getShort(java.lang.String,short)
com.esotericsoftware.kryo.io.KryoObjectOutput: KryoObjectOutput(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output)
com.badlogic.gdx.utils.Timer$Task: void run()
com.badlogic.gdx.utils.Logger: Logger(java.lang.String)
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportButtonTintList()
com.badlogic.gdx.utils.JsonValue$ValueType: JsonValue$ValueType(java.lang.String,int)
com.esotericsoftware.kryonet.rmi.ObjectSpace
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth
com.badlogic.gdx.graphics.g2d.TextureRegion: void flip(boolean,boolean)
com.badlogic.gdx.utils.PerformanceCounter: PerformanceCounter(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
androidx.appcompat.widget.ActionMenuView: void setExpandedActionViewsExclusive(boolean)
com.badlogic.gdx.utils.LongMap$MapIterator: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter: SoundLoader$SoundParameter()
com.esotericsoftware.kryo.Kryo: void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.physics.box2d.PolygonShape: void jniSetAsBox(long,float,float)
com.esotericsoftware.kryo.util.FastestStreamFactory: boolean isUnsafe
com.esotericsoftware.kryo.serializers.ObjectField: void setField(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Locale)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors creatureFactors
com.badlogic.gdx.utils.PooledLinkedList$1: PooledLinkedList$1(com.badlogic.gdx.utils.PooledLinkedList,int,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeWidth()
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void reset()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.Color tmpColor1
com.badlogic.gdx.physics.box2d.Fixture: boolean jniTestPoint(long,float,float)
com.badlogic.gdx.backends.android.AndroidApplication: android.os.Handler handler
com.esotericsoftware.kryonet.Listener$LagListener$1: Listener$LagListener$1(com.esotericsoftware.kryonet.Listener$LagListener)
com.badlogic.gdx.backends.android.AndroidApplication$1: void dispose()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int InterpolationStartOffset
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setScale(int)
com.badlogic.gdx.utils.StringBuilder: void setCharAt(int,char)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: boolean act(float)
com.google.android.material.chip.Chip: java.lang.CharSequence getCloseIconContentDescription()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: AnimationController(com.badlogic.gdx.graphics.g3d.ModelInstance)
androidx.appcompat.view.menu.ListMenuItemView: void setCheckable(boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float[] getTimeline()
com.badlogic.gdx.graphics.g2d.NinePatch: void setMiddleHeight(float)
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_BUFFER_BIT
com.badlogic.gdx.graphics.GL30: void glGenQueries(int,int[],int)
com.badlogic.gdx.utils.IntMap: void push(int,java.lang.Object,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int TotalLifeOffset
com.badlogic.gdx.math.Vector3: float dst(float,float,float)
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: char keyChar
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: Window$WindowStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.math.Quaternion: float len2(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL30: void glClearBufferiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.Cubemap: Cubemap(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData: java.lang.Class type
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: int a()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitIincInsn(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable over
com.badlogic.gdx.backends.android.AndroidApplication: void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float startY
com.badlogic.gdx.backends.android.AndroidInput: boolean accelerometerAvailable
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue get(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void clearRenderablesPool()
com.badlogic.gdx.assets.loaders.BitmapFontLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getSubtitle()
com.badlogic.gdx.assets.AssetLoaderParameters: com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_PASS_DEPTH_PASS
com.badlogic.gdx.graphics.g2d.SpriteCache: void draw(int,int,int)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(int,boolean)
com.badlogic.gdx.utils.IdentityMap: java.util.Iterator iterator()
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void ShiftLow()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label a()
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation: com.badlogic.gdx.utils.Array rotation
com.badlogic.gdx.utils.Json: java.lang.Object[] equals2
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: int bufferHandle
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int w
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.ui.Widget: float getMinHeight()
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: void setId(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenQueries(int,int[],int)
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean managed
com.gameanalytics.sdk.events.EGASdkErrorCategory: com.gameanalytics.sdk.events.EGASdkErrorCategory[] values()
com.badlogic.gdx.scenes.scene2d.Stage: boolean[] pointerTouched
com.badlogic.gdx.utils.Base64Coder: byte[] decode(char[],int,int,byte[])
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority valueOf(java.lang.String)
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.ServerDiscoveryHandler discoveryHandler
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setPadding(float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g2d.Sprite: float scaleX
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue getChild(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.TextField: int visibleTextEnd
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void dispose()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glPixelStorei(int,int)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 cpy()
androidx.fragment.app.Fragment: void onActivityCreated(android.os.Bundle)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCenter(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.BitmapFont: float getCapHeight()
com.badlogic.gdx.graphics.g3d.utils.RenderContext: boolean depthMask
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel addChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean scrolled(int)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: Emitter(com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide bottom
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy: com.badlogic.gdx.graphics.g2d.PixmapPacker$Page pack(com.badlogic.gdx.graphics.g2d.PixmapPacker,java.lang.String,com.badlogic.gdx.math.Rectangle)
com.esotericsoftware.jsonbeans.JsonValue: boolean isArray()
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral Gyroscope
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: float delayTimer
com.badlogic.gdx.graphics.TextureData: boolean disposePixmap()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitLabel(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.scenes.scene2d.ui.Skin$2: Skin$2(com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter g
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 setAngle(float)
com.esotericsoftware.kryo.serializers.FieldSerializer: void setUseAsm(boolean)
androidx.appcompat.widget.LinearLayoutCompat
androidx.appcompat.widget.AppCompatSpinner: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.esotericsoftware.kryo.serializers.AsmCachedFieldFactory: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.glutils.HdpiMode: HdpiMode(java.lang.String,int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 Y
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup columnCenter()
com.badlogic.gdx.input.GestureDetector: boolean isWithinTapRectangle(float,float,float,float)
com.esotericsoftware.kryo.util.IntArray: void addAll(int[])
com.badlogic.gdx.utils.compression.lzma.Encoder: long[] processedOutSize
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: List$ListStyle(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)
com.badlogic.gdx.Input: float getPressure(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setEGLWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory)
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: void update(float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int GPU_COLOR_OFFSET
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.Manifold manifold
com.badlogic.gdx.physics.box2d.World: boolean reportFixture(long)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value backgroundBottom
com.badlogic.gdx.graphics.Color: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Stack: float minWidth
com.badlogic.gdx.utils.Align: boolean isBottom(int)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: NinePatchDrawable()
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeFloat(float,float,boolean)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int posY
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(char[])
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3: DefaultShader$Setters$3()
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter set(java.lang.String,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.SpriteCache: SpriteCache(int,boolean)
com.badlogic.gdx.backends.android.AndroidInput: void unregisterSensorListeners()
com.badlogic.gdx.utils.Pool: java.lang.Object newObject()
com.badlogic.gdx.audio.Sound: void setPan(long,float,float)
com.badlogic.gdx.math.Quaternion: float getAngle()
com.badlogic.gdx.graphics.GL20: int GL_UNSIGNED_SHORT_5_6_5
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createDiffuse(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float yScaleDiff
com.badlogic.gdx.utils.Json: void readField(java.lang.Object,java.lang.String,java.lang.String,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: com.badlogic.gdx.utils.IntArray linesBreak
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: RegionInfluencer$Single(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph missingGlyph
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object peekKey()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createAmbient(float,float,float,float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer FLOAT
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: void Init(int)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.badlogic.gdx.graphics.GL30: int GL_MAP_READ_BIT
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField findNextTextField(com.badlogic.gdx.utils.Array,com.badlogic.gdx.scenes.scene2d.ui.TextField,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_GRAVITY
com.badlogic.gdx.utils.Base64Coder: byte[] decodeLines(java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph createGlyph(char,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter,com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker,float,com.badlogic.gdx.graphics.g2d.PixmapPacker)
com.badlogic.gdx.utils.I18NBundle: java.util.Locale getFallbackLocale(java.util.Locale)
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction: int count
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short,boolean[])
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: boolean iconDropConsumed
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Input getInput()
com.google.android.material.internal.VisibilityAwareImageButton: int getUserSetVisibility()
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void remove(com.badlogic.gdx.scenes.scene2d.ui.Button[])
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: GLSurfaceView20(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.esotericsoftware.kryonet.util.ObjectIntMap: int stashCapacity
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void setSerializer(com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_NO_RECURSE
com.esotericsoftware.kryo.io.ByteBufferInput: void readUtf8(int)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.utils.UBJsonReader: java.lang.String parseString(java.io.DataInputStream,byte)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder: CylinderShapeBuilder()
com.HyperSphere.Connection.PacketObjects.Misc.Item
com.badlogic.gdx.utils.LongMap$Values: void reset()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean canCacheMoreW
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int[] getTileIds(com.badlogic.gdx.utils.XmlReader$Element,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: java.lang.StringBuffer copy(com.esotericsoftware.kryo.Kryo,java.lang.StringBuffer)
com.badlogic.gdx.graphics.GL20: int GL_NEAREST_MIPMAP_LINEAR
com.badlogic.gdx.utils.LongMap$Entries: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: void layout()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.backends.android.AndroidInput$3: AndroidInput$3(com.badlogic.gdx.backends.android.AndroidInput,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$TextInputListener)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getNumGlyphs(long)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2: Dialog$2(com.badlogic.gdx.scenes.scene2d.ui.Dialog)
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float getHighMax()
com.badlogic.gdx.utils.ObjectFloatMap$Keys: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Values values()
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean contains(java.lang.Object)
com.esotericsoftware.kryo.io.FastInput: FastInput()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action)
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: boolean hasNext()
com.badlogic.gdx.graphics.TextureData$Factory: com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: void setSprite(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void updateInstanceData(int,java.nio.FloatBuffer,int,int)
com.badlogic.gdx.utils.ByteArray: void incr(int,byte)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: com.badlogic.gdx.math.Vector2 getGroundAnchorA()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String b
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short,java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.util.MapReferenceResolver: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.utils.IdentityMap$MapIterator: com.badlogic.gdx.utils.IdentityMap map
com.badlogic.gdx.utils.Json: void writeArrayEnd()
com.badlogic.gdx.utils.LongMap: int pushIterations
com.badlogic.gdx.utils.Array: java.lang.Object[] toArray(java.lang.Class)
com.badlogic.gdx.math.Rectangle: boolean overlaps(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: void setMesh(com.badlogic.gdx.graphics.Mesh,com.badlogic.gdx.graphics.g3d.Model)
androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue value
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType type
com.badlogic.gdx.utils.async.AsyncExecutor$2
com.badlogic.gdx.math.Interpolation$SwingOut: float scale
com.badlogic.gdx.utils.viewport.ScalingViewport: com.badlogic.gdx.utils.Scaling scaling
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glPixelStorei(int,int)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: void updateRelative(float)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor scrollFocus
com.badlogic.gdx.backends.android.AndroidInput: float[] magneticFieldValues
com.esotericsoftware.jsonbeans.ObjectMap: int PRIME3
com.badlogic.gdx.utils.FloatArray: FloatArray(float[])
com.badlogic.gdx.graphics.g2d.PolygonBatch: void begin()
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: EllipseSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory: GLSurfaceViewAPI18$DefaultWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1)
com.badlogic.gdx.utils.BooleanArray: boolean removeIndex(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ICMPGE
com.esotericsoftware.kryonet.util.ObjectIntMap: ObjectIntMap(com.esotericsoftware.kryonet.util.ObjectIntMap)
com.badlogic.gdx.math.Affine2: boolean isIdt()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2: void run()
com.badlogic.gdx.graphics.g2d.BitmapFont: void dispose()
com.badlogic.gdx.ApplicationLogger: void error(java.lang.String,java.lang.String)
com.esotericsoftware.kryo.util.IdentityMap$Entries: com.esotericsoftware.kryo.util.IdentityMap$Entry next()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void reset()
com.badlogic.gdx.utils.PerformanceCounter: void tick()
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute copy()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: byte[][] kerning
com.badlogic.gdx.input.RemoteInput: int[] touchX
com.fasterxml.jackson.databind.util.AccessPattern: com.fasterxml.jackson.databind.util.AccessPattern[] values()
com.esotericsoftware.kryo.util.ObjectMap: int size
com.badlogic.gdx.utils.IntMap$Keys: com.badlogic.gdx.utils.IntArray toArray()
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker stroker
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.input.GestureDetector: void cancel()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 scale(float,float,float)
com.esotericsoftware.minlog.Log: int LEVEL_TRACE
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL30: int GL_RGB16F
com.badlogic.gdx.net.ServerSocket: void dispose()
com.badlogic.gdx.utils.Array: void shuffle()
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: float lowMin
com.badlogic.gdx.scenes.scene2d.utils.Selection: void snapshot()
com.badlogic.gdx.graphics.GL20: int GL_UNSIGNED_SHORT_5_5_5_1
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void showCursor()
com.badlogic.gdx.backends.android.AndroidGraphics: android.view.View getView()
com.esotericsoftware.kryo.io.UnsafeOutput: void writeLong(long)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getErrorContentDescription()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer
com.badlogic.gdx.scenes.scene2d.Event: com.badlogic.gdx.scenes.scene2d.Actor targetActor
com.badlogic.gdx.utils.ArrayMap: java.lang.Object getValueAt(int)
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_TYPE
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.graphics.glutils.GLVersion: com.badlogic.gdx.graphics.glutils.GLVersion$Type getType()
com.badlogic.gdx.utils.ShortArray: void incr(int,short)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: ModelMaterial()
com.badlogic.gdx.graphics.g3d.decals.Decal: void translateX(float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void disableVertexAttribute(java.lang.String)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder)
com.esotericsoftware.kryo.io.Output: void close()
com.badlogic.gdx.physics.box2d.Body: float getAngle()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.Stage
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: boolean equals(java.lang.Object)
com.badlogic.gdx.assets.AssetDescriptor: AssetDescriptor(com.badlogic.gdx.files.FileHandle,java.lang.Class)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters: com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter
com.google.android.material.checkbox.MaterialCheckBox: android.content.res.ColorStateList getMaterialThemeColorsTintList()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getFormat()
com.badlogic.gdx.graphics.g3d.Model: void calculateTransforms()
com.badlogic.gdx.graphics.glutils.HdpiUtils: void setMode(com.badlogic.gdx.graphics.glutils.HdpiMode)
com.badlogic.gdx.utils.viewport.Viewport: float getWorldWidth()
com.esotericsoftware.kryonet.rmi.ObjectSpace$3
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.utils.Bits: int length()
com.badlogic.gdx.graphics.GL20: void glFrontFace(int)
com.badlogic.gdx.utils.ObjectFloatMap$Keys
com.badlogic.gdx.math.Plane: void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FASTORE
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowIn pow5In
com.badlogic.gdx.graphics.Cubemap$1: void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
androidx.fragment.app.Fragment: boolean isStateSaved()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: void layoutWrapped()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: CheckBox(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void cone(float,float,float,int)
com.badlogic.gdx.physics.box2d.Contact: float getFriction()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: void beforeGroup(int,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2: DefaultShader$Setters$2()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color set(float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: Item(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer: java.lang.Short read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.SortedIntList$Node
com.badlogic.gdx.utils.IntMap$Keys: int next()
com.badlogic.gdx.math.Vector2: boolean isOnLine(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter specularTexture
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_range_lengths
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int[] getAttributeLocations(com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int GL_TEXTURE_1D
com.badlogic.gdx.utils.compression.lzma.Encoder: void WriteEndMarker(int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: boolean disabled
com.badlogic.gdx.math.CumulativeDistribution: java.lang.Object value(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glCreateShader(int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Table: void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.backends.android.AndroidGraphics: void resume()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void init(com.badlogic.gdx.graphics.glutils.ShaderProgram,com.badlogic.gdx.graphics.g3d.Renderable)
com.esotericsoftware.kryo.util.ObjectMap: com.esotericsoftware.kryo.util.ObjectMap$Keys keys()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: DefaultArraySerializers$ShortArraySerializer()
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean flipY
com.badlogic.gdx.net.HttpStatus: int SC_USE_PROXY
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_2D
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: void prepare()
com.badlogic.gdx.utils.Queue: int size
com.badlogic.gdx.graphics.Cubemap$1
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_3
com.esotericsoftware.kryonet.ConnectionValues: java.nio.channels.SocketChannel getSocket(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void setDefaultDepthFunc(int)
com.esotericsoftware.kryonet.Connection: void initialize(com.esotericsoftware.kryonet.Serialization,int,int)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData)
com.badlogic.gdx.physics.box2d.Contact: com.badlogic.gdx.physics.box2d.Fixture getFixtureB()
androidx.fragment.app.FragmentManagerViewModel
com.badlogic.gdx.utils.Array: void addAll(java.lang.Object[])
com.badlogic.gdx.graphics.TextureArrayData: int getHeight()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onOffsetsChanged(float,float,float,float,int,int)
com.esotericsoftware.kryo.io.KryoObjectOutput: void flush()
androidx.lifecycle.ViewModel: ViewModel()
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void setOffsetX(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FRETURN
com.badlogic.gdx.utils.JsonValue: byte[] asByteArray()
com.google.android.material.chip.Chip: void setChipIcon(android.graphics.drawable.Drawable)
com.esotericsoftware.kryonet.FrameworkMessage$Ping
com.badlogic.gdx.utils.compression.lz.BinTree: int[] _hash
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1
com.badlogic.gdx.graphics.profiling.GLInterceptor: com.badlogic.gdx.math.FloatCounter vertexCount
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: void update()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(long,int,char)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int a
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean disposePixmap()
com.badlogic.gdx.utils.IntIntMap: IntIntMap(int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer
com.badlogic.gdx.graphics.GL20: void glFinish()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: int g
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Bezier set(com.badlogic.gdx.utils.Array,int,int)
com.badlogic.gdx.scenes.scene2d.actions.EventAction: com.badlogic.gdx.scenes.scene2d.EventListener listener
com.badlogic.gdx.physics.box2d.joints.WheelJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence,int,int)
com.badlogic.gdx.math.collision.BoundingBox: float getCenterX()
androidx.appcompat.widget.LinearLayoutCompat: void setHorizontalGravity(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FDIV
com.badlogic.gdx.Input$Keys: int NUM_4
androidx.recyclerview.widget.RecyclerView: int getScrollState()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void end()
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil: void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentEncoding
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: DecalMaterial()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DUP2_X1
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: long Mask
com.esotericsoftware.minlog.Log: int LEVEL_DEBUG
com.esotericsoftware.jsonbeans.JsonValue: boolean isNull()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGenBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell add(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$ParticleBox2D: com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D this$0
com.badlogic.gdx.scenes.scene2d.ui.Container: boolean getClip()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener: void onLoop(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void resetCapacity()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 Zero
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter reflectionUVTransform
com.badlogic.gdx.graphics.g2d.PixmapPacker: void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
androidx.appcompat.widget.AppCompatTextView: int getLastBaselineToBottomHeight()
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.utils.Array children
com.badlogic.gdx.utils.IntFloatMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.files.FileHandle: long length()
com.badlogic.gdx.scenes.scene2d.ui.Table$1: Table$1()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LLOAD
com.esotericsoftware.jsonbeans.ObjectMap: com.esotericsoftware.jsonbeans.ObjectMap$Values values()
com.badlogic.gdx.utils.DelayedRemovalArray: void swap(int,int)
com.badlogic.gdx.input.RemoteInput: RemoteInput(int,com.badlogic.gdx.input.RemoteInput$RemoteInputListener)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void init()
com.badlogic.gdx.utils.ObjectMap$MapIterator: boolean hasNext
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment mParentFragment
com.google.android.material.appbar.AppBarLayout$BaseBehavior
com.badlogic.gdx.net.NetJavaImpl: void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
com.esotericsoftware.kryonet.rmi.RemoteObject: void setTransmitReturnValue(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void a(int,int)
com.badlogic.gdx.maps.MapLayer: float renderOffsetX
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: float getPrefWidth()
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV7
com.badlogic.gdx.maps.tiled.TiledMapTileSet: com.badlogic.gdx.maps.MapProperties getProperties()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: int maxListCount
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: int writeFieldCount
com.badlogic.gdx.graphics.g2d.BitmapFont: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider: DepthShaderProvider(java.lang.String,java.lang.String)
com.esotericsoftware.kryonet.TcpConnection: int keepAliveMillis
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int mStencilSize
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBindRenderbuffer(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: ClassReader(byte[])
com.badlogic.gdx.Input$Orientation: Input$Orientation(java.lang.String,int)
androidx.appcompat.widget.ActionBarOverlayLayout: void setHasNonEmbeddedTabs(boolean)
com.badlogic.gdx.input.RemoteInput: java.lang.String[] ips
com.badlogic.gdx.graphics.TextureData$Factory
com.badlogic.gdx.backends.android.AndroidInput: float getGyroscopeX()
com.badlogic.gdx.scenes.scene2d.ui.Container: void addActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryo.serializers.BeanSerializer$1: com.esotericsoftware.kryo.serializers.BeanSerializer this$0
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.JsonWriter getWriter()
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation valueOf(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitLineNumber(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.scenes.scene2d.utils.Layout: float getPrefHeight()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getFaceFlags(long)
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: void findNextIndex()
com.badlogic.gdx.utils.FloatArray: boolean equals(java.lang.Object,float)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentType
com.badlogic.gdx.utils.ObjectSet: boolean removeStash(java.lang.Object)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void updateInstanceData(int,float[],int,int)
androidx.fragment.app.Fragment: boolean mIsCreated
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.assets.RefCountedContainer
com.badlogic.gdx.scenes.scene2d.Actor: boolean visible
com.badlogic.gdx.audio.Music: void setVolume(float)
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.ShortArray originalIndices
com.badlogic.gdx.physics.box2d.Joint: void jniGetAnchorA(long,float[])
com.esotericsoftware.kryonet.Client: void connect(int,java.net.InetAddress,int)
com.badlogic.gdx.backends.android.AndroidGL30: void glPauseTransformFeedback()
com.badlogic.gdx.graphics.GL20: int GL_MEDIUM_INT
androidx.appcompat.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void invalidate()
com.badlogic.gdx.scenes.scene2d.ui.Label: Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int L
com.badlogic.gdx.backends.android.AndroidDaydream: android.widget.FrameLayout$LayoutParams createLayoutParams()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: boolean hasColor
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: void allocateChannels()
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setDirection(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.Actor: void setScaleX(float)
com.badlogic.gdx.math.Plane: com.badlogic.gdx.math.Vector3 normal
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 scl(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 right
com.badlogic.gdx.utils.SnapshotArray: void clear()
com.esotericsoftware.kryo.util.IntMap: java.lang.Object[] valueTable
com.badlogic.gdx.utils.DataBuffer: byte[] getBuffer()
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitCode()
com.esotericsoftware.reflectasm.FieldAccess: com.esotericsoftware.reflectasm.FieldAccess get(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void restoreExpandedValues(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryonet.FrameworkMessage$Ping: FrameworkMessage$Ping()
com.badlogic.gdx.graphics.g3d.Renderable
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: com.badlogic.gdx.graphics.Texture$TextureWrap vWrap
com.esotericsoftware.kryo.util.IntMap$Entry: java.lang.String toString()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int a()
com.badlogic.gdx.utils.XmlReader$Element: void remove()
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: java.util.Map getHeaders()
com.badlogic.gdx.backends.android.AndroidGraphics: int fps
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int,float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_BRIDGE
com.badlogic.gdx.Net: boolean openURI(java.lang.String)
com.google.android.material.internal.ForegroundLinearLayout
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.utils.Array items
com.esotericsoftware.jsonbeans.JsonReader: void startArray(java.lang.String)
com.google.android.material.chip.ChipGroup: void setShowDividerVertical(int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void color(float)
com.badlogic.gdx.utils.Sort: void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void addTileProperties(com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.scenes.scene2d.ui.Table$4
com.badlogic.gdx.graphics.g2d.freetype.FreeType: long initFreeTypeJni()
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String getName()
com.badlogic.gdx.utils.ObjectFloatMap: void clear()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.graphics.Camera getCamera()
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
com.google.android.material.chip.Chip: void setBackgroundColor(int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField
com.google.android.material.chip.Chip: float getCloseIconSize()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 set(float[])
com.badlogic.gdx.graphics.g2d.PixmapPacker: PixmapPacker(int,int,com.badlogic.gdx.graphics.Pixmap$Format,int,boolean,boolean,boolean,com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean serializeTransient
com.badlogic.gdx.math.Vector3: boolean isPerpendicular(com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: byte[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.graphics.GL30: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.Widget: float getMinWidth()
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter: PixmapLoader$PixmapParameter()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.g2d.NinePatch: void setPadTop(float)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int life
com.badlogic.gdx.input.RemoteInput: boolean keyJustPressed
com.badlogic.gdx.backends.android.AndroidDaydream: long getNativeHeap()
com.badlogic.gdx.utils.StringBuilder: char charAt(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: long strokerNew(long)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 cpy()
com.badlogic.gdx.physics.box2d.Contact: float jniGetTangentSpeed(long)
com.badlogic.gdx.scenes.scene2d.Stage: void disableDebug(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.ComparableTimSort: void mergeCollapse()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: FreeType$GlyphSlot(long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int x
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer: ParticleChannels$Rotation3dInitializer()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot getGlyph()
com.HyperSphere.Connection.PacketObjects.Map.MapObject: MapObject(int,int,int,int,int)
com.badlogic.gdx.math.Frustum: boolean pointInFrustum(float,float,float)
com.badlogic.gdx.math.Polygon: float getScaleY()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindBufferBase(int,int,int)
com.badlogic.gdx.graphics.glutils.ETC1TextureData: int height
com.badlogic.gdx.backends.android.AndroidApplicationLogger: void debug(java.lang.String,java.lang.String)
com.esotericsoftware.jsonbeans.JsonValue: short asShort()
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType RevoluteJoint
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.graphics.glutils.FrameBuffer fbo
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector setLength2(float)
com.badlogic.gdx.scenes.scene2d.utils.Drawable: float getLeftWidth()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureTriangles(int)
com.badlogic.gdx.utils.IntMap$Entry: IntMap$Entry()
com.esotericsoftware.jsonbeans.JsonValue: int size()
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.backends.android.ZipResourceFile getExpansionFile()
com.badlogic.gdx.graphics.GL30: void glGenTransformFeedbacks(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: boolean blended
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType)
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int g
com.badlogic.gdx.scenes.scene2d.ui.Tree: float iconSpacingRight
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void cylinder(float,float,float,int)
com.esotericsoftware.kryonet.Listener$QueuedListener$4: com.esotericsoftware.kryonet.Connection val$connection
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getReturnType(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int GreenOffset
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.files.FileHandle: FileHandle(java.lang.String)
com.badlogic.gdx.utils.ShortArray: void set(int,short)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void computeSize()
com.badlogic.gdx.scenes.scene2d.ui.Label: Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)
androidx.appcompat.widget.ViewStubCompat: void setVisibility(int)
com.badlogic.gdx.math.Affine2: float m00
androidx.cardview.widget.CardView: void setMaxCardElevation(float)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: int ReverseGetPrice(int)
com.badlogic.gdx.utils.Select: int fastMin(java.lang.Object[],java.util.Comparator,int)
com.badlogic.gdx.backends.android.AndroidFileHandle: long length()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: int row
com.badlogic.gdx.utils.ArrayMap$Entries: boolean hasNext()
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isPrimitive(java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: boolean ignoreUnimplemented
com.badlogic.gdx.backends.android.AndroidApplication: void onConfigurationChanged(android.content.res.Configuration)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: boolean[] copy(com.esotericsoftware.kryo.Kryo,boolean[])
com.google.android.material.textfield.TextInputLayout: void setStartIconVisible(boolean)
com.badlogic.gdx.utils.ObjectIntMap$Values: com.badlogic.gdx.utils.IntArray toArray()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: java.lang.Object o2
com.badlogic.gdx.backends.android.AndroidAudioDevice: void setVolume(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteShader(int)
com.badlogic.gdx.scenes.scene2d.Actor: void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)
com.badlogic.gdx.net.NetJavaImpl$2: java.net.HttpURLConnection val$connection
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.graphics.Texture$TextureWrap vWrap
com.badlogic.gdx.scenes.scene2d.ui.Dialog: boolean cancelHide
com.esotericsoftware.kryo.io.FastInput: FastInput(int)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: boolean isDirectory()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
androidx.appcompat.app.AppCompatActivity
com.badlogic.gdx.utils.ObjectMap: void ensureCapacity(int)
com.badlogic.gdx.utils.JsonValue: int[] asIntArray()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector l
com.badlogic.gdx.math.Matrix3: Matrix3(float[])
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib4f(int,float,float,float,float)
androidx.fragment.app.Fragment: boolean mHiddenChanged
androidx.fragment.app.Fragment: int mState
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable replace(int,int,java.lang.CharSequence)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.VertexAttributes GPU_ATTRIBUTES
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_LONG
androidx.recyclerview.widget.RecyclerView: void suppressLayout(boolean)
com.google.android.material.chip.Chip: void setIconStartPaddingResource(int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: TextureAtlas$TextureAtlasData$Region()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: short readShort()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 Zero
com.badlogic.gdx.input.GestureDetector: void setLongPressSeconds(float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String undoText
com.badlogic.gdx.backends.android.AndroidGL20: void glAttachShader(int,int)
com.badlogic.gdx.math.BSpline: boolean continuous
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: void allocateChannels()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter ambientTexture
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver: AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver(com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer
androidx.appcompat.widget.ActionBarOverlayLayout: int getNestedScrollAxes()
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: float amountX
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glPolygonOffset(float,float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell height(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.physics.box2d.ChainShape: void setPrevVertex(float,float)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean blending
com.badlogic.gdx.graphics.g3d.Attributes: boolean same(com.badlogic.gdx.graphics.g3d.Attributes,boolean)
com.badlogic.gdx.utils.IntSet: int hashCode()
com.badlogic.gdx.utils.Logger: java.lang.String tag
com.google.android.material.textfield.TextInputLayout: void setErrorEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.Files files
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void updateVertices(int,float[],int,int)
com.badlogic.gdx.utils.FlushablePool
com.esotericsoftware.kryo.util.ObjectMap$Entries: com.esotericsoftware.kryo.util.ObjectMap$Entry next()
com.esotericsoftware.kryo.NotNull
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetPureRepPrice(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: int size
com.badlogic.gdx.graphics.g2d.NinePatch: int BOTTOM_LEFT
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void reset()
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer: java.lang.Object[] enumConstants
com.badlogic.gdx.scenes.scene2d.ui.List: int getItemIndexAt(float)
com.badlogic.gdx.graphics.g2d.Batch: int X3
com.badlogic.gdx.backends.android.AndroidInput: void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup fill(float)
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.utils.async.AsyncExecutor executor
com.badlogic.gdx.graphics.GL30: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool: com.badlogic.gdx.graphics.g3d.Renderable obtain()
com.badlogic.gdx.utils.ArrayMap$Entries: com.badlogic.gdx.utils.ArrayMap map
com.badlogic.gdx.backends.android.AndroidInput$1
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.esotericsoftware.kryonet.Serialization
com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[],int,int,char[])
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_PINGPONG
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,int,float)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: com.badlogic.gdx.scenes.scene2d.Actor invalidDragActor
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.utils.Array targets
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void getIndices(short[],int)
com.badlogic.gdx.scenes.scene2d.utils.Layout: void setFillParent(boolean)
com.esotericsoftware.jsonbeans.JsonReader: short[] init__json_key_offsets_0()
com.google.android.material.bottomsheet.BottomSheetBehavior: BottomSheetBehavior()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: long DEFAULT_GREGORIAN_CUTOVER
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: void Create(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable selection
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.utils.Array getItems()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1fv(int,int,float[],int)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: PulleyJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.graphics.GL30: int GL_SAMPLER_2D_ARRAY_SHADOW
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.utils.ComparableTimSort: boolean DEBUG
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void box(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.utils.LongMap$Entries: java.lang.Object next()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: boolean flip
com.HyperSphere.Connection.PacketObjects.Misc.Item: java.lang.String getType(int)
com.badlogic.gdx.physics.box2d.ChainShape: ChainShape(long)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
com.google.android.material.textfield.TextInputLayout: void setStartIconContentDescription(java.lang.CharSequence)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP_POSITIVE_X
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitTableSwitchInsn(int,int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.badlogic.gdx.utils.CharArray: void reverse()
com.badlogic.gdx.utils.compression.lzma.Encoder: int _optimumEndIndex
androidx.recyclerview.widget.RecyclerView: void setOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegion(int,int,int,int)
com.badlogic.gdx.utils.IntIntMap$Values: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Container: Container(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.ObjectIntMap: void clear()
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle parent()
com.badlogic.gdx.graphics.g2d.Sprite: float scaleY
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL20: void glUniform4fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.math.Vector2 knobPercent
com.badlogic.gdx.graphics.g2d.PolygonBatch: boolean isDrawing()
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue
com.esotericsoftware.kryonet.Connection: void notifyIdle()
com.badlogic.gdx.utils.PropertiesUtils: PropertiesUtils()
com.badlogic.gdx.math.MathUtils: float atan2(float,float)
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void begin(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.Texture lastTexture
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getMotorSpeed()
com.badlogic.gdx.assets.loaders.SkinLoader: com.badlogic.gdx.scenes.scene2d.ui.Skin newSkin(com.badlogic.gdx.graphics.g2d.TextureAtlas)
androidx.appcompat.widget.LinearLayoutCompat: void setWeightSum(float)
com.badlogic.gdx.InputProcessor
com.badlogic.gdx.utils.Predicate$PredicateIterable: com.badlogic.gdx.utils.Predicate predicate
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object[] keyTable
com.badlogic.gdx.Input$Keys: int valueOf(java.lang.String)
com.esotericsoftware.kryo.util.IntMap$Entry: int key
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager manager
com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)
com.badlogic.gdx.utils.CharArray: int hashCode()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int shadowOffsetX
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
com.badlogic.gdx.scenes.scene2d.Actor: void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_BUFFER_MODE
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color SHAPE_KINEMATIC
com.badlogic.gdx.utils.SerializationException: SerializationException()
com.badlogic.gdx.input.RemoteInput: float getRoll()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell size(float,float)
com.esotericsoftware.kryo.util.IntArray: void shrink()
com.badlogic.gdx.physics.box2d.joints.GearJoint: long jniGetJoint2(long)
com.HyperSphere.Connection.PacketObjects.Map.MapChange: java.lang.Object getKey()
com.badlogic.gdx.utils.ObjectSet: java.lang.Object first()
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter
com.badlogic.gdx.scenes.scene2d.Event: com.badlogic.gdx.scenes.scene2d.Actor listenerActor
com.esotericsoftware.jsonbeans.Json: void setIgnoreUnknownFields(boolean)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: com.badlogic.gdx.math.Vector2 screenPosition
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean isExpanded()
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: int minCheckCount
com.badlogic.gdx.graphics.Pixmap: void drawPixel(int,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer: DefaultSerializers$DoubleSerializer()
com.badlogic.gdx.scenes.scene2d.ui.Widget: void invalidate()
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys: java.lang.Object next()
com.badlogic.gdx.utils.IntIntMap: void putStash(int,int)
com.badlogic.gdx.math.Intersector: boolean intersectRayTriangles(com.badlogic.gdx.math.collision.Ray,java.util.List,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteQueries(int,int[],int)
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: float frequencyHz
com.badlogic.gdx.backends.android.AndroidGL20: void glCompileShader(int)
com.google.android.material.bottomappbar.BottomAppBar: void setFabCradleRoundedCornerRadius(float)
com.badlogic.gdx.graphics.GL20: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.google.android.material.circularreveal.CircularRevealFrameLayout
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: boolean is(long)
com.badlogic.gdx.math.collision.Sphere: long serialVersionUID
com.badlogic.gdx.utils.ObjectMap: float loadFactor
com.badlogic.gdx.graphics.g2d.PolygonBatch: float getPackedColor()
com.badlogic.gdx.backends.android.AndroidFileHandle: java.nio.ByteBuffer map(java.nio.channels.FileChannel$MapMode)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue xOffsetValue
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: boolean isVertexTransformationEnabled()
com.esotericsoftware.kryo.util.ObjectMap$Entries: boolean hasNext()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float down
com.badlogic.gdx.scenes.scene2d.Actor: void clipEnd()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: boolean isFocused()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: SplitPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: int objectID
com.badlogic.gdx.graphics.g2d.SpriteCache: float colorPacked
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: void update()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: int textureID
com.badlogic.gdx.net.HttpParametersUtils: java.lang.String convertHttpParameters(java.util.Map)
com.badlogic.gdx.ApplicationAdapter
com.badlogic.gdx.InputMultiplexer: int size()
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeDoubles(double[])
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: boolean hasUVTransform
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowIn pow2In
com.badlogic.gdx.graphics.glutils.ShaderProgram: boolean pedantic
com.badlogic.gdx.graphics.g3d.ModelCache$2: com.badlogic.gdx.graphics.g3d.ModelCache this$0
com.badlogic.gdx.backends.android.AndroidMusic: void setLooping(boolean)
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object get(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.Color: float r
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_RED
com.badlogic.gdx.graphics.g3d.decals.Decal: int V2
com.esotericsoftware.kryo.io.Input: boolean readBoolean()
com.badlogic.gdx.graphics.GL20: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType iOS
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean behind
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rectLine(float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.input.RemoteInput: boolean isTouched()
com.badlogic.gdx.input.RemoteInput: boolean isConnected()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void findExpandedValues(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.BufferUtils: boolean isUnsafeByteBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.utils.Sort: com.badlogic.gdx.utils.TimSort timSort
com.HyperSphere.Connection.PacketObjects.Map.MapObject: com.HyperSphere.Graphics.Deprecated.PredeterminedGraphic texture
com.badlogic.gdx.Net$HttpRequest: boolean includeCredentials
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: boolean rotate
com.badlogic.gdx.graphics.GL20: void glUniform4iv(int,int,int[],int)
com.badlogic.gdx.utils.ObjectIntMap: int removeStash(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.utils.ShaderProvider shaderProvider
com.esotericsoftware.jsonbeans.Json: void writeValue(java.lang.Object,java.lang.Class,java.lang.Class)
com.esotericsoftware.kryo.util.IntMap$MapIterator: void remove()
com.badlogic.gdx.backends.android.AndroidGL20: int[] ints3
com.badlogic.gdx.Input$Keys: int B
com.badlogic.gdx.files.FileHandle: java.lang.String readString()
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _posEncoders
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteBuffer(int)
com.HyperSphere.Connection.PacketObjects.Misc.PathProgress: int[] getPackage()
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_RG11_EAC
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType Classpath
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
com.badlogic.gdx.math.collision.Ray: Ray()
com.badlogic.gdx.physics.box2d.World: void jniDestroyBody(long,long)
com.badlogic.gdx.Input$Keys: int EXPLORER
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.Reader)
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(int)
com.badlogic.gdx.Preferences: com.badlogic.gdx.Preferences putLong(java.lang.String,long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotX(float)
com.badlogic.gdx.math.RandomXS128
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter emissiveTexture
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Circle: Circle(com.badlogic.gdx.math.Circle)
com.gameanalytics.sdk.GAErrorSeverity: com.gameanalytics.sdk.GAErrorSeverity[] values()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int U2Offset
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.graphics.g3d.model.MeshPart meshPart
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: void add(int,java.lang.Object[])
com.esotericsoftware.kryo.util.IntMap$MapIterator: boolean hasNext
com.badlogic.gdx.utils.ObjectSet: com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1
com.badlogic.gdx.Input$TextInputListener
com.badlogic.gdx.utils.LittleEndianInputStream: java.lang.String readUTF()
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String P3P
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth
com.badlogic.gdx.utils.I18NBundle
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_6
com.badlogic.gdx.Input$Keys: int NUMPAD_5
com.badlogic.gdx.utils.Bits: void flip(int)
com.badlogic.gdx.graphics.GL30: void glStencilFuncSeparate(int,int,int,int)
com.esotericsoftware.kryonet.rmi.ObjectSpace: void close()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: ExternalizableSerializer()
com.badlogic.gdx.utils.reflect.Field: java.lang.Object get(java.lang.Object)
com.badlogic.gdx.graphics.CubemapData: boolean isPrepared()
com.badlogic.gdx.utils.I18NBundle: void setLocale(java.util.Locale)
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.util.IntMap idToRegistration
com.badlogic.gdx.graphics.g2d.Batch: int Y3
androidx.appcompat.widget.SearchView: int getImeOptions()
com.badlogic.gdx.backends.android.AndroidGraphics: long frameId
com.badlogic.gdx.math.collision.Segment: int hashCode()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setPos(float,float,float)
com.badlogic.gdx.utils.StringBuilder: java.lang.String substring(int,int)
com.badlogic.gdx.scenes.scene2d.InputEvent: void setPointer(int)
com.badlogic.gdx.scenes.scene2d.ui.List$1: com.badlogic.gdx.scenes.scene2d.ui.List this$0
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None: ParticleSorter$None()
com.badlogic.gdx.graphics.g3d.Material: Material(java.lang.String,com.badlogic.gdx.graphics.g3d.Attribute[])
com.badlogic.gdx.graphics.profiling.GLProfiler: int getCalls()
com.esotericsoftware.kryo.io.UnsafeOutput: void writeLongs(long[])
com.esotericsoftware.kryo.io.FastOutput: int writeLong(long,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter
com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: com.badlogic.gdx.math.Vector2 tmpCoords
com.badlogic.gdx.utils.XmlReader$Element: boolean hasAttribute(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder: byte _previousByte
com.badlogic.gdx.scenes.scene2d.Group: void clearChildren()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor TextureRegion
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int reuseCount
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGenTextures(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer: DefaultSerializers$ShortSerializer()
com.badlogic.gdx.scenes.scene2d.utils.Selection: java.lang.Object first()
com.badlogic.gdx.utils.ByteArray: ByteArray(byte[])
com.badlogic.gdx.assets.loaders.FileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int s
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer: DefaultSerializers$BigIntegerSerializer()
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: void setTimeline(float[])
com.HyperSphere.FireBase.FireBaseMessageManager
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: boolean DEBUG
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: int getDefaultDepthFunc()
com.esotericsoftware.kryonet.Listener$QueuedListener$1
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.ObjectMap classToDefaultValues
com.badlogic.gdx.graphics.GL30: int GL_RG8_SNORM
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: short VERSION_LO
androidx.fragment.app.FragmentContainerView: void setLayoutTransition(android.animation.LayoutTransition)
com.badlogic.gdx.utils.compression.CRC: void Init()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void allocParticlesData(int)
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int DecodeBit(short[],int)
com.HyperSphere.Connection.PacketObjects.Misc.EntityParticleEffect: java.lang.String particleEffectID
com.badlogic.gdx.Graphics: float getDeltaTime()
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle style
com.esotericsoftware.kryo.io.ByteBufferInput: void order(java.nio.ByteOrder)
com.badlogic.gdx.graphics.GL20: int GL_MAX_RENDERBUFFER_SIZE
com.badlogic.gdx.physics.box2d.joints.RopeJoint: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.maps.MapLayer: float getOffsetX()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: ModelInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter h
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean disabled
com.badlogic.gdx.math.Bezier
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glReleaseShaderCompiler()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.utils.FlushablePool matrices4Pool
com.badlogic.gdx.files.FileHandleStream: java.io.InputStream read()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: int capacity
com.esotericsoftware.kryonet.JsonSerialization
com.badlogic.gdx.utils.IdentityMap$Entries: java.util.Iterator iterator()
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMinTextSize()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: java.lang.Object getValue()
com.badlogic.gdx.graphics.g3d.Attributes: void clear()
com.badlogic.gdx.graphics.glutils.IndexArray: void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.GLTexture: int getTextureObjectHandle()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: SpecialString(java.lang.String,float,float,float)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.utils.LongMap: int hash2(long)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel directionalVelocityChannel
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Application$ApplicationType getType()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void setTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: void allocateChannels()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttribI4ui(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameterf(int,int,float)
com.badlogic.gdx.utils.IntIntMap$Values: IntIntMap$Values(com.badlogic.gdx.utils.IntIntMap)
com.badlogic.gdx.graphics.g3d.ModelCache: void end()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: float maxSpeed
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float time
com.badlogic.gdx.utils.Array: Array(java.lang.Object[])
com.badlogic.gdx.backends.android.AndroidInput: boolean isTouched()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: com.badlogic.gdx.math.Vector3 getTranslation(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ICMPLT
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: void activateParticles(int,int)
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer: FloatFrameBuffer(int,int,boolean)
com.badlogic.gdx.math.Plane: com.badlogic.gdx.math.Vector3 getNormal()
com.badlogic.gdx.backends.android.AndroidGraphics: float ppiY
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.math.Vector2 initialPointer1
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter$JsonObject current
com.badlogic.gdx.utils.BooleanArray: boolean isEmpty()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.graphics.g2d.Sprite: float getOriginY()
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Audio getAudio()
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGetAttribLocation(int,java.lang.String)
com.esotericsoftware.kryo.util.IntMap$Values: IntMap$Values(com.esotericsoftware.kryo.util.IntMap)
com.google.android.material.chip.Chip: android.content.res.ColorStateList getChipBackgroundColor()
com.badlogic.gdx.math.Intersector$SplitTriangle: int total
com.badlogic.gdx.scenes.scene2d.ui.Widget: boolean needsLayout()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGenBuffer()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle scrollStyle
com.badlogic.gdx.utils.viewport.ExtendViewport
com.badlogic.gdx.utils.TimSort: java.lang.Object[] ensureCapacity(int)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: void onDestroyGLSurfaceView()
com.badlogic.gdx.utils.SortedIntList: com.badlogic.gdx.utils.SortedIntList$Node first
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter
com.badlogic.gdx.input.GestureDetector: float tapRectangleWidth
androidx.recyclerview.widget.RecyclerView: void setAccessibilityDelegateCompat(androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate)
com.badlogic.gdx.graphics.glutils.VertexData
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.math.Circle knobBounds
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable stageBackground
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: void setCapacity(int)
com.badlogic.gdx.utils.IntIntMap$Keys
com.fasterxml.jackson.databind.annotation.JsonSerialize$Inclusion: com.fasterxml.jackson.databind.annotation.JsonSerialize$Inclusion valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.IndexArray: void invalidate()
com.badlogic.gdx.Net$HttpRequest: void setContent(java.lang.String)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
com.google.android.material.internal.ForegroundLinearLayout: void setForegroundGravity(int)
com.badlogic.gdx.utils.IntSet$IntSetIterator: int next()
com.badlogic.gdx.backends.android.AndroidInput: boolean hasMultitouch
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToProduct(com.badlogic.gdx.math.Affine2,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 linearVelocity
com.badlogic.gdx.math.Vector3: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void setFillParent(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int PUTFIELD
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value spaceLeft
com.badlogic.gdx.graphics.glutils.FrameBuffer: FrameBuffer(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ICMPGT
com.badlogic.gdx.math.Plane: void set(float,float,float,float,float,float)
com.badlogic.gdx.graphics.Mesh: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.graphics.g2d.GlyphLayout getGlyphLayout()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDetachShader(int,int)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: float startHeight
com.esotericsoftware.kryo.util.ObjectMap$Entries: void remove()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20
com.badlogic.gdx.Gdx: Gdx()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: com.badlogic.gdx.scenes.scene2d.ui.SplitPane this$0
com.esotericsoftware.kryo.io.ByteBufferInput: int readShortUnsigned()
com.badlogic.gdx.Net$HttpRequest: void setFollowRedirects(boolean)
com.google.android.material.button.MaterialButton: int getIconSize()
com.badlogic.gdx.scenes.scene2d.ui.Container: boolean clip
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniEnableMotor(long,boolean)
com.badlogic.gdx.utils.Json: void setSortFields(boolean)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color mul(float,float,float,float)
com.google.android.material.circularreveal.CircularRevealFrameLayout: void setCircularRevealScrimColor(int)
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter
com.badlogic.gdx.graphics.Mesh: int getMaxVertices()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glStencilFunc(int,int,int)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsFixedRotation(long)
com.esotericsoftware.jsonbeans.Json: boolean ignoreUnknownFields
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: RegionInfluencer$Random(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void calculateOffsets()
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean SetMatchFinder(int)
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: ColorAction()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setDropDownBackgroundResource(int)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float posX
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: TextureAtlas$AtlasSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getWidth()
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter json(java.lang.String,java.lang.String)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void setLimits(float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteProgram(int)
com.google.android.material.datepicker.MaterialCalendarGridView
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3: void keyboardFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.graphics.g2d.TextureRegion: float getV2()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void scale(float,float,float)
com.badlogic.gdx.utils.SharedLibraryLoader: void loadFile(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean isEmpty()
com.badlogic.gdx.net.HttpStatus: int SC_SWITCHING_PROTOCOLS
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: BitmapFont$BitmapFontData(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniformMatrix2fv(int,int,boolean,float[],int)
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: void setAlpha(float)
com.esotericsoftware.reflectasm.FieldAccess: void insertConstructor(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.ContactListener contactListener
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Connection
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void addMesh(com.badlogic.gdx.graphics.Mesh)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell expand(int,int)
androidx.fragment.app.Fragment: void performStart()
com.badlogic.gdx.backends.android.AndroidApplication: void initialize(com.badlogic.gdx.ApplicationListener)
com.badlogic.gdx.audio.Sound: long play(float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.graphics.g3d.Material: Material(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.Widget: float getPrefWidth()
com.badlogic.gdx.Input$Keys: int G
com.badlogic.gdx.utils.reflect.Method: java.lang.Class getReturnType()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int yPixelOffset
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void scale(float)
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer: java.io.ByteArrayOutputStream buffer
com.badlogic.gdx.utils.SharedLibraryLoader: java.lang.String abi
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.scenes.scene2d.ui.Tooltip$1: com.badlogic.gdx.scenes.scene2d.ui.Tooltip this$0
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.utils.Array,boolean)
com.fasterxml.jackson.annotation.JsonCreator$Mode: com.fasterxml.jackson.annotation.JsonCreator$Mode valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.graphics.g3d.particles.ParticleController controller
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onPause()
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Input getInput(byte[])
com.badlogic.gdx.utils.LongMap$Entry: java.lang.String toString()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector)
com.badlogic.gdx.physics.box2d.World: void setContinuousPhysics(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void rotate(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.utils.IntFloatMap: IntFloatMap(int)
com.badlogic.gdx.utils.ObjectFloatMap: int stashCapacity
com.badlogic.gdx.math.Interpolation$Pow: float apply(float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.esotericsoftware.kryo.io.KryoObjectOutput: void writeObject(java.lang.Object)
com.badlogic.gdx.graphics.profiling.GLInterceptor: GLInterceptor(com.badlogic.gdx.graphics.profiling.GLProfiler)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int pixelWidth
com.badlogic.gdx.graphics.g3d.Attributes: boolean sorted
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool: void flush()
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: int hashCode()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: java.lang.String id
com.esotericsoftware.reflectasm.ConstructorAccess: java.lang.Object newInstance()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color CHARTREUSE
com.badlogic.gdx.utils.TimeUtils
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: boolean checkPID(java.lang.String)
com.badlogic.gdx.graphics.g2d.NinePatch: int TOP_RIGHT
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,float)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int backwardKey
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ASM4
com.esotericsoftware.kryo.io.FastOutput: FastOutput(java.io.OutputStream,int)
com.badlogic.gdx.utils.StringBuilder: boolean equals(java.lang.Object)
com.google.android.material.internal.FlowLayout: void setLineSpacing(int)
com.badlogic.gdx.graphics.Cubemap: boolean isManaged()
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones: DefaultShader$Setters$Bones(int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$1: void disconnected(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.math.Vector3: float dst2(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float,float)
com.badlogic.gdx.graphics.GL20: void glBindBuffer(int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void update()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: GLSurfaceView20API18$ConfigChooser(int,int,int,int,int,int)
com.badlogic.gdx.utils.LongMap$Keys: void remove()
androidx.appcompat.widget.FitWindowsFrameLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGenBuffer()
com.esotericsoftware.kryo.io.InputChunked
com.esotericsoftware.kryo.io.Input: long readLong(boolean)
com.badlogic.gdx.math.Matrix4: float getScaleZ()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.physics.box2d.Manifold: int[] tmpInt
com.badlogic.gdx.graphics.glutils.KTXTextureData: int imagePos
com.badlogic.gdx.math.Vector: boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
com.google.android.material.snackbar.SnackbarContentLayout: void setMaxInlineActionWidth(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: int getBufferedCount()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_pointLights0color
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector y
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.esotericsoftware.kryo.Kryo: java.lang.ClassLoader classLoader
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: void update(float)
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: float startB
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.utils.SharedLibraryLoader: SharedLibraryLoader()
com.badlogic.gdx.utils.Array$ArrayIterable: Array$ArrayIterable(com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.Game: void dispose()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_THREADS
com.badlogic.gdx.backends.android.AndroidInput: boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
com.badlogic.gdx.utils.XmlReader$Element: void addChild(com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random: ColorInfluencer$Random()
com.badlogic.gdx.graphics.GL20: int GL_ONE_MINUS_SRC_ALPHA
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollPercentX(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_PASS_DEPTH_FAIL
com.badlogic.gdx.math.Interpolation$4: float apply(float)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.ApplicationLogger getApplicationLogger()
com.esotericsoftware.kryo.util.IntMap: void ensureCapacity(int)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: UnsafeMemoryOutput(java.io.OutputStream,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindVertexArray(int)
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver: ImageResolver$DirectImageResolver(com.badlogic.gdx.utils.ObjectMap)
com.esotericsoftware.reflectasm.FieldAccess: void insertSetObject(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.util.ArrayList)
com.badlogic.gdx.utils.Array: boolean contains(java.lang.Object,boolean)
com.badlogic.gdx.graphics.PixmapIO$PNG: com.badlogic.gdx.utils.ByteArray lineOutBytes
com.badlogic.gdx.maps.tiled.TiledMapTileSet: void setName(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getPrefHeight()
com.badlogic.gdx.math.Rectangle: boolean contains(float,float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String[] getUniforms()
com.badlogic.gdx.utils.OrderedMap: java.util.Iterator iterator()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: Type(int,char[],int,int)
com.badlogic.gdx.graphics.Cubemap: Cubemap(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
androidx.appcompat.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_specularUVTransform
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction: float scale
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void modifyData(com.HyperSphere.Connection.PacketObjects.Map.MapObject)
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider: void dispose()
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteQueries(int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.Body: void setAwake(boolean)
com.badlogic.gdx.utils.ObjectIntMap$Entries: java.lang.Object next()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int getAlignment()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter: GLSurfaceViewAPI18$LogWriter()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToRotationRad(float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void flip(boolean,boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glClearStencil(int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: DefaultArraySerializers$IntArraySerializer()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell defaults
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache: DistanceFieldFont$DistanceFieldFontCache(com.badlogic.gdx.graphics.g2d.DistanceFieldFont,boolean)
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] _posSlotPrices
com.badlogic.gdx.utils.IntFloatMap$Keys: IntFloatMap$Keys(com.badlogic.gdx.utils.IntFloatMap)
com.badlogic.gdx.graphics.g2d.SpriteCache: void clear()
com.badlogic.gdx.backends.android.AndroidInput: void onDrop(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LDC
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void onWindowResize(int,int)
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter
com.badlogic.gdx.input.GestureDetector: float tapRectangleCenterY
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _isRep0Long
com.badlogic.gdx.math.Matrix3: int M22
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.Renderable getRenderable(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder: com.badlogic.gdx.math.Vector3 centerPoint(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.utils.compression.lz.InWindow: void Free()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_JOHAB
com.badlogic.gdx.utils.compression.lz.BinTree: int kHash2Size
com.badlogic.gdx.graphics.g3d.decals.Decal: void setPosition(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.Application: long getJavaHeap()
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$1: ParticleEmitterBox2D$1(com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration copy()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: void activateParticles(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String)
com.badlogic.gdx.utils.Align: int bottomRight
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector limit2(float)
com.badlogic.gdx.physics.box2d.Transform: void setRotation(float)
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: float frequencyHz
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_POINTER
com.esotericsoftware.kryonet.Server: void keepAlive()
com.badlogic.gdx.graphics.PixmapIO: void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,int,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getVertBearingY(long)
com.esotericsoftware.kryo.io.Input: void setInputStream(java.io.InputStream)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: MeshSpawnShapeValue$Triangle(float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_PAUSED
com.badlogic.gdx.utils.IntMap: boolean isEmpty()
com.badlogic.gdx.graphics.g2d.TextureRegion: float getU2()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: AnimatedTiledMapTile(float,com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.io.ByteBufferInputStream
com.badlogic.gdx.scenes.scene2d.ui.List$1: java.lang.String prefix
com.badlogic.gdx.utils.ShortArray: void clear()
com.fasterxml.jackson.annotation.JsonTypeInfo$Id: com.fasterxml.jackson.annotation.JsonTypeInfo$Id valueOf(java.lang.String)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.glutils.KTXTextureData: java.nio.ByteBuffer getData(int,int)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object get(java.lang.Object)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void setInstanceData(float[],int,int)
androidx.fragment.app.Fragment: void startPostponedEnterTransition()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.scenes.scene2d.ui.List: float prefWidth
com.badlogic.gdx.graphics.g2d.Batch: int C2
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: RegionInfluencer$Single(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void layout()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: BaseShapeBuilder()
com.badlogic.gdx.graphics.GL30: int GL_R8_SNORM
com.badlogic.gdx.utils.ArrayMap: int put(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE18
com.badlogic.gdx.physics.box2d.Contact: long jniGetFixtureB(long)
com.badlogic.gdx.graphics.g3d.Attribute
com.badlogic.gdx.backends.android.AndroidFiles: boolean setAPKExpansion(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Skin$1: java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void expandAll()
com.badlogic.gdx.scenes.scene2d.ui.Button: float getMinHeight()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Vector2 getPosition(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: void setPolygon(com.badlogic.gdx.graphics.g2d.TextureRegion,float[],float)
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.util.IdentityMap$Entry
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void setMinCheckCount(int)
com.badlogic.gdx.maps.objects.TextureMapObject: float x
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer
com.badlogic.gdx.graphics.g3d.decals.Decal: int V3
com.badlogic.gdx.utils.viewport.StretchViewport: StretchViewport(float,float,com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.jsonbeans.Json: void setWriter(java.io.Writer)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CapsuleShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int)
com.badlogic.gdx.utils.CharArray: char get(int)
com.badlogic.gdx.graphics.Cubemap$CubemapSide
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void throwEglException(java.lang.String,int)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object put_internal(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_MAX_VERTEX_UNIFORM_VECTORS
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void init()
com.badlogic.gdx.physics.box2d.joints.MotorJointDef
com.badlogic.gdx.backends.android.ZipResourceFile: int kLFHExtraLen
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: boolean isComplete()
com.badlogic.gdx.assets.loaders.ModelLoader: ModelLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.backends.android.AndroidApplication: void createWakeLock(boolean)
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float)
com.badlogic.gdx.graphics.GL30: void glBlendFunc(int,int)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegionHeight(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float spawnWidthDiff
com.esotericsoftware.minlog.Log: void error(java.lang.String,java.lang.Throwable)
com.google.android.material.chip.Chip: void setGravity(int)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Touchable getTouchable()
androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior: CoordinatorLayout$Behavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.net.NetJavaImpl: void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.input.RemoteInput$KeyEvent: long timeStamp
com.google.android.material.bottomappbar.BottomAppBar: void setHideOnScroll(boolean)
com.badlogic.gdx.utils.PropertiesUtils: int CONTINUE
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void patch(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer: java.math.BigInteger read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void setParticleCount(int,int)
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT13
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ARRAYLENGTH
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1: java.lang.Object newObject()
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType nullValue
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh: java.lang.String id
com.badlogic.gdx.math.collision.Sphere: float surfaceArea()
com.badlogic.gdx.backends.android.AndroidApplicationBase: android.os.Handler getHandler()
com.badlogic.gdx.Version: java.lang.String VERSION
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters)
com.badlogic.gdx.graphics.GL20: int GL_EXTENSIONS
com.badlogic.gdx.scenes.scene2d.InputListener$1: int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type
com.esotericsoftware.jsonbeans.JsonValue: short getShort(int)
com.badlogic.gdx.utils.PerformanceCounter: void tick(float)
com.badlogic.gdx.Preferences: boolean getBoolean(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.utils.Json
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: float touchOffsetX
com.badlogic.gdx.scenes.scene2d.Group: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 worldCenter
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.utils.SortedIntList: void clear()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: BaseAnimationController(com.badlogic.gdx.graphics.g3d.ModelInstance)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeLittleEndianLong(long)
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void setDepthTest(int)
com.badlogic.gdx.graphics.g3d.ModelCache: void dispose()
com.badlogic.gdx.utils.IntSet$IntSetIterator: int INDEX_ILLEGAL
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: boolean isVertical()
com.badlogic.gdx.scenes.scene2d.Event: com.badlogic.gdx.scenes.scene2d.Stage getStage()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: com.badlogic.gdx.utils.Array batches
com.badlogic.gdx.utils.BufferUtils: long findFloats(java.nio.Buffer,int,java.nio.Buffer,int,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory
com.badlogic.gdx.math.WindowedMean: float getHighest()
com.badlogic.gdx.utils.Array: void swap(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: int c
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isInterface(java.lang.Class)
com.badlogic.gdx.graphics.Camera: void lookAt(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Image: float imageX
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer: java.lang.Float read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
com.badlogic.gdx.graphics.Colors: com.badlogic.gdx.utils.ObjectMap map
com.badlogic.gdx.math.Vector: boolean isUnit()
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Values values2
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform environmentCubemap
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.math.MathUtils: int nextPowerOfTwo(int)
com.badlogic.gdx.maps.tiled.TideMapLoader
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void putVertex(float[],int,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform4fv(int,float[],int,int)
com.badlogic.gdx.utils.BufferUtils: long findFloats(float[],int,float[],int,float)
com.badlogic.gdx.graphics.glutils.FrameBuffer: com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteRenderbuffer(int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Emissive
com.esotericsoftware.kryo.util.IntMap$MapIterator
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.utils.Array materials
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToShearing(com.badlogic.gdx.math.Vector2)
com.google.android.material.snackbar.SnackbarContentLayout: android.widget.Button getActionView()
com.badlogic.gdx.utils.compression.lzma.Encoder: int _numDistancePairs
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown
com.esotericsoftware.jsonbeans.JsonWriter
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight
com.badlogic.gdx.assets.AssetLoadingTask: long startTime
com.badlogic.gdx.backends.android.AndroidGL20: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: boolean flipVertically
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: float offsetU
com.badlogic.gdx.maps.tiled.TmxMapLoader: com.badlogic.gdx.utils.Array getDependencyAssetDescriptors(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container height(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryonet.ServerDiscoveryHandler$1
com.esotericsoftware.kryo.io.OutputChunked: OutputChunked(int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int maxVertices
com.badlogic.gdx.graphics.GL20: boolean glIsBuffer(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean cursorOn
com.badlogic.gdx.utils.LongMap: LongMap(com.badlogic.gdx.utils.LongMap)
com.badlogic.gdx.maps.MapGroupLayer: void invalidateRenderOffset()
com.badlogic.gdx.backends.android.AndroidInput: int NUM_TOUCHES
com.badlogic.gdx.scenes.scene2d.Actor: void setScale(float)
com.HyperSphere.Connection.PacketObjects.Misc.Item: java.lang.String name
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void guardedRun()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getXScale()
com.badlogic.gdx.Input$Keys: int NUM_9
com.badlogic.gdx.utils.JsonWriter$JsonObject: boolean needsComma
com.badlogic.gdx.math.CatmullRomSpline: java.lang.Object valueAt(java.lang.Object,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated
com.esotericsoftware.kryo.Generics
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 toBarycoord(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell width(float)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Specular
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_ARRAY_STRIDE
com.badlogic.gdx.utils.Queue$QueueIterable: boolean allowRemove
com.esotericsoftware.kryonet.rmi.TimeoutException
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class)
com.badlogic.gdx.utils.IntMap$Entries: boolean hasNext()
com.esotericsoftware.kryo.Registration: org.objenesis.instantiator.ObjectInstantiator getInstantiator()
com.badlogic.gdx.graphics.g3d.RenderableProvider: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void setTransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.ui.Container: void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.utils.BooleanArray: boolean pop()
com.badlogic.gdx.graphics.GL30: java.lang.String glGetShaderInfoLog(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void setLow(float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniSetMaxMotorTorque(long,float)
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelProvider$Factory getDefaultViewModelProviderFactory()
com.badlogic.gdx.input.RemoteInput: java.net.ServerSocket serverSocket
com.google.android.material.chip.Chip: android.content.res.ColorStateList getCloseIconTint()
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart
com.badlogic.gdx.utils.Json: boolean ignoreUnknownField(java.lang.Class,java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glActiveTexture(int)
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.graphics.g2d.BitmapFont font
com.esotericsoftware.kryo.io.Output: void writeDouble(double)
com.badlogic.gdx.physics.box2d.Body: void jniGetMassData(long,float[])
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal)
com.google.android.material.internal.FlowLayout
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Values values1
com.badlogic.gdx.scenes.scene2d.utils.Selection: void clear()
com.esotericsoftware.jsonbeans.ObjectMap: com.esotericsoftware.jsonbeans.ObjectMap$Keys keys()
com.badlogic.gdx.utils.JsonValue: java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visitAttribute(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute)
androidx.appcompat.widget.ButtonBarLayout: int getMinimumHeight()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: com.badlogic.gdx.graphics.g2d.ParticleEffect particleEffect
com.badlogic.gdx.graphics.glutils.FrameBuffer
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.utils.Selection selection
com.esotericsoftware.kryo.io.Output: java.io.OutputStream outputStream
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearBufferfi(int,int,float,int)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void afterGroups()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getSpawnDepth()
com.badlogic.gdx.maps.objects.TextureMapObject: void setScaleY(float)
com.esotericsoftware.kryo.util.IdentityObjectIntMap
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPrefHeight()
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction: int current
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType HeadlessDesktop
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: int m_PosMask
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector tmp3
com.badlogic.gdx.utils.reflect.Method: Method(java.lang.reflect.Method)
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter
com.badlogic.gdx.utils.PooledLinkedList: void remove()
com.badlogic.gdx.utils.IntFloatMap$Entry
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4: java.lang.Object val$object
com.esotericsoftware.kryo.io.UnsafeMemoryInput: int readInt()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setFadeScrollBars(boolean)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void color(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsActive(long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector,int,boolean)
com.badlogic.gdx.utils.GdxNativesLoader: GdxNativesLoader()
com.badlogic.gdx.backends.android.AndroidMusic: float getVolume()
com.badlogic.gdx.math.Interpolation$SwingIn: float apply(float)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.math.Circle deadzoneBounds
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide[] values()
com.google.android.material.appbar.AppBarLayout$Behavior: AppBarLayout$Behavior()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker: void set(int,int,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int LifePercentOffset
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: void onDrawFrame(javax.microedition.khronos.opengles.GL10)
com.badlogic.gdx.math.MathUtils: java.util.Random random
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean isDrawAABBs()
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int kNumBitModelTotalBits
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask: int keycode
com.badlogic.gdx.graphics.VertexAttribute: VertexAttribute(int,int,java.lang.String)
com.badlogic.gdx.graphics.g2d.Batch: void setBlendFunction(int,int)
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode[] $VALUES
com.badlogic.gdx.graphics.GL20: int GL_LOW_INT
com.badlogic.gdx.utils.compression.lzma.Base: int kAlignMask
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void onPause()
com.badlogic.gdx.graphics.glutils.ETC1: boolean isValidPKM(java.nio.ByteBuffer,int)
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean sizeInvalid
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue
com.badlogic.gdx.scenes.scene2d.utils.Selection: void removeAll(com.badlogic.gdx.utils.Array)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_ENUM
androidx.fragment.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.badlogic.gdx.backends.android.AndroidMusic$1: AndroidMusic$1(com.badlogic.gdx.backends.android.AndroidMusic)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: int blendDFactor
com.badlogic.gdx.utils.ObjectMap$Keys: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: VertexBufferObject(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.utils.compression.lz.BinTree: int kHash3Size
com.esotericsoftware.kryo.io.UnsafeInput: void readBytes(java.lang.Object,long,long)
com.badlogic.gdx.utils.ObjectIntMap: boolean isEmpty()
com.badlogic.gdx.graphics.g2d.SpriteBatch: int totalRenderCalls
com.badlogic.gdx.physics.box2d.Body: void applyForceToCenter(float,float,boolean)
com.badlogic.gdx.graphics.g3d.Model
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe
com.badlogic.gdx.math.Vector2
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator
com.esotericsoftware.kryo.io.Input: Input(byte[],int,int)
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType Circle
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.Texture)
com.google.android.material.chip.Chip: void setCheckedIconTint(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.glutils.InstanceData: int getNumMaxInstances()
com.badlogic.gdx.utils.ObjectSet: com.badlogic.gdx.utils.ObjectSet with(java.lang.Object[])
com.badlogic.gdx.utils.PooledLinkedList: java.lang.Object previous()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getVelocityX()
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: WeldJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.utils.ObjectFloatMap: java.lang.String toString()
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float jniGetMaxForce(long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.QueryCallback queryCallback
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleX()
com.badlogic.gdx.backends.android.AndroidFiles: AndroidFiles(android.content.res.AssetManager,java.lang.String)
com.badlogic.gdx.utils.viewport.Viewport: void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newField(java.lang.String,java.lang.String,java.lang.String)
com.esotericsoftware.kryo.util.IdentityMap$Entry: java.lang.Object value
com.badlogic.gdx.utils.compression.CRC
com.esotericsoftware.kryonet.EndPoint: void addListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.scenes.scene2d.Actor: void setVisible(boolean)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 rotate(float,float,float,float)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1: int compare(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void add(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void calculateHorizBoundsAndPositions()
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void enableBlending()
com.badlogic.gdx.utils.Json: void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void drawIcon(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,float,float)
com.badlogic.gdx.scenes.scene2d.Actor: boolean fire(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.graphics.GL20: int GL_SCISSOR_BOX
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: boolean renderGlyph(long,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration
com.badlogic.gdx.scenes.scene2d.ui.Table: void addDebugRect(float,float,float,float,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2: com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard this$0
com.google.android.material.appbar.AppBarLayout: void setTargetElevation(float)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void dispose()
androidx.fragment.app.Fragment: void onAttach(android.app.Activity)
com.badlogic.gdx.graphics.g3d.model.NodeAnimation: com.badlogic.gdx.utils.Array rotation
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
com.badlogic.gdx.Graphics$DisplayMode: int bitsPerPixel
com.esotericsoftware.minlog.Log$Logger: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.utils.JsonValue: int size
com.badlogic.gdx.backends.android.AndroidApplication: void exit()
com.badlogic.gdx.math.Intersector: float distanceSegmentPoint(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryonet.Client: int connectUdpPort
com.google.android.material.textfield.TextInputLayout: void setCounterMaxLength(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glClearColor(float,float,float,float)
com.google.android.gms.common.api.internal.LifecycleCallback
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getLinearVelocityFromWorldPoint(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.IntMap: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable hScroll
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void line(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput$1: java.lang.Object newObject()
com.badlogic.gdx.scenes.scene2d.ui.Container: void setClip(boolean)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getScaleX()
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.math.Rectangle pack(java.lang.String,com.badlogic.gdx.graphics.Pixmap)
com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature valueOf(java.lang.String)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int stencil
com.badlogic.gdx.Input$Keys: int ALT_RIGHT
com.esotericsoftware.kryo.io.KryoDataInput: void readFully(byte[])
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_UNKNOWN
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyNodes(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder
com.badlogic.gdx.utils.Base64Coder: byte[] decodeLines(java.lang.String,byte[])
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.Color overFontColor
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidthFocusedResource(int)
com.badlogic.gdx.graphics.GL20: int GL_COLOR_CLEAR_VALUE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector d
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType PulleyJoint
com.badlogic.gdx.math.Polyline: float scaleY
com.badlogic.gdx.scenes.scene2d.utils.FocusListener: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F2D
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: com.badlogic.gdx.physics.box2d.World world
com.google.android.material.button.MaterialButton: void setCornerRadius(int)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 scl(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.backends.android.AndroidDaydream: void onDetachedFromWindow()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void hideAll()
com.esotericsoftware.kryonet.rmi.ObjectSpace: void register(int,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor AngularVelocity3D
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float)
com.badlogic.gdx.utils.compression.lzma.Encoder: byte[] properties
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: com.badlogic.gdx.scenes.scene2d.ui.TextArea this$0
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollPercentY(float)
com.badlogic.gdx.graphics.GL20: int GL_GENERATE_MIPMAP
com.badlogic.gdx.graphics.Pixmap: void setColor(int)
com.badlogic.gdx.graphics.glutils.VertexData: java.nio.FloatBuffer getBuffer()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: boolean markupEnabled
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setTextFieldFilter(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter)
com.esotericsoftware.kryo.serializers.CollectionSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: java.lang.String TAG
com.badlogic.gdx.InputEventQueue: int KEY_DOWN
com.badlogic.gdx.utils.I18NBundle: void load(java.io.Reader)
com.esotericsoftware.kryonet.Client: java.lang.Object tcpRegistrationLock
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable[] $VALUES
com.badlogic.gdx.scenes.scene2d.Stage: boolean touchUp(int,int,int,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathOffset(float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.InputEventQueue: InputEventQueue()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: boolean loadChar(int,int)
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.lang.Class genericType
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int renderCount
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell right()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem
com.badlogic.gdx.utils.StringBuilder: int length()
com.badlogic.gdx.math.Vector2: boolean isZero(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean allowCompletion
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int TOUCH_DOWN
com.esotericsoftware.kryo.util.UnsafeUtil: UnsafeUtil()
com.esotericsoftware.kryo.io.ByteBufferInput: int optional(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void fillVerticesToScreenCPU(int[])
com.badlogic.gdx.math.Polyline: void scale(float)
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value minHeight
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory: int EGL_CONTEXT_CLIENT_VERSION
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.physics.box2d.Body: void jniGetPosition(long,float[])
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer
com.badlogic.gdx.scenes.scene2d.ui.Label: float fontScaleX
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDisableVertexAttribArray(int)
com.badlogic.gdx.math.GeometryUtils: boolean barycoordInsideTriangle(com.badlogic.gdx.math.Vector2)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getLogoDescription()
com.badlogic.gdx.utils.Array: boolean isEmpty()
com.badlogic.gdx.physics.box2d.CircleShape: com.badlogic.gdx.math.Vector2 position
com.badlogic.gdx.math.Vector: float dst(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.utils.BooleanArray: void addAll(com.badlogic.gdx.utils.BooleanArray,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean attached
com.badlogic.gdx.files.FileHandle: boolean deleteDirectory()
com.badlogic.gdx.backends.android.AndroidGraphics: float getDensity()
com.badlogic.gdx.graphics.GL20: void glBufferSubData(int,int,int,java.nio.Buffer)
com.badlogic.gdx.physics.box2d.World$1: World$1(com.badlogic.gdx.physics.box2d.World,int,int)
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.ShaderProvider,com.badlogic.gdx.graphics.g3d.utils.RenderableSorter)
com.badlogic.gdx.backends.android.AndroidGL30: void glDrawBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL30: void glFramebufferTextureLayer(int,int,int,int,int)
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 add(com.badlogic.gdx.math.GridPoint3)
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parseData(java.io.DataInputStream,byte)
com.badlogic.gdx.utils.reflect.Field: com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
com.badlogic.gdx.graphics.g2d.Batch: void setPackedColor(float)
com.badlogic.gdx.physics.box2d.EdgeShape
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc previous
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.Input$Keys: int C
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory: com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil getInstance(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.google.android.material.snackbar.SnackbarContentLayout
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void bindData(com.badlogic.gdx.graphics.GL20)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: Lzma$CommandLine()
com.badlogic.gdx.scenes.scene2d.ui.Label: java.lang.String ellipsis
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.utils.PerformanceCounter: java.lang.String name
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.maps.MapObjects: com.badlogic.gdx.utils.Array getByType(java.lang.Class)
androidx.fragment.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int access$200(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: boolean hasScale
com.badlogic.gdx.maps.Map: com.badlogic.gdx.maps.MapProperties getProperties()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.scenes.scene2d.Group debugAll()
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.BaseLight[])
com.badlogic.gdx.utils.BufferUtils: void copy(char[],int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup reverse()
com.badlogic.gdx.math.Interpolation$Swing
com.badlogic.gdx.backends.android.AndroidGL30: java.lang.String glGetStringi(int,int)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup fill()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: float time
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener
com.badlogic.gdx.ApplicationLogger: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int kTopMask
com.badlogic.gdx.graphics.g2d.PixmapPacker: int pageHeight
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer
com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 lv
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool: com.badlogic.gdx.graphics.Mesh obtain(com.badlogic.gdx.graphics.VertexAttributes,int,int)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters: ObjLoader$ObjLoaderParameters(boolean)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 this$1
com.badlogic.gdx.physics.box2d.Body: void jniGetLocalVector(long,float,float,float[])
com.badlogic.gdx.InputAdapter
com.badlogic.gdx.backends.android.AndroidInput: void setCursorCatched(boolean)
com.badlogic.gdx.graphics.GL20: void glGenFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.Group: void act(float)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: TextArea(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: DefaultShader$Config(java.lang.String,java.lang.String)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean drawBodies
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: void init()
com.badlogic.gdx.Audio
com.badlogic.gdx.math.Polygon: float getOriginY()
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_STENCIL_SIZE
com.badlogic.gdx.math.Interpolation$BounceOut: float[] heights
com.badlogic.gdx.utils.SortedIntList$Node: com.badlogic.gdx.utils.SortedIntList$Node p
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform4fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Matrix4 oldTransform
com.esotericsoftware.jsonbeans.Json: void writeObjectStart()
com.badlogic.gdx.math.Vector2: boolean isOnLine(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.math.ConvexHull: void sortWithIndices(float[],int,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: java.lang.String g
com.esotericsoftware.kryonet.rmi.RemoteObject: void setNonBlocking(boolean)
com.badlogic.gdx.math.Interpolation$10: float apply(float)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.Input$Keys: int NUM_1
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor ModelInstance
com.badlogic.gdx.math.GridPoint2: boolean equals(java.lang.Object)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector tmp3
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: java.lang.StringBuffer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: short VERSION_HI
com.badlogic.gdx.graphics.TextureArrayData: boolean isPrepared()
com.badlogic.gdx.maps.MapGroupLayer
com.badlogic.gdx.backends.android.AndroidFragmentApplication: boolean firstResume
com.badlogic.gdx.graphics.glutils.FacedCubemapData: void consumeCubemapData()
com.badlogic.gdx.utils.IdentityMap$MapIterator
com.badlogic.gdx.Input$TextInputListener: void input(java.lang.String)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType booleanValue
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.GL30: void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void box(float,float,float)
com.badlogic.gdx.utils.ObjectSet: com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void surfaceDestroyed(android.view.SurfaceHolder)
com.badlogic.gdx.utils.IdentityMap$MapIterator: void reset()
com.badlogic.gdx.backends.android.AndroidGraphics: void requestRendering()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: boolean isManaged()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int BOOLEAN
com.esotericsoftware.kryo.io.Output: void writeString_slow(java.lang.CharSequence,int,int)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2: AndroidOnscreenKeyboard$2(com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard)
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_MAT3x2
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService this$0
com.google.android.material.appbar.AppBarLayout: float getTargetElevation()
com.badlogic.gdx.utils.IdentityMap: void putResize(java.lang.Object,java.lang.Object)
com.google.android.material.card.MaterialCardView: android.graphics.drawable.Drawable getCheckedIcon()
com.esotericsoftware.kryonet.Connection: int sendUDP(java.lang.Object)
com.badlogic.gdx.graphics.GL30: void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1: Touchpad$1(com.badlogic.gdx.scenes.scene2d.ui.Touchpad)
com.badlogic.gdx.utils.Pools: com.badlogic.gdx.utils.Pool get(java.lang.Class,int)
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: WeightMeshSpawnShapeValue()
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidMonitor: com.badlogic.gdx.backends.android.AndroidGraphics this$0
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: BatchTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void jniSetMaxForce(long,float)
com.esotericsoftware.kryo.util.IntArray: IntArray(boolean,int)
com.badlogic.gdx.utils.IntFloatMap$Entries: void reset()
com.badlogic.gdx.graphics.GL20: int glGenBuffer()
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy: int height
com.badlogic.gdx.graphics.g2d.Animation: java.lang.Object[] keyFrames
com.badlogic.gdx.utils.ObjectIntMap$Keys: java.lang.Object next()
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean keepWithinStage
com.badlogic.gdx.utils.Array$ArrayIterator: boolean allowRemove
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int getFramebufferHandle()
com.badlogic.gdx.backends.android.AndroidAudioDevice: void writeSamples(short[],int,int)
com.badlogic.gdx.math.Polygon: void dirty()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int t
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long mCompressedLength
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage: com.badlogic.gdx.utils.Array rows
com.badlogic.gdx.utils.CharArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.math.Vector2 tmpCoords
com.badlogic.gdx.math.Polyline: float length
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.assets.loaders.FileHandleResolver getFileHandleResolver()
com.esotericsoftware.kryo.io.KryoDataInput: int skipBytes(int)
com.google.android.material.card.MaterialCardView
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.graphics.g2d.GlyphLayout layout
com.badlogic.gdx.utils.Queue$QueueIterator: void reset()
com.badlogic.gdx.Input$Keys: int NUMPAD_6
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: boolean rotate
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
com.badlogic.gdx.math.Interpolation$6: Interpolation$6()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: TooltipManager()
com.badlogic.gdx.graphics.g2d.Batch: int Y1
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.glutils.FloatTextureData: java.nio.FloatBuffer getBuffer()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void save(java.io.Writer)
com.badlogic.gdx.utils.JsonReader: void number(java.lang.String,long,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: void show(com.badlogic.gdx.scenes.scene2d.Stage)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getMinHeight()
com.esotericsoftware.kryo.Serializer: boolean immutable
androidx.multidex.MultiDexApplication
com.badlogic.gdx.utils.Array
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IADD
com.badlogic.gdx.assets.AssetDescriptor: AssetDescriptor(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.math.ConvexHull: float ccw(float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextArea
com.badlogic.gdx.scenes.scene2d.InputEvent$Type
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: ModelTexture()
com.badlogic.gdx.utils.OrderedMap
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraDirection
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.math.Vector3 getScalingAtTime(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean copyTransient
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.math.Vector3: Vector3(float,float,float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: TextureAtlas$TextureAtlasData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int getFloatsPerVertex()
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: void setRotation(float)
com.badlogic.gdx.backends.android.AndroidApplication: boolean useImmersiveMode
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1: com.badlogic.gdx.scenes.scene2d.ui.Touchpad this$0
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void addParticle()
com.badlogic.gdx.math.Polyline: void calculateScaledLength()
com.badlogic.gdx.graphics.Color: int rgb565(float,float,float)
com.badlogic.gdx.scenes.scene2d.Stage: void act(float)
com.badlogic.gdx.utils.ObjectSet: void clear()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glShaderSource(int,java.lang.String)
com.HyperSphere.Connection.PacketObjects.Map.MapObject
com.badlogic.gdx.graphics.g2d.ParticleEffect
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitLookupSwitchInsn(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,int[],com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.esotericsoftware.kryo.io.Output
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: void load(java.io.BufferedReader)
com.esotericsoftware.kryo.util.UnsafeUtil: java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)
com.badlogic.gdx.graphics.g2d.PolygonBatch: int getBlendSrcFuncAlpha()
com.badlogic.gdx.utils.Json: void setDefaultSerializer(com.badlogic.gdx.utils.Json$Serializer)
com.badlogic.gdx.utils.viewport.Viewport: int screenY
com.badlogic.gdx.utils.CharArray: void addAll(com.badlogic.gdx.utils.CharArray,int,int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setScaleY(float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.utils.Timer$Task blinkTask
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache: void draw(com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.utils.viewport.Viewport: int screenHeight
com.badlogic.gdx.maps.MapGroupLayer: com.badlogic.gdx.maps.MapLayers layers
com.badlogic.gdx.backends.android.AndroidInput$3
com.badlogic.gdx.utils.compression.rangecoder.Decoder
com.badlogic.gdx.Input$Buttons: int RIGHT
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.net.HttpRequestBuilder: java.lang.String baseUrl
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String,java.lang.Object,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)
com.badlogic.gdx.physics.box2d.Fixture
com.badlogic.gdx.graphics.g3d.decals.GroupPlug
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setTransparentColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.Vector3 getEndPoint(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.utils.compression.lzma.Encoder: void Flush(int)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.utils.Json: void writeField(java.lang.Object,java.lang.String,java.lang.Class)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetFriction(long,float)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnobAfter
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: void end()
com.badlogic.gdx.utils.compression.lz.BinTree: int _cutValue
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])
com.badlogic.gdx.scenes.scene2d.Event: void reset()
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void ReleaseStream()
com.esotericsoftware.kryonet.Listener$QueuedListener$3: void run()
com.badlogic.gdx.math.Frustum: boolean sphereInFrustum(float,float,float,float)
com.badlogic.gdx.math.Matrix4: Matrix4(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.Json: boolean sortFields
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.FloatArray hull
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: float startA
com.badlogic.gdx.graphics.Color: int argb8888(float,float,float,float)
androidx.fragment.app.Fragment: void setRetainInstance(boolean)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean fireChangeEvent()
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: boolean capture
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.VisibleAction visible(boolean)
com.badlogic.gdx.math.MathUtils: boolean isPowerOfTwo(int)
com.badlogic.gdx.utils.ObjectIntMap: java.lang.String toString()
com.badlogic.gdx.utils.BinaryHeap$Node: int index
com.badlogic.gdx.input.GestureDetector: boolean isLongPressed(float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
com.badlogic.gdx.assets.loaders.TextureLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.math.Matrix4: float[] getValues()
com.badlogic.gdx.scenes.scene2d.Actor: float height
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: boolean hasDepthRenderBuffer
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: int GetPrice(int,int)
com.badlogic.gdx.graphics.Camera: void transform(com.badlogic.gdx.math.Matrix4)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type BOOLEAN_TYPE
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int stencilbufferHandle
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.esotericsoftware.jsonbeans.Json: void toJson(java.lang.Object,java.io.Writer)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector cpy()
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1: PixmapPacker$SkylineStrategy$1(com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy)
com.badlogic.gdx.input.RemoteInput: boolean isKeyJustPressed(int)
com.badlogic.gdx.utils.XmlReader: java.lang.String entity(java.lang.String)
com.badlogic.gdx.audio.Music$OnCompletionListener
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float prefHeight
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: boolean isBound
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int mDepthSize
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: Manifold$ManifoldPoint(com.badlogic.gdx.physics.box2d.Manifold)
com.esotericsoftware.kryo.util.ListReferenceResolver: java.util.ArrayList seenObjects
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void unbindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(double)
androidx.appcompat.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.LongMap$Keys: void reset()
com.badlogic.gdx.scenes.scene2d.ui.List$1: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.HyperSphere.Connection.PacketObjects.Entities.Monster: short monsterState
androidx.fragment.app.Fragment: void setUserVisibleHint(boolean)
com.badlogic.gdx.utils.FloatArray: void sort()
com.badlogic.gdx.graphics.GL20: int GL_ZERO
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getReturnType()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,short[])
com.badlogic.gdx.net.NetJavaImpl$2: NetJavaImpl$2(com.badlogic.gdx.net.NetJavaImpl,boolean,com.badlogic.gdx.Net$HttpRequest,java.net.HttpURLConnection,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.graphics.GL20: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute
com.badlogic.gdx.graphics.GL30: void glUniform2fv(int,int,float[],int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.Color c
com.badlogic.gdx.utils.JsonReader: int json_en_object
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.math.Matrix3: void mul(float[],float[])
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object[] keyTable
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int EGL_COVERAGE_SAMPLES_NV
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.OrderedMap: OrderedMap()
com.badlogic.gdx.backends.android.AndroidPreferences: float getFloat(java.lang.String)
com.badlogic.gdx.graphics.g3d.ModelCache$2
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: float offsetX
com.badlogic.gdx.math.EarClippingTriangulator: com.badlogic.gdx.utils.ShortArray computeTriangles(com.badlogic.gdx.utils.FloatArray)
com.esotericsoftware.kryo.Kryo: java.lang.Object copyShallow(java.lang.Object)
com.badlogic.gdx.graphics.GL30: int GL_DYNAMIC_COPY
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setScale(float)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
com.badlogic.gdx.math.Vector: boolean isUnit(float)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: int getSpanFlags(java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int BASTORE
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.io.FastInput: FastInput(java.io.InputStream,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: java.lang.String formatEglError(java.lang.String,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void requestRender()
com.badlogic.gdx.input.GestureDetector: boolean pinching
com.badlogic.gdx.math.Polygon: float area()
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.utils.IntSet: void push(int,int,int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle: com.badlogic.gdx.graphics.g2d.BitmapFont font
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void addParticles(int)
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 sub(int,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool: java.lang.Object newObject()
com.badlogic.gdx.Input: boolean isCursorCatched()
com.esotericsoftware.kryonet.ConnectionValues: java.nio.ByteBuffer getBuffer(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean getRequired()
com.badlogic.gdx.utils.Timer: void start()
com.badlogic.gdx.math.Circle: Circle()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: GLSurfaceView20$ConfigChooser(int,int,int,int,int,int)
com.esotericsoftware.kryo.serializers.MapSerializer$BindMap
com.badlogic.gdx.graphics.g2d.TextureAtlas
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_ambientUVTransform
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib2f(int,float,float)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float posY
com.esotericsoftware.kryo.Serializer: boolean isImmutable()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DUP2_X2
com.badlogic.gdx.graphics.g3d.environment.SpotLight: float cutoffAngle
com.badlogic.gdx.math.Vector: float len()
com.esotericsoftware.kryonet.rmi.ObjectSpace$3: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromCross(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
com.badlogic.gdx.maps.MapLayer: void setParent(com.badlogic.gdx.maps.MapLayer)
com.badlogic.gdx.scenes.scene2d.ui.Value$3: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer LONG
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isAdditive()
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo: com.badlogic.gdx.graphics.TextureData data
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatElevationResource(int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void invalidate()
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.math.Vector3: boolean isCollinear(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void Init()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo: TextureLoader$TextureLoaderInfo()
com.badlogic.gdx.graphics.g2d.SpriteCache: void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.math.FloatCounter: float value
com.badlogic.gdx.graphics.Color: float b
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getUpperLimit()
com.badlogic.gdx.maps.MapRenderer: void render()
com.badlogic.gdx.graphics.g2d.PolygonRegion: PolygonRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,float[],short[])
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.math.Matrix4 getVertexTransform(com.badlogic.gdx.math.Matrix4)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: float getCenterX()
com.esotericsoftware.kryonet.JsonSerialization: int readLength(java.nio.ByteBuffer)
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide getSide()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float originalOffsetX
com.badlogic.gdx.physics.box2d.Fixture: boolean jniIsSensor(long)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.badlogic.gdx.utils.StringBuilder: void insert0(int,java.lang.String)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean access$1102(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread,boolean)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: AmbientCubemap()
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: com.badlogic.gdx.math.Vector2 localAxisA
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector limit2(float)
com.google.android.material.radiobutton.MaterialRadioButton: void setUseMaterialThemeColors(boolean)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: Snackbar$SnackbarLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader
com.badlogic.gdx.backends.android.AndroidGL20: int glCheckFramebufferStatus(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: void set(com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single)
com.badlogic.gdx.graphics.TextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.math.Affine2: java.lang.String toString()
com.badlogic.gdx.physics.box2d.FixtureDef: FixtureDef()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_GETSTATIC
com.esotericsoftware.kryo.io.UnsafeMemoryInput: float readFloat()
androidx.appcompat.widget.AppCompatRadioButton: int getCompoundPaddingLeft()
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: void parseMaterials(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue,java.lang.String)
androidx.appcompat.widget.AppCompatAutoCompleteTextView
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.utils.Array caches
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.physics.box2d.Body: void jniGetLocalCenter(long,float[])
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color FOREST
androidx.appcompat.widget.AppCompatRadioButton
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: long getBitmap(long)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int)
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setAligned(boolean)
com.badlogic.gdx.backends.android.AndroidInput$3$1$1
com.badlogic.gdx.Net$HttpRequest: void setHeader(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.Bits: boolean isEmpty()
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void enablePointSprites()
com.badlogic.gdx.physics.box2d.ChainShape: void jniSetPrevVertex(long,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable over
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int bindCount
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.math.Matrix4 transformMatrix
com.esotericsoftware.kryo.util.IdentityMap$Values: IdentityMap$Values(com.esotericsoftware.kryo.util.IdentityMap)
androidx.fragment.app.Fragment: java.lang.Object getSharedElementReturnTransition()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float getVelocityX()
com.badlogic.gdx.math.Interpolation$14: Interpolation$14()
com.badlogic.gdx.scenes.scene2d.Event: void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getMaxAdvanceHeight(long)
com.badlogic.gdx.utils.BufferUtils: void transformV4M4Jni(java.nio.Buffer,int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.Label
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1iv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.DeflateSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidthResource(int)
com.esotericsoftware.kryonet.Client: boolean isClosed
com.badlogic.gdx.scenes.scene2d.actions.ColorAction
com.badlogic.gdx.graphics.g2d.Animation: java.lang.Object getKeyFrame(float,boolean)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: short[] copy(com.esotericsoftware.kryo.Kryo,short[])
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 scl(float,float,float)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String AcceptEncoding
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: void load(java.io.BufferedReader)
com.badlogic.gdx.physics.box2d.Body: void jniSetAngularVelocity(long,float)
com.badlogic.gdx.utils.ShortArray: short[] shrink()
com.badlogic.gdx.utils.reflect.ArrayReflection: java.lang.Object get(java.lang.Object,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetBooleanv(int,java.nio.Buffer)
com.esotericsoftware.kryo.util.IdentityMap: void putStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: int bufferHandle
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue xScaleValue
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Image: void layout()
com.badlogic.gdx.scenes.scene2d.ui.Window$3: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: boolean particleCollided
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.CharArray: CharArray(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LASTORE
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: boolean isDragValid()
androidx.fragment.app.DialogFragment: DialogFragment()
com.badlogic.gdx.utils.JsonValue: short[] asShortArray()
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle getStyle()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: long readLong(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(int)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1: CameraGroupStrategy$1(com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy,int)
com.badlogic.gdx.Input: float getRoll()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable enabled
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item[],char[])
com.badlogic.gdx.scenes.scene2d.ui.Value$8: float val$percent
com.badlogic.gdx.backends.android.AndroidGL20: void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: com.badlogic.gdx.scenes.scene2d.ui.Slider this$0
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean hideStatusBar
com.badlogic.gdx.scenes.scene2d.ui.Label: void setAlignment(int)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.ReferenceResolver getReferenceResolver()
com.badlogic.gdx.InputProcessor: boolean mouseMoved(int,int)
com.badlogic.gdx.utils.TextFormatter
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField: UnsafeCacheFields$UnsafeCharField(java.lang.reflect.Field)
com.badlogic.gdx.graphics.GL30: void glGenerateMipmap(int)
com.badlogic.gdx.graphics.g3d.Attributes: int compareTo(com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter: com.badlogic.gdx.utils.ObjectMap resources
com.esotericsoftware.kryo.util.ListReferenceResolver: java.lang.Object getReadObject(java.lang.Class,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void draw()
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle classpath(java.lang.String)
com.badlogic.gdx.math.Intersector: int pointLineSide(float,float,float,float,float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10)
com.badlogic.gdx.scenes.scene2d.ui.Cell: boolean hasActor()
com.esotericsoftware.kryo.util.ObjectMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsTexture(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void rect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.serializers.FieldSerializer
androidx.fragment.app.Fragment: int getNextTransition()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: java.lang.StringBuilder copy(com.esotericsoftware.kryo.Kryo,java.lang.StringBuilder)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer)
com.badlogic.gdx.physics.box2d.Contact: void jniSetFriction(long,float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: boolean useMipMaps
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mEglOwner
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: boolean nonBlocking
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float fill
com.badlogic.gdx.input.RemoteInput: int getY()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getPrefHeight()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: long environmentMask
com.badlogic.gdx.physics.box2d.Transform: Transform()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void activateParticles(int,int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1: BaseShapeBuilder$1()
com.badlogic.gdx.utils.IdentityMap$MapIterator: int currentIndex
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.utils.FloatArray: float[] setSize(int)
com.badlogic.gdx.graphics.g2d.Animation
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: FreeType$Face(long,com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library)
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getBackgroundTintMode()
com.esotericsoftware.kryonet.Serialization: void write(com.esotericsoftware.kryonet.Connection,java.nio.ByteBuffer,java.lang.Object)
com.badlogic.gdx.utils.Sort: Sort()
com.badlogic.gdx.utils.ObjectSet: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int getFirstLineShowing()
com.badlogic.gdx.graphics.Color: float[] toHsv(float[])
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int rotateRightKey
com.badlogic.gdx.Input$Keys: int CLEAR
com.esotericsoftware.jsonbeans.ObjectMap: int hash2(int)
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: TiledMapImageLayer(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.ApplicationListener getApplicationListener()
com.badlogic.gdx.utils.I18NBundle: java.util.Locale locale
com.badlogic.gdx.backends.android.AndroidDaydream$1: com.badlogic.gdx.backends.android.AndroidDaydream this$0
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_INTERNAL_FORMAT
com.badlogic.gdx.net.HttpStatus: int SC_CONFLICT
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void finish()
com.badlogic.gdx.utils.compression.lzma.Encoder: int _numLiteralPosStateBits
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String a(int,int,char[])
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Entries entries2
com.google.android.material.datepicker.MaterialCalendar$CalendarSelector: com.google.android.material.datepicker.MaterialCalendar$CalendarSelector[] values()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.ApplicationLogger getApplicationLogger()
com.badlogic.gdx.graphics.Mesh: int getNumVertices()
com.badlogic.gdx.graphics.g2d.BitmapFont: void setUseIntegerPositions(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2: BaseShapeBuilder$2()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3)
com.esotericsoftware.kryo.util.IdentityMap$Keys: boolean hasNext()
com.badlogic.gdx.physics.box2d.Fixture: void jniSetFilterData(long,short,short,short)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.physics.box2d.JointEdge jointEdgeB
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell rowDefaults
com.badlogic.gdx.utils.Sort
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: void setRunnable(java.lang.Runnable)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetQueryiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.EdgeShape: void getVertex0(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Interpolation$ExpIn: Interpolation$ExpIn(float,float)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadImageLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: int NumBitLevels
com.badlogic.gdx.backends.android.AndroidGL20: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1: int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpriteMode
com.badlogic.gdx.graphics.GL20: void glAttachShader(int,int)
com.esotericsoftware.jsonbeans.JsonValue: boolean[] asBooleanArray()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setWidget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.backends.android.AndroidInput$SensorListener: void onAccuracyChanged(android.hardware.Sensor,int)
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: byte[] getResult()
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: com.badlogic.gdx.graphics.Texture$TextureWrap uWrap
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight setDirection(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: boolean mono
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.utils.compression.lzma.Encoder: int kPropSize
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: int c
com.badlogic.gdx.maps.tiled.TiledMapTileSet: com.badlogic.gdx.utils.IntMap tiles
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Vector2 lastPoint
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float y3
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBlendFuncSeparate(int,int,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute Position()
com.google.android.material.button.MaterialButton
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: void visitAttribute(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute)
com.google.android.material.datepicker.MaterialCalendar$CalendarSelector: com.google.android.material.datepicker.MaterialCalendar$CalendarSelector valueOf(java.lang.String)
com.badlogic.gdx.Graphics$DisplayMode: int refreshRate
androidx.appcompat.widget.AppCompatTextView: void setTextFuture(java.util.concurrent.Future)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.math.Intersector$MinimumTranslationVector
com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature valueOf(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: void UpdateTables(int)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: DecalBatch(int,com.badlogic.gdx.graphics.g3d.decals.GroupStrategy)
com.badlogic.gdx.assets.loaders.ParticleEffectLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: PulleyJointDef()
com.esotericsoftware.kryonet.rmi.ObjectSpace$2: ObjectSpace$2()
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension: int width
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.math.Intersector$SplitTriangle: void reset()
com.badlogic.gdx.backends.android.AndroidGL30: void glFlushMappedBufferRange(int,int,int)
com.badlogic.gdx.math.EarClippingTriangulator: void triangulate()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_5
com.badlogic.gdx.backends.android.AndroidApplication: void onResume()
com.badlogic.gdx.graphics.GL30: void glCompileShader(int)
com.esotericsoftware.kryo.util.UnsafeUtil: long floatArrayBaseOffset
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FLOAD
com.badlogic.gdx.graphics.g3d.model.MeshPart: boolean equals(java.lang.Object)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preScale(float,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform specularUVTransform
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean hasObjectFields
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES
com.badlogic.gdx.graphics.GL20: void glDeleteFramebuffer(int)
com.badlogic.gdx.input.RemoteInput: void setCursorCatched(boolean)
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider: com.badlogic.gdx.graphics.g3d.Shader createShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: void allocateChannels()
com.badlogic.gdx.physics.box2d.EdgeShape: void jniSet(long,float,float,float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction
androidx.appcompat.widget.AbsActionBarView: void setVisibility(int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite
com.esotericsoftware.kryonet.Client: java.util.List discoverHosts(int,int)
com.badlogic.gdx.graphics.GL20: int GL_HIGH_INT
com.badlogic.gdx.net.NetJavaServerSocketImpl: NetJavaServerSocketImpl(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.math.collision.Ray
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT6
com.badlogic.gdx.backends.android.AndroidDaydream: android.view.Window getApplicationWindow()
com.badlogic.gdx.backends.android.AndroidMusic: float volume
com.badlogic.gdx.graphics.glutils.FloatTextureData: boolean isGpuOnly
com.badlogic.gdx.input.GestureDetector: void setMaxFlingDelay(long)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDepthMask(boolean)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: void update(float)
com.badlogic.gdx.graphics.GL20: void glDeleteBuffer(int)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight[] directionalLights
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: boolean enableMotor
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: float spawnDepth
com.badlogic.gdx.physics.box2d.EdgeShape: void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL30: int GL_MAX_DRAW_BUFFERS
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setScale(long,int)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Group root
com.badlogic.gdx.backends.android.AndroidAudio: com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.physics.box2d.JointEdge: com.badlogic.gdx.physics.box2d.Body other
com.badlogic.gdx.graphics.g2d.PixmapPacker: java.util.regex.Pattern indexPattern
com.esotericsoftware.kryo.util.Util: Util()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void finalize()
androidx.fragment.app.Fragment: android.view.View requireView()
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void childrenChanged()
com.google.android.material.button.MaterialButton: void setIconTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.utils.IntFloatMap$MapIterator: void remove()
com.badlogic.gdx.Preferences: boolean getBoolean(java.lang.String,boolean)
com.esotericsoftware.kryo.Kryo: Kryo()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureRectangleIndices(int)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type type
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer: BillboardRenderer()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.IntArray readReferenceIds
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None: int currentCapacity
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glUnmapBuffer(int)
com.badlogic.gdx.graphics.GL30: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.IdentityMap$Keys: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.backends.android.AndroidPreferences: int getInteger(java.lang.String)
com.badlogic.gdx.Preferences: java.util.Map get()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void setTransformMatrix(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.utils.ShaderProvider getShaderProvider()
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isAnnotationPresent(java.lang.Class,java.lang.Class)
com.badlogic.gdx.utils.Timer$Task: com.badlogic.gdx.Application app
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.utils.ObjectMap: java.lang.String toString(java.lang.String,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void save(java.io.Writer)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getVisualPercent()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.math.Matrix4 positionTransform
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean multiTouch
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: PointSpriteParticleBatch(int)
com.badlogic.gdx.Version: int MAJOR
com.badlogic.gdx.utils.SortedIntList: SortedIntList()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color sub(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel previousPositionChannel
com.badlogic.gdx.input.RemoteInput$TouchEvent: long timeStamp
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: float[] distances
com.badlogic.gdx.graphics.g3d.decals.Decal: void setRotation(com.badlogic.gdx.math.Quaternion)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(int,int)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe: ModelNodeKeyframe()
com.esotericsoftware.kryo.Kryo: boolean isFinal(java.lang.Class)
com.badlogic.gdx.backends.android.AndroidDaydream: void onDreamingStopped()
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: AndroidInput$KeyEvent()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.VertexAttributes currentAttributes
com.badlogic.gdx.graphics.g2d.Batch: int Y2
com.esotericsoftware.jsonbeans.ObjectMap$Entry: java.lang.Object key
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.esotericsoftware.kryonet.Connection: long lastPingSendTime
com.badlogic.gdx.graphics.GL20: int glCreateShader(int)
com.badlogic.gdx.assets.loaders.BitmapFontLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setMinWidth(float)
com.badlogic.gdx.utils.StringBuilder: void reverse0()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void begin()
com.badlogic.gdx.assets.AssetManager: void load(java.lang.String,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: int GROUP_OPAQUE
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 tmp3
com.badlogic.gdx.utils.Base64Coder: byte[] decode(java.lang.String)
com.esotericsoftware.kryo.io.KryoDataInput: int readInt()
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String MaxForwards
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter screenWidth
com.badlogic.gdx.graphics.g2d.ParticleEffect: float ySizeScale
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
androidx.fragment.app.Fragment: boolean isDetached()
com.badlogic.gdx.utils.ObjectFloatMap$Entry: java.lang.Object key
com.badlogic.gdx.assets.RefCountedContainer: void setRefCount(int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void begin()
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getAttributeType(java.lang.String)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(float[])
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void rect(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: ParticleControllerRenderer()
com.badlogic.gdx.graphics.GL20: int glCheckFramebufferStatus(int)
com.badlogic.gdx.utils.CharArray: char[] items
com.badlogic.gdx.utils.ObjectFloatMap: java.lang.Object findKey(float)
com.esotericsoftware.kryonet.util.ObjectIntMap: int getAndIncrement(java.lang.Object,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers: DefaultSerializers()
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue
com.esotericsoftware.reflectasm.MethodAccess: int getIndex(java.lang.String,int)
com.badlogic.gdx.utils.LongMap: boolean isEmpty()
com.badlogic.gdx.utils.Select: com.badlogic.gdx.utils.QuickSelect quickSelect
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetPosSlot(int)
com.badlogic.gdx.utils.async.AsyncExecutor
com.badlogic.gdx.graphics.GL30: void glGenQueries(int,java.nio.IntBuffer)
com.badlogic.gdx.utils.Json: void setElementType(java.lang.Class,java.lang.String,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.utils.Array getItems()
com.badlogic.gdx.utils.XmlReader: void open(java.lang.String)
com.badlogic.gdx.utils.QuickSelect: java.util.Comparator comp
com.esotericsoftware.kryo.util.IdentityMap$Entry: java.lang.Object key
com.badlogic.gdx.math.Polygon: Polygon(float[])
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: int getSpanEnd(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidPreferences: android.content.SharedPreferences$Editor editor
com.badlogic.gdx.Input$Keys: int FORWARD_DEL
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int CPU_VERTEX_SIZE
com.esotericsoftware.kryonet.Client: void setKeepAliveUDP(int)
com.badlogic.gdx.utils.NumberUtils
com.badlogic.gdx.utils.ObjectMap: int capacity
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.tiled.TiledMapTile getCurrentFrame()
com.badlogic.gdx.scenes.scene2d.actions.IntAction: void setStart(int)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.Pool freeFixtures
com.badlogic.gdx.graphics.Color: int rgb888(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.GL30: int GL_NUM_PROGRAM_BINARY_FORMATS
com.badlogic.gdx.utils.SnapshotArray: void sort()
com.esotericsoftware.kryo.io.Input: float readFloat()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void ellipse(float,float,float,float,float,int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: void endnode()
com.esotericsoftware.kryo.serializers.BeanSerializer: com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty[] properties
com.esotericsoftware.kryo.io.KryoDataOutput: void setOutput(com.esotericsoftware.kryo.io.Output)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setRelative(boolean)
com.badlogic.gdx.math.collision.Sphere: float volume()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: ParallelArray(int)
com.badlogic.gdx.math.Matrix3: float getRotationRad()
com.badlogic.gdx.maps.MapProperties: void remove(java.lang.String)
com.google.android.material.button.MaterialButton: void setIconTintResource(int)
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_trans_targs_0()
com.badlogic.gdx.utils.SortedIntList$Node: java.lang.Object value
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean forwardTarget
com.esotericsoftware.jsonbeans.Json$FieldMetadata: java.lang.reflect.Field field
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void translate(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: GL30Interceptor(com.badlogic.gdx.graphics.profiling.GLProfiler,com.badlogic.gdx.graphics.GL30)
com.badlogic.gdx.files.FileHandle: java.io.Reader reader()
com.gameanalytics.sdk.logging.EGALoggerMessageType: com.gameanalytics.sdk.logging.EGALoggerMessageType valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1: BaseAnimationController$1(com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter$OutputType outputType
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel: ParallelArray$FloatChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,int,int)
com.badlogic.gdx.utils.LongArray: long[] ensureCapacity(int)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: double readDouble()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: Decoder$LiteralDecoder(com.badlogic.gdx.utils.compression.lzma.Decoder)
com.badlogic.gdx.utils.ShortArray: ShortArray(short[])
com.badlogic.gdx.physics.box2d.joints.MotorJoint: com.badlogic.gdx.math.Vector2 linearOffset
com.badlogic.gdx.math.RandomXS128: long nextLong()
com.badlogic.gdx.Input$Keys: int STAR
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: ParticleEmitter$SpriteMode(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable valueOf(java.lang.String)
androidx.recyclerview.widget.GridLayoutManager: GridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void invalidateAllShaderPrograms(com.badlogic.gdx.Application)
com.badlogic.gdx.graphics.glutils.GLVersion: java.lang.String vendorString
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform2iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.SnapshotArray: void truncate(int)
com.badlogic.gdx.backends.android.AndroidApplication: void addLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.utils.BaseJsonReader reader
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox()
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver
com.badlogic.gdx.graphics.g3d.decals.Decal: void setZ(float)
androidx.appcompat.app.AlertController$RecycleListView
com.badlogic.gdx.scenes.scene2d.Group: Group()
com.badlogic.gdx.utils.UBJsonReader: long parseSize(java.io.DataInputStream,boolean,long)
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: IntAttribute(long)
com.badlogic.gdx.utils.IntFloatMap$MapIterator: int currentIndex
com.badlogic.gdx.graphics.glutils.VertexData: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: void jniGetGroundAnchorB(long,float[])
com.badlogic.gdx.files.FileHandle: boolean isDirectory()
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.utils.SnapshotArray children
com.badlogic.gdx.utils.LongArray: long random()
com.badlogic.gdx.backends.android.AndroidInput$SensorListener: void onSensorChanged(android.hardware.SensorEvent)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.ApplicationLogger applicationLogger
com.badlogic.gdx.graphics.Texture: Texture(int,int,com.badlogic.gdx.graphics.Pixmap$Format)
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.esotericsoftware.kryonet.util.ObjectIntMap: void resize(int)
com.esotericsoftware.jsonbeans.JsonValue: char asChar()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: ColorAttribute(com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute)
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject: boolean array
com.badlogic.gdx.utils.Base64Coder: com.badlogic.gdx.utils.Base64Coder$CharMap regularMap
com.badlogic.gdx.maps.MapObject: boolean visible
com.esotericsoftware.kryo.Kryo: java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.backends.android.AndroidInput: int getY(int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform set(com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F2I
com.badlogic.gdx.math.MathUtils: float log2(float)
com.badlogic.gdx.math.Ellipse: com.badlogic.gdx.math.Ellipse setPosition(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL20: int GL_TRIANGLE_FAN
com.esotericsoftware.kryo.util.IntMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.utils.Base64Coder: java.lang.String systemLineSeparator
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node parent
com.esotericsoftware.kryonet.util.ObjectIntMap: int hashShift
com.badlogic.gdx.scenes.scene2d.InputEvent: void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTranslation(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBufferSubData(int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean,boolean)
com.badlogic.gdx.backends.android.AndroidSound: void stop(long)
com.badlogic.gdx.input.RemoteInput: float[] gyrate
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
com.badlogic.gdx.graphics.TextureArrayData: int getWidth()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector b(int,int)
com.badlogic.gdx.graphics.glutils.GLVersion: int majorVersion
com.badlogic.gdx.utils.BooleanArray: void clear()
com.badlogic.gdx.graphics.GL20: void glBlendFunc(int,int)
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: com.badlogic.gdx.math.Quaternion rotation
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float)
com.HyperSphere.Connection.PacketObjects.Map.InteractiveObject: java.lang.String id
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBlendColor(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput$3$3$1
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.MapObjects objects
com.badlogic.gdx.physics.box2d.Transform: void setOrientation(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL30: void glUniform3i(int,int,int,int)
com.esotericsoftware.kryo.Kryo: boolean getAsmEnabled()
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton
com.badlogic.gdx.utils.PooledLinkedList$1: com.badlogic.gdx.utils.PooledLinkedList this$0
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch: void begin()
com.badlogic.gdx.physics.box2d.ChainShape: com.badlogic.gdx.physics.box2d.Shape$Type getType()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.utils.DelayedRemovalArray listeners
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getGLFormat()
com.esotericsoftware.jsonbeans.JsonValue: void setNext(com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] getXSizeValues()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int)
com.esotericsoftware.jsonbeans.ObjectMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: void hide()
com.badlogic.gdx.graphics.g2d.Batch: void disableBlending()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: void setTimeline(float[])
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1: com.badlogic.gdx.graphics.g3d.utils.AnimationController this$0
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.math.Vector3 direction
com.badlogic.gdx.maps.tiled.TiledMapTile
com.badlogic.gdx.utils.DataOutput: void writeString(java.lang.String)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField
com.badlogic.gdx.scenes.scene2d.ui.TextField: int selectionStart
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1: com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: java.lang.ref.WeakReference mGLSurfaceViewWeakRef
com.badlogic.gdx.utils.BinaryHeap: boolean notEmpty()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int f
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel angularChannel
com.badlogic.gdx.utils.JsonValue: long getLong(java.lang.String,long)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: int getAnimationMode()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getLowerLimit()
com.badlogic.gdx.math.EarClippingTriangulator: short[] indices
androidx.fragment.app.Fragment: boolean isHidden()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeInt(int)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.utils.Timer: long update(long,long)
com.badlogic.gdx.math.Frustum: float[] clipSpacePlanePointsArray
com.badlogic.gdx.backends.android.AndroidAudioRecorder: android.media.AudioRecord recorder
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int defaultDepthFunc
com.badlogic.gdx.graphics.g3d.particles.ResourceData: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver: AlarmManagerSchedulerBroadcastReceiver()
com.badlogic.gdx.utils.IntSet$IntSetIterator: int INDEX_ZERO
com.badlogic.gdx.assets.loaders.I18NBundleLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(float)
com.badlogic.gdx.graphics.g2d.Animation: float frameDuration
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollWidth()
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean toggle
com.badlogic.gdx.utils.IntIntMap: void put(int,int)
com.badlogic.gdx.utils.LongArray: void addAll(com.badlogic.gdx.utils.LongArray)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.badlogic.gdx.graphics.GL20: int GL_LINEAR
com.badlogic.gdx.backends.android.AndroidApplication: android.widget.FrameLayout$LayoutParams createLayoutParams()
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getBoxStrokeErrorColor()
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: int positionOffset
com.esotericsoftware.jsonbeans.JsonException: JsonException()
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Vector3 TMP_V2
com.badlogic.gdx.graphics.g2d.GlyphLayout: int parseColorMarkup(java.lang.CharSequence,int,int,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.VertexAttributes: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload
com.badlogic.gdx.graphics.glutils.IndexArray: IndexArray(int)
com.badlogic.gdx.utils.TimSort: java.lang.Object[] a
com.badlogic.gdx.graphics.profiling.GLProfiler: boolean isEnabled()
com.badlogic.gdx.backends.android.AndroidGraphics: float ppcY
com.esotericsoftware.kryo.serializers.MapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: MapObject()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDeltaX()
com.badlogic.gdx.utils.viewport.ExtendViewport: ExtendViewport(float,float)
com.badlogic.gdx.graphics.glutils.ETC1TextureData: boolean isManaged()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void updateAndDraw(float)
com.badlogic.gdx.utils.ShortArray: short[] toArray()
com.badlogic.gdx.graphics.g3d.decals.Decal: int Y3
androidx.fragment.app.Fragment: void postponeEnterTransition(long,java.util.concurrent.TimeUnit)
com.badlogic.gdx.maps.objects.TextureMapObject: void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue next
com.esotericsoftware.kryonet.Listener$QueuedListener: void received(com.esotericsoftware.kryonet.Connection,java.lang.Object)
androidx.fragment.app.Fragment: boolean getAllowEnterTransitionOverlap()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: java.lang.String name
com.google.android.material.internal.NavigationMenuItemView: void setNeedsEmptyIcon(boolean)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector cubic_derivative(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] rowPrefHeight
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mWaitingForSurface
com.badlogic.gdx.Graphics$BufferFormat: int stencil
com.badlogic.gdx.scenes.scene2d.ui.TextArea: boolean continueCursor(int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: GLSurfaceViewAPI18$GLThreadManager(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1)
com.google.android.material.chip.Chip: void setTextAppearance(com.google.android.material.resources.TextAppearance)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setX(float)
com.badlogic.gdx.graphics.GL30: int glGenRenderbuffer()
com.badlogic.gdx.math.collision.BoundingBox: boolean intersects(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo set(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void jniSetMaxTorque(long,float)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int State
com.badlogic.gdx.graphics.glutils.IndexArray: void bind()
com.badlogic.gdx.utils.viewport.ExtendViewport: void setMaxWorldHeight(float)
com.esotericsoftware.kryo.util.IntMap$Entries: java.lang.Object next()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: int getNumMaxVertices()
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.utils.Array data
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getType(java.lang.Class)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void setClass(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.esotericsoftware.kryonet.Server: Server(int,int,com.esotericsoftware.kryonet.Serialization)
com.google.android.material.bottomappbar.BottomAppBar: int getBottomInset()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])
com.badlogic.gdx.net.HttpParametersUtils: java.lang.String encode(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.glutils.PixmapTextureData: void consumeCustomData(int)
com.google.android.material.internal.NavigationMenuView: NavigationMenuView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: DynamicsModifier$Strength(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength)
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.Selection: void changed()
com.esotericsoftware.kryo.io.OutputChunked: OutputChunked(java.io.OutputStream)
com.esotericsoftware.kryo.serializers.MapSerializer: com.esotericsoftware.kryo.Serializer valueSerializer
com.badlogic.gdx.graphics.g2d.GlyphLayout: void reset()
com.badlogic.gdx.utils.JsonValue: byte asByte()
com.badlogic.gdx.backends.android.AndroidFiles
com.badlogic.gdx.graphics.g2d.TextureRegion: void setU(float)
com.badlogic.gdx.backends.android.AndroidInput: float getPressure(int)
com.esotericsoftware.kryonet.UdpConnection: java.lang.Object readObject(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.ui.Label: void invalidate()
com.badlogic.gdx.Input$Keys: int POWER
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.badlogic.gdx.utils.compression.rangecoder.Encoder
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: long newMemoryFace(long,java.nio.ByteBuffer,int,int)
com.google.android.material.transformation.FabTransformationScrimBehavior: FabTransformationScrimBehavior()
com.badlogic.gdx.graphics.g2d.BitmapFont: boolean isFlipped()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.graphics.g2d.Batch batch
com.badlogic.gdx.scenes.scene2d.ui.Stack: float getMaxHeight()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBindTexture(int,int)
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: java.io.ObjectInput getObjectInput(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input)
com.google.android.material.internal.ForegroundLinearLayout: void setForeground(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void restoreExpandedValues(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ByteArray: void add(byte,byte,byte)
com.badlogic.gdx.utils.SortedIntList$Iterator
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void allocateChannels()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void setColor(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Value$9: Value$9(com.badlogic.gdx.scenes.scene2d.Actor,float)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
androidx.appcompat.widget.ScrollingTabContainerView: void setContentHeight(int)
com.badlogic.gdx.utils.JsonValue: boolean isBoolean()
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Keys keys()
com.badlogic.gdx.graphics.glutils.ETC1: int getHeightPKM(java.nio.ByteBuffer,int)
com.badlogic.gdx.utils.LongArray: int indexOf(long)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int readInt(java.io.BufferedReader,java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float touchDownY
com.badlogic.gdx.Input$Keys: int PAGE_DOWN
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LNEG
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void cancel()
com.badlogic.gdx.maps.tiled.TiledMapTile: com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion()
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int Backs1
com.badlogic.gdx.utils.IntFloatMap$Entries: boolean hasNext()
com.badlogic.gdx.backends.android.AndroidGraphics: float getPpcY()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(java.lang.String,java.lang.String)
com.badlogic.gdx.assets.AssetErrorListener
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform3iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidInputFactory: AndroidInputFactory()
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: PointLightsAttribute(com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preRotate(float)
androidx.cardview.widget.CardView: float getCardElevation()
com.badlogic.gdx.utils.IntSet: boolean isEmpty()
com.google.android.material.appbar.HeaderScrollingViewBehavior: HeaderScrollingViewBehavior()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField
com.badlogic.gdx.Graphics$DisplayMode: int width
com.badlogic.gdx.physics.box2d.Box2D
com.badlogic.gdx.graphics.GL20: int GL_NICEST
com.badlogic.gdx.graphics.GL30: void glUniform1iv(int,int,java.nio.IntBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int I2F
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: com.badlogic.gdx.graphics.Color getEndColor()
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row: int y
com.badlogic.gdx.Input$Keys: int CALL
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.model.NodeAnimation: com.badlogic.gdx.utils.Array scaling
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float duration
com.badlogic.gdx.physics.box2d.World: void setVelocityThreshold(float)
com.google.android.material.card.MaterialCardView: void setCheckedIconTint(android.content.res.ColorStateList)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int RETURN
com.badlogic.gdx.math.Frustum: com.badlogic.gdx.math.Plane[] planes
com.badlogic.gdx.graphics.g2d.NinePatch: float getPadBottom()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.BitmapFont generateFont(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float spaceXadvance
com.google.android.material.button.MaterialButton: MaterialButton(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.Input$Keys: int ESCAPE
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsBuffer(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraUp
com.badlogic.gdx.maps.tiled.TmxMapLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.esotericsoftware.jsonbeans.JsonValue: char getChar(java.lang.String,char)
com.badlogic.gdx.math.Interpolation$Bounce
com.badlogic.gdx.graphics.GL20: int GL_BLEND_EQUATION
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetPosSlot2(int)
com.badlogic.gdx.utils.reflect.Method: boolean isAccessible()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.esotericsoftware.jsonbeans.JsonValue: void setType(com.esotericsoftware.jsonbeans.JsonValue$ValueType)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.utils.Queue: java.lang.Object get(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float)
com.badlogic.gdx.files.FileHandle: byte[] readBytes()
com.badlogic.gdx.utils.PropertiesUtils
com.badlogic.gdx.utils.IntFloatMap: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1: int compare(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.serializers.AsmCacheFields
com.esotericsoftware.kryonet.util.ObjectIntMap: ObjectIntMap(int)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: int CPU_VERTEX_SIZE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: int d
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,java.lang.String[])
com.esotericsoftware.kryonet.rmi.ObjectSpace: java.lang.Object getRegisteredObject(com.esotericsoftware.kryonet.Connection,int)
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: int[] _counters
com.badlogic.gdx.Version: int MINOR
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void begin()
com.esotericsoftware.kryo.util.ObjectMap: com.esotericsoftware.kryo.util.ObjectMap$Values values()
com.badlogic.gdx.scenes.scene2d.Stage: void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: com.badlogic.gdx.files.FileHandle getFontFile()
com.badlogic.gdx.utils.StringBuilder: StringBuilder(java.lang.CharSequence)
com.badlogic.gdx.physics.box2d.Manifold: float[] tmpFloat
com.badlogic.gdx.graphics.GL30: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.profiling.GLProfiler: com.badlogic.gdx.Graphics graphics
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Values values2
com.badlogic.gdx.backends.android.AndroidSound: void setLooping(long,boolean)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean fling(float,float,int)
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: SphericalHarmonics()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void normal(float,float,float)
com.badlogic.gdx.utils.JsonValue: void set(boolean)
com.badlogic.gdx.utils.IdentityMap: java.lang.Object[] valueTable
com.badlogic.gdx.utils.ObjectSet: com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator()
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution: ResolutionFileResolver$Resolution(int,int,java.lang.String)
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isIos
com.esotericsoftware.kryonet.Server: void update(int)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int armor
com.badlogic.gdx.net.ServerSocketHints: int performancePrefLatency
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool: ModelInfluencer$Random$ModelInstancePool(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random)
com.badlogic.gdx.graphics.GL20: int GL_FLOAT
com.google.android.material.floatingactionbutton.FloatingActionButton: androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior getBehavior()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: boolean getFlipVertically()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glColorMask(boolean,boolean,boolean,boolean)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1: java.lang.Object newObject()
com.badlogic.gdx.math.Intersector$SplitTriangle: int backOffset
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1: void run()
com.badlogic.gdx.utils.LongMap$Entries: com.badlogic.gdx.utils.LongMap$Entry entry
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOver
com.badlogic.gdx.math.Vector: boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.physics.box2d.ChainShape: void setNextVertex(float,float)
com.badlogic.gdx.utils.Bits: boolean containsAll(com.badlogic.gdx.utils.Bits)
com.HyperSphere.Connection.PacketObjects.Map.Tile: void render(int,int,int)
com.badlogic.gdx.utils.TimSort: int tmpCount
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.utils.reflect.ClassReflection: java.lang.Class[] getInterfaces(java.lang.Class)
com.badlogic.gdx.physics.box2d.World: void jniQueryAABB(long,float,float,float,float)
com.google.android.material.chip.Chip: float getChipStartPadding()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.lang.String getFormatString()
com.badlogic.gdx.backends.android.AndroidGraphics: void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
com.badlogic.gdx.math.Intersector: float det(float,float,float,float)
com.badlogic.gdx.files.FileHandle: boolean delete()
com.badlogic.gdx.utils.LongMap: LongMap(int,float)
com.badlogic.gdx.graphics.GL20: int GL_SCISSOR_TEST
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void set(com.badlogic.gdx.graphics.g3d.particles.ParticleController)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetFloatv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Normal
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int TOUCH_DRAGGED
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearColor(float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: short[] indices
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] repLens
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void render()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LSUB
com.badlogic.gdx.scenes.scene2d.Event: void setStage(com.badlogic.gdx.scenes.scene2d.Stage)
com.badlogic.gdx.graphics.g2d.SpriteCache: boolean isDrawing()
com.google.android.material.floatingactionbutton.FloatingActionButton: int getSize()
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Affine2 worldTransform
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean shouldTerminateEGLWhenPausing()
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Field[] getFields(java.lang.Class)
com.badlogic.gdx.graphics.Color: void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int)
com.badlogic.gdx.utils.IntMap: java.lang.String toString()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float[] meanX
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.math.Vector3 tmpV
com.badlogic.gdx.backends.android.ZipResourceFile: int kEOCDSize
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int D2F
com.badlogic.gdx.utils.JsonValue: JsonValue(double)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.esotericsoftware.kryo.io.KryoDataInput: long readLong()
com.badlogic.gdx.math.CumulativeDistribution: void generateNormalized()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glSampleCoverage(float,boolean)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isRightEdge()
com.badlogic.gdx.scenes.scene2d.ui.Tree: float layout(com.badlogic.gdx.utils.Array,float,float,float)
com.badlogic.gdx.utils.compression.rangecoder.Decoder: java.io.InputStream Stream
com.badlogic.gdx.graphics.g2d.TextureAtlas: int readTuple(java.io.BufferedReader)
com.esotericsoftware.kryonet.rmi.RemoteObject: void setRemoteToString(boolean)
com.badlogic.gdx.graphics.GL20: void glClearColor(float,float,float,float)
com.badlogic.gdx.math.Quaternion: float z
com.badlogic.gdx.math.Circle: boolean contains(com.badlogic.gdx.math.Vector2)
com.google.android.material.appbar.AppBarLayout
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 scl(float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_GRAY2
com.esotericsoftware.jsonbeans.JsonValue: byte getByte(java.lang.String,byte)
com.badlogic.gdx.graphics.GL20: void glUniform2f(int,float,float)
com.badlogic.gdx.graphics.GL20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.GL30: int GL_SYNC_FLUSH_COMMANDS_BIT
com.google.android.material.chip.Chip: void setCheckedIconVisible(boolean)
com.badlogic.gdx.utils.Collections
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver: com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas()
com.badlogic.gdx.utils.JsonValue: byte getByte(int)
com.badlogic.gdx.graphics.GL20: int GL_BACK
androidx.appcompat.widget.LinearLayoutCompat: void setMeasureWithLargestChildEnabled(boolean)
com.badlogic.gdx.assets.AssetManager: java.lang.Object get(java.lang.String,java.lang.Class)
com.badlogic.gdx.math.Polyline: float getScaleX()
com.google.android.material.button.MaterialButton: void setStrokeWidth(int)
com.badlogic.gdx.graphics.g3d.model.MeshPart: MeshPart(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2: DragScrollListener$2(com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane)
com.badlogic.gdx.Files$FileType: Files$FileType(java.lang.String,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendColor(float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_MAX_COMBINED_UNIFORM_BLOCKS
com.esotericsoftware.kryonet.Server$1: com.esotericsoftware.kryonet.Server this$0
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.jsonbeans.Json: void writeObjectEnd()
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: EllipseSpawnShapeValue()
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform projViewTrans
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Vector2 bottomLeft
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: com.badlogic.gdx.physics.box2d.RayCastCallback rayCallBack
com.esotericsoftware.kryo.io.ByteBufferInputStream: int read(byte[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.utils.Selection getSelection()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(java.io.InputStream,int)
com.badlogic.gdx.graphics.g3d.Model: void convertMesh(com.badlogic.gdx.graphics.g3d.model.data.ModelMesh)
com.badlogic.gdx.utils.IdentityMap: java.lang.Object removeStash(java.lang.Object)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int getCurrentFrameIndex()
com.badlogic.gdx.utils.ObjectIntMap: void removeStashIndex(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.IntArray globalUniforms
com.badlogic.gdx.physics.box2d.Body: float getAngularDamping()
com.esotericsoftware.kryo.Kryo: int copyDepth
com.badlogic.gdx.maps.tiled.TideMapLoader: TideMapLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.ui.Label getTitleLabel()
com.badlogic.gdx.scenes.scene2d.actions.EventAction: void setActive(boolean)
com.badlogic.gdx.assets.loaders.TextureAtlasLoader: com.badlogic.gdx.graphics.g2d.TextureAtlas load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion add(float,float,float,float)
com.badlogic.gdx.utils.IntArray: void set(int,int)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute alphaTestAttribute
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth
com.badlogic.gdx.backends.android.AndroidGraphics: int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int)
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: com.badlogic.gdx.scenes.scene2d.Actor listenerActor
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setDrawAABBs(boolean)
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeLongS(long,boolean)
com.badlogic.gdx.utils.BooleanArray: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPrefHeight()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer
com.esotericsoftware.kryo.Kryo: void setAsmEnabled(boolean)
com.badlogic.gdx.physics.box2d.EdgeShape: EdgeShape()
com.badlogic.gdx.utils.DataInput: char[] chars
com.HyperSphere.Connection.PacketObjects.Entities.Creature: java.lang.String currentlyAttackingName
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard keyboard
com.badlogic.gdx.graphics.g2d.PolygonSprite: void rotate(float)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: TiledMapTileLayer(int,int,int,int)
com.badlogic.gdx.graphics.GL20: void glDisable(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int getDimensions()
com.badlogic.gdx.graphics.g2d.PolygonSprite: void set(com.badlogic.gdx.graphics.g2d.PolygonSprite)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void begin(com.badlogic.gdx.math.Matrix4,int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.physics.box2d.ChainShape: boolean isLooped
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP
com.esotericsoftware.jsonbeans.JsonValue: double[] asDoubleArray()
com.badlogic.gdx.utils.ComparableTimSort: void mergeLo(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Image: com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable()
androidx.appcompat.view.menu.ActionMenuItemView: ActionMenuItemView(android.content.Context,android.util.AttributeSet)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getBackgroundTintList()
com.badlogic.gdx.backends.android.AndroidInput$1: com.badlogic.gdx.backends.android.AndroidInput$KeyEvent newObject()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void queueEvent(java.lang.Runnable)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1: com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy this$0
com.badlogic.gdx.maps.MapGroupLayer: MapGroupLayer()
com.badlogic.gdx.scenes.scene2d.ui.TextButton: void setLabel(com.badlogic.gdx.scenes.scene2d.ui.Label)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Matrix4)
com.google.android.material.appbar.AppBarLayout: int getTopInset()
com.esotericsoftware.reflectasm.FieldAccess: void setShort(java.lang.Object,int,short)
com.google.android.material.chip.Chip: void setChipEndPadding(float)
com.badlogic.gdx.math.Vector3: boolean epsilonEquals(com.badlogic.gdx.math.Vector3,float)
androidx.appcompat.widget.AppCompatImageView: void setImageBitmap(android.graphics.Bitmap)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode mode
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: int getInternalFormat()
com.badlogic.gdx.utils.async.AsyncExecutor$2: AsyncExecutor$2(com.badlogic.gdx.utils.async.AsyncExecutor,com.badlogic.gdx.utils.async.AsyncTask)
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: ArraySelection(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String TE
com.badlogic.gdx.utils.JsonWriter: void close()
com.badlogic.gdx.physics.box2d.World: void deactivateBody(com.badlogic.gdx.physics.box2d.Body)
com.badlogic.gdx.graphics.g2d.Sprite: void rotate(float)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float cursorX
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.utils.Array textures
com.badlogic.gdx.utils.Queue$QueueIterable
com.esotericsoftware.kryo.Serializer: Serializer(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMajor()
com.badlogic.gdx.physics.box2d.World: void setUseDefaultContactFilter(boolean)
com.badlogic.gdx.scenes.scene2d.Action: boolean act(float)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: void logManagedCachesStatus()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void cut(boolean)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.Color tempColor
com.badlogic.gdx.physics.box2d.Shape$Type: Shape$Type(java.lang.String,int)
com.badlogic.gdx.physics.box2d.World: long createProperJoint(com.badlogic.gdx.physics.box2d.JointDef)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell stack(com.badlogic.gdx.scenes.scene2d.Actor[])
com.badlogic.gdx.utils.SortedIntList$Iterator: com.badlogic.gdx.utils.SortedIntList$Node next()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean flickScroll
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.physics.box2d.Joint: boolean jniIsActive(long)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: float loadFactor
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int scrollAmount
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void end()
com.esotericsoftware.kryonet.Listener$QueuedListener$4
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: void checkGLDriver(javax.microedition.khronos.opengles.GL10)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform2fv(int,int,float[],int)
com.badlogic.gdx.graphics.Mesh: float calculateRadius(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.maps.tiled.TiledMapTile: float getOffsetY()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1: void dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.math.Vector2 tmpSize
com.google.android.material.textfield.TextInputLayout: void setPrefixTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.GL20: void glSampleCoverage(float,boolean)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer: java.util.List read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int compareTo(com.badlogic.gdx.graphics.g3d.Shader)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void capsule(float,float,int)
com.badlogic.gdx.scenes.scene2d.Actor: void clearActions()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_SCALE_LINEAR
com.badlogic.gdx.graphics.g2d.BitmapFontCache: int glyphCount
com.badlogic.gdx.math.Vector3: boolean isPerpendicular(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2: android.view.SurfaceHolder getHolder()
com.badlogic.gdx.utils.ArrayMap$Values
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: void allocateChannels()
com.badlogic.gdx.utils.FloatArray: void reverse()
com.badlogic.gdx.Input$Keys: int RIGHT
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetFloatv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void flipY()
androidx.appcompat.widget.ActionBarContextView: ActionBarContextView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.IdentityMap: int PRIME3
com.badlogic.gdx.physics.box2d.joints.RopeJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.math.Ellipse: float y
com.esotericsoftware.kryonet.Server: void bind(int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] particles
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LCMP
com.badlogic.gdx.graphics.GL30: void glDrawArrays(int,int,int)
androidx.appcompat.widget.Toolbar: android.content.Context getPopupContext()
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: boolean pan(float,float,float,float)
androidx.core.widget.NestedScrollView: NestedScrollView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.profiling.GLProfiler: boolean enabled
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _lowCoder
com.esotericsoftware.reflectasm.MethodAccess: int getIndex(java.lang.String)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void load(java.io.BufferedReader)
com.badlogic.gdx.utils.ObjectMap: int pushIterations
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.IntArray computeIndices(com.badlogic.gdx.utils.FloatArray,boolean,boolean)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int kBitModelTotal
com.badlogic.gdx.utils.Array: java.lang.Object peek()
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.math.Polygon: void setOrigin(float,float)
com.badlogic.gdx.utils.Timer
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle: Slider$SliderStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType[] valueTypes
com.badlogic.gdx.files.FileHandle: java.nio.ByteBuffer map()
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable: com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1
com.badlogic.gdx.assets.loaders.ParticleEffectLoader: java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.Input$Keys: int MEDIA_REWIND
com.esotericsoftware.kryonet.rmi.ObjectSpace$4: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexParameteri(int,int,int)
com.badlogic.gdx.math.Quaternion: boolean equals(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1: AndroidGraphicsLiveWallpaper$1(com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper,android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
androidx.cardview.widget.CardView: void setPreventCornerOverlap(boolean)
com.badlogic.gdx.scenes.scene2d.Actor: void setColor(float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer: void update()
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder basicAuthentication(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.InputEvent: char getCharacter()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.utils.ByteArray: boolean notEmpty()
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: void end()
com.badlogic.gdx.utils.ComparableTimSort: int tmpCount
com.google.android.material.card.MaterialCardView: android.content.res.ColorStateList getCheckedIconTint()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: int counter
com.badlogic.gdx.backends.android.AndroidGL30: java.nio.Buffer glGetBufferPointerv(int,int)
com.badlogic.gdx.math.Ellipse: int hashCode()
com.google.android.material.chip.Chip: void setTextEndPaddingResource(int)
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_FUNC
com.badlogic.gdx.utils.JsonValue$JsonIterator: JsonValue$JsonIterator(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.AndroidDaydream: android.view.View initializeForView(com.badlogic.gdx.ApplicationListener)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2: void run()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter worldTrans
com.badlogic.gdx.Input$Keys: int POUND
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getMaxAdvanceWidth()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void transformPosition(float[],int,int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.GL20: void glBlendEquationSeparate(int,int)
com.badlogic.gdx.graphics.g2d.Batch: int V2
com.badlogic.gdx.graphics.g3d.decals.Decal: int C4
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue: float interval
com.badlogic.gdx.scenes.scene2d.ui.TextField: char passwordCharacter
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void createWakeLock(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV3
com.esotericsoftware.kryonet.ClientDiscoveryHandler$1: java.net.DatagramPacket onRequestNewDatagramPacket()
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight setDirection(float,float,float)
com.badlogic.gdx.utils.ObjectIntMap: int getAndIncrement(java.lang.Object,int,int)
com.badlogic.gdx.Net: com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] _repDistances
androidx.appcompat.widget.AppCompatImageView: void setImageURI(android.net.Uri)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidClipboard clipboard
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_indicies_0()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: SplitPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int getUniformID(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: int[] splits
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: com.badlogic.gdx.scenes.scene2d.Actor relatedActor
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToTranslation(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.BinaryHeap: BinaryHeap(int,boolean)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
com.badlogic.gdx.scenes.scene2d.ui.Value$4: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.ContactImpulse: float[] getTangentImpulses()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.math.Matrix4 toMatrix4(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.ObjectFloatMap: float removeStash(java.lang.Object,float)
com.esotericsoftware.kryo.util.Util: java.lang.Class getPrimitiveClass(java.lang.Class)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void allowCompletion()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: java.io.ObjectOutput getObjectOutput(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output)
com.badlogic.gdx.Input$Keys
com.badlogic.gdx.utils.CharArray: char pop()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction: com.badlogic.gdx.scenes.scene2d.Action action
com.badlogic.gdx.scenes.scene2d.actions.AddAction: com.badlogic.gdx.scenes.scene2d.Action action
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue delayValue
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: int bufferedParticlesCount
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryonet.rmi.TimeoutException: TimeoutException(java.lang.Throwable)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.math.Rectangle imageBounds
com.badlogic.gdx.graphics.GL30: int GL_SIGNED_NORMALIZED
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.math.Vector2 pointer2
com.badlogic.gdx.graphics.GL20: int GL_CONSTANT_COLOR
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory: int EGL_CONTEXT_CLIENT_VERSION
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void onAttachedToWindow()
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.Graphics: int getBackBufferHeight()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle style
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void startActivity(android.content.Intent)
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: float startG
com.esotericsoftware.jsonbeans.ObjectMap: void removeStashIndex(int)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean getUseAsmEnabled()
com.badlogic.gdx.graphics.GL20: int GL_RGB5_A1
com.google.android.material.bottomappbar.BottomAppBar: float getFabTranslationX()
com.badlogic.gdx.files.FileHandleStream: com.badlogic.gdx.files.FileHandle parent()
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.math.Vector2 rayNormal
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidInput input
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean canCacheMoreE
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: byte responseID
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int getActiveCount()
com.badlogic.gdx.physics.box2d.ContactListener
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_KERNING_DEFAULT
androidx.fragment.app.Fragment: android.os.Bundle requireArguments()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: int swap()
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction: void setLayoutEnabled(boolean)
com.badlogic.gdx.utils.SortedIntList$Node: com.badlogic.gdx.utils.SortedIntList$Node n
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Interpolation4
com.google.android.material.chip.Chip: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void fillVerticesToViewPointCPU(int[])
com.badlogic.gdx.backends.android.AndroidGraphics: int getBackBufferWidth()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.ClassResolver classResolver
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float dragStartX
com.badlogic.gdx.graphics.Colors: Colors()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDepthMask(boolean)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.TextureData textureData
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter object(java.lang.String)
com.badlogic.gdx.physics.box2d.Body: void jniSetLinearVelocity(long,float,float)
com.google.android.material.circularreveal.CircularRevealFrameLayout: void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: java.lang.String type
com.esotericsoftware.kryonet.Server: void start()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix3)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type[] getArgumentTypes()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void setFallbackInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction: void restart()
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.math.MathUtils: double BIG_ENOUGH_FLOOR
com.badlogic.gdx.net.SocketHints: int connectTimeout
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value padRight
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 tmpMat
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 setLength2(float)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: void reset()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4fv(int,int,float[],int)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean)
com.badlogic.gdx.maps.objects.PolygonMapObject
com.badlogic.gdx.Input$Keys: int X
com.badlogic.gdx.scenes.scene2d.Event: boolean handled
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2: void run()
com.badlogic.gdx.graphics.GL30: void glBufferSubData(int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: float getHeight()
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: java.io.InputStream getInputStream()
com.badlogic.gdx.physics.box2d.joints.WeldJoint
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float jniGetLength(long)
com.badlogic.gdx.math.Interpolation$12
com.google.android.material.chip.Chip: void setChipStrokeColorResource(int)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: java.lang.String toString()
com.badlogic.gdx.utils.BooleanArray: BooleanArray(boolean[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_BOOLEAN
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean zoom(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
com.badlogic.gdx.utils.reflect.ClassReflection: ClassReflection()
com.badlogic.gdx.utils.IntIntMap$Entries: IntIntMap$Entries(com.badlogic.gdx.utils.IntIntMap)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void scaleEffect(float,float)
com.badlogic.gdx.graphics.GLTexture: int getHeight()
com.badlogic.gdx.utils.ArrayMap: java.lang.String toString()
com.badlogic.gdx.input.RemoteSender: boolean touchUp(int,int,int,int)
com.badlogic.gdx.utils.ByteArray: boolean removeValue(byte)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
com.google.android.material.radiobutton.MaterialRadioButton: android.content.res.ColorStateList getMaterialThemeColorsTintList()
com.esotericsoftware.kryonet.Server
com.esotericsoftware.kryo.io.Output: void setPosition(int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,com.badlogic.gdx.graphics.g3d.Material)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int pushIterations
com.badlogic.gdx.input.RemoteInput$EventTrigger: com.badlogic.gdx.input.RemoteInput this$0
com.badlogic.gdx.graphics.GL30: boolean glIsShader(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int y
com.badlogic.gdx.utils.compression.lzma.Encoder: int _matchFinderType
com.badlogic.gdx.math.CatmullRomSpline: CatmullRomSpline(com.badlogic.gdx.math.Vector[],boolean)
com.badlogic.gdx.utils.LongArray: long peek()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: int getType()
com.badlogic.gdx.utils.ObjectSet: boolean remove(java.lang.Object)
com.badlogic.gdx.files.FileHandleStream: boolean delete()
com.badlogic.gdx.utils.reflect.Field: boolean isDefaultAccess()
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: boolean enableMotor
com.badlogic.gdx.graphics.GL20: void glUniformMatrix2fv(int,int,boolean,float[],int)
com.badlogic.gdx.net.SocketHints: int socketTimeout
com.badlogic.gdx.Game: com.badlogic.gdx.Screen getScreen()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: boolean a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,int,int[],int)
com.badlogic.gdx.utils.IntSet: int threshold
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void appendText(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void end()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: boolean useMipMaps()
com.badlogic.gdx.utils.Align: int bottomLeft
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute read(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader,int,int,char[],int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Values values1
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String AcceptLanguage
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter: void flush()
com.badlogic.gdx.graphics.g3d.decals.Decal: void translateY(float)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void onShow(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFLE
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer
com.badlogic.gdx.backends.android.AndroidGL20: void glClearStencil(int)
com.badlogic.gdx.utils.IntArray: void truncate(int)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float jniGetAngularOffset(long)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: float opacity
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Boolean uniformX
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights0exponent
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float jniGetDampingRatio(long)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.JsonValue: float getFloat(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_1
com.badlogic.gdx.utils.Json: java.lang.String prettyPrint(java.lang.Object,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
com.badlogic.gdx.utils.compression.lz.OutWindow: void ReleaseStream()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void act(float)
com.badlogic.gdx.utils.CharArray: boolean ordered
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData getSaveData()
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer copy()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void start()
com.badlogic.gdx.graphics.g2d.ParticleEffect: void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.badlogic.gdx.utils.BinaryHeap: java.lang.String toString()
com.badlogic.gdx.utils.Sort: com.badlogic.gdx.utils.ComparableTimSort comparableTimSort
com.badlogic.gdx.graphics.GL30: int GL_MAX_COLOR_ATTACHMENTS
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.utils.LittleEndianInputStream: void readFully(byte[],int,int)
com.badlogic.gdx.graphics.GL20: int GL_RGBA4
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider: com.badlogic.gdx.assets.AssetManager assetManager
com.badlogic.gdx.backends.android.AndroidZipFileHandle: android.content.res.AssetFileDescriptor getAssetFileDescriptor()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryonet.Server$1: void connected(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: int originalWidth
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23
com.badlogic.gdx.utils.TimSort: int[] runBase
com.badlogic.gdx.graphics.g3d.model.NodePart
com.badlogic.gdx.utils.JsonValue$JsonIterator: com.badlogic.gdx.utils.JsonValue next()
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean getDuplicateBorder()
com.badlogic.gdx.math.Plane$PlaneSide: Plane$PlaneSide(java.lang.String,int)
com.badlogic.gdx.assets.AssetManager: boolean update(int)
com.esotericsoftware.kryonet.Connection: int sendTCP(java.lang.Object)
com.badlogic.gdx.graphics.g3d.Attributes: boolean same(com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField
com.badlogic.gdx.utils.StreamUtils: void copyStream(java.io.InputStream,java.nio.ByteBuffer,int)
com.badlogic.gdx.utils.SortedIntList: java.lang.Object get(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getXOffsetValue()
com.badlogic.gdx.Net$Protocol: com.badlogic.gdx.Net$Protocol[] $VALUES
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float getKnobPercentX()
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.Pool freeBodies
androidx.appcompat.widget.AppCompatSpinner
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.Model model
com.badlogic.gdx.maps.objects.RectangleMapObject: com.badlogic.gdx.math.Rectangle rectangle
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.math.Vector2 initialPointer2
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_NO_SCALE
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int register(java.lang.String,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator)
com.esotericsoftware.kryonet.Client: java.net.InetAddress connectHost
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: boolean updateTexture(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQuery()
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.maps.objects.CircleMapObject
com.badlogic.gdx.utils.reflect.Method: boolean isVarArgs()
com.badlogic.gdx.utils.IntFloatMap: int findKey(float,int)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: java.lang.String toString()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int[] mValue
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.math.MathUtils: float degRad
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 translate(float,float)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object getStash(java.lang.Object)
com.esotericsoftware.kryonet.Listener$LagListener: Listener$LagListener(int,int,com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean access$900(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
androidx.viewpager2.adapter.FragmentStateAdapter$2
com.badlogic.gdx.physics.box2d.Contact: void jniSetTangentSpeed(long,float)
com.badlogic.gdx.backends.android.AndroidGL30: void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
com.esotericsoftware.kryo.io.Input: byte[] readBytes(int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
com.esotericsoftware.kryo.util.ObjectMap$Values: ObjectMap$Values(com.esotericsoftware.kryo.util.ObjectMap)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell align(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: int createProgram()
androidx.appcompat.widget.SearchView: int getPreferredHeight()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void hideAction(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)
com.badlogic.gdx.files.FileHandle: void writeBytes(byte[],boolean)
com.badlogic.gdx.utils.ObjectFloatMap: java.lang.Object[] keyTable
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle
com.badlogic.gdx.maps.MapObject: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.maps.tiled.TmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters)
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_actions
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void clear(int)
com.esotericsoftware.jsonbeans.OutputType: com.esotericsoftware.jsonbeans.OutputType json
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int posSize
com.badlogic.gdx.graphics.GL20: int GL_BYTE
com.badlogic.gdx.utils.ObjectFloatMap: boolean notEmpty()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: float lowMax
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float getLength1()
com.badlogic.gdx.backends.android.AndroidSound: android.media.SoundPool soundPool
com.esotericsoftware.kryonet.EndPoint: com.esotericsoftware.kryo.Kryo getKryo()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: void a(java.lang.StringBuffer,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.Stage: Stage(com.badlogic.gdx.utils.viewport.Viewport,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int glTypeSize
com.badlogic.gdx.math.collision.Sphere: float radius
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int c
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle tmp2
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Stack: float getPrefWidth()
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.math.collision.BoundingBox bounds
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.ModelInstance,com.badlogic.gdx.math.Matrix4)
androidx.lifecycle.SavedStateHandleController$OnRecreation: SavedStateHandleController$OnRecreation()
com.badlogic.gdx.utils.OrderedSet: OrderedSet()
com.badlogic.gdx.files.FileHandle: java.lang.String extension()
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData createSaveData(java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader: FreeTypeFontGeneratorLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.glutils.FrameBuffer: void unbind()
com.badlogic.gdx.graphics.g3d.ModelInstance: boolean defaultShareKeyframes
com.esotericsoftware.jsonbeans.ObjectMap$Values
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 quadrilateralCentroid(float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setBounds(float,float,float,float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setOriginCenter()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float getKnobX()
com.badlogic.gdx.utils.IntArray: void incr(int,int)
com.badlogic.gdx.utils.IntSet$IntSetIterator: void remove()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_COMPONENT16
com.badlogic.gdx.graphics.glutils.VertexBufferObject: VertexBufferObject(int,java.nio.ByteBuffer,boolean,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: void add(int,java.lang.Object[])
com.badlogic.gdx.graphics.Mesh: void transform(com.badlogic.gdx.math.Matrix4,int,int)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: java.lang.Object resource
com.badlogic.gdx.utils.UBJsonWriter: java.io.DataOutputStream out
com.badlogic.gdx.input.GestureDetector: float lastTapY
com.badlogic.gdx.graphics.g3d.model.MeshPart: com.badlogic.gdx.graphics.g3d.model.MeshPart set(com.badlogic.gdx.graphics.g3d.model.MeshPart)
com.badlogic.gdx.utils.compression.ICodeProgress: void SetProgress(long,long)
com.badlogic.gdx.utils.IntMap: int EMPTY
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_WIDTH
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int FLAG_FLIP_HORIZONTALLY
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter: I18NBundleLoader$I18NBundleParameter()
com.esotericsoftware.kryo.serializers.DeflateSerializer: int compressionLevel
com.badlogic.gdx.utils.ObjectFloatMap: int hashShift
com.badlogic.gdx.assets.loaders.CubemapLoader
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteFramebuffer(int)
com.badlogic.gdx.graphics.g3d.ModelCache: void begin()
com.badlogic.gdx.graphics.g2d.ParticleEffect: void loadEmitterImages(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1
com.badlogic.gdx.graphics.glutils.FloatTextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.BSpline set(com.badlogic.gdx.math.Vector[],int,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Image: float getPrefHeight()
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: boolean isPreviewNotified
com.badlogic.gdx.graphics.GL20: int GL_SHADER_TYPE
com.badlogic.gdx.utils.IntMap: int stashCapacity
com.badlogic.gdx.scenes.scene2d.ui.TextButton: TextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap)
com.badlogic.gdx.utils.StringBuilder: int codePointBefore(int)
com.badlogic.gdx.scenes.scene2d.InputEvent
com.badlogic.gdx.graphics.GL30: int GL_BUFFER_MAP_POINTER
com.esotericsoftware.kryonet.Client: com.esotericsoftware.kryonet.Serialization serialization
com.badlogic.gdx.graphics.glutils.KTXTextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.google.android.material.internal.VisibilityAwareImageButton: void setVisibility(int)
com.badlogic.gdx.utils.XmlWriter: void write(char[],int,int)
com.esotericsoftware.jsonbeans.JsonValue: float getFloat(int)
com.badlogic.gdx.graphics.VertexAttributes: int compareTo(java.lang.Object)
com.esotericsoftware.kryonet.util.TcpIdleSender: void idle(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: void Create(int,int)
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent
com.badlogic.gdx.graphics.GL30: void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.utils.IntFloatMap: int PRIME1
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glPauseTransformFeedback()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void invalidate()
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void pan(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction: boolean enabled
com.badlogic.gdx.net.HttpStatus: int SC_GONE
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup columnAlign(int)
com.badlogic.gdx.math.Interpolation$5: Interpolation$5()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool: com.badlogic.gdx.graphics.g3d.Renderable newObject()
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType array
com.badlogic.gdx.graphics.g2d.PolygonSprite: boolean dirty
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void putResize(java.lang.Object,int)
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int maxSimultaneousSounds
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: int width
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
com.badlogic.gdx.graphics.g2d.PixmapPacker: int[] getPads(com.badlogic.gdx.graphics.Pixmap,int[])
com.badlogic.gdx.graphics.Cubemap$CubemapSide: Cubemap$CubemapSide(java.lang.String,int,int,int,float,float,float,float,float,float)
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral Compass
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float getMaxForce()
com.badlogic.gdx.physics.box2d.Body: void setBullet(boolean)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1
com.badlogic.gdx.utils.ObjectFloatMap: float getAndIncrementStash(java.lang.Object,float,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.GL20: int GL_DITHER
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINEJOIN_MITER_FIXED
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean hasChildren()
com.badlogic.gdx.backends.android.AndroidGL20: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL20: void glDrawElements(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void addToTree(com.badlogic.gdx.scenes.scene2d.ui.Tree)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float leftWidth
com.esotericsoftware.kryo.Kryo: int REF
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.PerformanceCounter: java.lang.String toString()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ATHROW
com.esotericsoftware.kryonet.TcpConnection: java.nio.channels.SocketChannel socketChannel
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.math.Matrix4 transform
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setHighMax(float)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: float depthRangeNear
com.badlogic.gdx.utils.compression.rangecoder.Decoder: void ReleaseStream()
com.badlogic.gdx.utils.IdentityMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.math.Matrix4 transformMatrix
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteProgram(int)
com.google.android.material.chip.Chip: void setChecked(boolean)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setSmoothScrolling(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPadRight()
com.badlogic.gdx.graphics.Color: Color(int)
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator: java.lang.Object next()
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior: AppBarLayout$ScrollingViewBehavior(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.jsonbeans.ObjectMap: float loadFactor
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder _posAlignEncoder
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: void setListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int MONITORENTER
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void renderObject(com.badlogic.gdx.maps.MapObject)
com.badlogic.gdx.utils.JsonValue$ValueType
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.scenes.scene2d.utils.Selection: com.badlogic.gdx.utils.OrderedSet items()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String ReflectionAlias
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3f(int,float,float,float)
com.badlogic.gdx.graphics.GL20: int GL_NEAREST_MIPMAP_NEAREST
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getEmission()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory: GLSurfaceViewAPI18$DefaultContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean longPress(float,float)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: com.badlogic.gdx.scenes.scene2d.ui.Image image
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1: void received(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean isDrawInactiveBodies()
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo: com.badlogic.gdx.graphics.CubemapData data
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: void allocateChannels()
com.badlogic.gdx.graphics.g2d.Sprite: float rotation
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue spawnDepthValue
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.math.Ellipse: void set(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void setTimeStep(float)
com.badlogic.gdx.graphics.glutils.VertexData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer: FloatFrameBuffer(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.ObjectMap properties
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.Cell: void setActorY(float)
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.Class,java.lang.Class,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean autoUpdate
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void bufferChanged()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph getGlyph()
com.badlogic.gdx.utils.compression.lzma.Encoder: void SetOutStream(java.io.OutputStream)
com.badlogic.gdx.utils.ComparableTimSort: void mergeForceCollapse()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int mDepthSize
com.badlogic.gdx.graphics.g2d.BitmapFont: boolean flipped
com.badlogic.gdx.math.RandomXS128: int nextInt()
com.badlogic.gdx.graphics.GL30: int GL_PROGRAM_BINARY_LENGTH
com.badlogic.gdx.net.ServerSocket: com.badlogic.gdx.net.Socket accept(com.badlogic.gdx.net.SocketHints)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void write(com.badlogic.gdx.utils.Json)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior getBehavior()
com.badlogic.gdx.utils.CharArray: boolean isEmpty()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: float clamp(float)
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.lz.OutWindow m_OutWindow
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean round
com.badlogic.gdx.physics.box2d.joints.RopeJoint
com.badlogic.gdx.utils.IntFloatMap$MapIterator: boolean valid
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader: AsynchronousAssetLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.GL20: int GL_COVERAGE_BUFFER_BIT_NV
com.badlogic.gdx.graphics.g2d.PolygonBatch: void disableBlending()
com.esotericsoftware.jsonbeans.JsonValue: double getDouble(java.lang.String,double)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.maps.objects.TextureMapObject: float originY
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadObjectGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMaxTextSize()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: android.view.WindowManager getWindowManager()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: boolean act(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: ClassVisitor(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int activateKey
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_TRANSPARENCY
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: void update(float)
com.badlogic.gdx.Graphics: void setGL20(com.badlogic.gdx.graphics.GL20)
com.hyperspherestudio.kryonet.Packets.EncryptedPacket: EncryptedPacket()
com.badlogic.gdx.graphics.PixmapIO$PNG: boolean flipY
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int[] pads
com.badlogic.gdx.graphics.Pixmap: int getPixel(int,int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void setRenderBounds(int[])
androidx.fragment.app.Fragment: androidx.lifecycle.LiveData getViewLifecycleOwnerLiveData()
com.badlogic.gdx.maps.tiled.TiledMap: com.badlogic.gdx.maps.tiled.TiledMapTileSets getTileSets()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: void activateParticles(int,int)
com.badlogic.gdx.utils.IntMap$Values: java.util.Iterator iterator()
com.esotericsoftware.jsonbeans.ObjectMap$Entry
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle: SplitPane$SplitPaneStyle()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation linear
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation smooth
com.badlogic.gdx.utils.ByteArray: int size
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glCreateShader(int)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
com.badlogic.gdx.math.Interpolation$13: Interpolation$13()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: int getLeft()
com.badlogic.gdx.net.HttpStatus: int SC_NON_AUTHORITATIVE_INFORMATION
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,int,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: boolean staggerIndexEven
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void setSelectable(boolean)
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion()
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.math.Interpolation$Exp: float power
com.esotericsoftware.kryo.serializers.JavaSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.Pixmap: int getGLInternalFormat()
com.badlogic.gdx.physics.box2d.Contact: com.badlogic.gdx.physics.box2d.WorldManifold getWorldManifold()
com.badlogic.gdx.utils.compression.lzma.Base: int kDicLogSizeMin
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: com.badlogic.gdx.math.Vector2 startPoint
com.badlogic.gdx.utils.PauseableThread: void run()
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(int)
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_FUNC
com.badlogic.gdx.utils.JsonWriter$OutputType: java.lang.String quoteValue(java.lang.Object)
com.badlogic.gdx.math.MathUtils$Sin: MathUtils$Sin()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,float,float,float,float)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: GestureDetector$GestureAdapter()
com.esotericsoftware.jsonbeans.Json: void writeField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class)
com.badlogic.gdx.input.GestureDetector: void setTapCountInterval(float)
com.badlogic.gdx.maps.objects.TextureMapObject: com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glValidateProgram(int)
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: float[] coeff
com.badlogic.gdx.graphics.g3d.decals.Decal: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.Sprite: Sprite(com.badlogic.gdx.graphics.g2d.TextureRegion)
androidx.fragment.app.Fragment: void performDestroy()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
androidx.fragment.app.Fragment: boolean mCalled
com.esotericsoftware.kryo.util.IdentityMap: com.esotericsoftware.kryo.util.IdentityMap$Values values()
com.badlogic.gdx.math.MathUtils: boolean randomBoolean(float)
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER0
com.badlogic.gdx.utils.IntMap: int pushIterations
com.badlogic.gdx.graphics.GL30: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData)
com.badlogic.gdx.backends.android.AndroidWallpaperListener: void previewStateChange(boolean)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup columnLeft()
com.badlogic.gdx.ScreenAdapter: void show()
com.badlogic.gdx.maps.tiled.TiledMapTileSet: java.lang.String name
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 tmp3
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: BaseShader$Uniform(java.lang.String,long,long,long)
com.badlogic.gdx.utils.ObjectIntMap$Values: ObjectIntMap$Values(com.badlogic.gdx.utils.ObjectIntMap)
androidx.appcompat.view.menu.ExpandedMenuView: ExpandedMenuView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.files.FileHandle: java.io.Writer writer(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: int[] particleOffsets
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int x
com.badlogic.gdx.math.EarClippingTriangulator: void cutEarTip(int)
com.esotericsoftware.kryo.io.KryoDataInput: java.lang.String readLine()
com.badlogic.gdx.graphics.g3d.Attribute: com.badlogic.gdx.utils.Array types
com.badlogic.gdx.graphics.GL20: int GL_TRUE
com.badlogic.gdx.graphics.GL20: void glUniform2fv(int,int,float[],int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: DefaultArraySerializers$CharArraySerializer()
com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.math.Vector2: float dst(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void onPause()
com.badlogic.gdx.graphics.g3d.decals.Decal: float getWidth()
com.badlogic.gdx.math.Interpolation$SwingIn: Interpolation$SwingIn(float)
com.esotericsoftware.jsonbeans.JsonValue: void indent(int,java.lang.StringBuilder)
com.badlogic.gdx.utils.ScreenUtils: byte[] getFrameBufferPixels(boolean)
com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry: Kryo$DefaultSerializerEntry(java.lang.Class,com.esotericsoftware.kryo.factories.SerializerFactory)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Net getNet()
com.badlogic.gdx.graphics.g2d.Batch: int V3
com.badlogic.gdx.utils.FloatArray: void add(float,float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$ParticleBox2D: void translate(float,float)
com.badlogic.gdx.utils.Timer$TimerThread: void pause()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
androidx.multidex.MultiDexApplication: MultiDexApplication()
com.badlogic.gdx.utils.BufferUtils: int getAllocatedBytesUnsafe()
com.badlogic.gdx.utils.ObjectFloatMap$Keys: void reset()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void visualScrollX(float)
com.badlogic.gdx.utils.ObjectIntMap$Entries: ObjectIntMap$Entries(com.badlogic.gdx.utils.ObjectIntMap)
com.badlogic.gdx.graphics.g2d.TextureRegion: float u
com.badlogic.gdx.Input: float getGyroscopeZ()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth
com.badlogic.gdx.backends.android.AndroidGL20: void glPixelStorei(int,int)
com.esotericsoftware.kryo.serializers.FieldSerializer: void setIgnoreSyntheticFields(boolean)
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Values values2
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.IntArray quicksortStack
com.esotericsoftware.kryo.io.UnsafeInput: float readFloat()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void matchYSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.graphics.OrthographicCamera: OrthographicCamera(float,float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float,com.badlogic.gdx.math.Interpolation)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Files getFiles()
com.badlogic.gdx.utils.Json: void writeObjectStart(java.lang.String)
com.esotericsoftware.jsonbeans.JsonValue: java.util.Iterator iterator()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer,int)
com.badlogic.gdx.utils.Predicate$PredicateIterator: java.util.Iterator iterator
com.badlogic.gdx.utils.XmlReader$Element: int getIntAttribute(java.lang.String)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: void ensureCapacity(int)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: boolean hasNext
com.badlogic.gdx.scenes.scene2d.ui.TextField: float keyRepeatTime
com.badlogic.gdx.graphics.Color: int alpha(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFGE
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element parse(char[],int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy: PixmapPacker$SkylineStrategy()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void collapseAll()
com.badlogic.gdx.backends.android.AndroidApplication: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.io.KryoDataInput: double readDouble()
com.badlogic.gdx.graphics.g2d.Sprite: float getHeight()
com.badlogic.gdx.graphics.glutils.FloatTextureData: java.nio.FloatBuffer buffer
com.badlogic.gdx.utils.OrderedMap: void clear(int)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser: GLSurfaceViewAPI18$BaseConfigChooser(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,int[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: void a(int,int)
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.graphics.g3d.Material material
com.badlogic.gdx.maps.objects.PolylineMapObject: PolylineMapObject(float[])
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
com.badlogic.gdx.graphics.GL30: void glClearColor(float,float,float,float)
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.compression.lz.BinTree: BinTree()
com.badlogic.gdx.utils.compression.lz.InWindow: void ReleaseStream()
com.badlogic.gdx.utils.OrderedSet: com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator2
com.badlogic.gdx.graphics.GL20: int GL_NEVER
com.badlogic.gdx.input.RemoteInput: com.badlogic.gdx.input.RemoteInput$RemoteInputListener listener
com.esotericsoftware.kryo.Kryo: org.objenesis.instantiator.ObjectInstantiator newInstantiator(java.lang.Class)
com.badlogic.gdx.math.Polygon: float x
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: boolean isRelative()
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int xOffset
com.badlogic.gdx.math.Intersector$SplitTriangle: boolean getSide()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector v
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap bitmap
com.badlogic.gdx.graphics.g2d.BitmapFont: float getAscent()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float[] tmp
com.badlogic.gdx.graphics.TextureArray: int getHeight()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[])
com.badlogic.gdx.utils.PropertiesUtils: int UNICODE
androidx.appcompat.widget.Toolbar: void setContentInsetStartWithNavigation(int)
com.badlogic.gdx.scenes.scene2d.Stage: boolean debugInvisible
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: int currentCapacity
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: float[] getColor(float)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean pressed
androidx.fragment.app.Fragment: boolean mHidden
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$4: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 Y
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField: AsmCacheFields$AsmStringField()
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String ContentType
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: boolean a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.esotericsoftware.kryo.util.Util: boolean isAndroid
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable
com.badlogic.gdx.input.RemoteSender: boolean mouseMoved(int,int)
com.esotericsoftware.kryo.serializers.DeflateSerializer: boolean noHeaders
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowIn pow4In
com.badlogic.gdx.utils.NumberUtils: int floatToIntColor(float)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeBytes(java.lang.Object,long,long,long)
com.badlogic.gdx.utils.compression.lzma.Encoder: long nowPos64
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawSegment(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle: float wrapWidth
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: void update()
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_BINDING
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue prev
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: AndroidGraphicsLiveWallpaper(com.badlogic.gdx.backends.android.AndroidLiveWallpaper,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: RegionInfluencer$Animated(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LMUL
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float scaleY
androidx.appcompat.widget.ScrollingTabContainerView: void setTabSelected(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glStencilOp(int,int,int)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: boolean isComplete()
com.esotericsoftware.kryonet.Listener$LagListener: int lagMillisMax
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: ParallelAction()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
com.badlogic.gdx.graphics.GL30: void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_RGBA8_ETC2_EAC
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void bind()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform2iv(int,int,int[],int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1: ObjectSpace$1$1(com.esotericsoftware.kryonet.rmi.ObjectSpace$1,com.esotericsoftware.kryonet.Connection,java.lang.Object,com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod)
com.badlogic.gdx.scenes.scene2d.Actor: float getHeight()
com.badlogic.gdx.graphics.profiling.GLInterceptor: java.lang.String glGetString(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: ParticleEmitter$NumericValue()
com.badlogic.gdx.math.Intersector$MinimumTranslationVector: Intersector$MinimumTranslationVector()
com.badlogic.gdx.files.FileHandle: void mkdirs()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer
com.badlogic.gdx.assets.AssetLoadingTask: AssetLoadingTask(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.assets.AssetDescriptor,com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.utils.async.AsyncExecutor)
com.badlogic.gdx.math.Interpolation$PowIn: Interpolation$PowIn(int)
com.badlogic.gdx.utils.Json: boolean enumNames
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder reverse()
androidx.appcompat.widget.AppCompatRadioButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.google.android.material.chip.Chip: void setCloseIconVisible(boolean)
com.badlogic.gdx.graphics.Pixmap: void fillCircle(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Skin$3: com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed zero
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.badlogic.gdx.scenes.scene2d.Action: java.lang.String toString()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2[])
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,int,float)
com.badlogic.gdx.utils.ObjectMap: void removeStashIndex(int)
com.badlogic.gdx.utils.ArrayMap$Values: java.lang.Object next()
com.badlogic.gdx.scenes.scene2d.InputEvent: void setButton(int)
com.badlogic.gdx.scenes.scene2d.Stage: Stage(com.badlogic.gdx.utils.viewport.Viewport)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: ParticleShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider: com.badlogic.gdx.graphics.Texture load(java.lang.String)
com.badlogic.gdx.input.RemoteInput: boolean isTouched(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,com.esotericsoftware.kryo.KryoSerializable)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void setTopHeight(float)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int T
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter: SkinLoader$SkinParameter(java.lang.String)
com.badlogic.gdx.graphics.GL20: void glTexParameteri(int,int,int)
com.esotericsoftware.kryo.Kryo: int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)
com.badlogic.gdx.graphics.glutils.GLVersion: java.lang.String getDebugVersionString()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteVertexArrays(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: boolean longPress(float,float)
com.badlogic.gdx.graphics.g3d.Attributes: void remove(long)
com.badlogic.gdx.math.Rectangle: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.scenes.scene2d.Actor getActor()
androidx.fragment.app.Fragment: int getTargetRequestCode()
com.badlogic.gdx.graphics.Texture: com.badlogic.gdx.graphics.TextureData getTextureData()
com.badlogic.gdx.maps.objects.EllipseMapObject: EllipseMapObject()
com.badlogic.gdx.utils.Array: void sort(java.util.Comparator)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(java.lang.Object)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_FORCE_AUTOHINT
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(long,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glClearColor(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Application$ApplicationType getType()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int,float,float)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Files getFiles()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int,float,float,boolean)
com.badlogic.gdx.graphics.GL30: boolean glUnmapBuffer(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: java.lang.String meshId
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Pragma
com.badlogic.gdx.utils.ComparableTimSort: int[] runLen
com.google.android.gms.cloudmessaging.CloudMessage: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.glutils.FloatTextureData: int getHeight()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper access$600(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.badlogic.gdx.graphics.g3d.model.MeshPart: int offset
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: GLOnlyTextureData(int,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void free(long)
androidx.core.widget.NestedScrollView: int getScrollRange()
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.utils.RenderableSorter getRenderableSorter()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setRotationX(float)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: int activePointer
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDESignature
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mShouldReleaseEglContext
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.math.Rectangle secondWidgetBounds
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2: void fling(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: int getLeft(long)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillRect(int,int,int,int,int)
com.badlogic.gdx.utils.IntIntMap: int hash3(int)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation: ModelNodeAnimation()
com.badlogic.gdx.utils.reflect.Field: boolean isVolatile()
com.esotericsoftware.kryo.io.Input: int readByteUnsigned()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int)
com.badlogic.gdx.graphics.GL30: void glUniform3f(int,float,float,float)
com.badlogic.gdx.math.Bezier: float approximate(java.lang.Object)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver: AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver(com.badlogic.gdx.assets.AssetManager,java.lang.String)
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation: ModelAnimation()
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory: FieldSerializerUnsafeUtil$Factory()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.GL30: int GL_UNPACK_SKIP_ROWS
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform1i(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getColumnPrefWidth(int)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void jniGetLocalAnchorB(long,float[])
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean fadeScrollBars
com.badlogic.gdx.utils.compression.lzma.Encoder: int Backward(int)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: java.io.File mFile
com.esotericsoftware.kryo.Kryo: java.lang.Thread thread
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.DecorToolbar getWrapper()
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint[] points
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight set(com.badlogic.gdx.graphics.g3d.environment.PointLight)
com.badlogic.gdx.graphics.OrthographicCamera: void rotate(float)
com.badlogic.gdx.math.Circle: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.environment.SpotLight: float exponent
androidx.appcompat.widget.ActionBarOverlayLayout: void setLogo(int)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPadRight()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_specularColor
com.esotericsoftware.kryo.io.ByteBufferOutput: void close()
com.badlogic.gdx.utils.OrderedMap: void clear()
com.HyperSphere.AndroidLauncher: AndroidLauncher()
com.badlogic.gdx.graphics.Color: Color(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: int getNumIndices()
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.ApplicationLogger getApplicationLogger()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.model.Node node(java.lang.String,com.badlogic.gdx.graphics.g3d.Model)
com.badlogic.gdx.graphics.g2d.Sprite: void setPosition(float,float)
com.badlogic.gdx.graphics.g2d.GlyphLayout: GlyphLayout()
com.esotericsoftware.kryo.serializers.FieldSerializer: java.util.List buildValidFields(boolean,java.util.List,com.esotericsoftware.kryo.util.ObjectMap,com.esotericsoftware.kryo.util.IntArray)
com.esotericsoftware.kryo.io.Input: Input()
com.badlogic.gdx.Application: void exit()
com.esotericsoftware.kryo.util.FastestStreamFactory: FastestStreamFactory()
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: int[] tags
com.badlogic.gdx.utils.OrderedSet: OrderedSet(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int pointLightsIntensityOffset
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void triangle(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getReferenceAngle()
com.badlogic.gdx.physics.box2d.World: void destroyJoint(com.badlogic.gdx.physics.box2d.Joint)
com.badlogic.gdx.utils.TimSort: void mergeLo(int,int,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting AutoMedium
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer
com.esotericsoftware.kryonet.JsonSerialization: com.esotericsoftware.kryo.io.ByteBufferInputStream byteBufferInputStream
com.google.firebase.installations.FirebaseInstallationsRegistrar: com.google.firebase.installations.FirebaseInstallationsApi lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void line(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.utils.ObjectMap$Entries: void remove()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: void clear()
com.badlogic.gdx.scenes.scene2d.actions.AddAction: void reset()
com.badlogic.gdx.utils.LongMap$Keys: com.badlogic.gdx.utils.LongArray toArray()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: boolean valid
com.badlogic.gdx.scenes.scene2d.ui.Table: float tablePrefWidth
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setScale(float,float)
com.badlogic.gdx.physics.box2d.ChainShape: void jniCreateLoop(long,float[],int,int)
androidx.fragment.app.Fragment: int mTargetRequestCode
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider: DefaultShaderProvider(com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config)
com.badlogic.gdx.backends.android.ZipResourceFile: int kLFHNameLen
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: void setSize(float,float)
com.badlogic.gdx.maps.Map: com.badlogic.gdx.maps.MapProperties properties
com.badlogic.gdx.graphics.g3d.model.data.ModelData: com.badlogic.gdx.utils.Array meshes
com.badlogic.gdx.scenes.scene2d.ui.Tree: float ySpacing
com.badlogic.gdx.assets.AssetManager: AssetManager()
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: RemoveListenerAction()
com.badlogic.gdx.graphics.glutils.VertexArray: int getNumVertices()
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.MapProperties properties
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.utils.XmlReader$Element root
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int width
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_viewWorldTrans
com.badlogic.gdx.graphics.g3d.Shader: int compareTo(com.badlogic.gdx.graphics.g3d.Shader)
com.badlogic.gdx.InputProcessor: boolean touchDragged(int,int,int)
com.badlogic.gdx.backends.android.AndroidGL30: void glVertexAttribI4ui(int,int,int,int,int)
com.badlogic.gdx.utils.ObjectMap$Keys
com.badlogic.gdx.audio.AudioDevice: boolean isMono()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: void computeSize()
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float[] Render
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color GRAY
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting AutoSlight
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String[] c
com.badlogic.gdx.graphics.g2d.ParticleEffect: void setFlip(boolean,boolean)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getMax(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.Event: void handle()
com.badlogic.gdx.scenes.scene2d.Group: void clear()
com.badlogic.gdx.graphics.g3d.ModelCache: void add(java.lang.Iterable)
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
com.badlogic.gdx.utils.BufferUtils: long find(float[],int,int,float[],int,int)
com.badlogic.gdx.backends.android.AndroidApplicationBase
com.badlogic.gdx.ApplicationLogger: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.math.Vector2: float angle()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float resetTime
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.InputEventQueue: boolean touchUp(int,int,int,int)
com.badlogic.gdx.graphics.g3d.Shader
com.badlogic.gdx.input.RemoteSender: int TOUCH_DRAGGED
com.badlogic.gdx.graphics.g2d.Batch: int V4
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createRect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer
com.esotericsoftware.kryonet.TcpConnection: int timeoutMillis
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: ActorGestureListener$1(com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener)
com.badlogic.gdx.backends.android.AndroidVisibilityListener: AndroidVisibilityListener()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetBooleanv(int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.Array executedRunnables
com.badlogic.gdx.graphics.GL30: void glDisableVertexAttribArray(int)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean wrap
com.google.android.material.transformation.FabTransformationBehavior
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 cpy()
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle[] list()
com.esotericsoftware.kryo.serializers.ObjectCachedFieldFactory
com.badlogic.gdx.physics.box2d.joints.GearJoint: void jniSetRatio(long,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String getClassName()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean setCharSize(long,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setRightWidth(float)
com.badlogic.gdx.physics.box2d.Contact: void jniSetRestitution(long,float)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: int getY(int)
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_ATTACHMENT
com.google.android.material.floatingactionbutton.FloatingActionButton: void setRippleColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel
com.badlogic.gdx.scenes.scene2d.Event: com.badlogic.gdx.scenes.scene2d.Actor getListenerActor()
com.badlogic.gdx.utils.Bits: void checkCapacity(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory mEGLContextFactory
com.badlogic.gdx.graphics.GL30: int GL_MIN_PROGRAM_TEXEL_OFFSET
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeBoolean(boolean)
com.HyperSphere.Connection.PacketObjects.Misc.PathProgress
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: boolean jniIsMotorEnabled(long)
com.badlogic.gdx.assets.AssetManager: boolean isFinished()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: CpuSpriteBatch(int,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.jsonbeans.Json: void writeField(java.lang.Object,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: java.lang.Object load(java.lang.String)
com.esotericsoftware.jsonbeans.JsonReader: void addChild(java.lang.String,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.audio.AudioDevice: void dispose()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color PURPLE
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: int vertexSize
com.badlogic.gdx.math.Vector2: boolean isCollinear(com.badlogic.gdx.math.Vector,float)
com.esotericsoftware.reflectasm.MethodAccess
com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature valueOf(java.lang.String)
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
com.badlogic.gdx.graphics.g3d.ModelInstance: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: ParticleEmitter(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.scenes.scene2d.Actor: float getX()
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Values values2
com.badlogic.gdx.graphics.glutils.VertexArray: VertexArray(int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.utils.SnapshotArray: void modified()
com.badlogic.gdx.scenes.scene2d.Action: void setPool(com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.Array runnables
com.badlogic.gdx.graphics.GL30: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: void update()
com.badlogic.gdx.utils.Timer$TimerThread
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters: boolean convertObjectToTileSpace
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getWidth(long)
com.badlogic.gdx.utils.ComparableTimSort: int MIN_GALLOP
com.badlogic.gdx.backends.android.AndroidInput$3$3$1: AndroidInput$3$3$1(com.badlogic.gdx.backends.android.AndroidInput$3$3)
com.esotericsoftware.kryo.util.ObjectMap: java.util.Random random
com.badlogic.gdx.scenes.scene2d.ui.Table$1: com.badlogic.gdx.scenes.scene2d.ui.Cell newObject()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteObjectSerializer
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 transpose()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getPercent()
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
com.badlogic.gdx.utils.PerformanceCounters: void tick(float)
com.badlogic.gdx.utils.Array$ArrayIterable: com.badlogic.gdx.utils.Array$ArrayIterator iterator2
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsBuffer(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type a(char[],int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction: boolean act(float)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode
com.badlogic.gdx.maps.tiled.TiledMapTile: com.badlogic.gdx.maps.MapProperties getProperties()
com.badlogic.gdx.graphics.GL30: int GL_RED_INTEGER
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: void save(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters: ObjLoader$ObjLoaderParameters()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int o
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer: DefaultSerializers$FloatSerializer()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.utils.FloatArray tmpVertices
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter
com.badlogic.gdx.graphics.g2d.SpriteBatch: float colorPacked
com.badlogic.gdx.utils.CharArray: void insert(int,char)
com.badlogic.gdx.scenes.scene2d.utils.Disableable
com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[])
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float speed
com.badlogic.gdx.graphics.g3d.decals.Decal: int Z2
com.fasterxml.jackson.annotation.OptBoolean: com.fasterxml.jackson.annotation.OptBoolean valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: int getWidth()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: TextField$TextFieldClickListener(com.badlogic.gdx.scenes.scene2d.ui.TextField)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.Attributes tmpAttributes
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
com.badlogic.gdx.math.MathUtils: int ceilPositive(float)
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer
com.badlogic.gdx.graphics.profiling.GL20Interceptor: GL20Interceptor(com.badlogic.gdx.graphics.profiling.GLProfiler,com.badlogic.gdx.graphics.GL20)
androidx.appcompat.widget.ActionBarContextView: int getContentHeight()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: boolean useMipMaps
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Graphics getGraphics()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)
com.badlogic.gdx.graphics.VertexAttribute: java.lang.String alias
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue phiValue
com.badlogic.gdx.math.BSpline: int nearest(com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)
com.badlogic.gdx.backends.android.AndroidGL20: void glDrawElements(int,int,int,int)
com.badlogic.gdx.utils.ObjectIntMap: void put(java.lang.Object,int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int index
com.badlogic.gdx.graphics.Texture: void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.math.EarClippingTriangulator: int CONCAVE
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: ParticleControllerInfluencer$Random(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 sub(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide PositiveX
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: void killParticles(int,int)
com.badlogic.gdx.graphics.glutils.FloatTextureData: boolean useMipMaps()
com.badlogic.gdx.scenes.scene2d.InputEvent: java.lang.String toString()
com.badlogic.gdx.graphics.GL20: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: boolean building
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: float v
com.google.android.material.textfield.TextInputLayout: int getBoxStrokeWidthFocused()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void flush(int[])
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float overscrollDistance
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform reflectionColor
com.badlogic.gdx.backends.android.AndroidZipFileHandle: java.io.InputStream read()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: int viewWidth
com.esotericsoftware.kryonet.rmi.ObjectSpace$3: ObjectSpace$3(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float getFrequency()
com.badlogic.gdx.backends.android.AndroidGL30: void glEndTransformFeedback()
com.badlogic.gdx.utils.LongArray: void shuffle()
com.badlogic.gdx.graphics.GL30: int GL_MAJOR_VERSION
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] expandHeight
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: void restart()
com.badlogic.gdx.scenes.scene2d.ui.Label: Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void bind()
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction
com.badlogic.gdx.scenes.scene2d.ui.Tree: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowTitle(java.lang.CharSequence)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: boolean isMotorEnabled()
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.util.IdentityMap$Entries: java.lang.Object next()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 rotate(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput$3$1: android.widget.EditText val$input
com.badlogic.gdx.Graphics$DisplayMode
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_shadowPCFOffset
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Entries entries()
com.badlogic.gdx.utils.CharArray: char[] ensureCapacity(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter D
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_WANSUNG
com.HyperSphere.Connection.PacketObjects.Entities.Monster: java.lang.Object clone()
com.badlogic.gdx.physics.box2d.Fixture: void setFriction(float)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: com.badlogic.gdx.graphics.Cubemap$CubemapSide getSide()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void update()
com.badlogic.gdx.utils.compression.lz.BinTree: void NormalizeLinks(int[],int,int)
com.badlogic.gdx.graphics.g2d.TextureRegion: int regionWidth
com.badlogic.gdx.graphics.g3d.Attribute: int hashCode()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setVertices(float[])
androidx.recyclerview.widget.LinearLayoutManager: LinearLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
androidx.appcompat.widget.AppCompatTextView
com.badlogic.gdx.Graphics: com.badlogic.gdx.graphics.GL30 getGL30()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: float[] getVertices()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 trn(float,float,float)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void color(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.ObjectIntMap: int getStash(java.lang.Object,int)
com.badlogic.gdx.utils.BufferUtils: void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4,int)
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.maps.tiled.TiledMap loadMap(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle style
com.google.android.material.chip.ChipGroup: void setFlexWrap(int)
com.badlogic.gdx.graphics.g2d.SpriteCache: int endCache()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: com.esotericsoftware.kryo.serializers.JavaSerializer getJavaSerializerIfRequired(java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool pool
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2f(int,float,float)
com.esotericsoftware.kryo.util.IdentityMap: void shrink(int)
com.badlogic.gdx.graphics.Texture: void reload()
com.badlogic.gdx.utils.IdentityMap: java.lang.Object getStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.Net$HttpRequest: java.lang.String getUrl()
com.badlogic.gdx.math.RandomXS128: int nextInt(int)
com.badlogic.gdx.utils.PauseableThread: PauseableThread(java.lang.Runnable)
com.badlogic.gdx.scenes.scene2d.Actor: float getTop()
com.esotericsoftware.kryo.Kryo: int NO_REF
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void flush(int[])
com.esotericsoftware.kryonet.FrameworkMessage$KeepAlive: FrameworkMessage$KeepAlive()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: boolean isLittleEndian
com.badlogic.gdx.physics.box2d.utils.Box2DBuild: void main(java.lang.String[])
com.badlogic.gdx.utils.ObjectIntMap: float loadFactor
com.badlogic.gdx.utils.Json$ReadOnlySerializer
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: ObjectSpace$InvokeMethod()
com.badlogic.gdx.utils.SnapshotArray: void swap(int,int)
com.badlogic.gdx.utils.PropertiesUtils: int SLASH
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.graphics.g2d.NinePatch: int MIDDLE_CENTER
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGenFramebuffer()
com.badlogic.gdx.utils.IntFloatMap: int capacity
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation[] values()
com.google.android.material.textfield.TextInputLayout: void setEndIconMode(int)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter array()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleX(float)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$ExpOut exp10Out
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void updateAnimationBaseTime()
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.JsonReader: byte[] _json_actions
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float,float,float)
com.badlogic.gdx.utils.ByteArray: void mul(int,byte)
com.badlogic.gdx.scenes.scene2d.ui.Skin$2: com.badlogic.gdx.scenes.scene2d.ui.Skin read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
com.google.android.material.chip.Chip: void setChipMinHeight(float)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: DefaultTextureBinder(int,int,int)
com.badlogic.gdx.utils.Timer: void delay(long)
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float overscrollSpeedMin
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: com.google.android.material.animation.MotionSpec getShowMotionSpec()
com.badlogic.gdx.graphics.GL20: void glDeleteTexture(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell()
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean isWordCharacter(char)
com.badlogic.gdx.scenes.scene2d.ui.Value$3
com.badlogic.gdx.utils.ObjectIntMap$Entry: java.lang.Object key
com.badlogic.gdx.utils.BufferUtils: void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup wrap(boolean)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.math.Vector2 anchorB
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy: com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node insert(com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.math.collision.Ray: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog text(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: boolean K
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: com.badlogic.gdx.graphics.g3d.particles.ParticleSystem get()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter diffuseUVTransform
com.esotericsoftware.kryonet.FrameworkMessage$RegisterTCP
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField
androidx.appcompat.widget.Toolbar: int getContentInsetStart()
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.utils.Array nodes
com.badlogic.gdx.math.Affine2
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: void update()
com.google.android.material.chip.Chip: void setMaxLines(int)
com.esotericsoftware.kryo.io.Output: int writeDouble(double,double,boolean)
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(boolean)
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: boolean pushScissors(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VOffset
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings: boolean wrapNumericArrays
com.badlogic.gdx.utils.Array: void sort()
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug actor
com.badlogic.gdx.utils.Bits: long[] bits
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getPadTop()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix3)
com.google.android.material.bottomappbar.BottomAppBar: void setFabAnimationMode(int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void clear(long,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(int)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$1: float reportRayFixture(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType DynamicBody
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.graphics.g3d.Material getMaterial()
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.IntArray computeIndices(float[],boolean,boolean)
com.badlogic.gdx.utils.SerializationException: boolean causedBy(java.lang.Throwable,java.lang.Class)
com.esotericsoftware.kryonet.Client: void broadcast(int,java.net.DatagramSocket)
com.badlogic.gdx.graphics.g3d.Environment
com.badlogic.gdx.graphics.g3d.ModelCache: void add(com.badlogic.gdx.graphics.g3d.Renderable)
com.google.android.material.transformation.ExpandableBehavior: ExpandableBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void act(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute j
com.badlogic.gdx.graphics.glutils.FileTextureData: boolean disposePixmap()
com.badlogic.gdx.assets.loaders.SoundLoader
com.badlogic.gdx.utils.IdentityMap: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.InputListener: boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter
com.badlogic.gdx.utils.Array: Array(boolean,int,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: ColorInfluencer$Single()
com.esotericsoftware.jsonbeans.JsonValue: long getLong(java.lang.String,long)
com.badlogic.gdx.graphics.g2d.Batch: com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.Array elements
com.badlogic.gdx.math.Bresenham2: com.badlogic.gdx.utils.Array line(int,int,int,int)
com.badlogic.gdx.utils.Predicate
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getStrokeColor()
com.badlogic.gdx.utils.XmlReader: byte[] _xml_trans_actions
com.badlogic.gdx.scenes.scene2d.ui.List: void setTypeToSelect(boolean)
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: int pointer
com.badlogic.gdx.graphics.g3d.environment.ShadowMap: com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor getDepthMap()
com.badlogic.gdx.math.Quaternion: void getSwingTwist(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: int api
com.badlogic.gdx.graphics.g2d.Animation: com.badlogic.gdx.graphics.g2d.Animation$PlayMode getPlayMode()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: int getNumInstances()
com.badlogic.gdx.utils.ObjectMap: int hash3(int)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromAxisRad(float,float,float,float)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTrnScl(float,float,float,float)
com.esotericsoftware.jsonbeans.Json: void writeValue(java.lang.String,java.lang.Object)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1: com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy this$0
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.Array uniforms
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: ParallelArray$ObjectChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,int,int,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: java.lang.Object data
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setVertical(boolean)
com.badlogic.gdx.math.collision.BoundingBox: BoundingBox()
com.badlogic.gdx.graphics.g2d.BitmapFont: boolean usesIntegerPositions()
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue$ValueType type()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int getLoadingFlags(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String ContentLength
com.badlogic.gdx.utils.compression.lzma.Encoder: int _additionalOffset
androidx.appcompat.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setIndentSpacing(float)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1: com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 this$1
com.badlogic.gdx.input.RemoteInput: boolean[] keys
com.badlogic.gdx.physics.box2d.WorldManifold: com.badlogic.gdx.math.Vector2 getNormal()
com.badlogic.gdx.assets.AssetLoadingTask: java.lang.Void call()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean reverse
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page
com.badlogic.gdx.scenes.scene2d.ui.Window$3: Window$3(com.badlogic.gdx.scenes.scene2d.ui.Window)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.utils.async.AsyncExecutor: java.util.concurrent.ExecutorService executor
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color DARK_GRAY
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: boolean dirty
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int,int)
com.badlogic.gdx.net.HttpStatus: int SC_PROCESSING
com.google.android.material.chip.ChipGroup: void setChipSpacingResource(int)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider: com.badlogic.gdx.graphics.Texture load(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: RangedNumericValue()
com.badlogic.gdx.math.Intersector: boolean overlapConvexPolygons(float[],float[],com.badlogic.gdx.math.Intersector$MinimumTranslationVector)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUseProgram(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.math.ConvexHull: int quicksortPartitionWithIndices(float[],int,int,boolean,short[])
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int pointLightsLoc
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 rotate(float)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion mul(float)
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_SRGB8_ETC2
com.badlogic.gdx.math.Vector3: boolean isCollinear(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 scl(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.io.InputChunked: void readChunkSize()
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Vector2 tmp
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell width(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.jsonbeans.JsonValue: void set(double)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: float offsetY
androidx.fragment.app.Fragment: int hashCode()
com.badlogic.gdx.utils.StringBuilder: int offsetByCodePoints(int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face face
com.badlogic.gdx.graphics.GL30: void glVertexAttrib2f(int,float,float)
com.badlogic.gdx.graphics.GL20: int GL_ARRAY_BUFFER
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String ContentMD5
com.badlogic.gdx.backends.android.AndroidFileHandle: android.content.res.AssetManager assets
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$1
com.badlogic.gdx.InputEventQueue: com.badlogic.gdx.InputProcessor processor
com.badlogic.gdx.utils.StringBuilder: void deleteCharAt0(int)
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_UNSUPPORTED
com.badlogic.gdx.utils.viewport.ExtendViewport: float getMinWorldHeight()
com.badlogic.gdx.utils.BufferUtils: void transformV2M3Jni(java.nio.Buffer,int,int,float[],int)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart
com.badlogic.gdx.math.Frustum
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getCloseIcon()
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: WidgetGroup(com.badlogic.gdx.scenes.scene2d.Actor[])
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isAndroid
com.esotericsoftware.kryonet.Connection: void setConnected(boolean)
com.badlogic.gdx.utils.IntFloatMap$Values: com.badlogic.gdx.utils.FloatArray toArray()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int type
com.badlogic.gdx.utils.reflect.Field: boolean isFinal()
com.esotericsoftware.kryonet.rmi.ObjectSpace$CachedMethod: com.esotericsoftware.kryo.Serializer[] serializers
com.badlogic.gdx.graphics.glutils.IndexBufferObject: boolean isDirty
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent: ChangeListener$ChangeEvent()
com.badlogic.gdx.utils.XmlReader: int xml_error
com.badlogic.gdx.utils.LongArray: void addAll(long[])
com.badlogic.gdx.math.Quaternion: float getRoll()
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool: void dispose()
com.badlogic.gdx.maps.objects.EllipseMapObject: com.badlogic.gdx.math.Ellipse getEllipse()
com.badlogic.gdx.utils.Queue$QueueIterator: Queue$QueueIterator(com.badlogic.gdx.utils.Queue)
com.badlogic.gdx.graphics.Texture: int getWidth()
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int DecodeDirectBits(int)
com.badlogic.gdx.utils.IntArray: void add(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter[],int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector)
com.badlogic.gdx.maps.tiled.TideMapLoader: void loadTileSheet(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void postRunnable(java.lang.Runnable)
com.badlogic.gdx.graphics.GL30: int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setDisabled(boolean)
com.badlogic.gdx.utils.BooleanArray: BooleanArray(com.badlogic.gdx.utils.BooleanArray)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup space(float)
com.esotericsoftware.kryo.Registration
com.badlogic.gdx.scenes.scene2d.utils.Selection: java.lang.String toString()
androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior: CoordinatorLayout$Behavior()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: boolean reverse
com.badlogic.gdx.Gdx: com.badlogic.gdx.Graphics graphics
com.badlogic.gdx.backends.android.AndroidGL20: void glBindAttribLocation(int,int,java.lang.String)
com.badlogic.gdx.Input$Keys: int NUM_8
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: int getNumInstances()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int visibleTextStart
com.badlogic.gdx.graphics.GL30: int GL_BUFFER_ACCESS_FLAGS
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glFramebufferRenderbuffer(int,int,int,int)
androidx.appcompat.widget.AppCompatButton: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature valueOf(java.lang.String)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.Vector3[])
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: BitmapFontLoader$BitmapFontParameter()
com.esotericsoftware.kryo.io.UnsafeOutput: int writeVarInt(int,boolean)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE8
com.badlogic.gdx.graphics.g3d.Attribute: boolean equals(java.lang.Object)
com.badlogic.gdx.utils.XmlReader$Element: float getFloatAttribute(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Button$2: void keyboardFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.physics.box2d.Joint: boolean jniGetCollideConnected(long)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp
com.badlogic.gdx.net.HttpStatus: int SC_UNPROCESSABLE_ENTITY
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float xScale
com.badlogic.gdx.graphics.Color: int rgb565(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.physics.box2d.Shape: int jniGetChildCount(long)
com.badlogic.gdx.net.NetJavaImpl: void putIntoConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener,java.net.HttpURLConnection)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)
com.badlogic.gdx.graphics.GL30: void glVertexAttrib4f(int,float,float,float,float)
com.badlogic.gdx.math.Interpolation$SwingIn
com.badlogic.gdx.utils.DelayedRemovalArray: void clear()
com.badlogic.gdx.graphics.Texture: void draw(com.badlogic.gdx.graphics.Pixmap,int,int)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction
com.esotericsoftware.kryo.Serializer: boolean acceptsNull
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getMaxMotorTorque()
com.badlogic.gdx.graphics.GL30: void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Entries entries2
com.badlogic.gdx.utils.ObjectMap$Entry: ObjectMap$Entry()
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper
com.esotericsoftware.kryonet.Connection: java.lang.String name
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glTexParameteri(int,int,int)
com.esotericsoftware.kryo.io.ByteBufferInput: boolean canReadInt()
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.ApplicationListener listener
com.badlogic.gdx.utils.compression.rangecoder.Decoder: void InitBitModels(short[])
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int rotateLeftKey
com.badlogic.gdx.Net$HttpRequest: java.util.Map getHeaders()
com.badlogic.gdx.utils.IdentityMap$MapIterator: void remove()
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 add(int,int)
com.badlogic.gdx.physics.box2d.EdgeShape: EdgeShape(long)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.math.Bresenham2$1
com.google.android.material.button.MaterialButton: int getIconPadding()
com.badlogic.gdx.scenes.scene2d.actions.EventAction: boolean isActive()
com.badlogic.gdx.scenes.scene2d.ui.Cell: void merge(com.badlogic.gdx.scenes.scene2d.ui.Cell)
com.badlogic.gdx.assets.RefCountedContainer: java.lang.Object getObject(java.lang.Class)
com.badlogic.gdx.graphics.g2d.SpriteCache: float[] tempVertices
com.google.android.material.internal.ForegroundLinearLayout: int getForegroundGravity()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean getReverse()
com.esotericsoftware.kryo.util.ObjectMap: int hashShift
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetFrequency(long,float)
com.badlogic.gdx.graphics.GL30: void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.badlogic.gdx.utils.ArrayMap$Values: ArrayMap$Values(com.badlogic.gdx.utils.ArrayMap)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: java.util.Date copy(com.esotericsoftware.kryo.Kryo,java.util.Date)
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle: Slider$SliderStyle()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: com.badlogic.gdx.graphics.Cubemap$CubemapSide[] cubemapSides
com.badlogic.gdx.math.BSpline: float approximate(com.badlogic.gdx.math.Vector,int,int)
com.badlogic.gdx.graphics.g3d.model.data.ModelNode
com.badlogic.gdx.graphics.GL30: void glClearStencil(int)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: float delay
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_PROGRAM_POINT_SIZE
com.badlogic.gdx.graphics.g3d.model.Animation: float duration
com.badlogic.gdx.utils.ArrayMap$Entries: java.lang.Object next()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType[] values()
com.badlogic.gdx.backends.android.AndroidClipboard: android.content.ClipboardManager honeycombClipboard
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: List$ListStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.math.Interpolation$Bounce: Interpolation$Bounce(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean loadChar(long,int,int)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getPasswordVisibilityToggleContentDescription()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.Color tempC1
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config: DepthShader$Config()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.Group debugAll()
com.badlogic.gdx.backends.android.AndroidFileHandle: AndroidFileHandle(android.content.res.AssetManager,java.lang.String,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.utils.Queue$QueueIterator: boolean valid
com.badlogic.gdx.graphics.g2d.freetype.FreeType: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library initFreeType()
com.badlogic.gdx.physics.box2d.joints.GearJoint: com.badlogic.gdx.physics.box2d.Joint getJoint2()
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: void reset()
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: float getMinWidth()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryonet.ConnectionValues: java.nio.channels.DatagramChannel getUDPChannel(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.utils.CharArray: char peek()
com.esotericsoftware.kryonet.UdpConnection: void connect(java.nio.channels.Selector,java.net.InetSocketAddress)
com.HyperSphere.Connection.PacketObjects.Map.Tile: void reload()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: DefaultShader$Setters()
com.badlogic.gdx.utils.IntIntMap$Entry: IntIntMap$Entry()
com.badlogic.gdx.math.Affine2: float m11
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean cached
com.badlogic.gdx.graphics.Color: float WHITE_FLOAT_BITS
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.maps.MapObjects objects
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void enableLimit(boolean)
com.badlogic.gdx.math.collision.Segment: float len2()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1: void onSystemUiVisibilityChange(int)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void addAnimatedTile(com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int mGreenSize
com.badlogic.gdx.Net$HttpRequest: Net$HttpRequest(java.lang.String)
com.badlogic.gdx.utils.I18NBundle: I18NBundle()
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.graphics.g2d.BitmapFontCache getBitmapFontCache()
com.badlogic.gdx.utils.Timer: Timer()
com.badlogic.gdx.physics.box2d.World: int getJointCount()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.ui.Widget: float getPrefHeight()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMinor()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void hideList()
com.badlogic.gdx.input.RemoteInput: int MAX_TOUCHES
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters: AtlasTmxMapLoader$AtlasTiledMapLoaderParameters()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glSamplerParameterf(int,int,float)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,byte[])
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int dirLightsLoc
com.badlogic.gdx.scenes.scene2d.Stage: void drawDebug()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Reflection
com.badlogic.gdx.utils.IntSet$IntSetIterator: boolean valid
com.badlogic.gdx.physics.box2d.Joint: int jniGetType(long)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accelerationChannel
com.badlogic.gdx.scenes.scene2d.Actor: boolean hasParent()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.ArrayMap: void reverse()
com.badlogic.gdx.utils.BinaryHeap: void down(int)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float getDampingRatio()
com.badlogic.gdx.utils.IdentityMap: int hash3(int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.Color getTransparentColor()
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeColor(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random
androidx.appcompat.widget.Toolbar: void setPopupTheme(int)
com.badlogic.gdx.assets.AssetManager: void setErrorListener(com.badlogic.gdx.assets.AssetErrorListener)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: Frame()
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[] getFields()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DREM
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BUFFER_SIZE
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform4fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: boolean DictionarySizeIsDefined
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
androidx.appcompat.widget.AppCompatSpinner: void setDropDownWidth(int)
com.badlogic.gdx.math.MathUtils: int round(float)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: void setY(float)
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean clip
com.badlogic.gdx.utils.ObjectFloatMap$Entry: float value
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: int vaoHandle
androidx.loader.app.LoaderManagerImpl$LoaderViewModel
com.HyperSphere.Connection.PacketObjects.Misc.Throwable
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(float)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector2 transformationOffset
com.badlogic.gdx.graphics.g3d.model.MeshPart: float radius
com.esotericsoftware.kryo.util.ObjectMap$Entry: java.lang.Object key
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField
com.esotericsoftware.kryonet.Listener: void idle(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.utils.LongArray: LongArray(int)
com.badlogic.gdx.files.FileHandle: int estimateLength()
com.badlogic.gdx.utils.JsonReader: byte[] init__json_trans_targs_0()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: VertexBufferObjectWithVAO(boolean,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float scaleX
com.badlogic.gdx.assets.loaders.MusicLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter)
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer: boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: GLSurfaceViewAPI18$GLThreadManager()
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor AngularVelocity2D
com.badlogic.gdx.utils.LongMap
androidx.fragment.app.Fragment: java.lang.Object requireHost()
com.badlogic.gdx.math.GridPoint2: float dst2(com.badlogic.gdx.math.GridPoint2)
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: int numBones
com.badlogic.gdx.graphics.g2d.TextureRegion: float v2
com.badlogic.gdx.backends.android.AndroidInput: void setCatchMenuKey(boolean)
com.badlogic.gdx.utils.Logger: int DEBUG
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer: DefaultSerializers$LongSerializer()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.BitmapFont: void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float)
com.badlogic.gdx.graphics.g2d.Batch: int getBlendSrcFuncAlpha()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void arrow(float,float,float,float,float,float,float,float,int)
com.badlogic.gdx.net.HttpStatus: int SC_METHOD_NOT_ALLOWED
com.badlogic.gdx.graphics.glutils.FileTextureData: void prepare()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setItems(java.lang.Object[])
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String text
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat PNG
com.badlogic.gdx.utils.reflect.Method: boolean isStatic()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_OFFSET
com.badlogic.gdx.graphics.Color: int rgba8888(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getOriginY()
androidx.transition.ChangeBounds$7: androidx.transition.ChangeBounds$ViewBounds mViewBounds
com.badlogic.gdx.utils.UBJsonWriter$JsonObject: void close()
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter
com.badlogic.gdx.utils.OrderedMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.Application: com.badlogic.gdx.Audio getAudio()
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter name(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table debug()
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue)
com.badlogic.gdx.graphics.GL30: void glDisable(int)
androidx.appcompat.widget.AppCompatRadioButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: float[] data
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_INT
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: void finish()
com.badlogic.gdx.physics.box2d.joints.MouseJointDef: MouseJointDef()
com.badlogic.gdx.utils.IntIntMap: int[] valueTable
com.badlogic.gdx.graphics.GL20: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.files.FileHandle: FileHandle(java.lang.String,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue thetaValue
androidx.fragment.app.Fragment: void performAttach()
com.badlogic.gdx.utils.CharArray: boolean equals(java.lang.Object)
com.google.android.material.chip.Chip: float getChipEndPadding()
com.badlogic.gdx.utils.async.AsyncExecutor$1: com.badlogic.gdx.utils.async.AsyncExecutor this$0
com.badlogic.gdx.utils.ObjectSet: ObjectSet(int,float)
com.google.android.material.appbar.AppBarLayout: androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior getBehavior()
com.badlogic.gdx.scenes.scene2d.ui.Label: Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_DEPTH_STENCIL_ATTACHMENT
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: ParticleEmitter$SpawnShape(java.lang.String,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glScissor(int,int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FCMPG
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue emissionValue
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: java.lang.Object object
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int numSamples
com.badlogic.gdx.scenes.scene2d.Actor: void act(float)
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode: AndroidGraphics$AndroidDisplayMode(com.badlogic.gdx.backends.android.AndroidGraphics,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getPrefHeight()
com.badlogic.gdx.graphics.g2d.Animation: float lastStateTime
com.badlogic.gdx.utils.Pools
com.google.android.material.chip.Chip: void setBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: java.lang.String materialName
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform3fv(int,int,float[],int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.utils.IntFloatMap: float get(int,float)
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: void updateRelative(float)
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean isPressed()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_shadowMapProjViewTrans
com.badlogic.gdx.utils.BooleanArray: void removeRange(int,int)
com.esotericsoftware.kryo.io.Input: java.lang.String readAscii()
androidx.recyclerview.widget.RecyclerView: java.lang.CharSequence getAccessibilityClassName()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: boolean transmitReturnValue
com.badlogic.gdx.graphics.GL20: void glGenerateMipmap(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getSpaceLeft()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_INTERFACE
com.badlogic.gdx.physics.box2d.CircleShape: CircleShape(long)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short,java.lang.Object,int[])
com.badlogic.gdx.maps.MapLayer: java.lang.String getName()
androidx.fragment.app.Fragment: float mPostponedAlpha
com.badlogic.gdx.graphics.g3d.model.Node: java.lang.String id
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: java.lang.String f
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: int getCollapsedSize()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.math.Vector3 getUp(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.IdentityMap$Entries: void remove()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void cylinder(float,float,float,int,float,float,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode single
com.badlogic.gdx.graphics.glutils.VertexBufferObject: int bufferHandle
com.badlogic.gdx.assets.loaders.PixmapLoader
com.badlogic.gdx.backends.android.AndroidPreferences: void edit()
com.esotericsoftware.kryo.io.Input: boolean canReadLong()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean isDrawBodies()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc current
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setAnimateDuration(float)
com.badlogic.gdx.backends.android.AndroidDaydream: void exit()
com.badlogic.gdx.maps.MapProperties: boolean containsKey(java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter reflectionTexture
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void renderObjects(com.badlogic.gdx.maps.MapLayer)
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: com.badlogic.gdx.utils.FloatArray xAdvances
com.esotericsoftware.reflectasm.MethodAccess: int getIndex(java.lang.String,java.lang.Class[])
com.badlogic.gdx.files.FileHandle: java.io.OutputStream write(boolean)
com.badlogic.gdx.math.Matrix3: int M02
com.badlogic.gdx.utils.viewport.Viewport: void setScreenSize(int,int)
com.badlogic.gdx.graphics.GL20: int GL_IMPLEMENTATION_COLOR_READ_FORMAT
com.badlogic.gdx.graphics.glutils.KTXTextureData: void consumeCustomData(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: int numSpotLights
androidx.appcompat.widget.LinearLayoutCompat: void setGravity(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: void save(java.io.Writer)
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDisable(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String fragmentShaderSource
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel)
com.badlogic.gdx.utils.DelayedRemovalArray: void sort(java.util.Comparator)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter
com.badlogic.gdx.assets.loaders.SkinLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(long)
com.esotericsoftware.kryo.ReferenceResolver
com.badlogic.gdx.backends.android.AndroidApplication: void setLogLevel(int)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color RED
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: void setCapture(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV4
com.badlogic.gdx.net.NetJavaSocketImpl: java.io.InputStream getInputStream()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: int a
com.badlogic.gdx.utils.compression.lzma.Base: int kNumPosModels
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidFiles files
com.esotericsoftware.minlog.Log: void trace(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenVertexArrays(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: PolygonSpriteBatch()
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] rowWeightedHeight
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendFuncSeparate(int,int,int,int)
androidx.appcompat.widget.ViewStubCompat: void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat$OnInflateListener)
androidx.appcompat.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)
com.badlogic.gdx.utils.FloatArray: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.Material
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2iv(int,int,int[],int)
com.badlogic.gdx.graphics.glutils.ShaderProgram
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Value$9: com.badlogic.gdx.scenes.scene2d.Actor val$actor
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: long Shininess
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: int b
com.badlogic.gdx.utils.ObjectMap: java.util.Iterator iterator()
com.badlogic.gdx.input.RemoteInput$RemoteInputListener: void onDisconnected()
com.badlogic.gdx.math.Plane
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getJointSpeed()
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter: void setCamera(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glStencilMask(int)
com.esotericsoftware.kryonet.KryoSerialization: com.esotericsoftware.kryo.Kryo getKryo()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useGL30
com.esotericsoftware.kryonet.UdpConnection: long lastCommunicationTime
com.badlogic.gdx.utils.IntIntMap: boolean isEmpty()
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy: RatioResolutionStrategy(float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glCullFace(int)
com.badlogic.gdx.utils.ObjectFloatMap: void putResize(java.lang.Object,float)
com.esotericsoftware.kryonet.rmi.ObjectSpace$1: com.esotericsoftware.kryonet.rmi.ObjectSpace this$0
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool pool
com.esotericsoftware.kryo.util.ObjectMap: int stashCapacity
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_ANNOTATION
com.google.android.material.bottomappbar.BottomAppBar: com.google.android.material.bottomappbar.BottomAppBar$Behavior getBehavior()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_SCALABLE
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager mFragmentManager
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2: void run()
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,int,float)
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object removeStash(java.lang.Object)
com.badlogic.gdx.utils.ObjectIntMap: int hash3(int)
com.badlogic.gdx.assets.AssetManager: java.lang.Object get(java.lang.String)
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.math.Vector2 getLocalNormal()
com.esotericsoftware.kryo.io.Output: void writeChars(char[])
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_trans_actions_0()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: boolean independent
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DUP
com.badlogic.gdx.backends.android.AndroidInput: boolean isCatchBackKey()
com.esotericsoftware.kryo.io.ByteBufferInput: java.io.InputStream getInputStream()
com.badlogic.gdx.utils.BufferUtils: void copy(float[],int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: boolean inAction
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.assets.loaders.FileHandleResolver resolver
com.google.android.material.chip.Chip: float getTextStartPadding()
com.badlogic.gdx.utils.BufferUtils: long find(float[],int,int,java.nio.Buffer,int,int,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDepthFunc(int)
androidx.appcompat.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)
com.badlogic.gdx.graphics.g2d.NinePatch: float getBottomHeight()
com.badlogic.gdx.utils.LongMap: java.lang.Object removeStash(long)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: boolean is(long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int I2C
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(byte[])
com.badlogic.gdx.scenes.scene2d.InputEvent: float stageX
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object get(java.lang.Object,java.lang.Object)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color JOINT_COLOR
com.badlogic.gdx.graphics.TextureArrayData
com.badlogic.gdx.utils.LongMap: int PRIME3
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setEGLContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.g2d.NinePatch,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.io.FastOutput: int writeInt(int,boolean)
com.badlogic.gdx.utils.AtomicQueue: java.lang.Object poll()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter: java.lang.String vertexFile
com.badlogic.gdx.math.Vector: float len2()
com.badlogic.gdx.graphics.GL20: int GL_INVALID_ENUM
com.badlogic.gdx.backends.android.AndroidGL30: void glVertexAttribI4i(int,int,int,int,int)
com.esotericsoftware.jsonbeans.ObjectMap: int PRIME2
com.badlogic.gdx.math.Vector3: boolean isOnLine(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.physics.box2d.joints.MouseJointDef: com.badlogic.gdx.math.Vector2 target
com.badlogic.gdx.graphics.g2d.Sprite: float getScaleY()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_RENDER_MODE_NORMAL
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: FreeType$Glyph(long)
com.badlogic.gdx.physics.box2d.joints.GearJoint: com.badlogic.gdx.physics.box2d.Joint joint1
com.badlogic.gdx.scenes.scene2d.ui.Skin$4: com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
com.badlogic.gdx.utils.ObjectFloatMap: float getAndIncrement(java.lang.Object,float,float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String TANGENT_ATTRIBUTE
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_MAX_LOD
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_APPLE_ROMAN
com.badlogic.gdx.utils.IntFloatMap$Entries: java.lang.Object next()
com.google.android.material.textfield.TextInputLayout: void setPrefixTextAppearance(int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.InputEvent: void setCharacter(char)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: float[] copy(com.esotericsoftware.kryo.Kryo,float[])
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: void setAmountY(float)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.utils.Array parts
com.esotericsoftware.kryo.io.UnsafeOutput: boolean supportVarInts
com.badlogic.gdx.maps.objects.TextureMapObject: float rotation
com.badlogic.gdx.scenes.scene2d.Event: void stop()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(int,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Upgrade
com.badlogic.gdx.maps.objects.CircleMapObject: CircleMapObject(float,float,float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void rect(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: int height
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color CORAL
com.badlogic.gdx.graphics.g3d.decals.Decal: int X1
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: float startR
androidx.fragment.app.Fragment: Fragment()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_ADOBE_CUSTOM
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.scenes.scene2d.Actor secondWidget
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$ExpIn exp5In
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: com.badlogic.gdx.utils.Array vertices
com.google.android.material.chip.Chip: void setChipEndPaddingResource(int)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: com.badlogic.gdx.utils.Array getAllChecked()
com.badlogic.gdx.Input$Keys: int F4
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.Image image
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 setToRandomDirection()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: java.lang.String defaultVertexShader
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: ParticleControllerInfluencer$Random(com.badlogic.gdx.graphics.g3d.particles.ParticleController[])
com.badlogic.gdx.utils.IntArray: int random()
com.badlogic.gdx.backends.android.AndroidApplicationBase: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.GL30: void glResumeTransformFeedback()
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean duplicateBorder
com.badlogic.gdx.physics.box2d.PolygonShape: PolygonShape()
com.badlogic.gdx.math.Interpolation$Pow: Interpolation$Pow(int)
com.badlogic.gdx.utils.async.AsyncExecutor: AsyncExecutor(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void setIndependent(boolean)
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.kryo.util.IntMap: void putStash(int,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean getReverse()
com.badlogic.gdx.utils.CharArray: void add(char,char,char)
com.badlogic.gdx.graphics.g3d.decals.Decal: boolean updated
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.ObjectMap getJsonClassTags()
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setPadding(int)
com.badlogic.gdx.scenes.scene2d.ui.List: java.lang.String toString(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: int start
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object getStash(java.lang.Object)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: void set(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.backends.android.AndroidApplication: void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
com.badlogic.gdx.Preferences: void clear()
androidx.lifecycle.CompositeGeneratedAdaptersObserver
com.badlogic.gdx.math.Polyline: float x
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: float getY()
com.badlogic.gdx.physics.box2d.ContactImpulse: com.badlogic.gdx.physics.box2d.World world
com.esotericsoftware.kryo.io.UnsafeInput: double[] readDoubles(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder begin()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type SHORT_TYPE
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToTranslation(float,float)
com.badlogic.gdx.backends.android.AndroidDaydream$2: void run()
com.badlogic.gdx.scenes.scene2d.InputEvent: void setStageX(float)
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue next
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: float yOffset
com.badlogic.gdx.ApplicationLogger: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader
com.badlogic.gdx.graphics.GL30: void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table background(java.lang.String)
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer: java.util.zip.CRC32 crc
com.esotericsoftware.kryo.util.ObjectMap: void putResize(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.GLVersion: int getMajorVersion()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void bindLights(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.Material: java.lang.String id
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream: StreamUtils$OptimizedByteArrayOutputStream(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_HORIZONTAL
com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeShort(int)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Emissive
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectIntMap uniformTypes
com.badlogic.gdx.backends.android.AndroidGL30: void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.Array$ArrayIterator
com.badlogic.gdx.graphics.GL20: void glGenBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void surfaceCreated(android.view.SurfaceHolder)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean touchDragged(int,int,int)
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$1: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void computeSize(com.badlogic.gdx.utils.Array,float,float)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: TextureProvider$FileTextureProvider()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform reflectionTexture
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: com.badlogic.gdx.maps.tiled.TiledMap map
com.badlogic.gdx.graphics.g3d.model.Node: int insertChild(int,com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void polygon(float[])
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void unbind()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
com.badlogic.gdx.graphics.GL20: int GL_VERSION
com.badlogic.gdx.utils.FlushablePool: FlushablePool(int)
com.badlogic.gdx.utils.IntMap: int hash2(int)
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT12
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object[] valueTable
com.badlogic.gdx.utils.Base64Coder: java.lang.String encodeString(java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float)
com.badlogic.gdx.math.Intersector: void splitEdge(float[],int,int,int,com.badlogic.gdx.math.Plane,float[],int)
com.esotericsoftware.kryo.serializers.BeanSerializer: BeanSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.utils.OrderedSet: com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1i(int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: ParticleEmitter$ParticleValue()
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setMaxListCount(int)
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.Texture,float,float,int,int,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean created
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: boolean isComplete()
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: int[] sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup left()
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long getOffset()
com.esotericsoftware.kryo.util.ListReferenceResolver: void setReadObject(int,java.lang.Object)
com.badlogic.gdx.maps.tiled.TmxMapLoader: TmxMapLoader()
com.badlogic.gdx.Preferences: void remove(java.lang.String)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean useAsmEnabled
com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.jsonbeans.JsonSerializable: void read(com.esotericsoftware.jsonbeans.Json,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: float getAmountY()
com.google.android.material.bottomappbar.BottomAppBar$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 limit(float)
com.badlogic.gdx.scenes.scene2d.ui.Tree: float prefWidth
com.google.android.material.chip.Chip: void setEllipsize(android.text.TextUtils$TruncateAt)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: float dragActorY
com.badlogic.gdx.utils.DelayedRemovalArray: java.lang.Object removeIndex(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: java.lang.String name
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: RegionInfluencer$AspectTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.Input$Keys: int UNKNOWN
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: int NUM_VERTICES
com.google.android.material.snackbar.SnackbarContentLayout: android.widget.TextView getMessageView()
com.esotericsoftware.jsonbeans.Json: void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Skin$1: void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling[] values()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.Net$HttpRequest httpRequest
com.badlogic.gdx.Graphics: com.badlogic.gdx.graphics.GL20 getGL20()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteShader(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(float)
com.badlogic.gdx.utils.IdentityMap: int pushIterations
com.badlogic.gdx.utils.BooleanArray: void add(boolean,boolean,boolean,boolean)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setDrawVelocities(boolean)
com.badlogic.gdx.utils.UBJsonWriter$JsonObject: com.badlogic.gdx.utils.UBJsonWriter this$0
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue: float frequency
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue()
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean zoom(float,float)
com.badlogic.gdx.utils.ObjectFloatMap$Entry
com.badlogic.gdx.graphics.g3d.decals.Decal: int Y1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_viewTrans
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll
com.esotericsoftware.kryo.io.ByteBufferOutputStream: ByteBufferOutputStream()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.graphics.Color fontColor
com.esotericsoftware.jsonbeans.JsonValue: long getLong(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setTimeline(float[])
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void update(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: ResourceData$SaveData(com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rectLine(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.utils.IntSet: boolean containsKeyStash(int)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: FieldSerializer$CachedField()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide both
com.esotericsoftware.jsonbeans.Json: boolean usePrototypes
com.badlogic.gdx.utils.BufferUtils: void copyJni(float[],java.nio.Buffer,int,int)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: void clearSpans()
com.badlogic.gdx.scenes.scene2d.ui.Table: Table()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,float,float,float)
com.badlogic.gdx.utils.IdentityMap$Entries
com.badlogic.gdx.scenes.scene2d.ui.Container: float getMaxHeight()
com.badlogic.gdx.physics.box2d.Body: void jniSetAngularDamping(long,float)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: boolean Prev1IsChar
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy: com.badlogic.gdx.graphics.g2d.PixmapPacker$Page pack(com.badlogic.gdx.graphics.g2d.PixmapPacker,java.lang.String,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.g2d.TextureAtlas: void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData)
com.esotericsoftware.kryo.util.IdentityMap$Keys: IdentityMap$Keys(com.esotericsoftware.kryo.util.IdentityMap)
com.badlogic.gdx.backends.android.AndroidSound: long play(float)
com.badlogic.gdx.utils.ObjectFloatMap$Entries: com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.ObjectMap context
com.badlogic.gdx.backends.android.AndroidApplication$1: AndroidApplication$1(com.badlogic.gdx.backends.android.AndroidApplication)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean touchScrollV
com.badlogic.gdx.scenes.scene2d.ui.Table: float getColumnMinWidth(int)
com.badlogic.gdx.math.Polyline: float getOriginY()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: int mHeight
com.badlogic.gdx.input.RemoteSender: void sendUpdate()
com.badlogic.gdx.graphics.GL30: int GL_COPY_WRITE_BUFFER
com.badlogic.gdx.graphics.g2d.Batch: void setBlendFunctionSeparate(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug all
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: int getDepth()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 scl(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.JsonWriter
com.badlogic.gdx.utils.compression.lz.OutWindow: void Flush()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String SpecularAlias
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide valueOf(java.lang.String)
com.badlogic.gdx.InputEventQueue: void setProcessor(com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue: com.badlogic.gdx.math.CumulativeDistribution this$0
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ALOAD
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler: void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,int,long)
com.badlogic.gdx.utils.ObjectIntMap: ObjectIntMap(int,float)
com.badlogic.gdx.Graphics$BufferFormat: int samples
com.badlogic.gdx.Application: void removeLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix4fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
com.badlogic.gdx.maps.objects.PolygonMapObject: PolygonMapObject(com.badlogic.gdx.math.Polygon)
com.esotericsoftware.jsonbeans.ObjectMap: int threshold
com.esotericsoftware.kryonet.util.ObjectIntMap: void ensureCapacity(int)
com.badlogic.gdx.math.Quaternion: java.lang.String toString()
com.badlogic.gdx.utils.ObjectFloatMap: int hash3(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser: int[] filterConfigSpec(int[])
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: void setOffsetX(float)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle: SplitPane$SplitPaneStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer: java.lang.Boolean read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.utils.CharArray: boolean contains(char)
com.badlogic.gdx.utils.IntIntMap$MapIterator: int nextIndex
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer: java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Button$1
com.esotericsoftware.kryo.Kryo: void setReferenceResolver(com.esotericsoftware.kryo.ReferenceResolver)
com.badlogic.gdx.utils.viewport.ScreenViewport: float getUnitsPerPixel()
com.badlogic.gdx.math.RandomXS128: void setState(long,long)
com.google.firebase.installations.FirebaseInstallationsRegistrar: FirebaseInstallationsRegistrar()
com.badlogic.gdx.assets.RefCountedContainer: void setObject(java.lang.Object)
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.graphics.Texture$TextureFilter: Texture$TextureFilter(java.lang.String,int,int)
com.badlogic.gdx.utils.Array$ArrayIterator: boolean hasNext()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsSize
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform specularColor
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.math.Matrix3 normalMatrix
com.badlogic.gdx.math.Polygon: void translate(float,float)
com.badlogic.gdx.backends.android.AndroidApplicationLogger: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider: TextureProvider$AssetTextureProvider(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.GL20: int GL_DECR_WRAP
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void notifyVisibilityChanged(boolean)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform
com.badlogic.gdx.graphics.GL30: void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearBufferfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.input.RemoteInput: boolean isCatchKey(int)
com.badlogic.gdx.backends.android.InputProcessorLW: boolean touchDown(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: RepeatAction()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode animated
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node parent
com.esotericsoftware.kryo.io.Output: void writeFloats(float[])
com.badlogic.gdx.math.Bresenham2: Bresenham2()
com.badlogic.gdx.math.CumulativeDistribution: void add(java.lang.Object,float)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatHoveredFocusedTranslationZ(float)
com.badlogic.gdx.utils.Json: void readField(java.lang.Object,com.badlogic.gdx.utils.reflect.Field,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1: com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0
com.esotericsoftware.minlog.Log: boolean INFO
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: void setInvalidDragActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.assets.AssetManager: float getProgress()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 getScale(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.StreamUtils: int DEFAULT_BUFFER_SIZE
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: com.badlogic.gdx.graphics.g2d.TextureRegion region
com.badlogic.gdx.utils.BufferUtils: long findFloats(float[],int,java.nio.Buffer,int,float)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean inTapSquare(float,float)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setExponent(float)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Swing swing
com.badlogic.gdx.graphics.Pixmap: com.badlogic.gdx.graphics.Pixmap$Filter getFilter()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_TEST
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float dragStartY
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: com.badlogic.gdx.assets.AssetDescriptor loadAsset()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23: DefaultShader$Setters$23()
com.badlogic.gdx.graphics.glutils.KTXTextureData
com.badlogic.gdx.scenes.scene2d.utils.FocusListener: void scrollFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.graphics.g2d.NinePatch: float bottomHeight
com.HyperSphere.Connection.PacketObjects.Entities.Monster: java.lang.String toString()
com.google.android.material.chip.Chip: void setCloseIconContentDescription(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.ui.Window
com.badlogic.gdx.utils.compression.rangecoder.Encoder: long Low
com.HyperSphere.Connection.PacketObjects.Map.Shop: it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap itemList
com.badlogic.gdx.backends.android.AndroidGL20: void glReleaseShaderCompiler()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: int getSpanStart(java.lang.Object)
androidx.appcompat.widget.DropDownListView: void setSelector(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.utils.Selection: com.badlogic.gdx.utils.OrderedSet selected
com.badlogic.gdx.backends.android.AndroidGL20: void glBindBuffer(int,int)
com.badlogic.gdx.graphics.PixmapIO$CIM: byte[] writeBuffer
com.badlogic.gdx.utils.Align: int bottom
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector cubic(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter: void close()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getPadRight()
com.esotericsoftware.kryo.serializers.MapSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single copy()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: boolean ownsShader
androidx.activity.ComponentActivity$2
com.badlogic.gdx.graphics.g3d.Attributes: void set(com.badlogic.gdx.graphics.g3d.Attribute)
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: void update()
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setThreshold(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object firstValue()
com.badlogic.gdx.utils.ObjectIntMap: void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padLeft(float)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.Model: Model()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadTileSet(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void dispose()
com.badlogic.gdx.math.Vector2: boolean isCollinear(com.badlogic.gdx.math.Vector2,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_0
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int scaleForPixelWidth(int,int)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: java.lang.String uniqueID
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
com.google.android.material.textfield.TextInputEditText: TextInputEditText(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPadX()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getSpaceRight()
com.badlogic.gdx.Input$Keys: int BACKSLASH
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: boolean color
com.badlogic.gdx.math.Circle: void setRadius(float)
com.badlogic.gdx.physics.box2d.Filter: short maskBits
com.badlogic.gdx.graphics.GL30: void glBindBufferBase(int,int,int)
com.HyperSphere.Connection.PacketObjects.Entities.Monster: int anchorValX
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void setTapCount(int)
com.badlogic.gdx.scenes.scene2d.Event: boolean isHandled()
com.badlogic.gdx.utils.IntSet: int pushIterations
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int[] ProbPrices
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: ImmediateModeRenderer20(int,boolean,boolean,int)
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: com.badlogic.gdx.math.Vector2 uvScaling
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void patch(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,int)
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight)
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)
com.badlogic.gdx.graphics.profiling.GLProfiler: void disable()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromAxisRad(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.physics.box2d.joints.RopeJoint: void jniGetLocalAnchorB(long,float[])
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$ItemAnimator getItemAnimator()
com.badlogic.gdx.graphics.Mesh: java.nio.ShortBuffer getIndicesBuffer()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void setScale(float)
com.google.android.material.textfield.TextInputLayout: void setEndIconActivated(boolean)
com.badlogic.gdx.utils.OrderedSet: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHeight(long)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle style
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: com.badlogic.gdx.graphics.Texture$TextureWrap uWrap
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.graphics.glutils.ShaderProgram program
com.badlogic.gdx.math.Interpolation$Swing: Interpolation$Swing(float)
com.badlogic.gdx.physics.box2d.World: long jniCreatePrismaticJoint(long,long,long,boolean,float,float,float,float,float,float,float,boolean,float,float,boolean,float,float)
com.esotericsoftware.kryonet.Listener$QueuedListener$1: com.esotericsoftware.kryonet.Listener$QueuedListener this$0
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(float)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setStepSize(float)
com.badlogic.gdx.utils.TimSort
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType Billboard
com.badlogic.gdx.utils.Bits: void set(int)
com.badlogic.gdx.graphics.Pixmap: void drawRectangle(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGraphics: void destroy()
com.badlogic.gdx.graphics.g2d.PolygonSprite: void draw(com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch)
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryo.Kryo getKryo()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: ModelInfluencer$Random()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: java.lang.String toString()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(java.lang.String,java.lang.String,java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setColor(com.badlogic.gdx.graphics.Color)
com.google.android.material.chip.ChipGroup
com.badlogic.gdx.graphics.g2d.PixmapPacker: int getPageWidth()
com.badlogic.gdx.utils.OrderedSet: java.lang.Object removeIndex(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap generateGlyphAndBitmap(int,int,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeAlpha()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField: void setField(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.environment.SpotLight[] spotLights
com.badlogic.gdx.audio.Sound: void resume()
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: ParticleSorter$Distance()
com.esotericsoftware.jsonbeans.ObjectMap$Entries: ObjectMap$Entries(com.esotericsoftware.jsonbeans.ObjectMap)
com.badlogic.gdx.backends.android.AndroidNet$1: com.badlogic.gdx.backends.android.AndroidNet this$0
com.esotericsoftware.kryo.serializers.DeflateSerializer: void setNoHeaders(boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setUV(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color SKY
com.badlogic.gdx.physics.box2d.Contact: void setRestitution(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void dispose()
com.badlogic.gdx.graphics.profiling.GLProfiler: com.badlogic.gdx.graphics.profiling.GLErrorListener listener
com.google.android.material.textfield.TextInputLayout: void setHelperTextTextAppearance(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.utils.Drawable icon
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeColor(int)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder replace(int,int,java.lang.String)
com.badlogic.gdx.files.FileHandle: void write(java.io.InputStream,boolean)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: com.badlogic.gdx.math.Vector3 tmpV2
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status valueOf(java.lang.String)
com.google.android.material.button.MaterialButton: void setStrokeColorResource(int)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2: CameraGroupStrategy$2(com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.kryo.util.UnsafeUtil$1: UnsafeUtil$1()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter)
androidx.fragment.app.Fragment: int getId()
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer: OrthogonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup rowCenter()
com.badlogic.gdx.graphics.GL30: int GL_MAX_VERTEX_UNIFORM_COMPONENTS
com.badlogic.gdx.scenes.scene2d.ui.Skin: Skin()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: java.lang.String entityID
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 i
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: com.badlogic.gdx.scenes.scene2d.ui.SelectBox selectBox
com.badlogic.gdx.utils.JsonValue: char asChar()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.math.Frustum: boolean sphereInFrustumWithoutNearFar(float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_SYNC_GPU_COMMANDS_COMPLETE
com.badlogic.gdx.scenes.scene2d.ui.Value$2: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.math.Interpolation$ExpIn: float apply(float)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.Input: void setCatchMenuKey(boolean)
com.badlogic.gdx.physics.box2d.PolygonShape: void set(float[],int,int)
com.badlogic.gdx.net.HttpStatus: int SC_SERVICE_UNAVAILABLE
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glStencilOp(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.math.Vector2 lastPoint
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel
com.badlogic.gdx.utils.BufferUtils: void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3,int)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat[] values()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFrontFace(int)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor
com.badlogic.gdx.maps.objects.CircleMapObject: com.badlogic.gdx.math.Circle circle
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle internal(java.lang.String)
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Entries entries()
com.badlogic.gdx.utils.BufferUtils
com.badlogic.gdx.Preferences: com.badlogic.gdx.Preferences putInteger(java.lang.String,int)
com.hyperspherestudio.kryonet.Packets.PacketStream: byte[] objectData
com.badlogic.gdx.utils.ObjectMap$MapIterator: com.badlogic.gdx.utils.ObjectMap map
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.graphics.g3d.Renderable renderable
com.esotericsoftware.kryo.serializers.FieldSerializerAnnotationsUtil
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] expandWidth
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: DragAndDrop$Payload()
com.google.android.gms.common.internal.ResolveAccountRequest: android.os.Parcelable$Creator CREATOR
com.google.android.material.internal.CheckableImageButton: CheckableImageButton(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.IntMap: java.lang.Object getStash(int,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setFirstWidget(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryo.util.IntMap: IntMap(int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCachedField
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void end()
com.badlogic.gdx.utils.ObjectMap$MapIterator: void reset()
com.badlogic.gdx.math.Polyline: float getX()
com.badlogic.gdx.physics.box2d.Joint
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int register(java.lang.String)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int[] getAnimationIntervals()
com.badlogic.gdx.utils.IdentityMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entry next()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getPlaceholderTextColor()
com.badlogic.gdx.utils.LongMap: int stashCapacity
com.badlogic.gdx.Input$Keys: int F7
com.badlogic.gdx.math.EarClippingTriangulator: com.badlogic.gdx.utils.ShortArray indicesArray
com.badlogic.gdx.utils.ByteArray: boolean equals(java.lang.Object)
com.fasterxml.jackson.databind.annotation.JsonSerialize$Inclusion: com.fasterxml.jackson.databind.annotation.JsonSerialize$Inclusion[] values()
com.badlogic.gdx.utils.compression.lzma.Encoder: int _longestMatchLength
com.badlogic.gdx.utils.ObjectSet: void addAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.GL20: int GL_NEAREST
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.physics.box2d.Filter: short categoryBits
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_NO_HINTING
com.esotericsoftware.reflectasm.FieldAccess
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getPrefixText()
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.Contact contact
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float lastY
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,char[],int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glStencilFunc(int,int,int)
com.badlogic.gdx.utils.IntArray: void add(int,int)
com.badlogic.gdx.utils.IntFloatMap: void shrink(int)
com.badlogic.gdx.backends.android.AndroidApplication$2: com.badlogic.gdx.backends.android.AndroidApplication this$0
com.badlogic.gdx.graphics.glutils.MipMapTextureData: MipMapTextureData(com.badlogic.gdx.graphics.TextureData[])
com.badlogic.gdx.utils.ObjectFloatMap$Entries: boolean hasNext()
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.scenes.scene2d.ui.TextField: void moveCursor(boolean,boolean)
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint[] getPoints()
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue parse(java.io.InputStream)
com.badlogic.gdx.physics.box2d.Body: void jniSetGravityScale(long,float)
com.badlogic.gdx.physics.box2d.EdgeShape: void jniSetHasVertex3(long,boolean)
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureRegion: com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: DynamicsModifier$BrownianAcceleration(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: int keyboardHeight
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void setScale(float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: void init(boolean,int,int)
com.badlogic.gdx.math.Polyline: float rotation
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
com.badlogic.gdx.scenes.scene2d.ui.Label: int getLabelAlign()
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.physics.box2d.JointEdge jointEdgeA
com.badlogic.gdx.utils.LittleEndianInputStream: long readLong()
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object getStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteTexture(int)
com.esotericsoftware.kryonet.util.ObjectIntMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidInput$3$3: AndroidInput$3$3(com.badlogic.gdx.backends.android.AndroidInput$3)
com.badlogic.gdx.math.Vector
com.badlogic.gdx.utils.Array$ArrayIterable: java.util.Iterator iterator()
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector tmp2
com.badlogic.gdx.graphics.g2d.Sprite: void rotate90(boolean)
com.esotericsoftware.kryo.util.ObjectMap: int stashSize
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value padLeft
com.esotericsoftware.kryo.factories.ReflectionSerializerFactory
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.graphics.Pixmap$Format format
com.badlogic.gdx.assets.AssetManager: void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.GL20: int GL_INT_VEC2
com.badlogic.gdx.physics.box2d.World: int jniGetContactCount(long)
com.badlogic.gdx.graphics.g3d.decals.Decal: int X3
com.esotericsoftware.kryo.io.Input: Input(int)
androidx.navigation.fragment.NavHostFragment
com.badlogic.gdx.ApplicationLogger
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.utils.Array getDependencyAssetDescriptors(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters
com.badlogic.gdx.physics.box2d.World: void jniDispose(long)
com.badlogic.gdx.Net$HttpRequest: int timeOut
com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDepthFunc(int)
com.badlogic.gdx.backends.android.AndroidDaydream: void onConfigurationChanged(android.content.res.Configuration)
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction
com.badlogic.gdx.Audio: com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: FirstPersonCameraController(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void clearItems()
com.badlogic.gdx.scenes.scene2d.ui.Cell: int getAlign()
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type[],int)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: com.badlogic.gdx.math.Vector2 endPoint
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: java.util.ArrayList mEventQueue
com.google.android.material.internal.NavigationMenuView: int getWindowAnimations()
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.math.Matrix4[] bones
com.badlogic.gdx.scenes.scene2d.ui.Cell: int getColspan()
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.ShortArray computeTriangles(float[],boolean)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int MAX_GLES_UNITS
com.badlogic.gdx.graphics.g3d.decals.Decal: void setScaleY(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindBufferRange(int,int,int,int,int)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.google.android.gms.common.annotation.KeepName
com.badlogic.gdx.scenes.scene2d.InputEvent: float getStageX()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Label getLabel()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getAscender(long)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setExtendMotionSpecResource(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINEJOIN_BEVEL
com.badlogic.gdx.graphics.g3d.decals.Decal: int Y2
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool: com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch this$0
com.badlogic.gdx.utils.I18NBundle: boolean exceptionOnMissingKey
com.badlogic.gdx.utils.CharArray: boolean removeAll(com.badlogic.gdx.utils.CharArray)
com.badlogic.gdx.physics.box2d.Body: boolean isFixedRotation()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean disableY
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction
androidx.appcompat.widget.AppCompatButton: AppCompatButton(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: short[] indices
androidx.fragment.app.Fragment: android.view.View getAnimatingAway()
com.badlogic.gdx.Graphics$BufferFormat: int depth
com.badlogic.gdx.graphics.GL30: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] ensureSize(float[],int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int lifeDiff
com.badlogic.gdx.math.Interpolation$PowOut: float apply(float)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setOnAttachStateChangeListener(com.google.android.material.snackbar.BaseTransientBottomBar$OnAttachStateChangeListener)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean or(long,long)
com.esotericsoftware.kryo.io.ByteBufferOutputStream: void setByteBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.utils.FloatArray: void addAll(com.badlogic.gdx.utils.FloatArray)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RepeatAction forever(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float)
com.badlogic.gdx.utils.Align: boolean isRight(int)
com.badlogic.gdx.backends.android.AndroidApplication: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.utils.XmlWriter: java.lang.String currentElement
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.esotericsoftware.kryo.io.Input: void readUtf8(int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.badlogic.gdx.scenes.scene2d.InputEvent: InputEvent()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ICMPNE
com.google.android.material.chip.ChipGroup: int getCheckedChipId()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteBuffer(int)
com.google.android.material.bottomappbar.BottomAppBar: float getFabCradleMargin()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool: RenderableShapeBuilder$RenderablePool()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setPackedColor(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getMethodDescriptor(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type[])
com.badlogic.gdx.utils.CharArray: int lastIndexOf(char)
com.badlogic.gdx.utils.FloatArray: float[] ensureCapacity(int)
com.esotericsoftware.kryo.serializers.BeanSerializer
com.badlogic.gdx.math.Vector2: float angleRad(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.LittleEndianInputStream: int readUnsignedShort()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: int glEnum
com.badlogic.gdx.Graphics$BufferFormat: int a
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
com.badlogic.gdx.utils.SharedLibraryLoader: SharedLibraryLoader(java.lang.String)
com.badlogic.gdx.files.FileHandleStream: com.badlogic.gdx.files.FileHandle child(java.lang.String)
androidx.fragment.app.Fragment: androidx.lifecycle.LifecycleOwner getViewLifecycleOwner()
com.HyperSphere.Connection.PacketObjects.Misc.QuestPage: int pageNumber
com.badlogic.gdx.assets.loaders.PixmapLoader: com.badlogic.gdx.graphics.Pixmap pixmap
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: short lastIndex
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.Renderable getRenderable(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.model.Node,com.badlogic.gdx.graphics.g3d.model.NodePart)
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
com.badlogic.gdx.graphics.g3d.decals.Decal: int Z1
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector setZero()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentLength
com.google.android.gms.common.util.DynamiteApi
com.esotericsoftware.kryo.util.IdentityMap$Keys
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String text
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 tmpVec
com.badlogic.gdx.utils.SharedLibraryLoader: java.io.File extractFile(java.lang.String,java.lang.String,java.io.File)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP_POSITIVE_Y
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void drawAdjusted(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.input.RemoteInput: void vibrate(int)
com.esotericsoftware.kryo.util.UnsafeUtil$1
com.badlogic.gdx.graphics.g3d.Attributes: void set(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.scenes.scene2d.ui.Value$9: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.utils.Drawable: float getMinHeight()
com.badlogic.gdx.scenes.scene2d.ui.Label: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void invalidateAllFrameBuffers(com.badlogic.gdx.Application)
com.badlogic.gdx.math.Polygon: float getY()
com.badlogic.gdx.backends.android.AndroidAudio
com.badlogic.gdx.backends.android.ZipResourceFile: int kEOCDNumEntries
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(com.badlogic.gdx.utils.Array,java.lang.Object)
com.badlogic.gdx.physics.box2d.Joint: void jniGetReactionForce(long,float,float[])
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_LCD
com.badlogic.gdx.utils.Queue: void clear()
com.badlogic.gdx.utils.StringBuilder: int length
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.CatmullRomSpline set(com.badlogic.gdx.math.Vector[],boolean)
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: void Init()
com.badlogic.gdx.graphics.g3d.decals.Decal: void updateUVs()
com.badlogic.gdx.graphics.g3d.decals.Decal: void setMaterial(com.badlogic.gdx.graphics.g3d.decals.DecalMaterial)
com.google.android.material.internal.CheckableImageButton$SavedState: android.os.Parcelable$Creator CREATOR
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int readByte(int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: TemporalAction(float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.utils.compression.lz.InWindow: int _pos
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform3i(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: float paddingLeft
com.badlogic.gdx.scenes.scene2d.ui.Tree: float getNodeAt(com.badlogic.gdx.utils.Array,float,float)
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.utils.Array sharedAssets
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool
com.badlogic.gdx.utils.ObjectIntMap: int hashCode()
com.badlogic.gdx.math.Vector2: float len2()
com.badlogic.gdx.utils.IntMap$Values: java.lang.Object next()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setScaleX(float)
com.badlogic.gdx.utils.BooleanArray: java.lang.String toString()
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: java.lang.String Peffect
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior: FloatingActionButton$Behavior()
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters: int readerBuffer
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters
com.esotericsoftware.kryo.util.IntMap: java.lang.Object getStash(int,java.lang.Object)
com.badlogic.gdx.assets.AssetManager: void setReferenceCount(java.lang.String,int)
com.esotericsoftware.jsonbeans.ObjectMap: ObjectMap(int,float)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.scenes.scene2d.InputEvent event
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidInput input
com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField: void copy(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node copy()
com.badlogic.gdx.utils.IntFloatMap$Values: void remove()
com.esotericsoftware.kryo.KryoException: KryoException()
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.animation.MotionSpec getShowMotionSpec()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void notifyOffsetsChanged()
com.badlogic.gdx.backends.android.AndroidApplicationBase: void setLogLevel(int)
com.badlogic.gdx.Input$Keys: java.lang.String toString(int)
com.badlogic.gdx.InputMultiplexer: com.badlogic.gdx.utils.SnapshotArray processors
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: short readShort(int)
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format RGB888
com.badlogic.gdx.graphics.g3d.utils.AnimationController: boolean justChangedAnimation
com.esotericsoftware.kryo.io.ByteBufferOutput: void write(int)
com.badlogic.gdx.input.RemoteInput: RemoteInput(com.badlogic.gdx.input.RemoteInput$RemoteInputListener)
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Keys keys1
com.badlogic.gdx.scenes.scene2d.ui.List: float getPrefWidth()
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Values values()
com.badlogic.gdx.graphics.GL30: int GL_R16UI
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: PrimitiveSpawnShapeValue()
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1: AndroidVisibilityListener$1$1(com.badlogic.gdx.backends.android.AndroidVisibilityListener$1)
com.badlogic.gdx.utils.IntIntMap$Entries: com.badlogic.gdx.utils.IntIntMap$Entry entry
com.badlogic.gdx.backends.android.AndroidApplicationBase: void removeLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: boolean valid
com.esotericsoftware.kryonet.Connection: void notifyConnected()
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean onlyFontChars
com.badlogic.gdx.utils.IntSet: int stashSize
com.badlogic.gdx.math.EarClippingTriangulator: int vertexCount
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.factories.SerializerFactory defaultSerializer
com.esotericsoftware.kryo.io.KryoDataOutput
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float getHighMax()
com.badlogic.gdx.utils.viewport.Viewport: void setWorldWidth(float)
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef
com.esotericsoftware.kryonet.TcpConnection: boolean isTimedOut(long)
androidx.fragment.app.Fragment: void setMenuVisibility(boolean)
com.badlogic.gdx.graphics.glutils.PixmapTextureData: int getHeight()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromAxes(boolean,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Warning
com.badlogic.gdx.backends.android.AndroidMusic: boolean wasPlaying
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.hyperspherestudio.kryonet.Packets.CommonPacket: int packetValue
com.badlogic.gdx.graphics.GL30: int GL_ANY_SAMPLES_PASSED
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newMemoryFace(java.nio.ByteBuffer,int)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: float maxMotorForce
com.esotericsoftware.kryonet.ServerDiscoveryHandler$1: ServerDiscoveryHandler$1()
com.esotericsoftware.kryo.Generics: com.esotericsoftware.kryo.Generics getParentScope()
com.esotericsoftware.jsonbeans.JsonSerializable
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBindRenderbuffer(int,int)
com.badlogic.gdx.net.Socket
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer newPixmap(long[],int,int,int)
com.badlogic.gdx.files.FileHandle: java.io.Reader reader(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: ClassReader(java.lang.String)
com.badlogic.gdx.utils.IntMap: int[] keyTable
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LCONST_1
com.esotericsoftware.kryonet.Listener$QueuedListener: void connected(com.esotericsoftware.kryonet.Connection)
androidx.appcompat.widget.ViewStubCompat: void setLayoutResource(int)
com.badlogic.gdx.utils.viewport.Viewport: int screenX
com.badlogic.gdx.utils.FloatArray: boolean ordered
com.badlogic.gdx.utils.Timer$TimerThread: void run()
com.badlogic.gdx.physics.box2d.Shape$Type
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: void setLabel(com.badlogic.gdx.scenes.scene2d.ui.Label)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: float pressedOffsetY
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_NO_BITMAP
com.badlogic.gdx.graphics.GL30: int GL_READ_BUFFER
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject: boolean needsComma
com.badlogic.gdx.graphics.GL30: int GL_ACTIVE_UNIFORM_BLOCKS
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue: PointSpawnShapeValue()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Values values()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.GL20: int GL_COMPRESSED_TEXTURE_FORMATS
com.badlogic.gdx.utils.PropertiesUtils: void dumpString(com.badlogic.gdx.utils.StringBuilder,java.lang.String,boolean,boolean)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner100(com.badlogic.gdx.math.Vector3)
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String prettyPrint(com.esotericsoftware.jsonbeans.OutputType,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: com.badlogic.gdx.utils.Array textureAttachments
com.badlogic.gdx.graphics.g2d.Sprite: void setFlip(boolean,boolean)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: float getOffsetX()
com.badlogic.gdx.math.Vector2: boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.math.Interpolation$7: float apply(float)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.GL20 getGL20()
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isARM
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.graphics.Pixmap$Format: int toGlFormat(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.backends.android.AndroidMouseHandler: boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] columnWeightedWidth
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer instance
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: boolean resetOnTouchUp
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void addLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.math.Interpolation$11
com.badlogic.gdx.maps.MapObjects: int getCount()
com.esotericsoftware.kryonet.Server: void addConnection(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle getStyle()
com.badlogic.gdx.backends.android.AndroidGL20: AndroidGL20()
com.badlogic.gdx.graphics.GL30: int GL_RGB32F
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: com.badlogic.gdx.utils.Array parts
com.badlogic.gdx.scenes.scene2d.ui.Cell: int column
com.esotericsoftware.minlog.Log: void debug(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer: PointSpriteRenderer()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: CpuSpriteBatch(int)
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int[] p
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float)
com.badlogic.gdx.graphics.g2d.Batch: int U1
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Keys keys1
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.CharSequence displayText
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteSamplers(int,int[],int)
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int TOUCH_UP
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart[] parts
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_normalUVTransform
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LCONST_0
com.badlogic.gdx.scenes.scene2d.ui.Cell: boolean getUniformY()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: java.lang.String createPrefix(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config)
androidx.appcompat.widget.ViewStubCompat: int getLayoutResource()
com.badlogic.gdx.backends.android.AndroidGL30: void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.GL20: int GL_UNSIGNED_SHORT
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.async.AsyncExecutor executor
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void requirePageGlyphs(int,int)
com.badlogic.gdx.utils.IntIntMap$MapIterator: int INDEX_ILLEGAL
com.badlogic.gdx.graphics.TextureArray: void load(com.badlogic.gdx.graphics.TextureArrayData)
com.badlogic.gdx.graphics.GL30: int GL_SAMPLER_2D_ARRAY
com.esotericsoftware.kryo.serializers.FieldSerializer$Bind
com.esotericsoftware.kryo.util.IdentityMap: int PRIME3
com.badlogic.gdx.scenes.scene2d.ui.Skin$2: com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin
com.badlogic.gdx.graphics.GL30: int GL_SRGB8_ALPHA8
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide side
com.badlogic.gdx.backends.android.AndroidTouchHandler
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT7
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.scenes.scene2d.ui.Button: void toggle()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.math.Matrix4 transformMatrix
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setY(float)
com.badlogic.gdx.math.Interpolation$Exp: float min
com.esotericsoftware.kryo.util.ObjectMap$Values: java.util.ArrayList toArray()
com.badlogic.gdx.graphics.glutils.PixmapTextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.utils.CharArray: CharArray(boolean,char[],int,int)
com.badlogic.gdx.utils.LittleEndianInputStream: java.io.DataInputStream din
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setToggle(boolean)
com.badlogic.gdx.graphics.GL30: int GL_RGBA8_SNORM
com.badlogic.gdx.scenes.scene2d.actions.IntAction: int end
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: int ReverseDecode(short[],int,com.badlogic.gdx.utils.compression.rangecoder.Decoder,int)
com.esotericsoftware.kryo.factories.PseudoSerializerFactory: PseudoSerializerFactory(com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.backends.android.AndroidSound: void stop()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.graphics.Camera getCamera()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getTargetFragment()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: int getRotation()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.glutils.MipMapGenerator: void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int)
com.badlogic.gdx.utils.SortedIntList$NodePool: com.badlogic.gdx.utils.SortedIntList$Node newObject()
com.badlogic.gdx.math.Matrix3: float[] val
com.badlogic.gdx.utils.ArrayMap$Keys: ArrayMap$Keys(com.badlogic.gdx.utils.ArrayMap)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short,int[],java.lang.Object)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Date
com.google.android.material.floatingactionbutton.FloatingActionButton: int getRippleColor()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void cone(float,float,float,int,float,float)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: int index
com.badlogic.gdx.math.Interpolation$PowIn
com.badlogic.gdx.graphics.GL30: int GL_DEPTH_COMPONENT32F
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue yScaleValue
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.jsonbeans.JsonSerializer: java.lang.Object read(com.esotericsoftware.jsonbeans.Json,com.esotericsoftware.jsonbeans.JsonValue,java.lang.Class)
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setPosition(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean smoothScrolling
com.badlogic.gdx.utils.compression.rangecoder.Encoder: java.io.OutputStream Stream
com.badlogic.gdx.math.Quaternion: Quaternion(float,float,float,float)
com.badlogic.gdx.utils.JsonValue: boolean isNull()
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor Ibeam
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int D2I
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap map
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: long travelLength
com.badlogic.gdx.audio.Music: void setPosition(float)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.Clipboard getClipboard()
com.badlogic.gdx.utils.BooleanArray: boolean random()
com.esotericsoftware.kryo.util.IntMap$MapIterator: int nextIndex
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: AddListenerAction()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: void setBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: WeightMeshSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue)
com.badlogic.gdx.math.MathUtils: float clamp(float,float,float)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeAscii_slow(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: int getFirstKeyframeIndexAtTime(com.badlogic.gdx.utils.Array,float)
com.badlogic.gdx.graphics.glutils.GLVersion$Type: GLVersion$Type(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: int defaultDepthFunc
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_VEC3
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: Tooltip(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: java.lang.String getPath()
com.badlogic.gdx.utils.IntMap: java.lang.Object removeStash(int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.Net$HttpRequest: boolean getFollowRedirects()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setPosition(float,float)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeChar(char)
com.badlogic.gdx.scenes.scene2d.Actor: float getRight()
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_trans_targs
com.badlogic.gdx.physics.box2d.PolygonShape: long newPolygonShape()
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: float[] getColors()
com.esotericsoftware.kryo.io.ByteBufferInputStream: java.nio.ByteBuffer getByteBuffer()
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool: java.lang.Object newObject()
com.badlogic.gdx.utils.compression.lz.BinTree: void Init()
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider
com.badlogic.gdx.maps.tiled.TideMapLoader: void loadLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 limit2(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void generateLifeValues()
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue child
com.badlogic.gdx.scenes.scene2d.Actor: void clear()
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetMotorSpeed(long)
com.badlogic.gdx.files.FileHandle: java.lang.String path()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: ImageTextButton$ImageTextButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void setCorrectionFactor(float)
androidx.activity.ComponentActivity$3
com.badlogic.gdx.backends.android.AndroidInput: float[] pressure
com.esotericsoftware.kryonet.Connection: void setBufferPositionFix(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2: com.badlogic.gdx.math.Matrix4 newObject()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: boolean validate(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.backends.android.AndroidSound: void dispose()
com.badlogic.gdx.utils.ObjectMap$Entries: ObjectMap$Entries(com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 rotateRad(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.utils.BufferUtils: long findFloats(java.nio.Buffer,int,float[],int,float)
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor VerticalResize
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.Array executedRunnables
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV6
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsProgram(int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1
com.badlogic.gdx.utils.JsonValue: boolean isNumeric(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: TextureDescriptor()
com.badlogic.gdx.utils.ObjectIntMap: int PRIME3
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Matrix3)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode
com.badlogic.gdx.utils.ObjectMap$Values: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Table$2: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.google.android.material.textfield.TextInputLayout: void setSuffixTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getStageTouchDownX()
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction: void setVisible(boolean)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: void update()
com.badlogic.gdx.backends.android.AndroidSound: long play()
com.badlogic.gdx.graphics.GL30: java.lang.String glGetString(int)
com.esotericsoftware.kryo.util.IntArray: void add(int)
com.badlogic.gdx.utils.reflect.Constructor: java.lang.reflect.Constructor constructor
com.badlogic.gdx.utils.JsonReader: int json_en_main
com.badlogic.gdx.utils.TimSort: void reverseRange(java.lang.Object[],int,int)
com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry
com.google.android.material.chip.Chip: float getTextEndPadding()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: float handlePosition
com.badlogic.gdx.math.Intersector: boolean intersectSegmentRectangle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.graphics.g3d.utils.MeshBuilder meshBuilder
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteTexture(int)
androidx.cardview.widget.CardView: android.content.res.ColorStateList getCardBackgroundColor()
com.esotericsoftware.kryo.util.UnsafeUtil: long byteArrayBaseOffset
com.badlogic.gdx.graphics.g2d.NinePatch: int idx
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INVOKEINTERFACE
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: Touchpad(float,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g3d.Material: Material(java.lang.String,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOver
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table top()
com.badlogic.gdx.utils.I18NBundle: void setSimpleFormatter(boolean)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData: ModelInstanceControllerRenderData()
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.google.android.material.textfield.TextInputLayout: int getBoxBackgroundMode()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_reflectionColor
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: boolean is(long)
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String)
com.esotericsoftware.kryo.util.DefaultClassResolver: java.lang.Class memoizedClass
com.esotericsoftware.kryo.util.ListReferenceResolver: int nextReadId(java.lang.Class)
com.esotericsoftware.jsonbeans.Json: void toJson(java.lang.Object,java.lang.Class,java.io.File)
com.badlogic.gdx.graphics.GL20: void glUniform3iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean shouldReleaseEGLContextWhenPausing()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.utils.ByteArray: boolean contains(byte)
com.badlogic.gdx.utils.JsonValue$JsonIterator: com.badlogic.gdx.utils.JsonValue this$0
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean loadChar(int,int)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode: ParticleShader$AlignMode(java.lang.String,int)
com.badlogic.gdx.graphics.GL20: int GL_FLOAT_VEC4
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType MouseJoint
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glScissor(int,int,int,int)
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet,int)
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.math.GridPoint2: float dst2(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void d()
com.google.android.material.chip.Chip: void setCheckedIconVisible(int)
com.badlogic.gdx.audio.Sound
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: void findNextIndex()
com.badlogic.gdx.utils.IdentityMap: float loadFactor
com.badlogic.gdx.backends.android.AndroidGraphics: javax.microedition.khronos.egl.EGLContext eglContext
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector r
com.badlogic.gdx.utils.IntMap: int PRIME1
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue current
com.badlogic.gdx.assets.AssetManager: void finishLoading()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Rectangle hKnobBounds
com.badlogic.gdx.math.Vector2: float dot(float,float,float,float)
com.badlogic.gdx.math.MathUtils: int floor(float)
com.badlogic.gdx.utils.IdentityMap: void putStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.RenderContext)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: PolygonSpriteBatch(int)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsAwake(long)
androidx.fragment.app.Fragment: void performLowMemory()
com.badlogic.gdx.audio.Music
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean cancelled
com.badlogic.gdx.utils.Array: com.badlogic.gdx.utils.Array of(boolean,int,java.lang.Class)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeUtf8Length(int)
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue root
com.badlogic.gdx.utils.compression.lzma.Base: int kNumMidLenSymbols
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2: SelectBox$SelectBoxList$2(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.SelectBox)
com.badlogic.gdx.scenes.scene2d.ui.Tree
com.badlogic.gdx.scenes.scene2d.Event: boolean capture
com.google.android.material.appbar.AppBarLayout$Behavior
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getPrefWidthValue()
com.badlogic.gdx.scenes.scene2d.ui.Value$8: Value$8(float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener: void onEnd(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc)
com.badlogic.gdx.utils.SnapshotArray: void insert(int,java.lang.Object)
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.ObjectMap tagToClass
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getCharIndex(long,int)
com.badlogic.gdx.math.RandomXS128: float nextFloat()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer: java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.compression.lzma.Encoder: int kIfinityPrice
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.InputProcessor processor
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES
com.badlogic.gdx.scenes.scene2d.Event: void setBubbles(boolean)
com.badlogic.gdx.maps.objects.RectangleMapObject
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean isLinux
com.badlogic.gdx.graphics.g3d.model.data.ModelData: short[] version
com.badlogic.gdx.backends.android.AndroidGL20: void glClearColor(float,float,float,float)
com.badlogic.gdx.graphics.Cursor$SystemCursor: Cursor$SystemCursor(java.lang.String,int)
com.badlogic.gdx.graphics.Mesh
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glActiveTexture(int)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,boolean)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.utils.viewport.Viewport: int getScreenY()
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: com.badlogic.gdx.math.Vector2 groundAnchorB
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool: com.badlogic.gdx.graphics.g3d.Renderable newObject()
com.badlogic.gdx.graphics.Texture$TextureFilter: int glEnum
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void destroySurfaceImp()
com.badlogic.gdx.graphics.GL20: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.badlogic.gdx.assets.AssetManager
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.backends.android.AndroidDaydream$2: AndroidDaydream$2(com.badlogic.gdx.backends.android.AndroidDaydream)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label c
com.badlogic.gdx.scenes.scene2d.ui.Image: void setDrawable(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: float minSpeed
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.Color color
com.esotericsoftware.kryo.io.ByteBufferInput: int read(byte[])
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glCreateProgram()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
com.esotericsoftware.jsonbeans.ObjectMap: int size
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: DirectionalShadowLight(int,int,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: int maxCheckCount
androidx.appcompat.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 scl(float,float)
com.badlogic.gdx.backends.android.AndroidInput: boolean justTouched()
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getCounterOverflowTextColor()
com.badlogic.gdx.physics.box2d.Body: float getInertia()
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidth(int)
com.badlogic.gdx.physics.box2d.Body: void jniSetTransform(long,float,float,float)
com.badlogic.gdx.Input$Keys: int V
com.esotericsoftware.reflectasm.MethodAccess: void addDeclaredMethodsToList(java.lang.Class,java.util.ArrayList)
com.esotericsoftware.kryonet.Client: void update(int)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.graphics.VertexAttribute[] parseAttributes(com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.kryo.util.ObjectMap: int hash3(int)
com.badlogic.gdx.physics.box2d.Shape: int getChildCount()
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.utils.Array cells
com.badlogic.gdx.graphics.GL30: void glGenFramebuffers(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: boolean elementsCanBeNull
com.badlogic.gdx.utils.StringBuilder: java.lang.String toString()
com.badlogic.gdx.net.NetJavaImpl: NetJavaImpl(int)
com.badlogic.gdx.math.Polygon: float getX()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model end()
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: android.content.res.AssetFileDescriptor getAssetFileDescriptor()
com.badlogic.gdx.utils.CharArray: void sort()
com.badlogic.gdx.math.WindowedMean: int getWindowSize()
com.badlogic.gdx.graphics.GL30: void glUniform1uiv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: boolean hasNext
com.badlogic.gdx.ApplicationLogger: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.IntSet$IntSetIterator: void reset()
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.glutils.GLVersion glVersion
com.badlogic.gdx.utils.Timer: void stop()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(byte)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: VerticalGroup()
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: ModelNode()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void setUsage(int)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: boolean jniIsLimitEnabled(long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHoriAdvance(long)
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: void remove()
com.badlogic.gdx.graphics.profiling.GLErrorListener: com.badlogic.gdx.graphics.profiling.GLErrorListener THROWING_LISTENER
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean has(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: boolean edges
androidx.appcompat.widget.AppCompatSpinner: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: Obstacle(int,int[],java.util.ArrayList)
com.badlogic.gdx.graphics.GL30: int GL_RGB8I
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.math.Intersector: float intersectRayRay(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.Graphics: boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
com.badlogic.gdx.utils.IntMap: IntMap(com.badlogic.gdx.utils.IntMap)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: float getWidth()
com.badlogic.gdx.graphics.PixmapIO$CIM
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameteri(int,int,int)
com.badlogic.gdx.assets.AssetManager: void setLogger(com.badlogic.gdx.utils.Logger)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void setEmissionMode(com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode)
com.esotericsoftware.kryo.util.IdentityMap$Entries: void remove()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_EXTERNAL_STREAM
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintList(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: java.lang.CharSequence getText()
com.badlogic.gdx.physics.box2d.joints.WheelJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.utils.Array builders
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.badlogic.gdx.utils.ByteArray: byte[] toArray()
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTrnRotScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 setZero()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: boolean onKeyDown(int,android.view.KeyEvent)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void dispose()
com.badlogic.gdx.backends.android.AndroidInput: android.os.Vibrator vibrator
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)
com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility: com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility[] values()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer: DefaultSerializers$CollectionsSingletonListSerializer()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value spaceTop
com.badlogic.gdx.assets.loaders.SkinLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter)
com.badlogic.gdx.graphics.GL20: int GL_LEQUAL
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.scenes.scene2d.utils.ArraySelection getSelection()
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float stageTouchDownY
com.badlogic.gdx.backends.android.APKExpansionSupport: com.badlogic.gdx.backends.android.ZipResourceFile getResourceZipFile(java.lang.String[])
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_opacity
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.math.collision.BoundingBox bounds
com.badlogic.gdx.utils.TimeUtils: long nanoTime()
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: SizeByAction()
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart: com.badlogic.gdx.utils.ArrayMap bones
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 mul4x3(float[])
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 rotateAround(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: boolean equals(com.badlogic.gdx.graphics.g3d.environment.SpotLight)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.utils.Array groups
com.badlogic.gdx.Net$HttpMethods: java.lang.String DELETE
androidx.core.graphics.drawable.IconCompatParcelizer
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_CLEAR_VALUE
com.badlogic.gdx.graphics.GL30: int GL_SAMPLER_CUBE_SHADOW
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.scenes.scene2d.Actor getChild(int)
com.badlogic.gdx.utils.ObjectMap$MapIterator
com.badlogic.gdx.assets.loaders.BitmapFontLoader: com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data
com.esotericsoftware.kryo.util.IntMap$Keys: void remove()
com.badlogic.gdx.utils.LittleEndianInputStream
com.badlogic.gdx.utils.Json: void writeFields(java.lang.Object)
com.badlogic.gdx.utils.BinaryHeap: int hashCode()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_ADOBE_EXPERT
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void setLowMax(float)
com.badlogic.gdx.math.MathUtils: long random(long)
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleContentDescription(int)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void flush(com.badlogic.gdx.graphics.glutils.ShaderProgram,int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void error(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Skin$1: boolean ignoreUnknownField(java.lang.Class,java.lang.String)
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Entries entries1
com.badlogic.gdx.backends.android.AndroidGL20: void glClear(int)
com.esotericsoftware.kryo.io.ByteBufferInput: float readFloat(float,boolean)
com.badlogic.gdx.utils.ObjectFloatMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.PixmapIO$PNG: void setCompression(int)
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle tempDirectory(java.lang.String)
com.badlogic.gdx.math.Vector3: float dot(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration copy()
com.badlogic.gdx.graphics.Color
com.badlogic.gdx.utils.BinaryHeap: void up(int)
com.badlogic.gdx.math.Vector3: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer align
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int blendDstFuncAlpha
com.badlogic.gdx.utils.ObjectIntMap: void clear(int)
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: void consumeCustomData(int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidAudio audio
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_RENDER
com.google.android.material.chip.Chip: void setIconEndPadding(float)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.math.FloatCounter: float total
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int size
com.android.billingclient.api.ProxyBillingActivity
com.badlogic.gdx.backends.android.AndroidPreferences
com.badlogic.gdx.Graphics: boolean isFullscreen()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color PINK
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1: com.badlogic.gdx.backends.android.AndroidVisibilityListener this$0
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidGraphics graphics
com.esotericsoftware.kryo.io.UnsafeInput: long[] readLongs(int)
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics
com.badlogic.gdx.graphics.g2d.NinePatch: float middleHeight
com.badlogic.gdx.utils.IntIntMap$Entries: boolean hasNext()
com.esotericsoftware.jsonbeans.JsonException: boolean causedBy(java.lang.Throwable,java.lang.Class)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug getTableDebug()
com.badlogic.gdx.scenes.scene2d.actions.AfterAction
com.badlogic.gdx.input.GestureDetector: long lastTapTime
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(float)
com.HyperSphere.Connection.PacketObjects.Map.MapChange: java.lang.String getKey()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: float spawnHeight
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 rotateAroundRad(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getOriginX()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float deadzoneRadius
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: int getNumVertices()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void onCreate()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void cone(float,float,float,int)
com.badlogic.gdx.math.collision.Segment: Segment(float,float,float,float,float,float)
com.badlogic.gdx.math.collision.Sphere: int hashCode()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 lerp(com.badlogic.gdx.math.Vector3,float)
androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()
com.HyperSphere.Connection.PacketObjects.Misc.AlterableKey: java.lang.Object alterable
com.badlogic.gdx.utils.JsonReader: int json_error
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor getKeyboardFocus()
com.esotericsoftware.kryonet.EndPoint: void start()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: int api
androidx.appcompat.widget.SearchView: void setOnCloseListener(androidx.appcompat.widget.SearchView$OnCloseListener)
com.badlogic.gdx.graphics.g2d.TextureRegion: float u2
com.badlogic.gdx.input.GestureDetector$VelocityTracker: int numSamples
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: float getOffsetY()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item i
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setDuplicateBorder(boolean)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: byte nextResponseNum
com.badlogic.gdx.assets.AssetManager: void dispose()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean canCacheMoreN
com.badlogic.gdx.maps.MapProperties: void clear()
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryonet.Connection[] connections
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial
com.badlogic.gdx.utils.Base64Coder$CharMap: byte[] getDecodingMap()
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int kBitModelTotal
com.badlogic.gdx.graphics.glutils.FileTextureData: void consumeCustomData(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: float motorSpeed
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.Label: int intValue
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void setUVRange(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int L2F
com.badlogic.gdx.graphics.VertexAttributes: boolean equals(java.lang.Object)
com.badlogic.gdx.physics.box2d.RayCastCallback
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String toString()
com.badlogic.gdx.ScreenAdapter: void resume()
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float volY
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void addManagedFrameBuffer(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.GLFrameBuffer)
com.badlogic.gdx.assets.AssetManager: java.util.Stack tasks
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable: java.lang.Object[] array
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy packStrategy
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: void reset()
com.badlogic.gdx.utils.ObjectSet
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void removeAll()
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter
com.badlogic.gdx.utils.compression.lz.BinTree: boolean HASH_ARRAY
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.utils.Array glyphs
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getWind()
com.badlogic.gdx.graphics.g2d.PixmapPacker: void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean flipX
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 tmp2
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: short vertex(float[])
com.esotericsoftware.kryo.serializers.MapSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.utils.BufferUtils: java.nio.FloatBuffer newFloatBuffer(int)
com.badlogic.gdx.assets.AssetManager: void load(com.badlogic.gdx.assets.AssetDescriptor)
com.esotericsoftware.kryo.io.Output: Output(int)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int getNumberOfFaces()
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: IsometricTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.utils.PooledLinkedList: void iter()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGenTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: int DOWN
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setVelocityX(float)
com.badlogic.gdx.utils.ObjectSet: int PRIME1
com.esotericsoftware.kryonet.rmi.ObjectSpace: java.lang.Object connectionsLock
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String toString()
com.badlogic.gdx.utils.IdentityMap: int stashSize
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder m_LenDecoder
com.badlogic.gdx.utils.IntArray: void removeRange(int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getKerning(int,int,int)
com.badlogic.gdx.InputEventQueue: com.badlogic.gdx.utils.IntArray queue
com.badlogic.gdx.utils.IntSet: void clear()
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void setSpringDampingRatio(float)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void cone(float,float,float,float,float,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int padBottom
com.badlogic.gdx.backends.android.AndroidMouseHandler: AndroidMouseHandler()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setName(java.lang.String)
com.badlogic.gdx.utils.BinaryHeap: boolean isMaxHeap
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendEquation(int)
com.esotericsoftware.kryonet.util.ObjectIntMap: int hash2(int)
com.badlogic.gdx.scenes.scene2d.ui.Image
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundResource(int)
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_CLEAR_VALUE
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: int getDragTime()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean overscrollX
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting
com.badlogic.gdx.utils.FloatArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: boolean continuous
com.badlogic.gdx.backends.android.AndroidGraphics: void setCursor(com.badlogic.gdx.graphics.Cursor)
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidMonitor: AndroidGraphics$AndroidMonitor(com.badlogic.gdx.backends.android.AndroidGraphics,int,int,java.lang.String)
com.badlogic.gdx.utils.IdentityMap$MapIterator: boolean hasNext
androidx.fragment.app.Fragment: void onDetach()
com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature[] values()
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidClipboard clipboard
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void load(java.io.BufferedReader)
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
com.badlogic.gdx.graphics.glutils.ETC1: int ETC1_RGB8_OES
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPrefHeight()
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite
com.badlogic.gdx.physics.box2d.ChainShape: void getVertex(int,com.badlogic.gdx.math.Vector2)
androidx.appcompat.widget.ScrollingTabContainerView
com.badlogic.gdx.scenes.scene2d.ui.Button: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle style
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniSetMotorSpeed(long,float)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.kryonet.Client: void addListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.graphics.GL20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.GL20: boolean glIsTexture(int)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: com.badlogic.gdx.math.Vector3 target
com.badlogic.gdx.utils.ShortArray: void reverse()
com.badlogic.gdx.math.GeometryUtils: com.badlogic.gdx.math.Vector2 polygonCentroid(float[],int,int,com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryonet.util.ObjectIntMap: int remove(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2
com.badlogic.gdx.graphics.glutils.ShaderProgram: int fragmentShaderHandle
com.badlogic.gdx.graphics.glutils.FacedCubemapData: boolean isManaged()
com.badlogic.gdx.graphics.g2d.NinePatch: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.physics.box2d.BodyDef
com.badlogic.gdx.utils.ObjectMap$MapIterator: ObjectMap$MapIterator(com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.maps.tiled.TiledMapTileSet: void removeTile(int)
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String,boolean)
com.esotericsoftware.jsonbeans.Json: void writeObjectStart(java.lang.String)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.utils.PooledLinkedList: void clear()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDisable(int)
androidx.recyclerview.widget.RecyclerView: void setAdapter(androidx.recyclerview.widget.RecyclerView$Adapter)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: android.view.WindowManager getWindowManager()
androidx.fragment.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: float getAmountY()
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteSamplers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int ROUNDROBIN
com.badlogic.gdx.graphics.glutils.InstanceData: void dispose()
com.badlogic.gdx.input.RemoteInput: boolean justTouched()
com.esotericsoftware.minlog.Log: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.IntIntMap$Values: com.badlogic.gdx.utils.IntArray toArray()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
androidx.appcompat.widget.ButtonBarLayout
com.badlogic.gdx.utils.ObjectFloatMap: void push(java.lang.Object,float,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: boolean notifiedPreviewState
com.badlogic.gdx.scenes.scene2d.Actor: void setScaleY(float)
com.badlogic.gdx.utils.Predicate$PredicateIterator
com.badlogic.gdx.ApplicationAdapter: void render()
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh: com.badlogic.gdx.graphics.VertexAttribute[] attributes
com.badlogic.gdx.graphics.g2d.NinePatch: void load(com.badlogic.gdx.graphics.g2d.TextureRegion[])
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib3f(int,float,float,float)
com.esotericsoftware.kryo.io.FastInput: long readLong(boolean)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: float getScrollPixels()
com.badlogic.gdx.utils.PerformanceCounter: long lastTick
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean expand
com.badlogic.gdx.utils.IntFloatMap: int stashSize
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: DefaultArraySerializers$ByteArraySerializer()
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
androidx.fragment.app.FragmentContainerView: void setDrawDisappearingViewsLast(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: byte[] a
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: float getPackedColor()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Rectangle vScrollBounds
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_ACTIVE
com.badlogic.gdx.scenes.scene2d.actions.IntAction: int getEnd()
com.badlogic.gdx.scenes.scene2d.ui.Cell
com.badlogic.gdx.scenes.scene2d.ui.Cell: int getExpandX()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value)
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int RedOffset
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: PolygonSpriteBatch(int,int,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: float y
com.badlogic.gdx.utils.TimSort: java.lang.Object[] tmp
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector tmp
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter m
com.badlogic.gdx.graphics.glutils.MipMapGenerator: void setUseHardwareMipMap(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void bindMaterial(com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.math.Polyline: void dirty()
com.badlogic.gdx.backends.android.AndroidDaydream: int getLogLevel()
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction: void setScale(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glCheckFramebufferStatus(int)
com.badlogic.gdx.graphics.g2d.Animation: float getAnimationDuration()
com.badlogic.gdx.backends.android.AndroidGL30: void glSamplerParameterf(int,int,float)
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
com.esotericsoftware.kryo.io.KryoDataInput: void readFully(byte[],int,int)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Date
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer: PointSpriteRenderer(com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch)
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.ObjectMap tagToClass
com.badlogic.gdx.physics.box2d.Body: void setGravityScale(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape getShape()
com.badlogic.gdx.math.Rectangle: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: ImageButton(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Refresh
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType valueOf(java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer
com.badlogic.gdx.utils.LongArray: long get(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float fadeAlpha
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDECommentLen
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: TextField$TextFieldStyle(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.GL30 gl30
com.badlogic.gdx.graphics.glutils.ETC1TextureData: ETC1TextureData(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetFloatv(int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Skin: void add(java.lang.String,java.lang.Object,java.lang.Class)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean firstUpdate
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Values values1
com.esotericsoftware.jsonbeans.JsonValue: void set(java.lang.String)
com.badlogic.gdx.utils.ArrayMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream: byte[] getBuffer()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean loadGlyph(int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean mGLESDriverCheckComplete
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void init()
com.badlogic.gdx.math.Vector3: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: boolean ownsBuffer
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool: void flush()
com.badlogic.gdx.utils.DataOutput: void writeString_slow(java.lang.String,int,int)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling[] $VALUES
com.badlogic.gdx.Input$Keys: int F5
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int Pb
androidx.fragment.app.Fragment: java.lang.Object getEnterTransition()
androidx.fragment.app.Fragment: void performConfigurationChanged(android.content.res.Configuration)
com.badlogic.gdx.graphics.GL30: int GL_RG_INTEGER
com.badlogic.gdx.utils.FloatArray: void addAll(float[])
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: boolean isLimitEnabled()
com.badlogic.gdx.utils.compression.lzma.Base: int kMatchMinLen
com.badlogic.gdx.net.NetJavaSocketImpl
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowIn pow3In
com.badlogic.gdx.utils.IntMap$MapIterator: boolean valid
com.badlogic.gdx.scenes.scene2d.Stage: void clear()
com.esotericsoftware.kryo.serializers.FieldSerializer: void rebuildCachedFields(boolean)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue
com.esotericsoftware.kryonet.Listener$ReflectionListener: void received(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetShaderInfoLog(int)
com.esotericsoftware.kryo.io.FastInput: FastInput(byte[],int,int)
com.badlogic.gdx.utils.Queue: java.lang.Object removeLast()
com.badlogic.gdx.graphics.GL30: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.badlogic.gdx.utils.ObjectIntMap$Values: int next()
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: float getAlpha()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_NORMAL
com.badlogic.gdx.math.Interpolation$13: float apply(float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetUpperLimit(long)
com.badlogic.gdx.utils.JsonWriter$JsonObject: boolean array
com.badlogic.gdx.scenes.scene2d.ui.Stack: float minHeight
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter normalUVTransform
androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float getFrequency()
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegion(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g2d.BitmapFont: int LOG2_PAGE_SIZE
com.badlogic.gdx.scenes.scene2d.ui.Window: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: void load(com.badlogic.gdx.graphics.Cubemap$CubemapSide,com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: boolean canBeNull
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter specularColor
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float tapSquareSize
com.badlogic.gdx.utils.Json: void writeField(java.lang.Object,java.lang.String)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Vector2 bottomRight
com.esotericsoftware.kryo.KryoException: KryoException(java.lang.Throwable)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGetUniformLocation(int,java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getType(java.lang.reflect.Constructor)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: boolean logWarning
com.badlogic.gdx.utils.viewport.Viewport: void setScreenPosition(int,int)
com.esotericsoftware.kryonet.Connection: int lastPingID
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int pointer
com.badlogic.gdx.utils.GdxNativesLoader
com.esotericsoftware.kryo.serializers.FieldSerializer: void removeField(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask: com.badlogic.gdx.scenes.scene2d.ui.TextField this$0
com.badlogic.gdx.utils.reflect.Method: boolean isNative()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.utils.Array: boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker createStroker()
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: float getAmountHeight()
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction: RemoveActorAction()
com.badlogic.gdx.math.Bresenham2$1: java.lang.Object newObject()
androidx.fragment.app.Fragment: java.lang.Object USE_DEFAULT_TRANSITION
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: ActorGestureListener(float,float,float,float)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void flush()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_NONE
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel: float[] data
com.badlogic.gdx.utils.Bits: int nextSetBit(int)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: java.util.Iterator iterator()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getChipStrokeColor()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillAlpha(float)
com.badlogic.gdx.net.NetJavaImpl$1: java.lang.Thread newThread(java.lang.Runnable)
com.badlogic.gdx.graphics.g3d.ModelCache$1
com.badlogic.gdx.input.RemoteSender
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setVertexAttribute(java.lang.String,int,int,boolean,int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void updateIndices(int,short[],int,int)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: int writeVarInt(int,boolean)
com.badlogic.gdx.math.Rectangle: boolean contains(com.badlogic.gdx.math.Circle)
com.badlogic.gdx.Graphics$BufferFormat: boolean coverageSampling
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getYppem(long)
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter: boolean flip
com.badlogic.gdx.graphics.GL20: int GL_LINK_STATUS
com.google.android.material.chip.Chip: void setChipCornerRadiusResource(int)
com.badlogic.gdx.utils.BufferUtils: void transformV3M4Jni(float[],int,int,float[],int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getDescender()
com.esotericsoftware.kryo.io.ByteBufferInput: void setInputStream(java.io.InputStream)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void index(short,short,short,short,short,short)
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_IsMatchDecoders
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isLoaded(java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: float scaleV
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer: DefaultSerializers$TreeMapSerializer()
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context)
com.badlogic.gdx.physics.box2d.Joint: float[] tmp
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void matchMotion(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect: com.badlogic.gdx.utils.Pool pool
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getSpace()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int triangleIndex
com.badlogic.gdx.graphics.GL20: int GL_ALIASED_LINE_WIDTH_RANGE
com.badlogic.gdx.physics.box2d.Contact: void setTangentSpeed(float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void begin()
com.badlogic.gdx.backends.android.AndroidGraphics: int frames
com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[],java.util.Comparator,int,int)
com.badlogic.gdx.assets.loaders.TextureAtlasLoader: java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter: com.badlogic.gdx.math.Vector3 TMP_V1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: long implementedFlags
com.badlogic.gdx.utils.compression.rangecoder.Decoder: void SetStream(java.io.InputStream)
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: java.lang.String Seffect
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void dispose()
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.utils.FloatArray: FloatArray(com.badlogic.gdx.utils.FloatArray)
com.badlogic.gdx.utils.Base64Coder: java.lang.String decodeString(java.lang.String,boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None: int[] indices
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String IfUnmodifiedSince
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType[] values()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accellerationChannel
com.esotericsoftware.kryonet.rmi.ObjectSpace$CachedMethod
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(float)
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction: boolean act(float)
com.badlogic.gdx.scenes.scene2d.ui.Skin: Skin(com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.badlogic.gdx.graphics.glutils.GLVersion
com.badlogic.gdx.math.Interpolation$6
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.TimeZone)
com.badlogic.gdx.math.Vector3: Vector3(float[])
com.badlogic.gdx.Input$Keys: int F3
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer: void endChunk(java.io.DataOutputStream)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: long[] meanTime
com.esotericsoftware.kryo.io.ByteBufferInput
com.badlogic.gdx.scenes.scene2d.actions.IntAction
com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField: java.lang.Object getField(java.lang.Object)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.ObjectMap getContext()
com.esotericsoftware.kryo.io.Input: int require(int)
com.badlogic.gdx.math.Interpolation$2
com.google.android.material.textfield.TextInputLayout: void setHintTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.physics.box2d.World: long jniCreateMouseJoint(long,long,long,boolean,float,float,float,float,float)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int totalRenderCalls
com.esotericsoftware.kryo.io.ByteBufferInput: double[] readDoubles(int)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ETag
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable delete(int,int)
com.badlogic.gdx.graphics.GL30: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.IntMap: boolean containsKeyStash(int)
com.badlogic.gdx.graphics.glutils.GLVersion: int getMinorVersion()
com.badlogic.gdx.Input$Keys: int BUTTON_Z
com.esotericsoftware.kryonet.UdpConnection: int send(com.esotericsoftware.kryonet.Connection,java.lang.Object,java.net.SocketAddress)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader()
com.badlogic.gdx.utils.Array: int hashCode()
com.badlogic.gdx.graphics.g2d.Animation: int getKeyFrameIndex(float)
com.badlogic.gdx.backends.android.AndroidGL20: void glDepthRangef(float,float)
com.badlogic.gdx.graphics.VertexAttribute: VertexAttribute(int,int,java.lang.String,int)
com.badlogic.gdx.InputProcessor: boolean touchDown(int,int,int,int)
com.badlogic.gdx.maps.MapLayers: com.badlogic.gdx.utils.Array getByType(java.lang.Class,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node add(com.badlogic.gdx.utils.BinaryHeap$Node)
com.badlogic.gdx.scenes.scene2d.ui.Window: Window(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: HexagonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch)
com.esotericsoftware.kryonet.rmi.ObjectSpace$1
com.badlogic.gdx.physics.box2d.ContactListener: void endContact(com.badlogic.gdx.physics.box2d.Contact)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean keyDown(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform4iv(int,int,int[],int)
com.badlogic.gdx.utils.ObjectMap$Keys: ObjectMap$Keys(com.badlogic.gdx.utils.ObjectMap)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: MethodWriter(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int)
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String getString(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGenBuffer()
com.badlogic.gdx.scenes.scene2d.ui.Slider: com.badlogic.gdx.math.Interpolation visualInterpolationInverse
com.badlogic.gdx.scenes.scene2d.ui.Skin: java.lang.Object get(java.lang.String,java.lang.Class)
com.esotericsoftware.kryo.serializers.ObjectField
com.badlogic.gdx.utils.NumberUtils: float intToFloatColor(int)
com.badlogic.gdx.Input: boolean isKeyPressed(int)
com.esotericsoftware.kryo.io.Input: byte[] buffer
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setupOverscroll(float,float,float)
com.esotericsoftware.kryonet.util.TcpIdleSender: java.lang.Object next()
com.badlogic.gdx.backends.android.AndroidAudio: void resume()
com.badlogic.gdx.utils.ObjectMap$MapIterator: int currentIndex
com.google.android.material.chip.ChipGroup: void setDividerDrawableHorizontal(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: void dispose()
com.badlogic.gdx.graphics.glutils.FrameBuffer: FrameBuffer(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: boolean rendered
com.badlogic.gdx.utils.IntMap$MapIterator: com.badlogic.gdx.utils.IntMap map
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: java.lang.String getDefaultFragmentShader()
com.badlogic.gdx.utils.LongMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.graphics.Mesh: java.util.Map meshes
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: float[] timeline
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.g3d.utils.RenderContext
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setFlipVertically(boolean)
androidx.appcompat.widget.LinearLayoutCompat: int getBaselineAlignedChildIndex()
com.badlogic.gdx.math.Quaternion: float len()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float highMin
com.badlogic.gdx.scenes.scene2d.Stage: boolean isDebugAll()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getRotation()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Group getParent()
com.badlogic.gdx.scenes.scene2d.ui.Skin$4
com.badlogic.gdx.backends.android.ZipResourceFile: int kLFHSignature
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void stopEglContextLocked()
com.badlogic.gdx.backends.android.AndroidInput: void registerSensorListeners()
com.badlogic.gdx.graphics.g2d.GlyphLayout: GlyphLayout(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color ROYAL
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: java.lang.reflect.Method getMethod
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: AtlasTmxMapLoader()
com.badlogic.gdx.utils.viewport.ExtendViewport: ExtendViewport(float,float,float,float,com.badlogic.gdx.graphics.Camera)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: int[] i
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: com.badlogic.gdx.math.Vector3 tmpV1
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef: float maxTorque
com.badlogic.gdx.utils.ObjectMap: void putAll(com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature[] values()
com.badlogic.gdx.scenes.scene2d.ui.Window$3: boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: java.lang.String SeffectUponThrowableCompletion
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 tmp2
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None: void ensureCapacity(int)
com.badlogic.gdx.utils.Json: void readField(java.lang.Object,java.lang.String,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.input.RemoteInput: int getX(int)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1: AnimationController$1(com.badlogic.gdx.graphics.g3d.utils.AnimationController)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Graphics getGraphics()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getDimensions(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetOptimum(int)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: boolean isManaged()
com.badlogic.gdx.backends.android.AndroidInput: android.content.Context context
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 untransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: boolean J
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: boolean genMipMaps
com.esotericsoftware.kryonet.Listener$LagListener$1: void run()
com.badlogic.gdx.utils.IntIntMap$Keys: IntIntMap$Keys(com.badlogic.gdx.utils.IntIntMap)
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: float getTime()
com.badlogic.gdx.graphics.Texture$1
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean useMipMaps()
com.badlogic.gdx.scenes.scene2d.ui.TextField: char BACKSPACE
com.badlogic.gdx.utils.BufferUtils: void copy(long[],int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.FloatFrameBuffer build()
com.badlogic.gdx.maps.tiled.TmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.utils.ObjectMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Values values1
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getVertBearingX()
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowOut pow3Out
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.Array loadQueue
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useGLSurfaceView20API18
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: ParticleEffect()
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: com.esotericsoftware.kryo.Serializer getSerializer()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void notifyIconDropped()
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_VELOCITY
com.badlogic.gdx.input.RemoteInput: void setCatchMenuKey(boolean)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void end()
com.badlogic.gdx.math.Polyline: void setVertices(float[])
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType StaticBody
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys: void reset()
com.badlogic.gdx.graphics.TextureArray: TextureArray(boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.files.FileHandle[])
com.badlogic.gdx.graphics.GL30: void glUniform3fv(int,int,float[],int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsRenderbuffer(int)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void setSelection(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int getItem(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel)
com.badlogic.gdx.utils.Predicate$PredicateIterator: boolean peeked
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Matrix3 TMP_M3
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glEnableVertexAttribArray(int)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void setBlendMode(com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode)
com.google.android.material.appbar.AppBarLayout: void setLiftOnScrollTargetViewId(int)
com.badlogic.gdx.graphics.GL30: int GL_MAP_INVALIDATE_RANGE_BIT
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.utils.LongArray: void removeRange(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int CHAR
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useImmersiveMode
com.badlogic.gdx.scenes.scene2d.Stage: boolean touchDown(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void end()
androidx.fragment.app.Fragment: java.lang.Boolean mIsPrimaryNavigationFragment
com.badlogic.gdx.scenes.scene2d.ui.Skin: void remove(java.lang.String,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getMinWidth()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 slerp(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.utils.ObjectIntMap$Keys: boolean hasNext()
com.badlogic.gdx.math.Vector2: boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: void resetCounts()
com.badlogic.gdx.scenes.scene2d.Actor: void setY(float,int)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentLanguage
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DLOAD
com.badlogic.gdx.utils.Pools: void freeAll(com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToRotation(float)
com.badlogic.gdx.input.RemoteInput: boolean isButtonPressed(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float computedPadRight
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Object[] copy(com.esotericsoftware.kryo.Kryo,java.lang.Object[])
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table bottom()
com.esotericsoftware.kryo.util.IdentityObjectIntMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.graphics.g3d.Model: Model(com.badlogic.gdx.graphics.g3d.model.data.ModelData)
com.badlogic.gdx.backends.android.AndroidApplication: long getNativeHeap()
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType AndroidGL
com.badlogic.gdx.utils.IntArray: void addAll(int[],int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: BillboardParticleBatch()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Vector3 transform(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: void onMeasure(int,int)
androidx.appcompat.widget.Toolbar: void setLogo(int)
com.badlogic.gdx.math.WindowedMean: float[] values
com.badlogic.gdx.assets.AssetManager: void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader)
androidx.appcompat.widget.AppCompatRadioButton: void setBackgroundResource(int)
com.esotericsoftware.kryo.util.IntMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsPositionOffset
com.badlogic.gdx.graphics.g3d.Attributes: com.badlogic.gdx.utils.Array get(com.badlogic.gdx.utils.Array,long)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteShader(int)
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_BINDING_3D
com.badlogic.gdx.utils.BufferUtils: BufferUtils()
com.badlogic.gdx.Graphics: com.badlogic.gdx.graphics.Cursor newCursor(com.badlogic.gdx.graphics.Pixmap,int,int)
androidx.recyclerview.widget.RecyclerView: void setViewCacheExtension(androidx.recyclerview.widget.RecyclerView$ViewCacheExtension)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: ProgressBar(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.utils.Json: java.lang.String convertToString(java.lang.Object)
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_SIGNED_R11_EAC
com.badlogic.gdx.math.Affine2: boolean isTranslation()
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: com.badlogic.gdx.math.Vector3 tmpV2
com.badlogic.gdx.utils.Pool: com.badlogic.gdx.utils.Array freeObjects
com.badlogic.gdx.utils.ScreenUtils: ScreenUtils()
com.badlogic.gdx.math.DelaunayTriangulator: int INSIDE
com.badlogic.gdx.scenes.scene2d.ui.Stack: Stack(com.badlogic.gdx.scenes.scene2d.Actor[])
com.badlogic.gdx.utils.ByteArray: byte[] setSize(int)
com.badlogic.gdx.utils.LongMap$Entry: long key
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Class[] returnTypes
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: int getterAccessIndex
com.badlogic.gdx.utils.FloatArray: void shuffle()
com.badlogic.gdx.backends.android.AndroidSound: long loop(float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getDefaultHintTextColor()
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.Model loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Rectangle cullingArea
com.badlogic.gdx.backends.android.AndroidMouseHandler: int deltaX
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int FLOAT
com.esotericsoftware.jsonbeans.Json: void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.File)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.MassData getMassData()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: boolean L
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: FieldSerializerGenericsUtil(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.Texture: com.badlogic.gdx.assets.AssetManager assetManager
com.esotericsoftware.kryo.util.IntMap: IntMap()
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.math.Vector: boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.backends.android.AndroidSound: com.badlogic.gdx.utils.IntArray streamIds
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: int UP
com.badlogic.gdx.graphics.Mesh: void getIndices(int,int,short[],int)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_MAX_ANISOTROPY_EXT
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPadLeft()
androidx.recyclerview.widget.RecyclerView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)
com.badlogic.gdx.scenes.scene2d.Stage: boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.Vector2 project(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float getLeftWidth()
com.esotericsoftware.kryo.io.Output: int intLength(int,boolean)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE4
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: void update()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.graphics.g3d.particles.ParticleController copy()
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.Array runnables
com.esotericsoftware.kryo.serializers.CollectionSerializer: boolean elementsCanBeNull
com.badlogic.gdx.Files: java.lang.String getExternalStoragePath()
com.esotericsoftware.kryo.io.Input: void readBytes(byte[])
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Entries entries2
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: android.os.Handler handler
com.badlogic.gdx.physics.box2d.joints.WeldJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.HyperSphere.Connection.PacketObjects.Misc.PathProgress: int pathAmt
com.badlogic.gdx.utils.OrderedSet: com.badlogic.gdx.utils.Array items
com.badlogic.gdx.graphics.GL30: int GL_RG16UI
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle: Touchpad$TouchpadStyle(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue child()
com.badlogic.gdx.backends.android.AndroidFileHandle: boolean isDirectory()
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: com.badlogic.gdx.math.Rectangle popScissors()
com.esotericsoftware.kryo.util.IdentityMap$Values
com.badlogic.gdx.utils.IntIntMap: int hashShift
com.badlogic.gdx.graphics.Colors: com.badlogic.gdx.utils.ObjectMap getColors()
com.badlogic.gdx.utils.JsonValue: int getInt(java.lang.String,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer: DefaultSerializers$CollectionsEmptyListSerializer()
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_MAT4x3
com.badlogic.gdx.utils.LongMap: boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: com.badlogic.gdx.scenes.scene2d.utils.Drawable tint(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float)
com.badlogic.gdx.graphics.g2d.NinePatch: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.utils.IntSet: int mask
com.google.android.material.card.MaterialCardView: void setMaxCardElevation(float)
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Values values2
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DALOAD
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter)
com.badlogic.gdx.graphics.g2d.Sprite: com.badlogic.gdx.math.Rectangle bounds
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame h
com.google.android.material.card.MaterialCardView: void setRippleColorResource(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer
com.badlogic.gdx.backends.android.AndroidInput: boolean keyboardAvailable
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(java.nio.ByteBuffer,int)
com.badlogic.gdx.assets.loaders.MusicLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter)
com.esotericsoftware.jsonbeans.ObjectMap$Keys: ObjectMap$Keys(com.esotericsoftware.jsonbeans.ObjectMap)
com.badlogic.gdx.utils.ArrayMap$Values: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)
androidx.fragment.app.DialogFragment
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.utils.JsonValue: java.lang.String trace()
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters: TmxMapLoader$Parameters()
com.badlogic.gdx.utils.ArrayMap$Values: void reset()
com.badlogic.gdx.utils.Json: void setQuoteLongValues(boolean)
com.badlogic.gdx.utils.BufferUtils: long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int,float)
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy: void beforeGroup(int,com.badlogic.gdx.utils.Array)
com.google.android.material.textfield.TextInputLayout: int getBaseline()
com.esotericsoftware.jsonbeans.Json: void writeArrayEnd()
com.badlogic.gdx.graphics.Camera: void rotate(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.graphics.g2d.PolygonBatch: int getBlendDstFunc()
com.badlogic.gdx.utils.ObjectMap: java.lang.Object[] valueTable
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: int CPU_SIZE_AND_ROTATION_OFFSET
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToRotation(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.SpriteCache: void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
androidx.fragment.app.Fragment: android.animation.Animator getAnimator()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] getMotionValues()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Connection newConnection()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: void setCell(int,int,com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.util.IntMap: int capacity
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_RENDER_MODE_LCD
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGetUniformBlockIndex(int,java.lang.String)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glCompileShader(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String getLog()
com.badlogic.gdx.utils.Timer: boolean isEmpty()
com.badlogic.gdx.utils.Array: com.badlogic.gdx.utils.Predicate$PredicateIterable predicateIterable
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float)
com.HyperSphere.Connection.PacketObjects.Map.InteractiveObject
com.badlogic.gdx.utils.LongMap: void clear(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1: com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.Array stack
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback: void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector setLength(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: char[] b
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer getRenderer()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptySetSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.input.RemoteInput: int getY(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: boolean hasNext
com.badlogic.gdx.graphics.g2d.BitmapFont: void setColor(float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: float getRotatedPackedHeight()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Matrix3 TMP_M3
com.badlogic.gdx.backends.android.AndroidGL30: void glGenSamplers(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.io.Input: int read()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector)
com.badlogic.gdx.maps.tiled.TiledMapTile: void setId(int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void vertex(float,float,float)
com.badlogic.gdx.assets.loaders.AssetLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setCol(float,float,float,float)
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean SetNumFastBytes(int)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.graphics.g2d.PolygonBatch: int getBlendSrcFunc()
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void allocParticlesData(int)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float getY()
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue child()
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
com.badlogic.gdx.math.EarClippingTriangulator: float[] vertices
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: com.badlogic.gdx.graphics.VertexAttributes attributes
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver: ImageResolver$TextureAtlasImageResolver(com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.badlogic.gdx.graphics.g3d.model.data.ModelData: java.lang.String id
com.badlogic.gdx.utils.AtomicQueue: java.util.concurrent.atomic.AtomicInteger readIndex
com.badlogic.gdx.utils.ArrayMap$Entries: void reset()
com.badlogic.gdx.graphics.GLTexture: GLTexture(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getSpaceTop()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor,float,float,float,float,int)
com.esotericsoftware.reflectasm.MethodAccess: java.lang.String[] methodNames
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ARETURN
com.badlogic.gdx.utils.ObjectIntMap: java.lang.Object[] keyTable
com.badlogic.gdx.scenes.scene2d.Actor: void setParent(com.badlogic.gdx.scenes.scene2d.Group)
com.badlogic.gdx.graphics.glutils.FileTextureData: boolean useMipMaps()
com.badlogic.gdx.math.Ellipse: float height
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void moveCursorLine(int)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.Application: com.badlogic.gdx.Files getFiles()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup reverse(boolean)
com.badlogic.gdx.backends.android.AndroidInput: boolean requestFocus
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: RegionInfluencer$AspectTextureRegion()
com.esotericsoftware.kryo.util.IntMap: int PRIME2
com.esotericsoftware.kryo.util.MapReferenceResolver: java.util.ArrayList readObjects
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.scenes.scene2d.Actor getTouchDownTarget()
com.badlogic.gdx.math.MathUtils: float random()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOff
com.badlogic.gdx.graphics.g3d.decals.Decal: void translate(float,float,float)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config: DepthShader$Config(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: float opacity
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup space(float)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] $VALUES
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform specularTexture
com.badlogic.gdx.graphics.GL20: void glBlendColor(float,float,float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int mAlphaSize
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String prettyPrint(com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings)
com.esotericsoftware.kryo.io.Output: void writeChar(char)
com.badlogic.gdx.assets.loaders.MusicLoader: com.badlogic.gdx.audio.Music loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter)
com.esotericsoftware.jsonbeans.JsonValue: boolean getBoolean(int)
com.badlogic.gdx.graphics.g2d.Sprite: float[] getVertices()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BUFFER_START
com.badlogic.gdx.graphics.GL20: boolean glIsShader(int)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 tmpVector
com.esotericsoftware.kryo.io.KryoObjectInput: int read(byte[])
com.badlogic.gdx.backends.android.AndroidDaydream$1: void pause()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment mTarget
com.badlogic.gdx.math.Polygon: float rotation
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: java.lang.String toString()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.ObjectMap assetDependencies
com.badlogic.gdx.utils.JsonReader: void startObject(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void set(com.badlogic.gdx.graphics.g3d.particles.ParticleController)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeString_slow(java.lang.CharSequence,int,int)
com.badlogic.gdx.utils.IntFloatMap$MapIterator
com.google.android.material.textfield.TextInputEditText: com.google.android.material.textfield.TextInputLayout getTextInputLayout()
com.badlogic.gdx.utils.compression.lz.BinTree: int kStartMaxLen
com.badlogic.gdx.Input: boolean isTouched(int)
com.badlogic.gdx.scenes.scene2d.Stage: float getWidth()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: CheckBox$CheckBoxStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.physics.box2d.Contact: void setEnabled(boolean)
com.badlogic.gdx.utils.ArrayMap$Keys
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean drawJoints
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBlendColor(float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int h
com.badlogic.gdx.physics.box2d.Shape: int jniGetType(long)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetIntegerv(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL30: void glGenQueries(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: com.badlogic.gdx.utils.Array buttons
com.badlogic.gdx.utils.I18NBundle: java.lang.String DEFAULT_ENCODING
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean pan(float,float,float,float)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: com.badlogic.gdx.graphics.glutils.ShaderProgram createDistanceFieldShader()
com.badlogic.gdx.utils.SharedLibraryLoader: java.lang.String crc(java.io.InputStream)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.LongMap bodies
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel: ParallelArray$IntChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,int,int)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int depthStencilPackedBufferHandle
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glClear(int)
com.badlogic.gdx.utils.compression.lzma.Encoder: byte[] g_FastPos
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: SpawnInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_OLD_LATIN_2
com.badlogic.gdx.math.Vector: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float flingTimer
com.badlogic.gdx.graphics.g3d.Attributes: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.Color checkedOverFontColor
androidx.fragment.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)
com.badlogic.gdx.graphics.glutils.ETC1TextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void scale(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: java.nio.FloatBuffer buffer
com.HyperSphere.Connection.PacketObjects.Purchase.Purchaseable: short device_type
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,float)
com.badlogic.gdx.math.Interpolation$6: float apply(float)
com.badlogic.gdx.net.NetJavaSocketImpl: NetJavaSocketImpl(java.net.Socket,com.badlogic.gdx.net.SocketHints)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: void drawThrowable()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String)
com.badlogic.gdx.utils.ArrayMap$Values: void remove()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: int readInt(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell top()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField: ObjectField$ObjectDoubleField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2
com.badlogic.gdx.graphics.GL30: int GL_R16F
com.badlogic.gdx.scenes.scene2d.ui.TextField: int getSelectionStart()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: ParticleShader$Setters()
com.badlogic.gdx.math.Polyline: float originX
com.esotericsoftware.kryo.io.FastOutput: FastOutput(byte[],int)
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle createBundleImpl(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: ResourceData()
com.esotericsoftware.reflectasm.FieldAccess: java.lang.Object get(java.lang.Object,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Button: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle()
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue xOffsetValue
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE6
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float)
com.esotericsoftware.reflectasm.FieldAccess: double getDouble(java.lang.Object,int)
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral Pressure
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: boolean hasNormal
com.google.android.material.textfield.TextInputLayout: void setEndIconOnLongClickListener(android.view.View$OnLongClickListener)
com.badlogic.gdx.graphics.Texture$TextureWrap: int getGLEnum()
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean,boolean)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setTranslationZ(float)
com.badlogic.gdx.utils.StringBuilder: int indexOf(java.lang.String)
com.badlogic.gdx.physics.box2d.World$1: java.lang.Object newObject()
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: FrameBufferCubemap(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setAxis(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.JsonValue: void prettyPrint(com.badlogic.gdx.utils.JsonValue,java.io.Writer,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: com.badlogic.gdx.math.Vector2 getGroundAnchorB()
com.esotericsoftware.kryonet.Client: java.nio.channels.Selector selector
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.ui.Label: void computePrefSize()
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData)
com.badlogic.gdx.assets.AssetManager: boolean isLoaded(java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: int getNumMaxIndices()
com.esotericsoftware.kryo.serializers.BlowfishSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.input.GestureDetector: GestureDetector(float,float,float,float,com.badlogic.gdx.input.GestureDetector$GestureListener)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner111(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.InputEvent: float getStageY()
com.badlogic.gdx.assets.loaders.BitmapFontLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: void updateEdge(float,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.math.Matrix4: int M03
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getGLType()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer: ParticleChannels$Rotation2dInitializer()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float getPercentComplete()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void index(short)
com.badlogic.gdx.math.MathUtils: double BIG_ENOUGH_ROUND
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: boolean useMipMaps
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: void setShape(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape)
com.badlogic.gdx.utils.IntFloatMap
com.badlogic.gdx.math.BSpline: float locate(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: boolean fillParent
com.badlogic.gdx.utils.Bits: int nextClearBit(int)
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.graphics.g3d.Shader shader
com.badlogic.gdx.utils.IntMap$Entries: java.lang.Object next()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setBehind(boolean)
com.badlogic.gdx.utils.CharArray: char[] setSize(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,int)
com.google.android.material.textfield.TextInputLayout: void setErrorIconVisible(boolean)
com.esotericsoftware.kryo.util.IdentityMap$Entries: IdentityMap$Entries(com.esotericsoftware.kryo.util.IdentityMap)
com.badlogic.gdx.graphics.g3d.decals.Decal: float getHeight()
com.badlogic.gdx.utils.NumberUtils: double longBitsToDouble(long)
com.badlogic.gdx.utils.Bits: void andNot(com.badlogic.gdx.utils.Bits)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: java.lang.String Alias
com.badlogic.gdx.utils.SharedLibraryLoader: java.lang.String mapLibraryName(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: java.lang.String d
com.badlogic.gdx.utils.compression.lzma.Encoder: int _posStateMask
com.badlogic.gdx.physics.box2d.Body: void jniApplyAngularImpulse(long,float,boolean)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(float[])
com.esotericsoftware.kryo.io.Output: int writeFloat(float,float,boolean)
com.badlogic.gdx.audio.AudioDevice
com.badlogic.gdx.graphics.GL20: void glBlendFuncSeparate(int,int,int,int)
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: float[] data
com.badlogic.gdx.graphics.GL30: int GL_RGBA32UI
com.badlogic.gdx.graphics.g2d.Sprite: void setScale(float,float)
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setDrawJoints(boolean)
com.badlogic.gdx.utils.Queue: int hashCode()
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: int getIndex(java.lang.String,int)
com.badlogic.gdx.utils.LittleEndianInputStream: byte readByte()
com.esotericsoftware.kryo.Kryo: void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)
com.esotericsoftware.kryo.util.ObjectMap: void shrink(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] values()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder
com.badlogic.gdx.scenes.scene2d.ui.Tree: float getYSpacing()
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: com.badlogic.gdx.graphics.g3d.particles.ParticleSorter sorter
com.esotericsoftware.kryonet.Connection: com.esotericsoftware.kryonet.UdpConnection udp
com.badlogic.gdx.math.Interpolation$12: Interpolation$12()
com.badlogic.gdx.utils.IdentityMap$Values: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.scenes.scene2d.ui.Window$2: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.math.Vector3: boolean isUnit()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int r
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter)
com.badlogic.gdx.math.Interpolation$9
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: boolean reused
com.esotericsoftware.kryo.Serializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc obtain(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc)
com.badlogic.gdx.InputMultiplexer: InputMultiplexer(com.badlogic.gdx.InputProcessor[])
com.badlogic.gdx.graphics.glutils.IndexBufferObject: boolean isBound
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable knobBefore
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void matchXSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 mul(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.glutils.FileTextureData: boolean isManaged()
com.badlogic.gdx.graphics.g3d.decals.Decal: void setWidth(float)
com.badlogic.gdx.maps.tiled.TiledMapTile: com.badlogic.gdx.maps.MapObjects getObjects()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.ObjectMap assetTypes
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportImageTintList()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void a(int,int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item)
com.esotericsoftware.kryonet.Server: void removeListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver
com.badlogic.gdx.InputMultiplexer: void removeProcessor(int)
com.badlogic.gdx.graphics.GL20: int GL_FRONT_FACE
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[],float[])
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 linVelWorld
com.badlogic.gdx.graphics.g3d.particles.ResourceData
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setBlendFunction(int,int)
com.esotericsoftware.reflectasm.ConstructorAccess: java.lang.Object newInstance(java.lang.Object)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.maps.tiled.TiledMap getMap()
com.badlogic.gdx.backends.android.AndroidApplication$1: void resume()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable append(java.lang.CharSequence,int,int)
com.esotericsoftware.kryo.serializers.MapSerializer
com.badlogic.gdx.Input$Keys: int VOLUME_DOWN
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int renderCalls
com.badlogic.gdx.utils.LongMap$MapIterator
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape point
com.esotericsoftware.kryo.Serializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.utils.IntMap$Values
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void tap(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.utils.FloatArray floatArray
com.badlogic.gdx.utils.reflect.Annotation: java.lang.annotation.Annotation getAnnotation(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: TextField$TextFieldStyle()
com.badlogic.gdx.files.FileHandleStream: void mkdirs()
com.badlogic.gdx.graphics.Mesh: float calculateRadius(com.badlogic.gdx.math.Vector3,int,int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue: java.lang.Object value
com.badlogic.gdx.graphics.g3d.model.Animation: Animation()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCopyBufferSubData(int,int,int,int,int)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMinor()
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation: java.lang.String nodeId
com.badlogic.gdx.utils.viewport.Viewport: int getBottomGutterHeight()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V5
com.badlogic.gdx.assets.AssetManager: void unload(java.lang.String)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float originX
com.badlogic.gdx.graphics.Pixmap: int getGLType()
com.badlogic.gdx.math.Vector3: boolean epsilonEquals(float,float,float)
com.badlogic.gdx.utils.compression.lz.BinTree: void Normalize()
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: boolean staggerAxisX
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float rotation
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.BinaryHeap: boolean isEmpty()
com.badlogic.gdx.math.Interpolation$5: float apply(float)
com.badlogic.gdx.maps.objects.CircleMapObject: CircleMapObject()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter diffuseColor
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void setMaxParticleCount(int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion getAtlasRegion()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float clamp(float)
com.badlogic.gdx.scenes.scene2d.ui.List: int getSelectedIndex()
androidx.customview.view.AbsSavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getMotorForce(float)
androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: CubemapAttribute(long)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.esotericsoftware.kryonet.Server: void bind(int)
com.esotericsoftware.kryo.util.IntArray: java.lang.String toString()
androidx.fragment.app.Fragment: void performDetach()
com.badlogic.gdx.net.HttpRequestBuilder
com.esotericsoftware.kryonet.TcpConnection: long lastWriteTime
com.google.android.material.theme.MaterialComponentsViewInflater
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.Input$Keys: int CENTER
androidx.fragment.app.Fragment: boolean isInBackStack()
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: int Decode(com.badlogic.gdx.utils.compression.rangecoder.Decoder)
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(float,float,float,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.utils.OrderedMap getRects()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: java.lang.String toString()
com.badlogic.gdx.ApplicationAdapter: ApplicationAdapter()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void setUseGpu(boolean)
com.badlogic.gdx.scenes.scene2d.Stage: boolean keyUp(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_2
com.badlogic.gdx.utils.ObjectIntMap$Keys: void remove()
com.badlogic.gdx.utils.BufferUtils: void copy(double[],int,java.nio.Buffer,int)
com.esotericsoftware.jsonbeans.ObjectMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.utils.SnapshotArray: java.lang.Object pop()
com.badlogic.gdx.Input$Keys: int UP
com.badlogic.gdx.graphics.GL30: int GL_RGBA16UI
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String toString(java.lang.String)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: boolean ownsBatch
androidx.fragment.app.Fragment: void onHiddenChanged(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Slider: Slider(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.google.android.material.appbar.ViewOffsetBehavior: ViewOffsetBehavior()
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Entries entries()
com.badlogic.gdx.InputEventQueue: InputEventQueue(com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.Input$Keys: int SPACE
com.badlogic.gdx.backends.android.AndroidGraphics: java.lang.Object synch
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 inv()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: com.badlogic.gdx.utils.Array items
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetLowerLimit(long)
com.badlogic.gdx.graphics.g2d.Sprite: float originX
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollPercentX()
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Matrix4 computeTransform()
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)
com.HyperSphere.Connection.PacketObjects.Map.Mark: int posX
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER13
com.badlogic.gdx.graphics.g3d.ModelCache$1: java.lang.Object newObject()
com.google.android.material.appbar.AppBarLayout: int getMinimumHeightForVisibleOverlappingContent()
com.badlogic.gdx.backends.android.AndroidPreferences: com.badlogic.gdx.Preferences putLong(java.lang.String,long)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidGraphics graphics
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: RenderableShapeBuilder()
com.badlogic.gdx.physics.box2d.joints.MouseJointDef
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void disableVertexAttribute(int)
com.esotericsoftware.kryo.util.MapReferenceResolver
com.esotericsoftware.kryonet.ClientDiscoveryHandler: void onFinally()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.Array getAssetNames()
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: int weights
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single copy()
com.badlogic.gdx.backends.android.AndroidApplication: boolean isWaitingForAudio
com.esotericsoftware.kryo.io.ByteBufferInput: int read(byte[],int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: void EncodeMatched(com.badlogic.gdx.utils.compression.rangecoder.Encoder,byte,byte)
com.badlogic.gdx.scenes.scene2d.ui.Table$3
com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField
com.badlogic.gdx.utils.IntFloatMap: int hashShift
com.badlogic.gdx.utils.ShortArray: void add(short)
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: Decoder$LenDecoder(com.badlogic.gdx.utils.compression.lzma.Decoder)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: PrimitiveSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue)
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(java.io.OutputStream,int)
com.badlogic.gdx.math.Polyline: float y
com.badlogic.gdx.backends.android.AndroidDaydream: void runOnUiThread(java.lang.Runnable)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ICMPEQ
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.utils.ObjectMap transforms
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform3fv(java.lang.String,float[],int,int)
com.badlogic.gdx.graphics.g3d.Attributes: com.badlogic.gdx.graphics.g3d.Attribute get(java.lang.Class,long)
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.math.Vector2 tmp3
com.badlogic.gdx.graphics.g3d.Model: Model(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.graphics.g3d.utils.TextureProvider)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float prefHeight
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getFill()
com.esotericsoftware.kryo.KryoException
com.badlogic.gdx.math.collision.Ray: java.lang.String toString()
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: UnsafeCacheFields$UnsafeRegionField(long,long)
com.badlogic.gdx.scenes.scene2d.ui.Window: void setKeepWithinStage(boolean)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
com.badlogic.gdx.graphics.glutils.VertexArray
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setProgrammaticChangeEvents(boolean)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: ObjectSet$ObjectSetIterator(com.badlogic.gdx.utils.ObjectSet)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: short b(byte[],int)
androidx.appcompat.widget.AppCompatSpinner: void setAdapter(android.widget.Adapter)
com.badlogic.gdx.utils.ObjectFloatMap: float[] valueTable
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Vector2 getCenter(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.Registration: org.objenesis.instantiator.ObjectInstantiator instantiator
com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[],int)
com.badlogic.gdx.graphics.GL30: int GL_READ_FRAMEBUFFER
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _midCoder
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.LongMap$Keys: LongMap$Keys(com.badlogic.gdx.utils.LongMap)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float getTapSquareSize()
com.badlogic.gdx.utils.ShortArray: void addAll(short[])
com.badlogic.gdx.utils.reflect.Field: void set(java.lang.Object,java.lang.Object)
com.badlogic.gdx.net.HttpStatus: int SC_NO_CONTENT
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int currentVertexSize
com.google.android.material.chip.ChipGroup: ChipGroup(android.content.Context,android.util.AttributeSet)
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: float b
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean isWindows
com.badlogic.gdx.graphics.g3d.Attributes: int hashCode()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int[] mValue
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(float)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniGetLocalAxisA(long,float[])
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.utils.JsonValue: java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setNor(float,float,float)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: boolean layoutEnabled
com.badlogic.gdx.physics.box2d.FixtureDef: com.badlogic.gdx.physics.box2d.Filter filter
com.badlogic.gdx.graphics.g2d.Animation: float animationDuration
com.esotericsoftware.kryo.factories.SerializerFactory
com.badlogic.gdx.graphics.g2d.TextureRegion: com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(com.badlogic.gdx.graphics.Texture,int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean SetLcLpPb(int,int,int)
com.badlogic.gdx.math.Interpolation: float apply(float,float,float)
com.badlogic.gdx.physics.box2d.World: void setAutoClearForces(boolean)
com.esotericsoftware.reflectasm.FieldAccess: void insertSetPrimitive(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.util.ArrayList,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,boolean)
com.badlogic.gdx.utils.IntIntMap: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setBlendFunctionSeparate(int,int,int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy: java.util.Comparator comparator
com.badlogic.gdx.graphics.Mesh: Mesh(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: float height
com.badlogic.gdx.scenes.scene2d.ui.List: java.lang.Object getItemAt(float)
androidx.appcompat.widget.AppCompatCheckedTextView
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: boolean setValue(float)
com.esotericsoftware.kryo.serializers.FieldSerializer: FieldSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class[])
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue: CylinderSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int texCoordOffset
com.esotericsoftware.kryo.util.IdentityMap$Entries
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: java.lang.String g
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER14
com.badlogic.gdx.graphics.glutils.InstanceData: java.nio.FloatBuffer getBuffer()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getMinSplitAmount()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode[] values()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: boolean hasAcceleration
com.badlogic.gdx.utils.reflect.Constructor
com.badlogic.gdx.scenes.scene2d.ui.Slider: com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle getStyle()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Table getButtonTable()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1: com.badlogic.gdx.graphics.g3d.decals.DecalBatch this$0
com.esotericsoftware.kryonet.Client: java.lang.Thread updateThread
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float jniGetDampingRatio(long)
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_GREEN_SIZE
com.badlogic.gdx.utils.ObjectSet: void ensureCapacity(int)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean fieldsCanBeNull
com.badlogic.gdx.backends.android.AndroidInput: void cancelVibrate()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: int[] idx
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_GRAY4
com.esotericsoftware.kryonet.KryoSerialization: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType WeldJoint
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[],int,int)
com.esotericsoftware.minlog.Log: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setBlendFunction(int,int)
com.badlogic.gdx.utils.compression.lz.InWindow: int _keepSizeAfter
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: SpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue)
com.HyperSphere.Connection.PacketObjects.Entities.Player: java.lang.String clan
com.esotericsoftware.jsonbeans.Json: void writeType(java.lang.Class)
com.badlogic.gdx.utils.Json: boolean usePrototypes
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP_POSITIVE_Z
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: boolean isGlobal
com.badlogic.gdx.input.RemoteInput: int[] deltaX
com.esotericsoftware.kryonet.ConnectionValues: void flushTCPBuffer(com.esotericsoftware.kryonet.Connection)
com.google.android.material.textfield.TextInputLayout: void setHintTextAppearance(int)
com.badlogic.gdx.assets.loaders.ParticleEffectLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter)
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: void changed()
com.badlogic.gdx.graphics.g2d.ParticleEffect: boolean ownsTexture
com.badlogic.gdx.scenes.scene2d.InputListener: com.badlogic.gdx.math.Vector2 tmpCoords
com.badlogic.gdx.Input$Buttons: Input$Buttons()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: java.lang.String[] copy(com.esotericsoftware.kryo.Kryo,java.lang.String[])
com.badlogic.gdx.utils.Json$FieldMetadata: Json$FieldMetadata(com.badlogic.gdx.utils.reflect.Field)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform2iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getVertBearingY()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_FINAL
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ISUB
com.badlogic.gdx.math.CumulativeDistribution: float getInterval(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyMapSerializer
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_PosSlotDecoder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV5
com.badlogic.gdx.utils.reflect.Constructor: void setAccessible(boolean)
com.badlogic.gdx.graphics.g3d.decals.Decal: void translate(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: void setStart(float)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: int value
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: boolean ownsShader
com.badlogic.gdx.graphics.glutils.IndexArray: int getNumMaxIndices()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.Queue$QueueIterator: boolean hasNext()
com.esotericsoftware.kryonet.Listener$QueuedListener$4: Listener$QueuedListener$4(com.esotericsoftware.kryonet.Listener$QueuedListener,com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyAnimations(java.lang.Iterable)
com.badlogic.gdx.Net$HttpRequest: java.lang.String getContent()
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox inf()
com.badlogic.gdx.utils.Array: java.lang.Iterable select(com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.graphics.GL20: void glStencilMask(int)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.physics.box2d.JointDef$JointType getType()
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setDirection(float,float,float)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Touchable touchable
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider
com.badlogic.gdx.utils.PropertiesUtils: void storeImpl(com.badlogic.gdx.utils.ObjectMap,java.io.Writer,java.lang.String,boolean)
com.badlogic.gdx.files.FileHandleStream: java.io.OutputStream write(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label O
com.badlogic.gdx.physics.box2d.Body: void jniSetActive(long,boolean)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: boolean isSameLocale(java.util.Locale,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: float getTileHeight()
com.badlogic.gdx.backends.android.AndroidGL30: void glDrawElementsInstanced(int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setYSpacing(float)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void drawAdjusted(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: DynamicsModifier$Angular()
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.graphics.g2d.ParticleEmitter findEmitter(java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12: DefaultShader$Setters$12()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: long materialMask
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGetAttribLocation(int,java.lang.String)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getAsmFieldFactory()
com.google.android.material.textfield.TextInputLayout: void setEditText(android.widget.EditText)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getLocalVector(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.utils.Layout: void invalidateHierarchy()
com.badlogic.gdx.backends.android.AndroidApplication: void onActivityResult(int,int,android.content.Intent)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: void strokeBorder(com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker,boolean)
com.esotericsoftware.kryonet.TcpConnection: com.esotericsoftware.kryonet.Serialization serialization
com.badlogic.gdx.math.Matrix4: int M00
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer: ScaleInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: float moveOffset
com.esotericsoftware.reflectasm.MethodAccess: java.lang.String[] getMethodNames()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader M
com.badlogic.gdx.graphics.g2d.SpriteBatch: void dispose()
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType[] values()
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: float referenceAngle
com.badlogic.gdx.input.RemoteSender: int KEY_DOWN
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetLowerLimit(long)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object findKey(java.lang.Object,boolean)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDepthFunc(int)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float rotation
com.badlogic.gdx.graphics.glutils.FileTextureData: boolean isPrepared()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool
com.badlogic.gdx.math.FloatCounter
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void setCamera(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.graphics.g3d.model.data.ModelData: ModelData()
com.badlogic.gdx.utils.IntSet: java.lang.String toString()
com.badlogic.gdx.utils.JsonValue: JsonValue(boolean)
com.badlogic.gdx.utils.compression.lz.InWindow: int _keepSizeBefore
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: int getValue()
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportImageTintMode()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetUniformuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.JsonReader: byte[] _json_indicies
com.esotericsoftware.kryonet.Client: void stop()
com.badlogic.gdx.utils.ArrayMap: ArrayMap(boolean,int)
androidx.appcompat.widget.LinearLayoutCompat: void setShowDividers(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1: GLSurfaceView20API18$1(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18,android.view.View,boolean)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.async.AsyncExecutor$2: java.lang.Object call()
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float z2
com.esotericsoftware.kryo.io.ByteBufferInput: int read()
com.badlogic.gdx.graphics.g3d.Attributes
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool: com.badlogic.gdx.utils.Array usedMeshes
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getUnderlinePosition(long)
com.badlogic.gdx.backends.android.AndroidInput$3$3$1: com.badlogic.gdx.backends.android.AndroidInput$3$3 this$2
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int defaultCullFace
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight setPosition(float,float,float)
com.badlogic.gdx.graphics.GL20: void glViewport(int,int,int,int)
com.badlogic.gdx.Input$Keys: int NUMPAD_0
com.badlogic.gdx.graphics.g3d.Model: void dispose()
com.badlogic.gdx.physics.box2d.World: long jniCreatePulleyJoint(long,long,long,boolean,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.SpotLight)
com.badlogic.gdx.utils.JsonValue: double[] asDoubleArray()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void setMotorSpeed(float)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int numSetTexCoords
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _isRepG2
com.badlogic.gdx.Version: boolean isLowerEqual(int,int,int)
com.google.android.material.textfield.TextInputLayout: void setError(java.lang.CharSequence)
com.badlogic.gdx.graphics.glutils.ETC1: com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.backends.android.AndroidInput: int[] deltaY
com.badlogic.gdx.graphics.PixmapIO$PNG: com.badlogic.gdx.utils.ByteArray curLineBytes
com.badlogic.gdx.scenes.scene2d.InputEvent: int getScrollAmount()
com.badlogic.gdx.backends.android.AndroidGraphics: java.lang.String extensions
com.google.android.material.chip.Chip: com.google.android.material.animation.MotionSpec getShowMotionSpec()
com.esotericsoftware.kryonet.util.ObjectIntMap: int size
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int PUTSTATIC
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: TextureDescriptor(com.badlogic.gdx.graphics.GLTexture)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: boolean vertical
androidx.fragment.app.Fragment: int getStateAfterAnimating()
com.badlogic.gdx.utils.Json: void writeValue(java.lang.Object)
com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[],int,int,com.badlogic.gdx.utils.Base64Coder$CharMap)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: void resume()
com.badlogic.gdx.backends.android.AndroidInput: float azimuth
androidx.recyclerview.widget.RecyclerView: void setChildDrawingOrderCallback(androidx.recyclerview.widget.RecyclerView$ChildDrawingOrderCallback)
com.badlogic.gdx.utils.SnapshotArray: java.lang.Object removeIndex(int)
com.badlogic.gdx.utils.IdentityMap$Values: boolean hasNext()
com.badlogic.gdx.utils.GdxRuntimeException: GdxRuntimeException(java.lang.String,java.lang.Throwable)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: java.lang.String Peffect
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable: Skin$TintedDrawable()
com.badlogic.gdx.scenes.scene2d.ui.Tooltip$1: Tooltip$1(com.badlogic.gdx.scenes.scene2d.ui.Tooltip,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_DATA_SIZE
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT1
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Skin skin
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setPosition(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.Color: boolean equals(java.lang.Object)
com.badlogic.gdx.physics.box2d.WorldManifold: int numContactPoints
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle
com.badlogic.gdx.utils.compression.lz.InWindow: int _blockSize
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value padRight
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: void begin()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.IntArray localUniforms
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureIndices(int)
com.badlogic.gdx.graphics.GL30: int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] values()
com.esotericsoftware.kryo.io.UnsafeInput
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.math.Vector2: boolean epsilonEquals(float,float,float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void notifySurfaceChanged(int,int,int,boolean)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float)
com.badlogic.gdx.math.collision.BoundingBox: float getCenterY()
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node: com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node rightChild
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToRotationRad(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.NinePatch: int topLeft
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.scenes.scene2d.ui.Skin$4: com.badlogic.gdx.graphics.Color read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: void invalidate()
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: java.lang.Runnable runnable
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: int getId()
com.esotericsoftware.kryo.io.Output: void writeBytes(byte[],int,int)
com.esotericsoftware.kryo.util.MapReferenceResolver: boolean useReferences(java.lang.Class)
com.esotericsoftware.kryonet.UdpConnection: java.net.InetSocketAddress readFromAddress()
com.badlogic.gdx.physics.box2d.World: void setWarmStarting(boolean)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: float offsetX
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.Array setters
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle[] list()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void setActive(boolean)
com.badlogic.gdx.graphics.GL30: void glBindTransformFeedback(int,int)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object[] keys
com.badlogic.gdx.graphics.Pixmap: com.badlogic.gdx.graphics.Pixmap$Filter filter
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_SFNT
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.GL30 getGL30()
com.badlogic.gdx.scenes.scene2d.ui.Stack: void invalidate()
com.badlogic.gdx.utils.ShortArray: int lastIndexOf(char)
com.esotericsoftware.kryo.util.IntMap$MapIterator: int currentIndex
com.badlogic.gdx.graphics.GL20: int GL_ACTIVE_ATTRIBUTES
com.badlogic.gdx.graphics.g3d.RenderableProvider
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: void beforeGroup(int,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.math.Rectangle getBoundingRectangle()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void restart()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_RENDERER
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHoriAdvance()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_1
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Stack: float maxHeight
com.esotericsoftware.jsonbeans.JsonException: JsonException(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.audio.Music: float getVolume()
com.badlogic.gdx.utils.BooleanArray: void reverse()
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.assets.AssetManager manager
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec packedStencilDepthRenderBufferSpec
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: int objectID
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
androidx.appcompat.view.menu.ListMenuItemView: void setChecked(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$4
com.google.android.material.chip.Chip: void setIconStartPadding(float)
com.esotericsoftware.kryo.util.Util: java.lang.String string(java.lang.Object)
com.esotericsoftware.kryonet.Connection: void setKeepAliveTCP(int)
com.badlogic.gdx.utils.IntArray: void addAll(com.badlogic.gdx.utils.IntArray)
com.badlogic.gdx.ScreenAdapter: void dispose()
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void clear(int)
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable: java.util.Iterator iterator()
com.badlogic.gdx.utils.FloatArray: void clear()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: TextField$TextFieldStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPadTop()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: int length()
com.badlogic.gdx.utils.IntIntMap$Entries: void remove()
com.badlogic.gdx.graphics.glutils.FloatTextureData: int format
com.badlogic.gdx.graphics.GL20: int GL_COLOR_BUFFER_BIT
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: com.badlogic.gdx.files.FileHandle fontFile
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.utils.ObjectSet: boolean notEmpty()
com.badlogic.gdx.utils.IntArray: com.badlogic.gdx.utils.IntArray with(int[])
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
com.badlogic.gdx.Input$Keys: int O
com.badlogic.gdx.graphics.glutils.ShapeRenderer
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer$Tag
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager sGLThreadManager
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: FloatAction(float,float,float)
com.badlogic.gdx.utils.ObjectMap: java.lang.Object get(java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor mv
com.esotericsoftware.kryo.util.IdentityMap: void removeStashIndex(int)
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: com.badlogic.gdx.graphics.g3d.decals.GroupPlug unPlug(int)
com.badlogic.gdx.backends.android.AndroidDaydream: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: int usage
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer instance
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean equals(com.badlogic.gdx.graphics.g3d.shaders.DefaultShader)
com.badlogic.gdx.physics.box2d.Body: float getMass()
com.badlogic.gdx.utils.compression.lz.OutWindow: void Init(boolean)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: IndexBufferObjectSubData(int)
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean dragging
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer: Influencer()
com.badlogic.gdx.graphics.glutils.VertexArray: void invalidate()
com.google.android.material.textfield.TextInputEditText: void setTextInputLayoutFocusedRectEnabled(boolean)
com.esotericsoftware.kryonet.Listener$QueuedListener: void queue(java.lang.Runnable)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniGetLocalAxisA(long,float[])
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToScaling(float,float,float)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.math.Vector2 knobPosition
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: long getBitmap(long)
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)
com.badlogic.gdx.graphics.GL30: void glSamplerParameteri(int,int,int)
com.badlogic.gdx.graphics.GL20: int GL_MAX_TEXTURE_IMAGE_UNITS
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IAND
com.esotericsoftware.jsonbeans.JsonValue: byte asByte()
com.badlogic.gdx.physics.box2d.Transform
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: TextureAtlas$AtlasRegion(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion)
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.Color checkedFontColor
com.badlogic.gdx.scenes.scene2d.ui.Widget: void validate()
com.badlogic.gdx.graphics.GL30: void glStencilOpSeparate(int,int,int,int)
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type valueOf(java.lang.String)
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral Vibrator
com.badlogic.gdx.utils.IntSet: void addAll(com.badlogic.gdx.utils.IntArray,int,int)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidInput input
com.badlogic.gdx.graphics.g3d.Attribute: long register(java.lang.String)
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(int)
com.badlogic.gdx.math.Quaternion: void getSwingTwist(float,float,float,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: int FLOAT_BYTES
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: void checkGLESVersion()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: com.badlogic.gdx.utils.Array regions
com.esotericsoftware.kryo.io.UnsafeMemoryInput: long readLong()
com.badlogic.gdx.math.Intersector$SplitTriangle: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,float,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidSound: void resume(long)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: com.badlogic.gdx.math.Vector2 tmpCoords2
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color SALMON
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector3 dir
androidx.appcompat.widget.FitWindowsLinearLayout
androidx.appcompat.widget.DialogTitle
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: void update()
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setHideMotionSpecResource(int)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.esotericsoftware.kryonet.Listener$ThreadedListener
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer
com.badlogic.gdx.scenes.scene2d.Actor: void sizeBy(float,float)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: ZipResourceFile$ZipEntryRO(java.lang.String,java.io.File,java.lang.String)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetSensor(long,boolean)
com.badlogic.gdx.utils.ObjectIntMap$Entry
androidx.recyclerview.widget.LinearLayoutManager
com.badlogic.gdx.graphics.g2d.ParticleEffect: void save(java.io.Writer)
com.badlogic.gdx.utils.DataOutput: DataOutput(java.io.OutputStream)
com.esotericsoftware.jsonbeans.Json: void setOutputType(com.esotericsoftware.jsonbeans.OutputType)
com.badlogic.gdx.utils.StringBuilder
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void setTranslation(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void pack()
com.badlogic.gdx.assets.loaders.I18NBundleLoader
com.esotericsoftware.jsonbeans.Json: void writeFields(java.lang.Object)
com.google.android.material.button.MaterialButton: void setOnPressedChangeListenerInternal(com.google.android.material.button.MaterialButton$OnPressedChangeListener)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: com.badlogic.gdx.graphics.VertexAttributes attributes
com.badlogic.gdx.backends.android.AndroidApplication: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float)
com.badlogic.gdx.utils.IntIntMap: IntIntMap()
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int[] d
com.google.android.material.chip.Chip: void setChipIconSize(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.profiling.GLProfiler: int getShaderSwitches()
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER9
com.badlogic.gdx.backends.android.AndroidPreferences: java.util.Map get()
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter()
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 dim
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: boolean isUseGPU()
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: boolean isFlipHorizontally()
com.badlogic.gdx.utils.IntSet: void addAll(com.badlogic.gdx.utils.IntArray)
com.badlogic.gdx.math.Path: java.lang.Object valueAt(java.lang.Object,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11: DefaultShader$Setters$11()
com.badlogic.gdx.scenes.scene2d.ui.Slider: boolean calculatePositionAndValue(float,float)
com.badlogic.gdx.utils.ByteArray: byte peek()
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type valueOf(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector putUTF8(java.lang.String)
com.badlogic.gdx.physics.box2d.Body: float getAngularVelocity()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void throwEglException(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float[] getTimeline()
com.badlogic.gdx.backends.android.AndroidInput: float roll
com.badlogic.gdx.backends.android.AndroidPreferences: com.badlogic.gdx.Preferences put(java.util.Map)
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.Graphics: void setCursor(com.badlogic.gdx.graphics.Cursor)
com.badlogic.gdx.math.Vector3: java.lang.String toString()
com.badlogic.gdx.backends.android.AndroidNet: AndroidNet(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.maps.MapLayer: MapLayer()
com.badlogic.gdx.utils.UBJsonReader: long parseSize(java.io.DataInputStream,byte,boolean,long)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel modelInstanceChannel
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Input getInput(int)
com.badlogic.gdx.scenes.scene2d.actions.EventAction: boolean act(float)
com.badlogic.gdx.utils.ObjectFloatMap$Entries
com.badlogic.gdx.math.Vector3: boolean isZero()
com.badlogic.gdx.utils.XmlWriter: XmlWriter(java.io.Writer)
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode: com.badlogic.gdx.backends.android.AndroidGraphics this$0
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction: void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)
com.badlogic.gdx.scenes.scene2d.ui.Skin: java.lang.String find(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getPrefWidthValue()
com.badlogic.gdx.utils.ArrayMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entry next()
com.badlogic.gdx.utils.TimSort: int MIN_MERGE
androidx.appcompat.widget.AppCompatSpinner: int getDropDownWidth()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.utils.ObjectMap: int threshold
com.badlogic.gdx.scenes.scene2d.ui.Widget: float getMaxHeight()
com.badlogic.gdx.utils.Json: void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean tap(float,float,int,int)
com.esotericsoftware.kryonet.Listener$QueuedListener$4: void run()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: int nextIndex
com.esotericsoftware.kryonet.Connection: boolean isConnected
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float jniGetDampingRatio(long)
com.badlogic.gdx.audio.AudioDevice: int getLatency()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGenRenderbuffer()
com.esotericsoftware.jsonbeans.ObjectMap$Values: void toArray(java.util.ArrayList)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float highMin
com.badlogic.gdx.utils.SnapshotArray: com.badlogic.gdx.utils.SnapshotArray with(java.lang.Object[])
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.math.MathUtils: float randomTriangular(float,float,float)
com.esotericsoftware.kryo.serializers.FieldSerializer: java.util.List buildValidFieldsFromCachedFields(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[],com.esotericsoftware.kryo.util.IntArray)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Rectangle widgetCullingArea
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1: java.lang.Class val$type
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter shininess
com.badlogic.gdx.graphics.GL20: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: int getDefaultCullFace()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeLong(long)
com.badlogic.gdx.graphics.g3d.decals.Decal: int U4
com.badlogic.gdx.graphics.GL30: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.physics.box2d.joints.GearJointDef: float ratio
com.badlogic.gdx.graphics.GL30: int GL_MINOR_VERSION
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniSetLimits(long,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: int align
com.badlogic.gdx.maps.MapProperties: java.lang.Object get(java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void box(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)
com.badlogic.gdx.graphics.g3d.model.data.ModelData: com.badlogic.gdx.utils.Array materials
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Pow pow4
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.lang.String)
com.badlogic.gdx.graphics.GLTexture: void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawElementsInstanced(int,int,int,int,int)
com.badlogic.gdx.utils.ObjectSet: int threshold
com.badlogic.gdx.graphics.GL30: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.World: long jniCreateBody(long,int,float,float,float,float,float,float,float,float,boolean,boolean,boolean,boolean,boolean,float)
com.badlogic.gdx.scenes.scene2d.Group: void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int left
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void matchSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setFlickScrollTapSquareSize(float)
com.badlogic.gdx.physics.box2d.Transform: int POS_X
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGenRenderbuffer()
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType javascript
com.badlogic.gdx.graphics.GL30: void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getPixelMode(long)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.utils.IntArray: void clear()
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData: java.lang.String filename
com.badlogic.gdx.backends.android.AndroidAudioDevice: AndroidAudioDevice(int,boolean)
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.ObjectMap classToDefaultValues
com.badlogic.gdx.physics.box2d.Body: java.lang.Object getUserData()
com.badlogic.gdx.graphics.g3d.loader.MtlLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial getMaterial(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: int findIndex(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FSUB
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int getLastErrorCode()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: javax.microedition.khronos.egl.EGLContext mEglContext
com.esotericsoftware.kryo.util.IdentityObjectIntMap: java.lang.Object[] keyTable
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void setIndices(short[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] rowHeight
com.badlogic.gdx.input.RemoteSender: int SIZE
com.badlogic.gdx.scenes.scene2d.Stage: int mouseScreenY
com.esotericsoftware.kryo.io.Output: byte[] buffer
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: void setAlwaysActive(boolean)
com.badlogic.gdx.backends.android.AndroidGL30: void glUniform1uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform2fv(int,int,float[],int)
com.badlogic.gdx.backends.android.ZipResourceFile: void addPatchFile(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_MAT4x2
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: void prepare()
com.badlogic.gdx.utils.SortedIntList$Iterator: com.badlogic.gdx.utils.SortedIntList$Iterator reset()
com.esotericsoftware.kryo.util.IntMap: boolean containsValue(java.lang.Object,boolean)
com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings: JsonValue$PrettyPrintSettings()
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.math.EarClippingTriangulator: int computeSpannedAreaSign(float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int CPU_COLOR_OFFSET
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: com.badlogic.gdx.utils.compression.lzma.Decoder this$0
com.badlogic.gdx.backends.android.ZipResourceFile: int swapEndian(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int[] s_configAttribs2
com.badlogic.gdx.utils.IntMap: java.lang.Object zeroValue
com.badlogic.gdx.math.Matrix4: boolean hasRotationOrScaling()
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.ByteArray: int lastIndexOf(byte)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINECAP_ROUND
com.badlogic.gdx.graphics.GL20: int GL_SHADER_COMPILER
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.GL30: void glDeleteShader(int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.Color tmpColor0
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap
com.esotericsoftware.kryo.util.IdentityMap: com.esotericsoftware.kryo.util.IdentityMap$Entries entries()
com.badlogic.gdx.utils.compression.lzma.Base: int kMatchMaxLen
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight)
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
com.google.android.material.button.MaterialButton: void setBackgroundResource(int)
com.esotericsoftware.kryo.util.IdentityMap: void clear(int)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void update()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3fv(int,int,float[],int)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.Array getDependencies(java.lang.String)
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction: float getScale()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap clamp()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glAttachShader(int,int)
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy: PixmapPacker$GuillotineStrategy()
com.badlogic.gdx.utils.Base64Coder: byte[] decode(char[])
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector setZero()
com.esotericsoftware.kryo.io.ByteBufferInput: byte readByte()
com.esotericsoftware.kryonet.KryoSerialization
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void jniSetMaxForce(long,float)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void FlushStream()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_ambientTexture
com.badlogic.gdx.utils.DelayedRemovalArray: java.lang.Object[] setSize(int)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: float lengthB
com.badlogic.gdx.backends.android.AndroidGL20: int glGenBuffer()
com.badlogic.gdx.utils.ArrayMap$Keys: boolean hasNext()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearBufferiv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.Generics: Generics(com.esotericsoftware.kryo.Generics)
com.esotericsoftware.kryonet.util.ObjectIntMap: java.lang.String toString()
com.esotericsoftware.kryo.io.KryoObjectInput: void close()
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Keys keys2
com.HyperSphere.Connection.PacketObjects.Map.MapChange: MapChange()
com.badlogic.gdx.math.Intersector: boolean intersectRaySphere(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void begin()
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNALED
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_BIG5
com.badlogic.gdx.math.Intersector: int pointLineSide(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect
androidx.fragment.app.Fragment: void onPrimaryNavigationFragmentChanged(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration getRegistration(int)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int glFormat
com.badlogic.gdx.maps.tiled.TiledMapTileSets: void removeTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet)
com.esotericsoftware.kryo.util.IntMap: void putAll(com.esotericsoftware.kryo.util.IntMap)
com.badlogic.gdx.assets.AssetLoadingTask: java.lang.Object getAsset()
com.badlogic.gdx.graphics.g3d.utils.TextureProvider
com.badlogic.gdx.scenes.scene2d.ui.Label: int labelAlign
com.google.android.material.chip.Chip: void setChipStrokeWidth(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_FLOAT
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilOp(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: boolean hasRotation
androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
com.badlogic.gdx.utils.ObjectFloatMap$Keys: java.util.Iterator iterator()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: MethodVisitor(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor)
com.badlogic.gdx.backends.android.ZipResourceFile: android.content.res.AssetFileDescriptor getAssetFileDescriptor(java.lang.String)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void clear()
com.badlogic.gdx.utils.SnapshotArray: void shuffle()
com.badlogic.gdx.scenes.scene2d.Actor: boolean remove()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: java.lang.String characters
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.g2d.Sprite: float height
com.badlogic.gdx.graphics.GL20: int GL_MAX_VIEWPORT_DIMS
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData: PointSpriteControllerRenderData()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraDirection
com.badlogic.gdx.math.Interpolation$7: Interpolation$7()
com.badlogic.gdx.utils.ObjectMap: int hash2(int)
com.badlogic.gdx.math.DelaunayTriangulator: void trim(com.badlogic.gdx.utils.ShortArray,float[],float[],int,int)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2: com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder this$1
com.esotericsoftware.kryonet.UdpConnection
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$DisplayMode getDisplayMode()
androidx.appcompat.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: boolean enableMotor
com.gameanalytics.sdk.events.EGASdkErrorCategory: com.gameanalytics.sdk.events.EGASdkErrorCategory valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: boolean isCursorOverHandle()
com.badlogic.gdx.net.NetJavaImpl: NetJavaImpl()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(float)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.physics.box2d.Body: void jniGetWorldCenter(long,float[])
com.badlogic.gdx.utils.ReflectionPool: ReflectionPool(java.lang.Class,int)
com.badlogic.gdx.scenes.scene2d.ui.Table: void setClip(boolean)
com.badlogic.gdx.physics.box2d.EdgeShape: void getVertex3(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,long)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: com.badlogic.gdx.math.collision.BoundingBox bounds
com.badlogic.gdx.utils.ObjectIntMap$Entries
com.badlogic.gdx.graphics.g3d.model.data.ModelData
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int NOP
com.badlogic.gdx.graphics.GL20: int GL_SHADER_BINARY_FORMATS
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void check()
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling stretchY
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: void releaseEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,char[],int,int)
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String,boolean)
com.badlogic.gdx.physics.box2d.Fixture: float getDensity()
com.badlogic.gdx.backends.android.AndroidGL30: void glClearBufferfi(int,int,float,int)
com.badlogic.gdx.assets.loaders.I18NBundleLoader: I18NBundleLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: float[] ones
com.badlogic.gdx.scenes.scene2d.actions.Actions
com.badlogic.gdx.backends.android.AndroidGL30: void glGetQueryiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.Input$Keys: int META_ALT_RIGHT_ON
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setColor(float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_MAX_UNIFORM_BLOCK_SIZE
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHoriBearingY(long)
com.badlogic.gdx.backends.android.AndroidGraphics: void onResumeGLSurfaceView()
com.badlogic.gdx.utils.Json: Json(com.badlogic.gdx.utils.JsonWriter$OutputType)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: short classKey
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1iv(int,int,int[],int)
com.badlogic.gdx.physics.box2d.Contact: int jniGetChildIndexB(long)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute(float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool renderablePool
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.badlogic.gdx.graphics.g3d.model.MeshPart: java.lang.String id
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void clamp()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: DefaultArraySerializers$StringArraySerializer()
com.badlogic.gdx.graphics.glutils.HdpiUtils
com.badlogic.gdx.utils.PerformanceCounter: long startTime
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation Landscape
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundMode(int)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2
androidx.savedstate.SavedStateRegistry$1
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner011(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.IntMap$MapIterator
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion conjugate()
com.badlogic.gdx.graphics.glutils.IndexBufferObject: IndexBufferObject(boolean,java.nio.ByteBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_ANGLE
com.badlogic.gdx.graphics.Pixmap: void fillTriangle(int,int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float)
com.badlogic.gdx.utils.StreamUtils: byte[] copyStreamToByteArray(java.io.InputStream)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void restart()
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle[] list()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Status
com.badlogic.gdx.graphics.GL30: int GL_RENDERBUFFER_SAMPLES
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawLine(int,int,int,int,int)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: boolean blendingDisabled
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode Disabled
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void setLowMin(float)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable getTiledDrawable(java.lang.String)
com.esotericsoftware.kryonet.FrameworkMessage$RegisterUDP
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe: java.lang.Object value
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void init()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int tangentOffset
com.badlogic.gdx.math.Polyline: float[] worldVertices
com.badlogic.gdx.utils.UBJsonReader: java.lang.String readString(java.io.DataInputStream,long)
com.badlogic.gdx.graphics.g3d.decals.Decal: float getZ()
com.badlogic.gdx.net.HttpStatus: int SC_BAD_GATEWAY
com.badlogic.gdx.physics.box2d.World: void jniDeactivateBody(long,long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitIntInsn(int,int)
com.badlogic.gdx.utils.LongMap: int size
com.badlogic.gdx.utils.LongMap$Entries: void reset()
com.badlogic.gdx.graphics.GL30: void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getJointSpeed()
com.badlogic.gdx.physics.box2d.BodyDef: boolean allowSleep
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled
com.badlogic.gdx.backends.android.AndroidApplicationLogger
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IF_ACMPNE
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void init()
com.HyperSphere.Connection.PacketObjects.Map.MapChange: short changeType
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy: FixedResolutionStrategy(int,int)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int CosineOffset
com.badlogic.gdx.graphics.g2d.PixmapPackerIO: void save(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PixmapPacker)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMajor()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color TEAL
com.badlogic.gdx.scenes.scene2d.ui.Widget: void pack()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22: DefaultShader$Setters$22()
com.badlogic.gdx.utils.IntIntMap: int getAndIncrement(int,int,int)
com.badlogic.gdx.utils.BufferUtils: void transformV2M4Jni(java.nio.Buffer,int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: float lastY
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType GearJoint
com.badlogic.gdx.graphics.glutils.MipMapGenerator: boolean useHWMipMap
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)
com.badlogic.gdx.scenes.scene2d.Event: boolean getBubbles()
com.badlogic.gdx.graphics.g2d.Sprite: com.badlogic.gdx.math.Rectangle getBoundingRectangle()
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: void afterGroup(int)
com.badlogic.gdx.scenes.scene2d.utils.Layout
com.badlogic.gdx.utils.Queue$QueueIterable: Queue$QueueIterable(com.badlogic.gdx.utils.Queue,boolean)
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$GraphicsType getType()
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType valueOf(java.lang.String)
com.google.android.material.card.MaterialCardView: void setChecked(boolean)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float attackRate
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction: void setTarget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: FreeTypeFontGenerator(com.badlogic.gdx.files.FileHandle,int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode getAlignMode()
com.badlogic.gdx.utils.TextFormatter: java.lang.String replaceEscapeChars(java.lang.String)
com.badlogic.gdx.utils.AtomicQueue: java.util.concurrent.atomic.AtomicReferenceArray queue
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getXppem(long)
com.badlogic.gdx.math.CumulativeDistribution: CumulativeDistribution()
com.badlogic.gdx.scenes.scene2d.actions.IntAction: void setEnd(int)
com.esotericsoftware.jsonbeans.OutputType: java.util.regex.Pattern javascriptPattern
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: int FORWARD
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: com.badlogic.gdx.graphics.g3d.decals.GroupStrategy groupStrategy
com.badlogic.gdx.math.Matrix4: int M10
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder: FrustumShapeBuilder()
com.badlogic.gdx.utils.ObjectSet: int stashSize
com.badlogic.gdx.utils.IntFloatMap$Values
com.badlogic.gdx.graphics.g2d.ParticleEffect: void start()
com.badlogic.gdx.math.MathUtils: boolean isZero(float)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType object
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed: Value$Fixed(float)
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle tmp
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniSetDampingRatio(long,float)
com.esotericsoftware.kryo.serializers.DeflateSerializer: DeflateSerializer(com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.utils.ArraySelection getSelection()
com.badlogic.gdx.utils.JsonValue: int getInt(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Container: Container()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$ElasticOut elasticOut
com.google.android.material.chip.Chip: float getChipStrokeWidth()
com.badlogic.gdx.utils.IntIntMap: int stashSize
com.badlogic.gdx.math.WindowedMean: float getLatest()
com.badlogic.gdx.scenes.scene2d.ui.Cell: void setActorHeight(float)
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: void setStage(com.badlogic.gdx.scenes.scene2d.Stage)
com.google.android.datatransport.cct.CctBackendFactory: com.google.android.datatransport.runtime.backends.TransportBackend create(com.google.android.datatransport.runtime.backends.CreationContext)
com.badlogic.gdx.scenes.scene2d.Group: boolean swapActor(int,int)
com.badlogic.gdx.physics.box2d.Transform: com.badlogic.gdx.math.Vector2 getOrientation()
com.badlogic.gdx.backends.android.AndroidSound: android.media.AudioManager manager
com.badlogic.gdx.input.GestureDetector: int tapCount
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getXscale(long)
com.badlogic.gdx.graphics.GL20: int GL_RENDERER
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: java.lang.Appendable append(java.lang.CharSequence,int,int)
com.badlogic.gdx.physics.box2d.WorldManifold: float[] separations
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.ObjectMap assets
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: void beforeGroups()
com.badlogic.gdx.assets.AssetManager: void addTask(com.badlogic.gdx.assets.AssetDescriptor)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable
com.badlogic.gdx.math.Interpolation$1
com.badlogic.gdx.graphics.g2d.NinePatch: float topHeight
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: AnimatedTiledMapTile(com.badlogic.gdx.utils.IntArray,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.BinaryHeap: void setValue(com.badlogic.gdx.utils.BinaryHeap$Node,float)
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int count
com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute Binormal()
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void setCullFace(int)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: AndroidZipFileHandle(java.lang.String)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.utils.Json json
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] $VALUES
com.badlogic.gdx.graphics.g2d.ParticleEmitter: java.lang.String readString(java.io.BufferedReader,java.lang.String)
com.HyperSphere.Connection.PacketObjects.Entities.Creature
com.badlogic.gdx.backends.android.AndroidDaydream: long getJavaHeap()
com.badlogic.gdx.graphics.GL20: int GL_MAX_VARYING_VECTORS
com.badlogic.gdx.utils.JsonValue$1
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer: java.lang.Character read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.GL20: int GL_BUFFER_SIZE
com.badlogic.gdx.input.GestureDetector$VelocityTracker: int sampleSize
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getComputedPadTop()
com.badlogic.gdx.graphics.GL20: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.utils.ObjectMap
com.badlogic.gdx.utils.LongMap: void resize(int)
com.badlogic.gdx.math.Rectangle: float y
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniSetFrequency(long,float)
com.badlogic.gdx.graphics.Cubemap$1: int val$refCount
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindTexture(int,int)
com.badlogic.gdx.utils.JsonValue: double getDouble(java.lang.String)
com.badlogic.gdx.maps.tiled.TmxMapLoader: TmxMapLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mHasSurface
com.badlogic.gdx.graphics.glutils.FrameBuffer: FrameBuffer(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator
com.badlogic.gdx.utils.IntSet: int[] keyTable
com.badlogic.gdx.utils.Json$Serializer: java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeByte(byte)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: java.lang.String kMSM7K_RENDERER_PREFIX
com.badlogic.gdx.graphics.g2d.SpriteBatch: float getPackedColor()
com.esotericsoftware.kryo.io.Input: int position()
com.badlogic.gdx.physics.box2d.World: void jniGetContactList(long,long[])
com.badlogic.gdx.utils.ArrayMap: ArrayMap(boolean,int,java.lang.Class,java.lang.Class)
com.badlogic.gdx.math.MathUtils: float radDeg
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: RegionInfluencer(int)
com.badlogic.gdx.utils.JsonValue: void set(double,java.lang.String)
com.badlogic.gdx.maps.objects.TextureMapObject: float getScaleX()
com.badlogic.gdx.net.HttpRequestBuilder: void validate()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: float[] vertices
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType
com.badlogic.gdx.graphics.GL30: java.nio.Buffer glGetBufferPointerv(int,int)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float jniGetLength1(long)
com.esotericsoftware.kryo.io.ByteBufferOutput: boolean isNativeOrder()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup columnTop()
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer: ScaleInfluencer()
com.badlogic.gdx.graphics.g2d.NinePatch: int MIDDLE_LEFT
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.Array nodes
com.badlogic.gdx.graphics.glutils.VertexData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$GuillotinePage
com.badlogic.gdx.utils.ObjectFloatMap: void putStash(java.lang.Object,float)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_FORMAT_LUMINANCE_ALPHA
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: java.lang.String AlphaTestAlias
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void onActivityResult(int,int,android.content.Intent)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc obtain(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.badlogic.gdx.utils.ObjectMap: boolean notEmpty()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: java.util.Comparator cameraSorter
com.esotericsoftware.jsonbeans.JsonValue: void set(long)
com.badlogic.gdx.Application: long getNativeHeap()
com.badlogic.gdx.input.RemoteSender: int KEY_UP
com.badlogic.gdx.utils.viewport.Viewport: int getScreenX()
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute createShininess(float)
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type NONE
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.esotericsoftware.kryo.io.KryoDataInput: char readChar()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_SHININESS
com.badlogic.gdx.scenes.scene2d.ui.Stack: float getMinHeight()
com.badlogic.gdx.math.MathUtils: float degToIndex
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: int[] copy(com.esotericsoftware.kryo.Kryo,int[])
com.esotericsoftware.kryo.io.Output: Output(java.io.OutputStream)
com.badlogic.gdx.utils.IntMap$Entries: com.badlogic.gdx.utils.IntMap$Entry next()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: long rampTime
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getMinValue()
com.badlogic.gdx.utils.StringBuilder: StringBuilder(com.badlogic.gdx.utils.StringBuilder)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: long lastTime
com.badlogic.gdx.math.Polygon: void setPosition(float,float)
androidx.fragment.app.Fragment: boolean getAllowReturnTransitionOverlap()
com.fasterxml.jackson.annotation.JsonTypeInfo$As: com.fasterxml.jackson.annotation.JsonTypeInfo$As[] values()
androidx.customview.widget.ExploreByTouchHelper: int mHoveredVirtualViewId
com.google.android.material.textfield.TextInputLayout: void setCounterOverflowTextAppearance(int)
com.badlogic.gdx.math.Bezier: float approxLength(int)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: void readBytes(java.lang.Object,long,long,int)
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: void reset()
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void jniSetLinearOffset(long,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Value$5: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryonet.ConnectionValues: java.net.InetSocketAddress getAddress(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: ShapeRenderer(int,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector setLength2(float)
com.badlogic.gdx.utils.XmlReader: char[] init__xml_trans_keys_0()
com.badlogic.gdx.graphics.glutils.IndexArray: void dispose()
com.badlogic.gdx.InputProcessor: boolean touchUp(int,int,int,int)
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue current
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.maps.objects.CircleMapObject: com.badlogic.gdx.math.Circle getCircle()
com.badlogic.gdx.utils.LongMap: void putResize(long,java.lang.Object)
com.google.firebase.iid.Registrar
com.badlogic.gdx.scenes.scene2d.ui.Value$6: Value$6()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3f(int,float,float,float)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,int,int,float,int,boolean)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.maps.MapLayers: com.badlogic.gdx.utils.Array layers
com.badlogic.gdx.graphics.GL20: int GL_RGBA
com.badlogic.gdx.scenes.scene2d.ui.Table$3: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.Mesh: int getVertexSize()
androidx.appcompat.widget.AppCompatEditText: AppCompatEditText(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.ObjectMap attributes
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Link
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.util.IdentityMap: void clear()
com.badlogic.gdx.math.Frustum: boolean boundsInFrustum(float,float,float,float,float,float)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager mChildFragmentManager
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int b
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.utils.Pool usedTouchEvents
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence)
com.badlogic.gdx.utils.reflect.Field: java.lang.reflect.Field field
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int AALOAD
com.badlogic.gdx.utils.IntFloatMap: int EMPTY
com.badlogic.gdx.graphics.g3d.Environment: Environment()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform1fv(java.lang.String,float[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle()
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.backends.android.AndroidFileHandle: java.io.InputStream read()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void activateParticles(int,int)
com.badlogic.gdx.backends.android.ZipResourceFile: int kEOCDLen
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: long combineAttributeMasks(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendEquationSeparate(int,int)
com.badlogic.gdx.backends.android.AndroidInput$3$1: com.badlogic.gdx.backends.android.AndroidInput$3 this$1
com.badlogic.gdx.maps.objects.TextureMapObject: float getRotation()
com.badlogic.gdx.utils.LongMap$Entries: LongMap$Entries(com.badlogic.gdx.utils.LongMap)
com.badlogic.gdx.graphics.Color: void rgb565ToColor(com.badlogic.gdx.graphics.Color,int)
com.esotericsoftware.kryo.KryoSerializable: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output)
com.badlogic.gdx.graphics.glutils.HdpiUtils: int toLogicalX(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DUP2
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceLeftValue()
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Filter filter
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.util.IntMap nameIdToClass
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean withinMaxLength(int)
com.esotericsoftware.kryonet.rmi.ObjectSpace: byte kReturnExMask
com.badlogic.gdx.graphics.Texture: Texture(int,int,com.badlogic.gdx.graphics.TextureData)
com.esotericsoftware.jsonbeans.JsonValue: boolean asBoolean()
com.badlogic.gdx.math.GridPoint3: int y
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void setBottomHeight(float)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float width
com.badlogic.gdx.backends.android.AndroidGL30: boolean glIsQuery(int)
com.badlogic.gdx.math.Circle: Circle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.physics.box2d.Filter
com.badlogic.gdx.graphics.glutils.KTXTextureData: int getNumberOfMipMapLevels()
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean hasSelection
com.badlogic.gdx.utils.compression.CRC: void Update(byte[],int,int)
com.badlogic.gdx.graphics.Texture$TextureWrap
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: Obstacle(int,int,int)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType longValue
com.badlogic.gdx.graphics.glutils.FloatTextureData: boolean isPrepared
com.badlogic.gdx.math.MathUtils: long random(long,long)
com.esotericsoftware.kryo.io.Input: java.io.InputStream getInputStream()
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle tempFile(java.lang.String)
com.badlogic.gdx.utils.ObjectFloatMap$Keys: com.badlogic.gdx.utils.ObjectFloatMap$Keys iterator()
com.badlogic.gdx.utils.compression.Lzma
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: void restart()
com.badlogic.gdx.graphics.Pixmap$Filter: Pixmap$Filter(java.lang.String,int)
com.badlogic.gdx.utils.Bits: boolean getAndClear(int)
com.google.android.material.textfield.TextInputLayout: void setPlaceholderTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.physics.box2d.Contact: long jniGetFixtureA(long)
com.badlogic.gdx.utils.IntIntMap$Entries: java.lang.Object next()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isAligned()
com.badlogic.gdx.utils.StringBuilder: void getChars(int,int,char[],int)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: boolean containsKeyStash(java.lang.Object)
com.esotericsoftware.kryo.util.ObjectMap$Keys: void reset()
com.badlogic.gdx.utils.StreamUtils: int copyStream(java.io.InputStream,java.nio.ByteBuffer,byte[])
com.badlogic.gdx.math.Interpolation$PowOut
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.utils.Pool cellPool
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mHaveEglSurface
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Entries entries1
com.badlogic.gdx.utils.Base64Coder: byte[] decode(java.lang.String,com.badlogic.gdx.utils.Base64Coder$CharMap)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,byte)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getFillY()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: TiledMapTileLayer$Cell()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void onResume()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void save(java.io.Writer)
com.badlogic.gdx.Input$Keys: int COLON
com.badlogic.gdx.scenes.scene2d.InputEvent: int getButton()
com.badlogic.gdx.graphics.PixmapIO$PNG: PixmapIO$PNG()
com.badlogic.gdx.graphics.Pixmap: com.badlogic.gdx.graphics.Pixmap$Blending blending
com.badlogic.gdx.utils.CharArray: char[] resize(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_MONO
com.badlogic.gdx.graphics.GL20: void glVertexAttrib1f(int,float)
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: int bind(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.Input$Keys: int META_SHIFT_RIGHT_ON
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Keys keys2
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: void layout()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean[] finished
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$29: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: void swap(int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void bufferChanged()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField
com.badlogic.gdx.graphics.GL30: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int lifeOffset
androidx.appcompat.widget.ViewStubCompat: android.view.LayoutInflater getLayoutInflater()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String getName()
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: void setSide(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide)
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: com.badlogic.gdx.math.Vector2 getTarget()
com.badlogic.gdx.scenes.scene2d.Action: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int stride
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.JsonWriter getWriter()
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsTransformFeedback(int)
com.badlogic.gdx.graphics.glutils.FileTextureData: FileTextureData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
com.google.android.material.card.MaterialCardView: void setCardElevation(float)
com.badlogic.gdx.backends.android.AndroidGL20: int glGetError()
com.badlogic.gdx.utils.SerializationException: void addTrace(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDeltaY()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawShape(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Transform,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean required
com.badlogic.gdx.graphics.TextureData: int getWidth()
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(java.lang.Object[])
com.badlogic.gdx.backends.android.AndroidGraphics: float getPpcX()
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDEMethod
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createBump(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge: int a
com.badlogic.gdx.backends.android.AndroidFileHandle: android.content.res.AssetFileDescriptor getAssetFileDescriptor()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.graphics.Color fontColor
com.badlogic.gdx.physics.box2d.joints.RopeJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: com.badlogic.gdx.math.Vector3 pick(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container width(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.utils.CharArray: void removeRange(int,int)
com.badlogic.gdx.graphics.g3d.decals.Decal: void rotateX(float)
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.graphics.g3d.Renderable set(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector clamp(float,float)
com.badlogic.gdx.net.NetJavaSocketImpl: boolean isConnected()
com.badlogic.gdx.graphics.g2d.Batch: boolean isBlendingEnabled()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: com.badlogic.gdx.scenes.scene2d.ui.TextField this$0
com.badlogic.gdx.input.RemoteInput$TouchEvent: int y
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.Color getColor()
androidx.fragment.app.Fragment: android.view.ViewGroup mContainer
com.badlogic.gdx.utils.Array: void add(java.lang.Object,java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.util.Collection createCopy(com.esotericsoftware.kryo.Kryo,java.util.Collection)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: void restart()
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: com.badlogic.gdx.graphics.g2d.TextureRegion region
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getMaxX()
com.badlogic.gdx.scenes.scene2d.ui.TextField: float selectionX
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_INVOKESPECIAL
com.badlogic.gdx.utils.TimSort: boolean DEBUG
com.badlogic.gdx.utils.FloatArray: void truncate(int)
com.badlogic.gdx.graphics.Cursor
com.badlogic.gdx.backends.android.AndroidFragmentApplication: int getLogLevel()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsFramebuffer(int)
com.badlogic.gdx.utils.ObjectMap: int hashCode()
com.esotericsoftware.kryo.util.IntMap: com.esotericsoftware.kryo.util.IntMap$Values values()
com.esotericsoftware.minlog.Log: Log()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide[] $VALUES
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE13
com.badlogic.gdx.net.SocketHints: boolean tcpNoDelay
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int mGreenSize
com.badlogic.gdx.utils.Array: void add(java.lang.Object,java.lang.Object)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.utils.Array joints
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_DEPRECATED
com.badlogic.gdx.scenes.scene2d.ui.TextField: int delete(boolean)
com.badlogic.gdx.utils.IntArray: int[] ensureCapacity(int)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int damage
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node getParent()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.maps.tiled.TiledMapTileSets: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getYScale()
androidx.coordinatorlayout.widget.CoordinatorLayout: CoordinatorLayout(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryonet.TcpConnection: void connect(java.nio.channels.Selector,java.net.SocketAddress,int)
androidx.fragment.app.Fragment: android.util.SparseArray mSavedViewState
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting[] $VALUES
com.badlogic.gdx.input.GestureDetector: int lastTapButton
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToRotation(float,float)
com.badlogic.gdx.backends.android.AndroidMusic: boolean isLooping()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int a(int[],int[],int,int)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef
com.badlogic.gdx.graphics.profiling.GLErrorListener$2: void onError(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext)
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object removeStash(java.lang.Object)
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.RenderContext,com.badlogic.gdx.graphics.g3d.utils.ShaderProvider,com.badlogic.gdx.graphics.g3d.utils.RenderableSorter)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean process(float,float,int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void dispose()
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.utils.Array items
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: HexagonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float)
com.google.android.material.chip.Chip: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.appbar.AppBarLayout: int getDownNestedPreScrollRange()
com.badlogic.gdx.backends.android.AndroidInput: int getX()
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode NORMAL
com.badlogic.gdx.utils.SnapshotArray: boolean removeValue(java.lang.Object,boolean)
com.badlogic.gdx.utils.async.AsyncExecutor$1: java.lang.String val$name
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getChipDrawable()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Group getRoot()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.utils.Array children
com.badlogic.gdx.backends.android.AndroidGL30: void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.joints.GearJoint: com.badlogic.gdx.physics.box2d.Joint getJoint1()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int access$700(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getMethodType(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type[])
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.scenes.scene2d.Actor: float scaleY
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String ContentDisposition
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue durationValue
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler: void logAction(int,int)
androidx.fragment.app.Fragment: void onMultiWindowModeChanged(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glDisableVertexAttribArray(int)
com.badlogic.gdx.graphics.g3d.Attribute: boolean equals(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] columnWidth
com.badlogic.gdx.utils.compression.lzma.Decoder
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer centeri
com.badlogic.gdx.utils.OrderedMap: OrderedMap(com.badlogic.gdx.utils.OrderedMap)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph glyph
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float descent
com.badlogic.gdx.physics.box2d.Body: void setTransform(float,float,float)
com.badlogic.gdx.math.CumulativeDistribution: java.lang.Object getValue(int)
com.badlogic.gdx.graphics.GL30: void glDeleteBuffer(int)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setDisabled(boolean)
com.badlogic.gdx.physics.box2d.Box2D: void init()
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.graphics.g3d.model.MeshPart
com.badlogic.gdx.math.Frustum: com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints
com.badlogic.gdx.graphics.GL30: void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver: java.lang.String resolve(com.badlogic.gdx.files.FileHandle,java.lang.String)
com.esotericsoftware.kryo.util.ObjectMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void box(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 idt()
com.badlogic.gdx.math.Matrix4: float getScaleZSquared()
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.utils.async.AsyncResult loadFuture
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniSetMaxMotorForce(long,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: int a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,byte[],int,int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean _finished
com.badlogic.gdx.Files: java.lang.String getLocalStoragePath()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: GLSurfaceView20API18(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.math.Interpolation$PowIn: float apply(float)
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Keys keys1
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.math.Quaternion: float dot(float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_FORMAT_RGB888
com.badlogic.gdx.graphics.GL20: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: boolean instant
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: java.nio.FloatBuffer buffer
com.badlogic.gdx.backends.android.AndroidInput: int getFreePointerIndex()
com.badlogic.gdx.utils.viewport.ExtendViewport: float getMaxWorldWidth()
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: float distanceFieldSmoothing
com.badlogic.gdx.utils.compression.lzma.Base: int kNumAlignBits
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: java.util.EnumSet copy(com.esotericsoftware.kryo.Kryo,java.util.EnumSet)
com.badlogic.gdx.math.Affine2: float m10
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setEGLConfigChooser(int,int,int,int,int,int)
com.badlogic.gdx.utils.BufferUtils: void transformV3M3Jni(float[],int,int,float[],int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean tryAcquireEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glLineWidth(float)
com.badlogic.gdx.assets.AssetManager: java.lang.String getAssetFileName(java.lang.Object)
com.esotericsoftware.kryo.io.KryoDataInput: int readUnsignedByte()
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_ALPHA_SIZE
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,int[])
com.badlogic.gdx.utils.ArrayMap: ArrayMap(int)
com.badlogic.gdx.graphics.GL30: int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
com.badlogic.gdx.graphics.GL20: void glDeleteBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: TextArea$TextAreaListener(com.badlogic.gdx.scenes.scene2d.ui.TextArea)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: int[] getRenderBound()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isFlinging()
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.Input$Orientation getNativeOrientation()
com.esotericsoftware.reflectasm.FieldAccess: void setFloat(java.lang.Object,int,float)
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle getStyle()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector clamp(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int MULTIANEWARRAY
com.esotericsoftware.kryo.util.IntMap$Values: void reset()
com.badlogic.gdx.assets.loaders.PixmapLoader: com.badlogic.gdx.graphics.Pixmap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int offset
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPadLeft()
com.badlogic.gdx.utils.LittleEndianInputStream: char readChar()
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.google.android.material.datepicker.CalendarConstraints: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(java.lang.Iterable)
com.badlogic.gdx.maps.tiled.TiledMap
com.google.android.material.button.MaterialButton: void setPressed(boolean)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: boolean useMipMaps
com.HyperSphere.Connection.PacketObjects.Purchase.Purchaseable
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter diffuseTexture
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentViewLifecycleOwner mViewLifecycleOwner
com.badlogic.gdx.scenes.scene2d.ui.TextField: void copy()
com.google.android.material.datepicker.MaterialTextInputPicker
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float[] tmp
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1: int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getBitmapTop(long)
com.badlogic.gdx.physics.box2d.ChainShape: void jniCreateChain(long,float[],int,int)
com.badlogic.gdx.Net$HttpRequest: boolean followRedirects
com.badlogic.gdx.graphics.g2d.Sprite: float getX()
com.badlogic.gdx.utils.LongArray: boolean equals(java.lang.Object)
androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.assets.AssetLoadingTask
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_VOLATILE
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: GlyphLayout$GlyphRun()
com.badlogic.gdx.backends.android.AndroidGL20: void glBufferSubData(int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.ObjectFloatMap$Values: boolean hasNext()
com.badlogic.gdx.graphics.GL30: int GL_RGB8_SNORM
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: int accessIndex
com.badlogic.gdx.backends.android.InputProcessorLW: boolean touchUp(int,int,int,int)
com.badlogic.gdx.graphics.g2d.TextureRegion: int regionHeight
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer: com.badlogic.gdx.graphics.Texture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: void saveAsset(java.lang.String,java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int k
com.badlogic.gdx.graphics.g2d.SpriteCache: void dispose()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean mDetached
com.badlogic.gdx.Input: void setCatchBackKey(boolean)
com.badlogic.gdx.graphics.glutils.HdpiMode
com.badlogic.gdx.graphics.g3d.model.data.ModelData: void addMesh(com.badlogic.gdx.graphics.g3d.model.data.ModelMesh)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.Generics getGenericsScope()
com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object,java.lang.Class,java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: boolean K
com.badlogic.gdx.math.GridPoint2: float dst(int,int)
com.badlogic.gdx.math.Interpolation$Exp: Interpolation$Exp(float,float)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void bufferChanged()
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void setFrequency(float)
com.badlogic.gdx.input.RemoteInput$TouchEvent: com.badlogic.gdx.input.RemoteInput this$0
com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.GL20: void glGetIntegerv(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int PRIME2
com.badlogic.gdx.utils.JsonValue: float getFloat(java.lang.String)
com.google.android.material.button.MaterialButton: int getCornerRadius()
com.esotericsoftware.kryo.Kryo: java.lang.ClassLoader getClassLoader()
com.google.android.material.textfield.TextInputLayout: void setEndIconDrawable(android.graphics.drawable.Drawable)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector putByteArray(byte[],int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: PixmapPacker$Page(com.badlogic.gdx.graphics.g2d.PixmapPacker)
com.badlogic.gdx.physics.box2d.Body: void jniGetWorldVector(long,float,float,float[])
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.math.EarClippingTriangulator: int classifyVertex(int)
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter[] values()
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: HexagonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap)
com.badlogic.gdx.utils.XmlReader$Element: int getIntAttribute(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_pointLights0position
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: InstanceBufferObjectSubData(boolean,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.scenes.scene2d.ui.TextField: float getTextY(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.maps.MapProperties: java.lang.Object get(java.lang.String)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void reset(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.Color tmpColor2
com.badlogic.gdx.math.Vector3: boolean isCollinear(com.badlogic.gdx.math.Vector3)
androidx.fragment.app.Fragment: void onStop()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper graphics
com.badlogic.gdx.utils.Json: java.lang.String typeName
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog text(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,float,int,boolean)
com.badlogic.gdx.utils.ObjectIntMap$Entries: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Tree: Tree(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.math.Intersector$MinimumTranslationVector: float depth
com.badlogic.gdx.graphics.profiling.GL30Interceptor: int glGetError()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void dispose()
com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.Class loadClass(java.lang.String,boolean)
com.esotericsoftware.reflectasm.FieldAccess: char getChar(java.lang.Object,int)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: com.badlogic.gdx.graphics.Pixmap$Format format
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool: com.badlogic.gdx.utils.Array usedMeshes
com.esotericsoftware.kryonet.KryoNetException
com.badlogic.gdx.graphics.VertexAttributes: VertexAttributes(com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.utils.SortedIntList: java.util.Iterator iterator()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 rotate90(int)
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean tap(float,float,int,int)
com.badlogic.gdx.utils.DelayedRemovalArray: void remove(int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float animateTime
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLifeOffset()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: java.lang.String name
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.utils.Array parseNodes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader
com.badlogic.gdx.utils.IntIntMap: boolean containsValue(int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float)
com.HyperSphere.Connection.PacketObjects.Purchase.Purchaseable: Purchaseable()
com.badlogic.gdx.backends.android.AndroidGL30: void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus[] values()
com.badlogic.gdx.assets.AssetManager: boolean containsAsset(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Vector3 TMP_V5
com.badlogic.gdx.Game: void setScreen(com.badlogic.gdx.Screen)
com.badlogic.gdx.utils.IntMap$MapIterator: int currentIndex
android.support.v4.graphics.drawable.IconCompatParcelizer
com.badlogic.gdx.Input$Keys: int RIGHT_BRACKET
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryonet.util.ObjectIntMap objectToID
com.badlogic.gdx.utils.LittleEndianInputStream: boolean readBoolean()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean,boolean)
com.badlogic.gdx.utils.StringBuilder: int codePointCount(int,int)
com.badlogic.gdx.utils.LongMap: java.lang.Object remove(long)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Life
com.badlogic.gdx.math.Vector2: float dst(float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType[] values()
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver: com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution choose(com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[])
com.badlogic.gdx.physics.box2d.EdgeShape: void jniGetVertex1(long,float[])
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color BLACK
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.esotericsoftware.kryo.util.IntMap: com.esotericsoftware.kryo.util.IntMap$Keys keys()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: ParticleControllerInfluencer$Single(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single)
com.badlogic.gdx.maps.tiled.TmxMapLoader
com.badlogic.gdx.scenes.scene2d.ui.Skin$3: com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
com.esotericsoftware.jsonbeans.ObjectMap: int hash3(int)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void load(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Button: void setChecked(boolean)
com.badlogic.gdx.graphics.Texture: java.util.Map managedTextures
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateY()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DUP_X1
com.badlogic.gdx.math.Matrix4: void prj(float[],float[],int,int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: int getPadding()
com.badlogic.gdx.utils.Pool: void reset(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float x3
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: ObjLoader()
com.badlogic.gdx.utils.BufferUtils: void copy(long[],int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int d
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.maps.MapLayer: com.badlogic.gdx.maps.MapObjects objects
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeFloats(float[])
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: FreeType$Library(long)
com.badlogic.gdx.scenes.scene2d.Actor: void clearListeners()
com.badlogic.gdx.utils.JsonWriter: java.io.Writer writer
com.hyperspherestudio.kryonet.Packets.CommonPacket: CommonPacket(java.lang.Object,boolean,com.hyperspherestudio.kryonet.HyperSphereServer)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: long Type
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Rotation2D
com.badlogic.gdx.math.Vector2: float angleRad()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isScrollingDisabledX()
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteSamplers(int,int[],int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float animateDuration
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void circle(float,float,float)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeFloat(float)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2
com.badlogic.gdx.maps.objects.EllipseMapObject
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode[] values()
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult: byte responseID
com.badlogic.gdx.math.Vector3: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.graphics.GL30: void glDrawRangeElements(int,int,int,int,int,int)
com.badlogic.gdx.utils.Base64Coder: java.lang.String encodeLines(byte[],int,int,int,java.lang.String,char[])
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter: java.lang.String prependVertexCode
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters: java.lang.String texturePrefix
com.badlogic.gdx.utils.viewport.Viewport
com.badlogic.gdx.scenes.scene2d.Actor: float y
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getTouchDownX()
com.badlogic.gdx.physics.box2d.ChainShape: void createChain(com.badlogic.gdx.math.Vector2[])
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean getTouchEventsForLiveWallpaper
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getMouseWheelY()
com.badlogic.gdx.Application: void postRunnable(java.lang.Runnable)
com.badlogic.gdx.utils.JsonValue: double doubleValue
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector write(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,byte[],int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table$4: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setColor(float,float,float,float)
com.badlogic.gdx.math.Vector3: boolean isOnLine(com.badlogic.gdx.math.Vector,float)
com.esotericsoftware.kryo.serializers.MapSerializer: java.lang.Class valueGenericType
com.badlogic.gdx.scenes.scene2d.Group: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Quaternion rotation
com.badlogic.gdx.graphics.g2d.Sprite: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: long lastTiledMapRenderTime
com.badlogic.gdx.backends.android.AndroidAudioDevice: short[] buffer
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 toNormalMatrix()
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: java.lang.String toString()
com.badlogic.gdx.utils.IntMap$Entry: java.lang.Object value
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.backends.android.AndroidGL30: boolean glIsTransformFeedback(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: ScrollPane$1(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: int getGLEnum()
com.badlogic.gdx.physics.box2d.Contact: boolean isTouching()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(short)
com.badlogic.gdx.physics.box2d.CircleShape: long newCircleShape()
com.badlogic.gdx.graphics.Mesh: java.nio.FloatBuffer getVerticesBuffer()
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction
com.badlogic.gdx.utils.SnapshotArray: int snapshots
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: int bufferHandle
com.badlogic.gdx.graphics.glutils.MipMapGenerator: MipMapGenerator()
com.badlogic.gdx.utils.Timer: java.lang.Object threadLock
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup rowBottom()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawRect(int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.InputListener: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.esotericsoftware.minlog.Log$Logger
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float getMaxForce()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1: void sendDownUpKeyEventForBackwardCompatibility(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter[] p
androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)
com.badlogic.gdx.scenes.scene2d.ui.TextField: char BULLET
com.badlogic.gdx.graphics.g2d.ParticleEffect: void update(float)
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed: com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed[] cache
com.badlogic.gdx.utils.compression.lzma.Decoder: int m_DictionarySize
com.google.android.material.chip.Chip: void setCheckedIconTintResource(int)
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDEModWhen
com.esotericsoftware.kryo.Serializer: void setImmutable(boolean)
com.badlogic.gdx.Input: float getGyroscopeY()
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1: java.lang.Object newInstance()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: float maxTileWidth
com.badlogic.gdx.physics.box2d.Body: void jniApplyForce(long,float,float,float,float,boolean)
com.esotericsoftware.kryo.util.IntMap$MapIterator: com.esotericsoftware.kryo.util.IntMap map
com.badlogic.gdx.Net$Protocol: Net$Protocol(java.lang.String,int)
com.esotericsoftware.kryonet.TcpConnection: boolean needsKeepAlive(long)
com.badlogic.gdx.maps.objects.TextureMapObject: float getY()
com.esotericsoftware.kryo.util.IntMap: int PRIME1
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.maps.tiled.TiledMap map
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
com.badlogic.gdx.utils.LongMap: void push(long,java.lang.Object,int,long,int,long,int,long)
com.badlogic.gdx.math.Vector2: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.jsonbeans.ObjectMap: void putAll(com.esotericsoftware.jsonbeans.ObjectMap)
androidx.appcompat.widget.Toolbar: android.view.MenuInflater getMenuInflater()
com.badlogic.gdx.scenes.scene2d.ui.Slider: com.badlogic.gdx.scenes.scene2d.utils.Drawable getKnobDrawable()
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.LongMap$Entry: java.lang.Object value
com.badlogic.gdx.graphics.g3d.particles.ParticleController: boolean isComplete()
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: void remove()
com.badlogic.gdx.math.Interpolation$Bounce: float apply(float)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.util.IdentityMap$Entry: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.utils.Array getPages()
com.badlogic.gdx.utils.IntMap$Values: void remove()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc
com.google.android.material.textfield.TextInputLayout: com.google.android.material.internal.CheckableImageButton getEndIconView()
com.badlogic.gdx.scenes.scene2d.Stage: void setActionsRequestRendering(boolean)
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Entries entries1
com.fasterxml.jackson.annotation.JsonFormat$Feature: com.fasterxml.jackson.annotation.JsonFormat$Feature valueOf(java.lang.String)
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Object create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.ComparableTimSort: int[] runBase
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1: void run()
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int currentHealth
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior: FloatingActionButton$BaseBehavior()
com.badlogic.gdx.graphics.glutils.InstanceData: int getNumInstances()
com.esotericsoftware.kryo.io.Output: void writeBytes(byte[])
com.badlogic.gdx.graphics.GL20: int GL_ALIASED_POINT_SIZE_RANGE
com.badlogic.gdx.scenes.scene2d.ui.Window: int resizeBorder
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
com.google.android.material.button.MaterialButton: void setCornerRadiusResource(int)
com.badlogic.gdx.graphics.GL20: int GL_INVALID_FRAMEBUFFER_OPERATION
com.esotericsoftware.kryo.util.IntMap: void push(int,java.lang.Object,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidApplicationBase: android.view.WindowManager getWindowManager()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int[] x
com.badlogic.gdx.math.Rectangle: float perimeter()
com.badlogic.gdx.utils.TimSort: void mergeAt(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList
com.badlogic.gdx.utils.IntArray: int indexOf(int)
com.badlogic.gdx.graphics.GL30: void glTransformFeedbackVaryings(int,java.lang.String[],int)
com.badlogic.gdx.scenes.scene2d.ui.List: java.lang.Object getOverItem()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: int a()
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void setMinHeight(float)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: int width
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: boolean hasCollisionBounds()
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy
com.badlogic.gdx.utils.IntSet
com.badlogic.gdx.graphics.g2d.Sprite: void setOriginCenter()
com.badlogic.gdx.utils.IntFloatMap: void removeStashIndex(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.math.Vector3 position
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
com.google.android.material.bottomappbar.BottomAppBar: boolean getHideOnScroll()
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsRenderbuffer(int)
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.UdpConnection udp
com.badlogic.gdx.assets.loaders.SkinLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: ParticleController()
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode valueOf(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type
com.badlogic.gdx.graphics.g3d.particles.ParticleController: float deltaTime
com.badlogic.gdx.audio.Sound: void stop(long)
com.badlogic.gdx.Gdx: com.badlogic.gdx.Audio audio
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1
com.badlogic.gdx.utils.LongMap$Entries: void remove()
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetJointSpeed(long)
com.badlogic.gdx.utils.BufferUtils: java.nio.IntBuffer newIntBuffer(int)
com.badlogic.gdx.graphics.g3d.model.MeshPart: int primitiveType
com.badlogic.gdx.scenes.scene2d.ui.Tree$1: Tree$1(com.badlogic.gdx.scenes.scene2d.ui.Tree)
com.badlogic.gdx.backends.android.AndroidApplication$1: void pause()
com.badlogic.gdx.scenes.scene2d.Actor: boolean hasKeyboardFocus()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: float lowerAngle
com.badlogic.gdx.graphics.GL30: void glDeleteVertexArrays(int,int[],int)
com.badlogic.gdx.utils.JsonValue: long getLong(int)
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: float x
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String getSelection()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_PRIVATE
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight
com.badlogic.gdx.physics.box2d.Joint: float jniGetReactionTorque(long,float)
com.badlogic.gdx.math.Vector3: boolean idt(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.GL30: int GL_PACK_SKIP_ROWS
com.badlogic.gdx.backends.android.AndroidInput: void onTap(int,int)
com.badlogic.gdx.utils.reflect.Method: com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector nor()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: SpecialString(java.lang.String,int)
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.esotericsoftware.minlog.Log: void set(int)
com.badlogic.gdx.math.collision.Sphere: boolean overlaps(com.badlogic.gdx.math.collision.Sphere)
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider: DefaultShaderProvider()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void applyNodeAnimationDirectly(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float)
com.badlogic.gdx.graphics.GL20: void glHint(int,int)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: void write(com.badlogic.gdx.utils.Json)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
com.badlogic.gdx.utils.BooleanArray: boolean first()
com.esotericsoftware.kryo.util.IntArray: boolean contains(int)
com.badlogic.gdx.utils.ShortArray: short peek()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createReflection(float,float,float,float)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int FLAG_FLIP_DIAGONALLY
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void setBlending(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitLdcInsn(java.lang.Object)
androidx.fragment.app.Fragment: android.os.Bundle getArguments()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float getX()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle getLifecycle()
com.badlogic.gdx.utils.reflect.ReflectionException: ReflectionException(java.lang.Throwable)
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider: com.badlogic.gdx.graphics.g3d.Shader getShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void setAutoShapeType(boolean)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader()
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver: AbsoluteFileHandleResolver()
com.badlogic.gdx.physics.box2d.World$2: com.badlogic.gdx.physics.box2d.Fixture newObject()
com.esotericsoftware.kryonet.JsonSerialization: void setLogging(boolean,boolean)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField: UnsafeCacheFields$UnsafeObjectField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.utils.IntMap: void ensureCapacity(int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: com.badlogic.gdx.scenes.scene2d.utils.Drawable getKnobDrawable()
com.badlogic.gdx.utils.Json: boolean ignoreDeprecated
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: float getOffsetY()
com.badlogic.gdx.graphics.GL30: int GL_SYNC_FLAGS
com.esotericsoftware.kryo.io.ByteBufferOutput: boolean varIntsEnabled
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptySetSerializer: DefaultSerializers$CollectionsEmptySetSerializer()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setMaxSplitAmount(float)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.InputProcessor getInputProcessor()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFramebufferRenderbuffer(int,int,int,int)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.ObjectMap getGraphContext()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glColorMask(boolean,boolean,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getSpace()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.math.Matrix4 combinedMatrix
com.badlogic.gdx.utils.BooleanArray: void shuffle()
com.badlogic.gdx.LifecycleListener: void resume()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.Array contacts
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart getMeshPart()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INVOKEVIRTUAL
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void set(com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
com.esotericsoftware.jsonbeans.JsonValue: short getShort(java.lang.String)
com.esotericsoftware.kryonet.FrameworkMessage$RegisterUDP: FrameworkMessage$RegisterUDP()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.utils.StringBuilder: int codePointAt(int)
com.esotericsoftware.kryo.serializers.MapSerializer: void setValueClass(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.physics.box2d.World world
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float yScale
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: com.badlogic.gdx.graphics.VertexAttributes attributes
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float jniGetLength2(long)
com.badlogic.gdx.physics.box2d.Contact: void setFriction(float)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.utils.Array joints
com.google.firebase.iid.Registrar: com.google.firebase.iid.FirebaseInstanceId lambda$getComponents$0$Registrar(com.google.firebase.components.ComponentContainer)
com.badlogic.gdx.scenes.scene2d.Actor: void setOrigin(float,float)
com.google.firebase.iid.FirebaseInstanceId
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: AndroidApplicationConfiguration()
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPrefWidth()
com.badlogic.gdx.utils.JsonValue: byte getByte(java.lang.String)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void flush()
com.esotericsoftware.jsonbeans.JsonWriter: void close()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromAxes(float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.GL30: void glGenVertexArrays(int,int[],int)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float jniGetMaxForce(long)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeChar(char)
com.badlogic.gdx.utils.LongArray: long[] resize(int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.esotericsoftware.kryonet.Server: java.lang.Object listenerLock
com.badlogic.gdx.utils.reflect.ArrayReflection: java.lang.Object newInstance(java.lang.Class,int)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 scale(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.Input$Keys: int META_SYM_ON
com.badlogic.gdx.Graphics: void setGL30(com.badlogic.gdx.graphics.GL30)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void renderObjects(com.badlogic.gdx.maps.MapLayer)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,float)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model model
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadBasicLayerInfo(com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindAttribLocation(int,int,java.lang.String)
com.HyperSphere.Connection.PacketObjects.Misc.Item: int accuracy
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.math.Intersector: boolean intersectSegmentPolygon(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Polygon)
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor Crosshair
com.badlogic.gdx.scenes.scene2d.ui.Tree: void initialize()
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.physics.box2d.Shape: float getRadius()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ANEWARRAY
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: float motorSpeed
com.badlogic.gdx.math.MathUtils: double BIG_ENOUGH_CEIL
com.badlogic.gdx.math.Bezier: float locate(java.lang.Object)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: Kryo$DefaultInstantiatorStrategy()
com.badlogic.gdx.utils.LongMap$Values: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glFramebufferTexture2D(int,int,int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LUSHR
com.badlogic.gdx.input.RemoteInput$KeyEvent: int KEY_UP
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])
com.badlogic.gdx.physics.box2d.JointDef$JointType: JointDef$JointType(java.lang.String,int,int)
com.badlogic.gdx.graphics.g2d.PolygonSprite
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void dispose()
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter BiLinear
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle
com.badlogic.gdx.math.FloatCounter: float max
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3iv(int,int,int[],int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] getYSizeValues()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: boolean jniIsMotorEnabled(long)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setAnimateInterpolation(com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.glutils.InstanceData: void updateInstanceData(int,java.nio.FloatBuffer,int,int)
com.esotericsoftware.jsonbeans.ObjectMap$Keys
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_CROP_BITMAP
com.HyperSphere.Connection.PacketObjects.Map.MapChange
com.esotericsoftware.jsonbeans.Json: java.lang.Class getClass(java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute copy()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_BINDING_2D_ARRAY
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 localCenter
com.badlogic.gdx.utils.IntSet$IntSetIterator: int currentIndex
com.badlogic.gdx.Gdx: com.badlogic.gdx.graphics.GL20 gl
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getMaxMotorForce()
com.google.android.material.bottomsheet.BottomSheetBehavior: BottomSheetBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float prefWidth
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String insert(int,java.lang.CharSequence,java.lang.String)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
com.badlogic.gdx.utils.Array: java.lang.String toString()
com.badlogic.gdx.utils.ByteArray: int hashCode()
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 s
com.badlogic.gdx.Input$TextInputListener: void canceled()
com.badlogic.gdx.InputMultiplexer: boolean touchDown(int,int,int,int)
com.badlogic.gdx.utils.JsonValue: boolean isString()
com.badlogic.gdx.utils.SortedIntList: boolean isEmpty()
com.badlogic.gdx.scenes.scene2d.Actor: boolean isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.assets.AssetManager: boolean contains(java.lang.String)
com.badlogic.gdx.graphics.GL30: void glSampleCoverage(float,boolean)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: SelectBox$SelectBoxList(com.badlogic.gdx.scenes.scene2d.ui.SelectBox)
com.badlogic.gdx.physics.box2d.World: long jniCreateFrictionJoint(long,long,long,boolean,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Skin getSkin()
com.fasterxml.jackson.annotation.JsonTypeInfo$As: com.fasterxml.jackson.annotation.JsonTypeInfo$As valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: com.badlogic.gdx.graphics.Camera camera
androidx.appcompat.widget.ActionBarContainer: void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView)
com.badlogic.gdx.scenes.scene2d.ui.List: void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.net.HttpStatus: int SC_REQUESTED_RANGE_NOT_SATISFIABLE
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform1iv(int,int,int[],int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
com.badlogic.gdx.graphics.g3d.model.NodeAnimation: com.badlogic.gdx.utils.Array translation
com.esotericsoftware.reflectasm.MethodAccess: void recursiveAddInterfaceMethodsToList(java.lang.Class,java.util.ArrayList)
androidx.appcompat.widget.ActivityChooserView$InnerLayout
com.badlogic.gdx.scenes.scene2d.Actor: void setX(float)
com.badlogic.gdx.maps.tiled.TiledMapTileSet
com.badlogic.gdx.backends.android.AndroidClipboard: android.text.ClipboardManager clipboard
com.badlogic.gdx.graphics.Colors: com.badlogic.gdx.graphics.Color get(java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.List)
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.g2d.PixmapPacker$Page getPage(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER10
com.badlogic.gdx.utils.FloatArray: void set(int,float)
com.esotericsoftware.kryonet.util.ObjectIntMap: void clear()
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String getText()
com.google.android.material.chip.Chip: com.google.android.material.resources.TextAppearance getTextAppearance()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void addMesh(com.badlogic.gdx.graphics.Mesh,int,int)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Plane p
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setHeight(float)
com.badlogic.gdx.graphics.GL30: boolean glIsTransformFeedback(int)
com.badlogic.gdx.graphics.g2d.GlyphLayout: void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String,int,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float delay
com.badlogic.gdx.utils.viewport.ScalingViewport: ScalingViewport(com.badlogic.gdx.utils.Scaling,float,float)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: float endHeight
com.badlogic.gdx.utils.ArrayMap$Keys: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: long overallMask
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setStage(com.badlogic.gdx.scenes.scene2d.Stage)
com.esotericsoftware.kryonet.Client: boolean udpRegistered
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Object invoke(java.lang.Object,int,java.lang.Object[])
com.badlogic.gdx.utils.ByteArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder: int _matchPriceCount
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: SimpleInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getYOffsetValue()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle
com.badlogic.gdx.utils.XmlReader$Element: void setText(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput$4: com.badlogic.gdx.backends.android.AndroidInput this$0
com.badlogic.gdx.graphics.GL20: boolean glIsProgram(int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int primitiveType
com.badlogic.gdx.assets.AssetErrorListener: void error(com.badlogic.gdx.assets.AssetDescriptor,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: com.badlogic.gdx.scenes.scene2d.EventListener getListener()
com.badlogic.gdx.graphics.TextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: float maxMotorTorque
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters)
com.esotericsoftware.kryo.Kryo: void addDefaultSerializer(java.lang.Class,com.esotericsoftware.kryo.factories.SerializerFactory)
com.badlogic.gdx.utils.IntSet: void removeStashIndex(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode Pixels
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters: com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat format
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: SequenceAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory: void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: java.lang.Object findKey(int)
com.esotericsoftware.kryo.util.ObjectMap$Entries: java.lang.Object next()
com.esotericsoftware.jsonbeans.JsonValue: float asFloat()
com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry: java.lang.Class type
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: ParticleEffect(com.badlogic.gdx.graphics.g3d.particles.ParticleController[])
com.badlogic.gdx.math.ConvexHull: float[] sortedPoints
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.Actor: boolean ancestorsVisible()
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect: ParticleEffectPool$PooledEffect(com.badlogic.gdx.graphics.g2d.ParticleEffectPool,com.badlogic.gdx.graphics.g2d.ParticleEffect)
com.badlogic.gdx.graphics.GL20: int GL_UNSIGNED_BYTE
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean sizeInvalid
com.badlogic.gdx.backends.android.AndroidDaydream: void postRunnable(java.lang.Runnable)
com.esotericsoftware.kryo.util.ObjectMap$Values
com.esotericsoftware.kryonet.Server: java.lang.Object updateLock
com.badlogic.gdx.graphics.g2d.NinePatch: int topRight
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void stopEglSurfaceLocked()
com.google.android.material.chip.Chip: void setChipBackgroundColor(android.content.res.ColorStateList)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_INVOKEINTERFACE
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.graphics.Color emissive
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: com.badlogic.gdx.utils.Array indices
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: java.lang.String name
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(boolean[])
com.badlogic.gdx.utils.BufferUtils: long getUnsafeBufferAddress(java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void exit()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: java.lang.String alias
com.badlogic.gdx.graphics.VertexAttributes$Usage: int Generic
com.badlogic.gdx.math.Affine2: float det()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_TRICKY
com.badlogic.gdx.backends.android.AndroidGL20: byte[] buffer
com.esotericsoftware.kryo.io.Output: void writeShort(int)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
androidx.appcompat.widget.AppCompatButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.esotericsoftware.kryo.Serializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.JsonValue: JsonValue(double,java.lang.String)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void setReverse(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: void clear()
com.badlogic.gdx.scenes.scene2d.Group: void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawSolidCircle(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.graphics.Color)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.esotericsoftware.kryo.util.IdentityMap: void resize(int)
com.esotericsoftware.jsonbeans.Json: void setSerializer(java.lang.Class,com.esotericsoftware.jsonbeans.JsonSerializer)
com.badlogic.gdx.utils.FloatArray: float[] toArray()
com.badlogic.gdx.utils.Json: void readField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.VertexAttribute: int type
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void removeSource(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source)
com.esotericsoftware.kryo.util.ListReferenceResolver: int addWrittenObject(java.lang.Object)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Matrix4 combined
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$ExpOut exp5Out
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue parse(java.io.Reader)
com.badlogic.gdx.net.HttpStatus: int SC_UNSUPPORTED_MEDIA_TYPE
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart: ModelMeshPart()
com.badlogic.gdx.Preferences: int getInteger(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion cpy()
com.badlogic.gdx.maps.MapLayer: void setOffsetY(float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable vScroll
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector clamp(float,float)
com.badlogic.gdx.backends.android.AndroidApplication: boolean firstResume
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void texCoord(float,float)
com.google.android.material.transformation.ExpandableTransformationBehavior: ExpandableTransformationBehavior()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell grow()
com.badlogic.gdx.math.Circle: void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.Batch: com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float visualAmountY
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Entries entries2
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mDepthSize
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: void setMaxTextureSize(int)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getCounterTextColor()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padRight(float)
com.badlogic.gdx.math.collision.BoundingBox: float max(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getElementType()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void start()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float lastPrefWidth
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.util.IdentityObjectIntMap classToNameId
com.badlogic.gdx.graphics.VertexAttributes$Usage: int BoneWeight
com.badlogic.gdx.graphics.GL30: int GL_COPY_WRITE_BUFFER_BINDING
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: void setDragActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.GL30: void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard
com.esotericsoftware.kryonet.util.ObjectIntMap: int removeStash(java.lang.Object,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getBitmapLeft(long)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Exp exp5
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: float[] getTimeline()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh enableInstancedRendering(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.graphics.glutils.ShaderProgram: int fetchAttributeLocation(java.lang.String)
com.badlogic.gdx.math.Frustum: boolean boundsInFrustum(com.badlogic.gdx.math.collision.BoundingBox)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: com.google.android.material.animation.MotionSpec getHideMotionSpec()
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void setMatrix(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.List: float prefHeight
com.badlogic.gdx.scenes.scene2d.Actor: void setOriginY(float)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.glutils.GLVersion$Type
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void drawAdjusted(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_emissiveUVTransform
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: SimpleInfluencer()
com.badlogic.gdx.graphics.GL20: int GL_MAX_FRAGMENT_UNIFORM_VECTORS
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void onResume()
androidx.fragment.app.Fragment: void onResume()
androidx.appcompat.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable plusOver
com.badlogic.gdx.scenes.scene2d.Event: boolean isStopped()
com.HyperSphere.Connection.PacketObjects.Map.MapChange: MapChange(short,short)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void runOnUiThread(java.lang.Runnable)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: com.badlogic.gdx.graphics.Texture$TextureWrap vWrap
com.badlogic.gdx.utils.LongMap$Values: java.lang.Object next()
com.esotericsoftware.kryo.io.ByteBufferOutput: java.io.OutputStream getOutputStream()
com.esotericsoftware.kryo.io.UnsafeOutput: void writeShorts(short[])
com.esotericsoftware.kryo.util.IntMap$Entries
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: DefaultSerializers$LocaleSerializer()
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float)
com.esotericsoftware.kryo.util.MapReferenceResolver: int addWrittenObject(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setLeftWidth(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGenTexture()
androidx.appcompat.widget.Toolbar: void setTitle(int)
com.badlogic.gdx.utils.Timer$Task: long executeTimeMillis
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy: void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ShortArray: short pop()
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Keys keys()
com.badlogic.gdx.scenes.scene2d.ui.Skin$3: Skin$3(com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.scenes.scene2d.ui.TextField$1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14
com.esotericsoftware.kryonet.UdpConnection: com.esotericsoftware.kryonet.Serialization serialization
com.badlogic.gdx.utils.ObjectIntMap: void resize(int)
com.badlogic.gdx.audio.Sound: long loop(float,float,float)
com.badlogic.gdx.utils.reflect.Method: java.lang.String getName()
com.badlogic.gdx.backends.android.AndroidInput$3$3: void onCancel(android.content.DialogInterface)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int InterpolationDiffOffset
com.badlogic.gdx.scenes.scene2d.InputEvent: int keyCode
com.badlogic.gdx.utils.JsonReader: void pop()
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: PolygonRegionLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int A
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createReflection(com.badlogic.gdx.graphics.Texture)
com.esotericsoftware.jsonbeans.JsonReader: short[] init__json_index_offsets_0()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter Linear
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: ColorInfluencer$Single(com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single)
com.google.android.material.bottomappbar.BottomAppBar
androidx.navigation.NavControllerViewModel
com.esotericsoftware.kryo.Kryo: void beginObject()
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: com.badlogic.gdx.utils.ObjectSet set
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void update(float)
androidx.appcompat.view.menu.ExpandedMenuView
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel regionChannel
com.badlogic.gdx.graphics.PixmapIO$CIM: PixmapIO$CIM()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visitSource(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float padBottom
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isMovable
com.badlogic.gdx.utils.IntMap: void clear()
com.esotericsoftware.kryo.serializers.BlowfishSerializer
com.badlogic.gdx.utils.ShortArray: int size
com.badlogic.gdx.utils.PerformanceCounter: float nano2seconds
com.badlogic.gdx.graphics.TextureData$Factory: TextureData$Factory()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_FAIL
com.badlogic.gdx.graphics.GL30: int GL_BUFFER_MAP_LENGTH
com.badlogic.gdx.graphics.GL30: void glClear(int)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.Input: com.badlogic.gdx.InputProcessor getInputProcessor()
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: void setPrefix(java.lang.String)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeFloat(float)
com.HyperSphere.Connection.PacketObjects.Misc.QuestPage: boolean myself
com.badlogic.gdx.graphics.GL20: int GL_ONE_MINUS_CONSTANT_COLOR
com.badlogic.gdx.graphics.glutils.IndexBufferObject: java.nio.ShortBuffer getBuffer()
com.badlogic.gdx.utils.ShortArray: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean touchScrollH
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: long Type
com.badlogic.gdx.graphics.Color: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getMaxWidth()
com.badlogic.gdx.utils.Pools: void free(java.lang.Object)
com.badlogic.gdx.utils.ShortArray: int indexOf(short)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: float startWidth
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.graphics.Pixmap image
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: RegionInfluencer$Random(com.badlogic.gdx.graphics.Texture)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeChars(char[])
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: void begin(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: DefaultTextureBinder(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteFramebuffer(int)
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int kTopMask
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib3f(int,float,float,float)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.graphics.g2d.PolygonSprite: PolygonSprite(com.badlogic.gdx.graphics.g2d.PolygonRegion)
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_MAT2x3
com.badlogic.gdx.graphics.g3d.model.MeshPart: com.badlogic.gdx.math.Vector3 halfExtents
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: java.lang.String mZipFileName
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int hash2(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getMethodType(java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting None
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Scale
com.badlogic.gdx.utils.ByteArray: boolean ordered
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.backends.android.AndroidGL20: void glFramebufferTexture2D(int,int,int,int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo)
com.google.android.material.button.MaterialButton: void setBackgroundColor(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void setDefaultCullFace(int)
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue parse(java.io.File)
com.badlogic.gdx.graphics.glutils.FloatTextureData: int height
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parseArray(java.io.DataInputStream)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle getStyle()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue getTint()
com.esotericsoftware.jsonbeans.ReadOnlySerializer: ReadOnlySerializer()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector r
com.esotericsoftware.kryo.io.UnsafeMemoryInput: long bufaddress
com.esotericsoftware.kryo.util.IdentityMap: int capacity
com.badlogic.gdx.utils.ObjectMap$Values: com.badlogic.gdx.utils.ObjectMap$Values iterator()
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter array()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.Actor debug()
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float[] tmp
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Rectangle hScrollBounds
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20: DefaultShader$Setters$20()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: void parseMeshes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: void set(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.BitmapFont: boolean integer
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_ADOBE_LATIN_1
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)
com.badlogic.gdx.math.WindowedMean
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: com.esotericsoftware.jsonbeans.ObjectMap map
com.esotericsoftware.jsonbeans.JsonReader: char[] _json_trans_keys
com.esotericsoftware.kryonet.Server: void sendToAllUDP(java.lang.Object)
com.badlogic.gdx.utils.Pool: void freeAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float jniGetFrequency(long)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: MeshPartBuilder$VertexInfo()
com.esotericsoftware.kryo.util.MapReferenceResolver: int getWrittenId(java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int a
com.badlogic.gdx.utils.ComparableTimSort: int MIN_MERGE
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getJointTranslation()
com.badlogic.gdx.math.Polyline: void calculateLength()
com.badlogic.gdx.utils.JsonReader: short[] init__json_key_offsets_0()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getVisualScrollPercentY()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: void layout()
com.badlogic.gdx.scenes.scene2d.Group: void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.input.RemoteInput: boolean isKeyPressed(int)
com.google.android.material.chip.ChipGroup: void setSelectionRequired(boolean)
com.badlogic.gdx.graphics.g2d.PolygonBatch: int getBlendDstFuncAlpha()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int[] pads
com.badlogic.gdx.utils.Json: void writeArrayStart()
com.badlogic.gdx.utils.Base64Coder$CharMap: char[] getEncodingMap()
com.badlogic.gdx.backends.android.AndroidInput: boolean keyJustPressed
com.badlogic.gdx.scenes.scene2d.utils.Selection: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.assets.loaders.CubemapLoader: com.badlogic.gdx.graphics.Cubemap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter)
com.badlogic.gdx.graphics.g3d.decals.Decal: void rotateY(float)
com.badlogic.gdx.utils.ObjectMap$Values: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle: Slider$SliderStyle(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle)
com.badlogic.gdx.utils.IntArray: IntArray(boolean,int[],int,int)
com.badlogic.gdx.utils.IntFloatMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel controllerChannel
com.badlogic.gdx.graphics.GL20: int GL_CLAMP_TO_EDGE
com.badlogic.gdx.math.Interpolation$Elastic: Interpolation$Elastic(float,float,int,float)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Vector2 topLeft
com.esotericsoftware.kryo.io.KryoObjectInput: long skip(long)
com.google.firebase.messaging.FirebaseMessagingRegistrar: com.google.android.datatransport.TransportFactory determineFactory(com.google.android.datatransport.TransportFactory)
com.badlogic.gdx.math.Matrix3: Matrix3(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: int getAssetData(java.lang.String,java.lang.Class)
com.google.android.material.bottomappbar.BottomAppBar: com.google.android.material.bottomappbar.BottomAppBarTopEdgeTreatment getTopEdgeTreatment()
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.esotericsoftware.kryonet.FrameworkMessage$KeepAlive
com.badlogic.gdx.graphics.PixmapIO: com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver: com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas()
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.Camera camera
com.HyperSphere.Connection.PacketObjects.Entities.Creature: com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors getFactors()
com.badlogic.gdx.Input$Keys: int N
com.badlogic.gdx.graphics.g2d.Batch: int X4
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: SpawnInfluencer(com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue)
com.badlogic.gdx.utils.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float angleSin
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.InputStream)
com.badlogic.gdx.graphics.g3d.model.NodePart: NodePart()
com.badlogic.gdx.utils.DelayedRemovalArray: boolean removeValue(java.lang.Object,boolean)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetMaxMotorTorque(long)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4
com.badlogic.gdx.backends.android.AndroidGL30: void glClearBufferuiv(int,int,java.nio.IntBuffer)
com.esotericsoftware.jsonbeans.ObjectMap: java.util.Random random
com.esotericsoftware.kryo.io.KryoObjectInput: int available()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getAdvanceY(long)
com.badlogic.gdx.backends.android.AndroidMouseHandler
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void index(short)
com.badlogic.gdx.utils.JsonValue: boolean getBoolean(java.lang.String,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label i
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.utils.LongArray: int size
com.google.android.material.appbar.AppBarLayout: void setStatusBarForeground(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.decals.Decal: float getY()
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.utils.ObjectIntMap: int capacity
com.badlogic.gdx.scenes.scene2d.ui.Stack: void add(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float,float)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.math.Vector2 centroid
com.badlogic.gdx.utils.OrderedMap: com.badlogic.gdx.utils.ObjectMap$Values values()
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject
com.google.android.material.chip.Chip: void setChipIconTintResource(int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram shader
com.badlogic.gdx.utils.LongMap: java.util.Iterator iterator()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetMaxForce(long,float)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(float[])
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: long basePtr
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.Array animations
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node: boolean full
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: com.badlogic.gdx.math.Vector2 getLocalAxisA()
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: float tangentImpulse
com.badlogic.gdx.utils.reflect.ReflectionException: ReflectionException()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: int currentLife
androidx.appcompat.widget.LinearLayoutCompat: int getGravity()
com.badlogic.gdx.scenes.scene2d.ui.Value
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Quaternion TMP_Q
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: void visitAttribute(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean alt(int)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer)
com.esotericsoftware.kryo.io.UnsafeInput: short readShort()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void load(java.io.BufferedReader)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1: com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0
com.badlogic.gdx.scenes.scene2d.Actor: void setOriginX(float)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: TiledDrawable(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.jsonbeans.JsonWriter: java.util.ArrayList stack
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Table$2: Table$2()
com.badlogic.gdx.files.FileHandle: java.nio.ByteBuffer map(java.nio.channels.FileChannel$MapMode)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: short action
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.math.Vector2 tmp1
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup align(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue lifeValue
com.badlogic.gdx.utils.ByteArray: boolean isEmpty()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool: ParticleControllerInfluencer$Random$ParticleControllerPool(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode NONE
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter: java.lang.String atlasPrefix
com.badlogic.gdx.scenes.scene2d.actions.EventAction: boolean active
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle newParticle(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: boolean isBlendingEnabled()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short,java.lang.Object)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int mapHeightInPixels
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int toGlType(int)
com.esotericsoftware.kryo.util.IntArray: void reverse()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsShader(int)
com.badlogic.gdx.graphics.OrthographicCamera: void setToOrtho(boolean,float,float)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void drawOver(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.graphics.Color reflection
com.badlogic.gdx.utils.ArrayMap: boolean removeValue(java.lang.Object,boolean)
com.esotericsoftware.kryo.io.KryoObjectOutput: void close()
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: int vertexCount
com.badlogic.gdx.math.Vector: boolean isCollinear(com.badlogic.gdx.math.Vector,float)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: float getCollisionPosY()
com.esotericsoftware.kryo.io.ByteBufferInput: boolean canReadLong()
com.badlogic.gdx.physics.box2d.World: void rayCast(com.badlogic.gdx.physics.box2d.RayCastCallback,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.Screen: void resize(int,int)
com.badlogic.gdx.math.Matrix4: void extract4x3Matrix(float[])
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int h
com.badlogic.gdx.utils.IntFloatMap$Entries
com.badlogic.gdx.graphics.glutils.IndexBufferObject: java.nio.ShortBuffer buffer
com.badlogic.gdx.input.RemoteInput$TouchEvent: int TOUCH_UP
com.badlogic.gdx.scenes.scene2d.utils.Layout: void layout()
com.badlogic.gdx.Net$HttpResponseListener: void failed(java.lang.Throwable)
com.esotericsoftware.kryo.util.IntArray: int get(int)
com.badlogic.gdx.graphics.PixmapIO$CIM: byte[] readBuffer
com.badlogic.gdx.backends.android.AndroidAudio: com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: void setRound(boolean)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory objectFieldFactory
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.glutils.IndexData indices
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_TARGET_LCD_V
com.esotericsoftware.kryo.util.IntArray: void addAll(int[],int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config config
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool: void flush()
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: java.lang.String getPrefix()
com.badlogic.gdx.graphics.GL30: int GL_DRAW_FRAMEBUFFER
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void layout()
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[])
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.graphics.Pixmap: Pixmap(byte[],int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Widget: Widget()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float spawnHeight
com.badlogic.gdx.scenes.scene2d.ui.Widget: boolean fillParent
com.badlogic.gdx.graphics.GL20: int GL_KEEP
com.HyperSphere.Connection.PacketObjects.Misc.Item: Item()
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean changeText(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.Queue$QueueIterable: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.NinePatch: int bottomCenter
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType WebGL
com.badlogic.gdx.graphics.TextureArrayData: int getInternalFormat()
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.OutputType outputType
androidx.fragment.app.Fragment: void onDestroyOptionsMenu()
com.badlogic.gdx.utils.IntMap: int hash3(int)
com.badlogic.gdx.scenes.scene2d.ui.Image: void setDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType nullValue
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DADD
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: ResourceData$SaveData()
com.badlogic.gdx.utils.IntMap: void putAll(com.badlogic.gdx.utils.IntMap)
com.badlogic.gdx.utils.ShortArray: void addAll(com.badlogic.gdx.utils.ShortArray,int,int)
androidx.appcompat.widget.AppCompatRadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void reload()
com.badlogic.gdx.utils.StringBuilder: int indexOf(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.Attribute: long type
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: void setMesh(com.badlogic.gdx.graphics.Mesh)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: int nextIndex
com.badlogic.gdx.backends.android.AndroidInput: java.util.ArrayList touchEvents
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 axis
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter reflectionColor
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: boolean isPrepared()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.math.collision.BoundingBox bounds
com.badlogic.gdx.graphics.g2d.BitmapFont: int PAGE_SIZE
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 e
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput(int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage: PixmapPacker$SkylineStrategy$SkylinePage(com.badlogic.gdx.graphics.g2d.PixmapPacker)
com.badlogic.gdx.utils.reflect.Annotation: java.lang.annotation.Annotation annotation
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT5
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.GL30: int glGetAttribLocation(int,java.lang.String)
androidx.fragment.app.Fragment: boolean isRemovingParent()
com.badlogic.gdx.utils.ByteArray: boolean removeAll(com.badlogic.gdx.utils.ByteArray)
androidx.core.widget.NestedScrollView: void setFillViewport(boolean)
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue: RectangleSpawnShapeValue()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: ImageTextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle: TextTooltip$TextTooltipStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.Action: com.badlogic.gdx.scenes.scene2d.Actor getTarget()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation smooth2
com.hyperspherestudio.kryonet.Packets.PacketStream: java.util.concurrent.CopyOnWriteArrayList idList
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: byte[] b
com.badlogic.gdx.graphics.Pixmap: void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int)
com.badlogic.gdx.maps.objects.TextureMapObject: float scaleX
com.badlogic.gdx.utils.PauseableThread: boolean paused
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: void init()
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: float duration
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setPosition(float,float)
com.badlogic.gdx.Net: com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.utils.DelayedRemovalArray: void removeRange(int,int)
com.badlogic.gdx.graphics.g3d.ModelInstance: void invalidate()
com.badlogic.gdx.backends.android.AndroidGL20: void glViewport(int,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,int,int)
com.badlogic.gdx.maps.tiled.TiledMapTileSets: void removeTileSet(int)
com.badlogic.gdx.graphics.GL20: int GL_SHORT
com.badlogic.gdx.input.RemoteInput: void setCatchBackKey(boolean)
com.badlogic.gdx.graphics.g3d.decals.Decal: int V4
com.badlogic.gdx.utils.XmlReader: byte[] _xml_indicies
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setName(java.lang.String)
com.badlogic.gdx.graphics.g2d.NinePatch: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.ui.Value$4
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Generics genericsScope
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: DynamicsInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier[])
com.badlogic.gdx.ApplicationListener: void create()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload payload
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_shininess
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: int STRAFE_RIGHT
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2
com.esotericsoftware.kryonet.UdpConnection: void close()
com.badlogic.gdx.utils.IntIntMap: IntIntMap(int,float)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: java.lang.Class componentType
com.badlogic.gdx.utils.ArrayMap$Entries: void remove()
com.badlogic.gdx.scenes.scene2d.actions.AddAction
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter n
com.google.firebase.iid.Registrar: com.google.firebase.iid.internal.FirebaseInstanceIdInternal lambda$getComponents$1$Registrar(com.google.firebase.components.ComponentContainer)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void build()
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.maps.tiled.TiledMap load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void index(short,short,short,short,short,short,short,short)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: java.lang.String TAG
androidx.appcompat.widget.ContentFrameLayout: ContentFrameLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.viewport.FillViewport
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 shear(float,float)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void setSorter(com.badlogic.gdx.graphics.g3d.particles.ParticleSorter)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.utils.compression.CRC: int GetDigest()
com.badlogic.gdx.utils.IntArray: IntArray(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setSize(float)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.utils.Array pooledLayouts
com.gameanalytics.sdk.logging.EGALoggerMessageType: com.gameanalytics.sdk.logging.EGALoggerMessageType[] values()
com.esotericsoftware.kryo.serializers.DeflateSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidClipboard clipboard
androidx.appcompat.widget.AppCompatCheckedTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
com.badlogic.gdx.graphics.g2d.SpriteBatch: int idx
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitMaxs(int,int)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: TiledMapTile$BlendMode(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup pad(float,float,float,float)
com.badlogic.gdx.graphics.g2d.SpriteBatch: int getBlendDstFunc()
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter: SkinLoader$SkinParameter()
com.badlogic.gdx.graphics.g2d.PolygonRegion
com.badlogic.gdx.graphics.g2d.PolygonSprite: void translateX(float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer onei
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(byte[],int,int)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializerAnnotationsUtil annotationsUtil
com.badlogic.gdx.physics.box2d.Contact
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2[] vertices
com.badlogic.gdx.math.Polyline: boolean dirty
com.badlogic.gdx.math.Vector2: float dst(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean getExpand()
com.esotericsoftware.kryo.util.ObjectMap$Entries: com.esotericsoftware.kryo.util.ObjectMap$Entry entry
com.badlogic.gdx.utils.PooledLinkedList: void add(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: CheckBox$CheckBoxStyle(com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: void setCircularRevealScrimColor(int)
com.badlogic.gdx.backends.android.AndroidAudio: android.media.AudioManager manager
com.badlogic.gdx.utils.compression.lzma.Encoder: void CodeOneBlock(long[],long[],boolean[])
androidx.appcompat.widget.AppCompatImageButton: void setImageBitmap(android.graphics.Bitmap)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setDropDownBackgroundResource(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float spawnHeightDiff
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3
com.badlogic.gdx.backends.android.AndroidInput: void setCursorPosition(int,int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.Color tmpColor4
com.badlogic.gdx.graphics.GL30: int GL_MAX_ELEMENTS_VERTICES
com.badlogic.gdx.scenes.scene2d.Actor: java.lang.String toString()
com.esotericsoftware.kryo.io.Input: byte[] getBuffer()
androidx.fragment.app.Fragment: void onDestroyView()
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setScaling(float[])
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void setCursorPosition(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: AnnotationWriter(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,boolean,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector,int)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode valueOf(java.lang.String)
com.badlogic.gdx.utils.Array: void reverse()
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: com.badlogic.gdx.math.Rectangle cacheBounds
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE28
com.badlogic.gdx.scenes.scene2d.ui.Value$7: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.IntFloatMap: IntFloatMap()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setOnClickListener(android.view.View$OnClickListener)
com.badlogic.gdx.utils.IdentityMap$Keys: void reset()
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLenToPosStatesBits
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: java.lang.String string
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.glutils.InstanceData: void invalidate()
com.badlogic.gdx.graphics.GL20: int GL_BLUE_BITS
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: RegionInfluencer$Animated(com.badlogic.gdx.graphics.Texture)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getFragmentManager()
com.esotericsoftware.kryo.io.ByteBufferInput: void setBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.utils.SnapshotArray: void removeRange(int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: com.badlogic.gdx.math.Vector3 TMP_VECTOR3
com.badlogic.gdx.graphics.g2d.NinePatch: com.badlogic.gdx.graphics.Color getColor()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler C
com.badlogic.gdx.backends.android.AndroidGL30: void glTransformFeedbackVaryings(int,java.lang.String[],int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: ParticleEmitter$RangedNumericValue()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDragY()
com.badlogic.gdx.backends.android.AndroidApplication: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.ui.Window$2: Window$2(com.badlogic.gdx.scenes.scene2d.ui.Window)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getStartIconDrawable()
com.esotericsoftware.kryo.io.KryoObjectInput: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.graphics.g2d.NinePatch: float getRightWidth()
com.badlogic.gdx.graphics.TextureArrayData$Factory: com.badlogic.gdx.graphics.TextureArrayData loadFromFiles(com.badlogic.gdx.graphics.Pixmap$Format,boolean,com.badlogic.gdx.files.FileHandle[])
com.badlogic.gdx.Input$Keys: int PERIOD
com.badlogic.gdx.utils.ObjectMap: ObjectMap(com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawCircle(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.Layout: float getMinWidth()
com.badlogic.gdx.utils.IntFloatMap: float removeStash(int,float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureVertices(int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void disableBlending()
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getLinearVelocity()
com.badlogic.gdx.graphics.g3d.model.MeshPart: int size
com.badlogic.gdx.utils.SortedIntList$Iterator: SortedIntList$Iterator(com.badlogic.gdx.utils.SortedIntList)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void postRunnable(java.lang.Runnable)
com.esotericsoftware.jsonbeans.JsonValue: int getInt(int)
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Keys keys1
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setOverNode(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.physics.box2d.Body: void jniApplyForceToCenter(long,float,float,boolean)
com.badlogic.gdx.graphics.glutils.ETC1: com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImage(com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.scenes.scene2d.actions.AddAction: void restart()
com.badlogic.gdx.graphics.GL30: void glBeginTransformFeedback(int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean getPackToTexture()
com.badlogic.gdx.graphics.GL30: int GL_SAMPLER_2D_SHADOW
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int EGL_OPENGL_ES2_BIT
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: float borderGamma
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Values values2
com.badlogic.gdx.backends.android.AndroidFiles: java.lang.String localpath
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: boolean relative
com.esotericsoftware.kryo.util.IdentityMap$Values: void remove()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector putShort(int)
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle: Label$LabelStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int getStencilBufferHandle()
com.badlogic.gdx.maps.MapLayer: float getOpacity()
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable tint(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc newObject()
com.badlogic.gdx.graphics.PixmapIO
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.assets.AssetLoadingTask: boolean update()
com.badlogic.gdx.graphics.CubemapData: int getHeight()
com.badlogic.gdx.graphics.PerspectiveCamera
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float getItemCenterY()
com.badlogic.gdx.scenes.scene2d.Group: void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.GL30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int SIPUSH
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_R11_EAC
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createReflection(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.TextureArray: java.util.Map managedTextureArrays
com.badlogic.gdx.math.Ellipse: boolean contains(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.util.IntArray: int[] toArray()
com.badlogic.gdx.graphics.GL20: void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.graphics.GLTexture: void reload()
com.badlogic.gdx.graphics.GL20: int GL_UNPACK_ALIGNMENT
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void save(java.io.Writer)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target: void reset(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload)
com.badlogic.gdx.scenes.scene2d.Actor: void setScale(float,float)
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_DEPTH_SIZE
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: int currentSide
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context,android.util.AttributeSet,int)
com.badlogic.gdx.backends.android.AndroidDaydream: void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.Input$Keys: int K
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,int)
com.badlogic.gdx.physics.box2d.BodyDef: boolean fixedRotation
com.badlogic.gdx.graphics.g3d.ModelCache$1: com.badlogic.gdx.graphics.g3d.ModelCache this$0
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int scaleForPixelHeight(int)
com.badlogic.gdx.utils.Json: void setUsePrototypes(boolean)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void addStaticTiledMapTile(com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.graphics.g2d.TextureRegion,int,float,float)
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer: OrthogonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap)
com.google.android.material.appbar.AppBarLayout$Behavior: AppBarLayout$Behavior(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryonet.rmi.ObjectSpace: void addConnection(com.esotericsoftware.kryonet.Connection)
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(int)
com.badlogic.gdx.maps.objects.PolygonMapObject: com.badlogic.gdx.math.Polygon polygon
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.esotericsoftware.kryonet.KryoSerialization: void write(com.esotericsoftware.kryonet.Connection,java.nio.ByteBuffer,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.scenes.scene2d.utils.Drawable
com.badlogic.gdx.graphics.TextureArrayData: boolean isManaged()
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: java.lang.String mFileName
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: boolean isBound
com.esotericsoftware.kryo.io.UnsafeInput: UnsafeInput()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float position
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.ReferenceResolver: int nextReadId(java.lang.Class)
com.badlogic.gdx.graphics.glutils.IndexData: void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter b
com.badlogic.gdx.utils.reflect.Constructor: Constructor(java.lang.reflect.Constructor)
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType LWJGL
com.badlogic.gdx.net.NetJavaImpl$2: boolean val$doingOutPut
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_MIN_LOD
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1: AndroidVisibilityListener$1(com.badlogic.gdx.backends.android.AndroidVisibilityListener,com.badlogic.gdx.backends.android.AndroidApplicationBase)
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER4
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 X
com.badlogic.gdx.graphics.GL30: int GL_RGB32I
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraInvDirection
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel valueChannel
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform4fv(java.lang.String,float[],int,int)
com.badlogic.gdx.physics.box2d.World$1: com.badlogic.gdx.physics.box2d.Body newObject()
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable disabled
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE10
com.badlogic.gdx.Input: int getX()
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: boolean hasNext
com.esotericsoftware.kryo.util.IntMap: boolean containsKey(int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawRect(long,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: long getMetrics(long)
com.badlogic.gdx.InputAdapter: boolean keyTyped(char)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getFaceFlags()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getAdvanceX(long)
com.badlogic.gdx.graphics.GL20: void glTexParameterf(int,int,float)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.TextureArray: int getDepth()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawSolidPolygon(com.badlogic.gdx.math.Vector2[],int,com.badlogic.gdx.graphics.Color,boolean)
com.badlogic.gdx.graphics.TextureArray: TextureArray(java.lang.String[])
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotY(float)
com.badlogic.gdx.graphics.VertexAttributes$Usage: int Tangent
com.badlogic.gdx.utils.ArrayMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entry entry
com.badlogic.gdx.utils.BufferUtils: long findFloats(java.nio.Buffer,int,java.nio.Buffer,int)
com.esotericsoftware.kryonet.Listener$QueuedListener$3: java.lang.Object val$object
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int mGreenSize
com.badlogic.gdx.physics.box2d.Fixture: long addr
com.badlogic.gdx.utils.Bits: Bits(int)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE5
com.badlogic.gdx.net.NetJavaImpl$2: com.badlogic.gdx.Net$HttpResponseListener val$httpResponseListener
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: com.badlogic.gdx.graphics.Color temp
com.badlogic.gdx.graphics.GL30: int GL_RG
com.badlogic.gdx.graphics.g3d.decals.GroupPlug: void beforeGroup(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: boolean offsetsConsumed
com.badlogic.gdx.graphics.glutils.VertexArray: java.nio.FloatBuffer getBuffer()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE25
com.esotericsoftware.kryo.util.ObjectMap$Keys: ObjectMap$Keys(com.esotericsoftware.kryo.util.ObjectMap)
com.badlogic.gdx.utils.reflect.ArrayReflection: void set(java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String vertexShaderSource
com.badlogic.gdx.backends.android.AndroidMusic: void setPan(float,float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(float)
com.badlogic.gdx.backends.android.AndroidGL30: void glResumeTransformFeedback()
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean _needReleaseMFStream
com.badlogic.gdx.scenes.scene2d.ui.Table: float tablePrefHeight
com.badlogic.gdx.graphics.g2d.Animation: com.badlogic.gdx.graphics.g2d.Animation$PlayMode playMode
com.badlogic.gdx.net.NetJavaSocketImpl: NetJavaSocketImpl(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
com.badlogic.gdx.utils.IntSet$IntSetIterator: boolean hasNext
com.badlogic.gdx.utils.JsonReader: void number(java.lang.String,double,java.lang.String)
com.badlogic.gdx.graphics.g3d.model.Node: java.lang.Iterable getChildren()
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: int hashCode()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: boolean isReverse()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks callbacks
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mAlphaSize
com.badlogic.gdx.math.MathUtils: float sin(float)
com.badlogic.gdx.maps.tiled.TiledMapTileSets: com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV1
com.badlogic.gdx.utils.reflect.ReflectionException: ReflectionException(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.utils.Align: boolean isLeft(int)
com.badlogic.gdx.utils.Pool: Pool()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int removeStash(java.lang.Object,int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: ProgressBar(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FMUL
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isModal()
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float y2
com.badlogic.gdx.assets.loaders.CubemapLoader: com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo info
com.esotericsoftware.kryo.io.ByteBufferInput: long[] readLongs(int)
com.badlogic.gdx.utils.ByteArray: ByteArray(com.badlogic.gdx.utils.ByteArray)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: float vOffset
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void translate(float,float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController
com.badlogic.gdx.utils.SortedIntList: com.badlogic.gdx.utils.SortedIntList$Iterator iterator
com.badlogic.gdx.backends.android.AndroidPreferences: void flush()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.google.android.material.bottomappbar.BottomAppBar: androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior getBehavior()
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.Registration memoizedClassValue
com.esotericsoftware.kryo.io.ByteBufferOutput: void setBuffer(java.nio.ByteBuffer,int)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: float overCache
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void dispose()
com.badlogic.gdx.backends.android.AndroidApplication: void postRunnable(java.lang.Runnable)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.math.GeometryUtils: void ensureCCW(float[])
com.badlogic.gdx.math.Matrix4: int M01
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter emissiveColor
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Cookie
com.badlogic.gdx.graphics.g3d.ModelCache$1: ModelCache$1(com.badlogic.gdx.graphics.g3d.ModelCache)
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: int getSrcBlendFactor()
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel
com.badlogic.gdx.Input$Keys: int NUM_0
com.badlogic.gdx.graphics.glutils.VertexArray: void updateVertices(int,float[],int,int)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority[] values()
com.esotericsoftware.kryo.factories.ReflectionSerializerFactory: ReflectionSerializerFactory(java.lang.Class)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void setIndices(short[],int,int)
com.badlogic.gdx.physics.box2d.Body: void jniGetLinearVelocity(long,float[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int updateFlags
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE16
com.badlogic.gdx.assets.AssetManager: boolean isLoaded(java.lang.String)
com.esotericsoftware.kryo.KryoCopyable
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void setEdges(boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getKerning(long,int,int,int)
com.esotericsoftware.kryonet.TcpConnection: int send(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.Stage: void dispose()
com.badlogic.gdx.scenes.scene2d.Group: void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.Transform getTransform()
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getLinearVertAdvance(long)
com.esotericsoftware.kryo.util.IntMap: int size
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: void reset()
com.badlogic.gdx.scenes.scene2d.Actor: void setHeight(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int YOffset
com.badlogic.gdx.input.GestureDetector
com.badlogic.gdx.math.Intersector$SplitTriangle: float[] edgeSplit
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: boolean hasColor
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color SHAPE_STATIC
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion nor()
com.badlogic.gdx.net.NetJavaImpl$1: NetJavaImpl$1(com.badlogic.gdx.net.NetJavaImpl)
com.badlogic.gdx.net.HttpStatus: int SC_BAD_REQUEST
com.badlogic.gdx.math.Vector: boolean isOnLine(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2: java.lang.Object newObject()
com.esotericsoftware.kryonet.Connection
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDuration()
com.badlogic.gdx.graphics.g2d.GlyphLayout: com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,com.badlogic.gdx.utils.Pool,int,int)
com.badlogic.gdx.utils.XmlReader$Element: boolean hasChildRecursive(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: ClassWriter(int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.ApplicationListener listener
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.InputListener ignoreTouchDown
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void setDragStartY(float)
com.google.android.material.chip.ChipGroup: void setSingleSelection(boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteBuffer(int)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void activateParticles(int,int)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.maps.MapProperties properties
com.badlogic.gdx.input.RemoteInput: boolean isCursorCatched()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: int button
com.badlogic.gdx.graphics.g3d.Material: Material(java.lang.String)
com.badlogic.gdx.maps.MapProperties: void put(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setOrigin(float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGetAttribLocation(int,java.lang.String)
com.badlogic.gdx.graphics.Texture: void dispose()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Reflection
com.badlogic.gdx.files.FileHandle: java.io.Writer writer(boolean,java.lang.String)
com.badlogic.gdx.utils.TimSort: TimSort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 scl(float,float,float)
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: void remove()
androidx.recyclerview.widget.RecyclerView: long getNanoTime()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraPosition
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.badlogic.gdx.input.RemoteInput: void setInputProcessor(com.badlogic.gdx.InputProcessor)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,int[],com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.badlogic.gdx.graphics.glutils.ShaderProgram: void enableVertexAttribute(int)
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction: LayoutAction()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.math.Vector2 tmpVector
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.Array getExecutedRunnables()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: java.nio.FloatBuffer getBuffer()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glFlush()
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void add(com.badlogic.gdx.scenes.scene2d.ui.Button)
com.badlogic.gdx.scenes.scene2d.ui.Value$8
com.badlogic.gdx.graphics.glutils.ETC1: java.nio.ByteBuffer encodeImage(java.nio.ByteBuffer,int,int,int,int)
com.google.android.material.textfield.MaterialAutoCompleteTextView
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_emissiveColor
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT14
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isBehind()
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.utils.compression.lzma.Decoder: boolean SetDecoderProperties(byte[])
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.graphics.g3d.Renderable setRenderable(com.badlogic.gdx.graphics.g3d.Renderable)
androidx.appcompat.widget.AppCompatButton: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBindAttribLocation(int,int,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell row()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: android.os.Handler getHandler()
com.badlogic.gdx.utils.IdentityMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: void setOffsetFromFile(java.io.RandomAccessFile,java.nio.ByteBuffer)
com.esotericsoftware.jsonbeans.JsonException: void addTrace(java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreetypeBuild: FreetypeBuild()
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType Mock
com.badlogic.gdx.utils.BufferUtils: java.nio.ShortBuffer newShortBuffer(int)
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle merge(float,float)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: boolean animations
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 trn(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable focused
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_KERNING_UNSCALED
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: float getTextY(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.utils.SortedIntList$Node: SortedIntList$Node()
com.badlogic.gdx.physics.box2d.Transform: Transform(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.utils.LongMap: boolean containsKey(long)
com.badlogic.gdx.graphics.g2d.TextureAtlas: void dispose()
com.HyperSphere.Connection.PacketObjects.Map.WorldKey
com.badlogic.gdx.graphics.g2d.Sprite: float getY()
com.badlogic.gdx.utils.JsonValue: boolean isArray()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters)
com.badlogic.gdx.assets.loaders.MusicLoader
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float posY
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean inTapSquare()
com.badlogic.gdx.utils.ArrayMap: void clear(int)
com.google.android.material.chip.Chip: void setCloseIconSizeResource(int)
com.badlogic.gdx.graphics.profiling.GLErrorListener$2: GLErrorListener$2()
com.badlogic.gdx.utils.IntSet: int capacity
com.badlogic.gdx.scenes.scene2d.ui.Slider$1
com.esotericsoftware.kryo.Registration: java.lang.Class getType()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData)
com.badlogic.gdx.Input$Keys: int SHIFT_RIGHT
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector quadratic_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer copy()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float splitAmount
com.google.android.gms.signin.internal.zaj: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature[] values()
com.esotericsoftware.kryo.io.Output: void write(byte[],int,int)
com.badlogic.gdx.graphics.GL30: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: AnnotationVisitor(int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor)
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle fitInside(com.badlogic.gdx.math.Rectangle)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: boolean elementsAreSameType
com.badlogic.gdx.utils.XmlReader: int xml_en_elementBody
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment requireParentFragment()
com.esotericsoftware.kryo.io.ByteBufferOutputStream: ByteBufferOutputStream(java.nio.ByteBuffer)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: char[] capChars
com.esotericsoftware.kryo.io.Output: Output(byte[])
com.badlogic.gdx.utils.PooledLinkedList: int size
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String SpecularAlias
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.utils.XmlWriter: void indent()
com.badlogic.gdx.graphics.g2d.Sprite: void setCenter(float,float)
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver: LocalFileHandleResolver()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights0direction
com.badlogic.gdx.graphics.GL30: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.graphics.GL30: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void reset()
com.esotericsoftware.kryo.serializers.FieldSerializerAnnotationsUtil: void processAnnotatedFields(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: void resetCounts()
com.badlogic.gdx.graphics.GL30: int GL_R11F_G11F_B10F
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh: com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart[] parts
com.badlogic.gdx.utils.viewport.Viewport: void update(int,int)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
androidx.versionedparcelable.ParcelImpl
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector tmp3
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float[] getScaling()
com.esotericsoftware.kryo.io.Input: int capacity
com.badlogic.gdx.backends.android.AndroidGraphics: void logConfig(javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float[] getVertices(int)
com.badlogic.gdx.utils.NumberUtils: int floatToIntBits(float)
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
com.badlogic.gdx.graphics.PerspectiveCamera: void update()
com.badlogic.gdx.utils.IdentityMap: IdentityMap()
com.badlogic.gdx.graphics.g2d.Batch: int C3
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glReleaseShaderCompiler()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void onResume()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_STRICT
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector cpy()
com.badlogic.gdx.math.Polygon: float y
com.badlogic.gdx.utils.ArrayMap$Keys: java.lang.Object next()
com.badlogic.gdx.utils.ObjectFloatMap: int stashSize
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureTriangleIndices(int)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void flushAndSyncTransformMatrix()
com.badlogic.gdx.math.Rectangle: float height
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String getMessageText()
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.ApplicationLogger applicationLogger
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: ParticleShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.math.MathUtils: float E
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: float[] temp
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitTypeInsn(int,java.lang.String)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide both
com.badlogic.gdx.graphics.GL20: int GL_IMPLEMENTATION_COLOR_READ_TYPE
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.utils.ShortArray indices
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult: java.lang.Object result
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: com.badlogic.gdx.utils.Array pages
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color GOLDENROD
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.io.InputStream)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidMouseHandler: void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long)
com.badlogic.gdx.graphics.Cubemap: Cubemap(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.files.FileHandle: boolean exists()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Class[] generics
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: void writeExternal(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.physics.box2d.World: long jniCreateGearJoint(long,long,long,boolean,long,long,float)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean keyUp(int)
com.badlogic.gdx.graphics.g2d.BitmapFont: boolean ownsTexture
com.badlogic.gdx.graphics.glutils.ShaderProgram: void fetchAttributes()
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void update()
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: java.lang.Class setMethodType
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getXppem()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int pressedButton
com.google.android.material.chip.Chip: java.lang.CharSequence getChipText()
com.esotericsoftware.kryo.util.ObjectMap$Entries
com.esotericsoftware.kryo.serializers.MapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)
com.badlogic.gdx.backends.android.AndroidGL30: java.lang.String glGetActiveUniformBlockName(int,int)
com.badlogic.gdx.graphics.PixmapIO$PNG: int IDAT
com.badlogic.gdx.graphics.g2d.Sprite: void setX(float)
com.badlogic.gdx.utils.PropertiesUtils: void store(com.badlogic.gdx.utils.ObjectMap,java.io.Writer,java.lang.String)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram customShader
com.badlogic.gdx.utils.compression.lzma.Encoder: void Code(java.io.InputStream,java.io.OutputStream,long,long,com.badlogic.gdx.utils.compression.ICodeProgress)
com.badlogic.gdx.graphics.PixmapIO$PNG: com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer buffer
com.badlogic.gdx.maps.MapLayer: boolean renderOffsetDirty
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder url(java.lang.String)
com.badlogic.gdx.graphics.Cubemap: Cubemap(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.assets.loaders.PixmapLoader: PixmapLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _isMatch
com.esotericsoftware.jsonbeans.JsonException: boolean causedBy(java.lang.Class)
com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer
com.badlogic.gdx.math.Intersector: float intersectLinePlane(float,float,float,float,float,float,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryo.io.ByteBufferInputStream: int available()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void setStage(com.badlogic.gdx.scenes.scene2d.Stage)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform3fv(int,int,float[],int)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setY(float)
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: boolean isFlipVertically()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5: ParticleShader$Setters$5()
com.badlogic.gdx.graphics.GL30: void glLinkProgram(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Vector3 TMP_V6
com.badlogic.gdx.physics.box2d.joints.GearJoint: GearJoint(com.badlogic.gdx.physics.box2d.World,long,com.badlogic.gdx.physics.box2d.Joint,com.badlogic.gdx.physics.box2d.Joint)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable cursor
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: void setX(float)
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Class unsafeUtilClass
com.badlogic.gdx.math.Matrix3: int M12
com.badlogic.gdx.utils.CharArray: char[] shrink()
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)
com.esotericsoftware.kryo.io.Output: void writeUtf8Length(int)
com.badlogic.gdx.backends.android.AndroidPreferences: com.badlogic.gdx.Preferences putFloat(java.lang.String,float)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: java.lang.String createVertexShader(boolean,boolean,int)
androidx.appcompat.widget.Toolbar: void setTitleMarginStart(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setVelocityY(float)
androidx.appcompat.widget.AppCompatButton: int[] getAutoSizeTextAvailableSizes()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(java.lang.String,java.lang.String,int)
com.badlogic.gdx.backends.android.AndroidGraphics: int getWidth()
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float getVelocityY()
com.badlogic.gdx.scenes.scene2d.InputListener: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.esotericsoftware.kryonet.Listener$QueuedListener$4: com.esotericsoftware.kryonet.Listener$QueuedListener this$0
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float,float)
com.badlogic.gdx.graphics.g2d.BitmapFont: float getXHeight()
com.badlogic.gdx.graphics.g2d.TextureAtlas$1: TextureAtlas$1()
com.badlogic.gdx.utils.XmlReader: int xml_first_final
com.badlogic.gdx.Input$Keys: int ANY_KEY
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer: DefaultSerializers$CurrencySerializer()
com.badlogic.gdx.utils.StringBuilder: int hashCode()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Location
com.badlogic.gdx.Version: boolean isHigher(int,int,int)
com.badlogic.gdx.utils.IntSet: void addStash(int)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton
com.badlogic.gdx.utils.viewport.StretchViewport: StretchViewport(float,float)
com.badlogic.gdx.math.Vector2: int hashCode()
androidx.recyclerview.widget.RecyclerView: int getMinFlingVelocity()
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.BaseLight)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_FORMAT_ALPHA
com.badlogic.gdx.Input: float getAccelerometerZ()
com.esotericsoftware.kryo.ReferenceResolver: int addWrittenObject(java.lang.Object)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float[] vertices
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_MONOCHROME
androidx.appcompat.widget.AppCompatSpinner: android.graphics.drawable.Drawable getPopupBackground()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int I2L
com.esotericsoftware.minlog.Log: int LEVEL_INFO
com.badlogic.gdx.scenes.scene2d.ui.Tree: float indentSpacing
com.badlogic.gdx.scenes.scene2d.Group: boolean transform
com.badlogic.gdx.assets.AssetManager: int loaded
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setScaling(float[])
androidx.appcompat.widget.AppCompatTextView: int[] getAutoSizeTextAvailableSizes()
com.badlogic.gdx.physics.box2d.World: long jniCreateWeldJoint(long,long,long,boolean,float,float,float,float,float,float,float)
com.badlogic.gdx.math.Ellipse: boolean equals(java.lang.Object)
com.badlogic.gdx.math.GeometryUtils: float fromBarycoord(com.badlogic.gdx.math.Vector2,float,float,float)
com.badlogic.gdx.backends.android.AndroidInput: boolean isTouched(int)
com.badlogic.gdx.graphics.g2d.NinePatch: int TOP_LEFT
com.badlogic.gdx.utils.ArrayMap: void setKey(int,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: ShapeRenderer()
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: void setColors(float[])
com.badlogic.gdx.maps.tiled.TiledMapTile: float getOffsetX()
androidx.fragment.app.Fragment: void onPause()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: int currentIndex
com.badlogic.gdx.utils.Array$ArrayIterator: void remove()
com.google.android.material.bottomappbar.BottomAppBar$Behavior: BottomAppBar$Behavior()
com.esotericsoftware.kryo.io.Input: int limit
com.badlogic.gdx.utils.JsonReader: JsonReader()
com.esotericsoftware.kryonet.Listener$QueuedListener: com.esotericsoftware.kryonet.Listener listener
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp2
com.badlogic.gdx.graphics.GL20: int GL_MAX_TEXTURE_SIZE
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: DefaultTextureBinder(int,int,int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib4f(int,float,float,float,float)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerPadding(int)
com.badlogic.gdx.graphics.GL30: int glCreateProgram()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: void setCapacity(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void removeInfluencer(java.lang.Class)
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver: com.badlogic.gdx.graphics.g2d.TextureAtlas atlas
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 rotateRad(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.List: void setSelection(com.badlogic.gdx.scenes.scene2d.utils.ArraySelection)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager instance
com.badlogic.gdx.graphics.Pixmap: int getHeight()
com.esotericsoftware.jsonbeans.OutputType: java.lang.String quoteValue(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float getMinHeight()
com.badlogic.gdx.utils.IntMap: java.lang.Object get(int)
com.badlogic.gdx.utils.IntMap: int PRIME3
com.badlogic.gdx.utils.JsonWriter$OutputType: java.util.regex.Pattern minimalNamePattern
com.badlogic.gdx.scenes.scene2d.ui.Window$1: com.badlogic.gdx.scenes.scene2d.ui.Window this$0
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: android.opengl.GLSurfaceView$Renderer access$1000(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.google.android.material.chip.Chip: float getChipMinHeight()
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: com.esotericsoftware.jsonbeans.JsonValue entry
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int[] s_configAttribs2
com.badlogic.gdx.utils.BooleanArray
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int INT
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix4fv(int,int,boolean,float[],int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: void killParticles(int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.Color disabledFontColor
com.badlogic.gdx.utils.ObjectSet: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode emissionMode
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener
com.badlogic.gdx.assets.AssetManager: int toLoad
com.badlogic.gdx.utils.ObjectSet: boolean contains(java.lang.Object)
com.esotericsoftware.kryo.util.UnsafeUtil
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.GL30: void glSamplerParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void update(float)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: int align
com.badlogic.gdx.physics.box2d.World: void getFixtures(com.badlogic.gdx.utils.Array)
com.google.android.material.appbar.HeaderBehavior: HeaderBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGenFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation circleIn
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector tmp2
com.google.android.material.theme.MaterialComponentsViewInflater: MaterialComponentsViewInflater()
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData
com.esotericsoftware.kryo.serializers.ObjectField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.InputAdapter: boolean touchDragged(int,int,int)
com.badlogic.gdx.utils.I18NBundle: java.util.Locale ROOT_LOCALE
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: float getRightWidth()
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean multiple
com.badlogic.gdx.utils.StreamUtils: void copyStream(java.io.InputStream,java.io.OutputStream,int)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float getMaxTorque()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int b
com.badlogic.gdx.utils.PooledLinkedList
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(boolean,java.lang.Object[],int,int)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void setAngularOffset(float)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2: java.lang.Object newInstance()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
com.esotericsoftware.jsonbeans.JsonWriter: boolean named
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(char[],int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: ModelInfluencer$Random(com.badlogic.gdx.graphics.g3d.Model[])
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.scenes.scene2d.ui.Window$2
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType getCurrentType()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BUFFER_BINDING
com.badlogic.gdx.graphics.g3d.decals.Decal
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.util.List getComponents()
com.badlogic.gdx.utils.Predicate$PredicateIterable: void set(java.lang.Iterable,com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.graphics.Pixmap
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: float v
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1f(int,float)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeFloat(float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean writeEnters
com.google.android.material.textfield.TextInputLayout: int getHelperTextCurrentTextColor()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer
com.esotericsoftware.kryo.Kryo: void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.glutils.InstanceData: void setInstanceData(java.nio.FloatBuffer,int)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: DepthShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: short minVerticeInIndices()
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: ObjectMap$MapIterator(com.esotericsoftware.kryo.util.ObjectMap)
com.badlogic.gdx.graphics.GL20: int GL_BOOL_VEC3
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: long implementedFlags
com.badlogic.gdx.graphics.GL20: void glStencilFuncSeparate(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)
com.badlogic.gdx.assets.AssetLoadingTask: void removeDuplicates(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_LINEAR_DESIGN
com.badlogic.gdx.utils.BufferUtils: void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3,int)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: float[] vertices
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: ETC1$ETC1Data(int,int,java.nio.ByteBuffer,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void requestReleaseEglContextLocked()
com.badlogic.gdx.utils.ComparableTimSort: int stackSize
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void point(float,float,float)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: AndroidZipFileHandle(java.io.File,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.graphics.VertexAttributes$Usage: int Position
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer instance
com.esotericsoftware.kryo.util.IntArray: boolean ordered
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean mLimitedGLESContexts
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: BillboardParticleBatch(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode,boolean,int)
com.android.billingclient.api.ProxyBillingActivity: ProxyBillingActivity()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void applyAnimation(com.badlogic.gdx.graphics.g3d.model.Animation,float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: DynamicsModifier$TangentialAcceleration(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,int,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.glutils.GLVersion: java.lang.String rendererString
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void invalidate()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: com.badlogic.gdx.graphics.g3d.particles.ParticleController findController(java.lang.String)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: java.lang.String OutFile
com.esotericsoftware.jsonbeans.JsonValue: void prettyPrint(com.esotericsoftware.jsonbeans.JsonValue,java.lang.StringBuilder,int,com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrap(boolean)
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: void setBaseResolver(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.InputAdapter: boolean keyUp(int)
com.esotericsoftware.kryonet.Listener$ThreadedListener: Listener$ThreadedListener(com.esotericsoftware.kryonet.Listener,java.util.concurrent.ExecutorService)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: boolean isEdges()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void killParticles(int,int)
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int Lc
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: boolean pointSpritesEnabled
com.badlogic.gdx.utils.IntMap: void resize(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: void allocateChannels()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int,float,float)
com.badlogic.gdx.graphics.profiling.GLProfiler: GLProfiler(com.badlogic.gdx.Graphics)
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer
com.badlogic.gdx.utils.IntIntMap$Keys: void remove()
com.badlogic.gdx.backends.android.AndroidGL20: int glGenTexture()
com.badlogic.gdx.graphics.Texture: int getHeight()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int DOUBLE
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int MAX_PARTICLES_PER_MESH
com.badlogic.gdx.backends.android.AndroidGL30: void glEndQuery(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Rotation3D
androidx.appcompat.widget.AppCompatSpinner: void setPopupBackgroundResource(int)
com.badlogic.gdx.math.Polyline: void setOrigin(float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFEQ
com.google.android.material.card.MaterialCardView: android.content.res.ColorStateList getStrokeColorStateList()
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Net getNet()
com.badlogic.gdx.backends.android.AndroidApplicationBase: long getNativeHeap()
com.esotericsoftware.jsonbeans.ObjectMap: void putResize(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryonet.util.ObjectIntMap: boolean containsValue(int)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2: Decoder$LiteralDecoder$Decoder2(com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag[] values()
com.badlogic.gdx.utils.viewport.ScreenViewport: void setUnitsPerPixel(float)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single
com.badlogic.gdx.utils.JsonWriter$JsonObject: void close()
com.esotericsoftware.kryonet.rmi.RemoteObject: void setResponseTimeout(int)
com.esotericsoftware.kryonet.Listener$LagListener
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isTopEdge()
com.badlogic.gdx.math.Quaternion: float getAxisAngleRad(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform idt()
com.badlogic.gdx.graphics.g3d.utils.ShapeCache
com.HyperSphere.Connection.PacketObjects.Entities.Player: Player()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_3
com.badlogic.gdx.math.Vector2: Vector2(float,float)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeAlpha(float)
com.badlogic.gdx.input.RemoteInput$TouchEvent: int TOUCH_DOWN
com.badlogic.gdx.backends.android.AndroidInput: int[] realId
com.badlogic.gdx.graphics.g2d.SpriteBatch: boolean isDrawing()
com.badlogic.gdx.net.HttpStatus: int SC_CONTINUE
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void setRenderMode(int)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Matrix4 invIsotransform
com.google.android.material.textfield.TextInputEditText
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_FUNC
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: DepthShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config,java.lang.String,java.lang.String,java.lang.String)
com.esotericsoftware.reflectasm.FieldAccess: java.lang.String getString(java.lang.Object,int)
com.badlogic.gdx.physics.box2d.Body: void jniApplyLinearImpulse(long,float,float,float,float,boolean)
com.badlogic.gdx.graphics.GL30: void glBlendColor(float,float,float,float)
com.esotericsoftware.jsonbeans.JsonReader: java.lang.String unescape(java.lang.String)
com.badlogic.gdx.Input$Keys: int ENTER
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void render(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool: void clear()
com.google.android.material.card.MaterialCardView: void setStrokeWidth(int)
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: void setAmountX(float)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh copy(boolean)
com.badlogic.gdx.Screen: void render(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitEnd()
com.esotericsoftware.kryo.util.IntMap: void clear(int)
com.badlogic.gdx.assets.AssetManager: void nextTask()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_IMMUTABLE_FORMAT
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.VertexAttributes CPU_ATTRIBUTES
com.badlogic.gdx.Application: void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: void save(java.io.Writer)
com.badlogic.gdx.backends.android.AndroidNet$1: AndroidNet$1(com.badlogic.gdx.backends.android.AndroidNet,android.net.Uri)
com.google.android.material.internal.FlowLayout: void setItemSpacing(int)
com.badlogic.gdx.maps.MapObject: MapObject()
com.badlogic.gdx.audio.Sound: void pause(long)
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
com.esotericsoftware.kryo.util.IntArray: void clear()
com.badlogic.gdx.utils.IdentityMap: boolean notEmpty()
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: com.badlogic.gdx.graphics.g2d.BitmapFont titleFont
com.badlogic.gdx.scenes.scene2d.ui.TextButton: TextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setPackedColor(float)
com.esotericsoftware.kryo.util.ObjectMap
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float dragLastX
com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader selfContextParentClassLoader
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: AtlasTmxMapLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.GL30: void glColorMask(boolean,boolean,boolean,boolean)
com.badlogic.gdx.net.HttpStatus: HttpStatus(int)
com.esotericsoftware.kryo.io.Output: void writeAscii(java.lang.String)
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(com.badlogic.gdx.graphics.g3d.RenderableProvider)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: java.lang.String fragmentShader
com.badlogic.gdx.Input$Keys: int DEL
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeWidth(float)
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver: ClasspathFileHandleResolver()
com.badlogic.gdx.maps.objects.TextureMapObject: float y
com.badlogic.gdx.math.Vector2: boolean isCollinear(com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object remove(java.lang.Object)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setScale(float,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: void doneFreeType(long)
com.badlogic.gdx.Input$Keys: int MEDIA_FAST_FORWARD
com.badlogic.gdx.graphics.g2d.NinePatch: float[] vertices
androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()
com.badlogic.gdx.math.Interpolation$11: Interpolation$11()
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral MultitouchScreen
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1
com.badlogic.gdx.graphics.g3d.Model: void manageDisposable(com.badlogic.gdx.utils.Disposable)
com.esotericsoftware.kryo.Generics: Generics()
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectIntMap attributeTypes
androidx.appcompat.widget.AppCompatEditText: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.utils.Json$FieldMetadata: com.badlogic.gdx.utils.reflect.Field field
com.badlogic.gdx.graphics.g2d.NinePatch: int topCenter
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: float spawnWidthDiff
com.esotericsoftware.kryo.serializers.FieldSerializer: void rebuildCachedFields()
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: TextButton$TextButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont)
com.esotericsoftware.jsonbeans.JsonReader: int json_en_main
com.badlogic.gdx.graphics.GLTexture: int glTarget
com.badlogic.gdx.utils.compression.lz.BinTree: int kMaxValForNormalize
com.esotericsoftware.kryonet.util.InputStreamSender: java.io.InputStream input
com.esotericsoftware.kryo.util.IdentityMap$Values: boolean hasNext()
com.badlogic.gdx.utils.compression.Lzma$CommandLine
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: ObjectFloatMap$MapIterator(com.badlogic.gdx.utils.ObjectFloatMap)
com.badlogic.gdx.utils.PooledLinkedList: com.badlogic.gdx.utils.PooledLinkedList$Item iter
com.esotericsoftware.reflectasm.FieldAccess: void setChar(java.lang.Object,int,char)
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] columnPrefWidth
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: com.badlogic.gdx.utils.IntArray cachedLocations
com.badlogic.gdx.backends.android.AndroidDaydream: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.utils.IdentityMap$Keys: void remove()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: long getSize(long)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void cone(float,float,float,int,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: void setY(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform ambientCube
com.badlogic.gdx.utils.Align: int center
com.badlogic.gdx.backends.android.AndroidGraphics: void preserveEGLContextOnPause()
com.badlogic.gdx.graphics.g3d.model.MeshPart: boolean equals(com.badlogic.gdx.graphics.g3d.model.MeshPart)
com.badlogic.gdx.utils.viewport.Viewport: int getRightGutterWidth()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int primitiveType
com.badlogic.gdx.utils.Queue: boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void activateParticle(int)
com.badlogic.gdx.backends.android.AndroidMusic: float getDuration()
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int reuseWeight
com.badlogic.gdx.utils.CharArray: java.lang.String toString()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: boolean isUnknown()
com.badlogic.gdx.utils.IdentityMap$Values: void toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task post(com.badlogic.gdx.utils.Timer$Task)
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral[] $VALUES
com.HyperSphere.Connection.PacketObjects.Entities.Creature: float getCenterY()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void scaleSize(float,float)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean getExpand()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void onAttach(android.app.Activity)
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight
com.esotericsoftware.kryo.util.DefaultClassResolver: com.esotericsoftware.kryo.util.ObjectMap nameToClass
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.GL30: int GL_MAX_PROGRAM_TEXEL_OFFSET
com.badlogic.gdx.graphics.VertexAttributes: int getOffset(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getComputedPadLeft()
androidx.fragment.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)
com.badlogic.gdx.graphics.PixmapIO$PNG: PixmapIO$PNG(int)
com.badlogic.gdx.physics.box2d.Joint: long addr
androidx.appcompat.widget.AppCompatRadioButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.IdentityMap: java.lang.Object remove(java.lang.Object)
com.badlogic.gdx.InputProcessor: boolean scrolled(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledBackground
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.XmlReader$Element getParent()
com.esotericsoftware.kryo.Kryo: void setCopyReferences(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter projTrans
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField: AsmCacheFields$AsmObjectField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 inv()
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _posSlotEncoder
com.esotericsoftware.jsonbeans.ReadOnlySerializer
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: int GROUP_BLEND
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode[] values()
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.graphics.GL20: int GL_BLEND_EQUATION_RGB
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_GLYPH_NAMES
com.badlogic.gdx.input.GestureDetector: long gestureStartTime
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Warning
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: boolean hasNext()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: boolean disposePixmap()
com.badlogic.gdx.physics.box2d.PolygonShape: void setAsBox(float,float,com.badlogic.gdx.math.Vector2,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IRETURN
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer: boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)
com.badlogic.gdx.graphics.GL30: int glGenTexture()
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body)
com.badlogic.gdx.utils.JsonValue: void setNext(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: int createBufferObject()
com.badlogic.gdx.utils.Queue: boolean removeValue(java.lang.Object,boolean)
com.badlogic.gdx.graphics.g2d.NinePatch: float getLeftWidth()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.utils.ObjectIntMap: int mask
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteTexture(int)
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Entries entries()
com.esotericsoftware.jsonbeans.Json$FieldMetadata
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: Tree$TreeStyle(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)
com.badlogic.gdx.utils.Queue: Queue(int,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean isDisabled
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode random
com.badlogic.gdx.graphics.GL30: void glDeleteBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPadX()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue)
com.esotericsoftware.kryo.io.ByteBufferInput: float readFloat()
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setPageHeight(int)
com.badlogic.gdx.utils.JsonValue$JsonIterator: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setPosition(float,float)
com.esotericsoftware.kryo.Kryo: int nextRegisterID
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean drawContacts
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_COMPARE_MODE
com.badlogic.gdx.utils.FloatArray
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void removeLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.utils.Array: void set(int,java.lang.Object)
com.badlogic.gdx.graphics.GL30: long GL_TIMEOUT_IGNORED
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: java.lang.String defaultVertexShader
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_normalMatrix
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void sizeChanged()
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.GL30: void glGenTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.LongMap: java.lang.Object get(long)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType array
com.HyperSphere.Connection.PacketObjects.Misc.HyperSoundFx: HyperSoundFx()
com.badlogic.gdx.graphics.GL20: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
com.google.android.material.chip.Chip: void setBackgroundResource(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INSTANCEOF
com.badlogic.gdx.utils.JsonReader: short[] _json_index_offsets
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver: ImageResolver$AssetManagerImageResolver(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch)
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.Files$FileType type()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBlendFuncSeparate(int,int,int,int)
com.badlogic.gdx.utils.Queue: boolean isEmpty()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: int defaultDepthFunc
com.badlogic.gdx.scenes.scene2d.ui.TextArea: boolean newLineAtEnd()
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: int parseType(java.lang.String)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int width
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setupFadeScrollBars(float,float)
com.esotericsoftware.minlog.Log: void warn(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData
com.badlogic.gdx.scenes.scene2d.InputListener: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
androidx.recyclerview.widget.RecyclerView: boolean getPreserveFocusAfterLayout()
com.badlogic.gdx.utils.compression.lz.OutWindow: void PutByte(byte)
com.badlogic.gdx.utils.IntMap: int threshold
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.Cell getImageCell()
com.badlogic.gdx.scenes.scene2d.ui.Table: void computeSize()
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters: TideMapLoader$Parameters()
com.badlogic.gdx.utils.Bits: int hashCode()
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType MotorJoint
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER6
com.badlogic.gdx.utils.OrderedMap: OrderedMap(int)
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: SequenceAction()
com.badlogic.gdx.utils.IntIntMap: int EMPTY
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: java.lang.String id
com.badlogic.gdx.Input$Keys: int LEFT_BRACKET
com.badlogic.gdx.graphics.FPSLogger: FPSLogger()
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: void Init()
com.esotericsoftware.kryo.io.ByteBufferInput: java.lang.String readAscii_slow()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(long)
com.badlogic.gdx.physics.box2d.ContactImpulse: int getCount()
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: float upperAngle
com.badlogic.gdx.maps.tiled.TiledMapImageLayer
com.badlogic.gdx.backends.android.AndroidGraphics: void pause()
com.badlogic.gdx.utils.Array: void addAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.GL20: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean isChecked
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: com.esotericsoftware.kryo.io.KryoObjectOutput objectOutput
com.badlogic.gdx.physics.box2d.ChainShape: ChainShape()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension: int height
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: AndroidOnscreenKeyboard$2$2(com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2,android.view.View)
com.badlogic.gdx.scenes.scene2d.ui.TextField: float blinkTime
com.badlogic.gdx.utils.IntIntMap$MapIterator: IntIntMap$MapIterator(com.badlogic.gdx.utils.IntIntMap)
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,char)
com.badlogic.gdx.physics.box2d.ContactImpulse: ContactImpulse(com.badlogic.gdx.physics.box2d.World,long)
com.esotericsoftware.kryo.util.IntMap$Keys: void reset()
com.esotericsoftware.jsonbeans.JsonReader: java.util.ArrayList elements
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue remove(int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField: void setField(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: boolean is(long)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: long getNativeHeap()
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeBytes(byte[])
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.math.Vector2 apply(float,float,float,float)
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput(long,int)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: float getLowMax()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: long d
com.badlogic.gdx.backends.android.AndroidGL30: void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.Pixmap: void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int)
com.badlogic.gdx.physics.box2d.Joint: void setUserData(java.lang.Object)
com.esotericsoftware.reflectasm.FieldAccess: byte getByte(java.lang.Object,int)
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: void removeSpan(java.lang.Object)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 crs(float,float,float)
com.badlogic.gdx.physics.box2d.Contact: int getChildIndexA()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup top()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getAdvanceX()
com.badlogic.gdx.net.NetJavaImpl: com.badlogic.gdx.utils.ObjectMap connections
com.badlogic.gdx.backends.android.AndroidAudioDevice: android.media.AudioTrack track
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(int)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: boolean useMipMaps()
com.badlogic.gdx.Game: Game()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: boolean c
com.badlogic.gdx.backends.android.AndroidInput$4: void run()
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.google.android.material.floatingactionbutton.FloatingActionButton: boolean getUseCompatPadding()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void endRender()
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator()
com.badlogic.gdx.graphics.g2d.Batch: int C1
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: IdentityMap$MapIterator(com.esotericsoftware.kryo.util.IdentityMap)
com.badlogic.gdx.scenes.scene2d.Group: void setDebug(boolean,boolean)
com.badlogic.gdx.Gdx: com.badlogic.gdx.Net net
com.badlogic.gdx.backends.android.AndroidGL30: boolean glIsVertexArray(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: java.lang.Object info
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float stageTouchDownX
com.badlogic.gdx.utils.IntIntMap: int mask
androidx.coordinatorlayout.widget.CoordinatorLayout: void setVisibility(int)
com.badlogic.gdx.math.Vector2: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1: void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
androidx.fragment.app.Fragment: int getNextAnim()
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode REVERSED
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float)
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.math.Intersector: boolean isPointInTriangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.badlogic.gdx.math.Polygon: boolean contains(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: char[] xChars
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.JsonSerializer defaultSerializer
com.badlogic.gdx.scenes.scene2d.ui.Skin$4: java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int LONG
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart part
com.badlogic.gdx.Input$Keys: int U
com.esotericsoftware.jsonbeans.ObjectMap: int nextPowerOfTwo(int)
com.badlogic.gdx.utils.BinaryHeap$Node: float value
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge j
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion,float)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float getBottomHeight()
com.badlogic.gdx.graphics.glutils.FacedCubemapData: void load(com.badlogic.gdx.graphics.Cubemap$CubemapSide,com.badlogic.gdx.graphics.Pixmap)
androidx.fragment.app.Fragment: boolean mFromLayout
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBlendColor(float,float,float,float)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7: DefaultShader$Setters$7()
com.badlogic.gdx.graphics.GL20: boolean glIsEnabled(int)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status[] values()
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleDrawable(int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10: DefaultShader$Setters$10()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void color(float,float,float,float)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.utils.Array regions
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: void rebuildReferences(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.backends.android.AndroidInput: boolean onKey(android.view.View,int,android.view.KeyEvent)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle,java.lang.Object[])
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2: java.lang.reflect.Constructor val$constructor
com.google.android.material.textfield.TextInputLayout: void setHintEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle: CheckBox$CheckBoxStyle()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: java.lang.String name
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: com.badlogic.gdx.math.Interpolation interpolation
com.badlogic.gdx.Input$Keys: int META_ALT_LEFT_ON
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_WRITEMASK
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$1: com.badlogic.gdx.scenes.scene2d.ui.TextTooltip this$0
com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard: void show(boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glProgramParameteri(int,int,int)
com.badlogic.gdx.scenes.scene2d.Stage: boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.esotericsoftware.kryo.util.IntMap: int stashSize
com.badlogic.gdx.utils.compression.lz.OutWindow: byte[] _buffer
com.badlogic.gdx.graphics.glutils.VertexData: int getNumVertices()
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: void setHeight(float)
com.badlogic.gdx.graphics.glutils.GLVersion: java.lang.String getVendorString()
com.badlogic.gdx.utils.compression.lzma.Encoder
com.hyperspherestudio.kryonet.Packets.CommonPacket: java.lang.Object o
com.esotericsoftware.kryonet.Connection: void notifyReceived(java.lang.Object)
com.badlogic.gdx.utils.BooleanArray: boolean removeAll(com.badlogic.gdx.utils.BooleanArray)
com.badlogic.gdx.graphics.GLTexture: void bind()
com.badlogic.gdx.backends.android.AndroidGL30: void glDeleteVertexArrays(int,int[],int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel alphaInterpolationChannel
com.badlogic.gdx.utils.Timer$Task: long getExecuteTimeMillis()
com.badlogic.gdx.math.Matrix3: float[] tmp
com.badlogic.gdx.math.Interpolation$BounceIn: float apply(float)
com.badlogic.gdx.math.Matrix4: boolean inv(float[])
com.badlogic.gdx.physics.box2d.Body: void applyForce(float,float,float,float,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_MS_SYMBOL
com.badlogic.gdx.graphics.GL20: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.utils.compression.lzma.Encoder: java.io.InputStream _inStream
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler f
com.badlogic.gdx.utils.viewport.ScreenViewport
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float posX
com.badlogic.gdx.input.RemoteInput: int[] touchY
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.graphics.Color fontColorSelected
com.badlogic.gdx.graphics.glutils.InstanceData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.minlog.Log: void ERROR()
com.badlogic.gdx.utils.Queue: java.lang.String toString()
com.badlogic.gdx.math.Intersector: boolean intersectRayTriangle(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity[] values()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.physics.box2d.joints.MotorJoint
com.badlogic.gdx.physics.box2d.Manifold
com.badlogic.gdx.utils.DelayedRemovalArray: int iterating
com.badlogic.gdx.scenes.scene2d.Event: void setCapture(boolean)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getX()
com.badlogic.gdx.graphics.Mesh: void getIndices(short[],int)
com.badlogic.gdx.math.MathUtils: int clamp(int,int,int)
com.badlogic.gdx.graphics.g2d.BitmapFont: float getScaleY()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: com.badlogic.gdx.scenes.scene2d.InputListener createInputListener()
com.badlogic.gdx.input.RemoteSender: boolean touchDown(int,int,int,int)
com.badlogic.gdx.graphics.g2d.Batch: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.BooleanArray: boolean peek()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform2i(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Container: void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryonet.rmi.RemoteObject
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String AmbientAlias
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float,float)
com.esotericsoftware.kryo.util.IntMap$Entries: void remove()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide NegativeY
com.badlogic.gdx.utils.DelayedRemovalArray: void reverse()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3: AndroidLiveWallpaperService$AndroidWallpaperEngine$3(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine,boolean)
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(java.io.Reader)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: boolean a(long)
com.badlogic.gdx.physics.box2d.World: long newWorld(float,float,boolean)
com.badlogic.gdx.physics.box2d.Contact: float jniGetFriction(long)
com.esotericsoftware.jsonbeans.JsonValue: void set(boolean)
com.badlogic.gdx.utils.FloatArray: int lastIndexOf(char)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.assets.loaders.I18NBundleLoader: com.badlogic.gdx.utils.I18NBundle bundle
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void load(java.io.BufferedReader)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollHeight()
com.badlogic.gdx.Input$Keys: int MEDIA_PLAY_PAUSE
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer
com.HyperSphere.Connection.PacketObjects.Misc.HashMapEntry: HashMapEntry(HyperCollections.HyperSphereListObject)
com.badlogic.gdx.Application: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color lerp(com.badlogic.gdx.graphics.Color,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType[] $VALUES
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: GLSurfaceView20(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: void setElementsCanBeNull(boolean)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
androidx.appcompat.widget.AppCompatSpinner: void setDropDownHorizontalOffset(int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: int rowAlign
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1: SelectBox$1(com.badlogic.gdx.scenes.scene2d.ui.SelectBox)
com.badlogic.gdx.graphics.g3d.decals.Decal: void update()
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.DecalMaterial getMaterial()
com.badlogic.gdx.graphics.g2d.SpriteBatch: boolean isBlendingEnabled()
com.badlogic.gdx.scenes.scene2d.InputEvent: com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer: void allocateChannels()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: float queuedTransitionTime
com.google.android.material.chip.Chip: void setMinLines(int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Graphics getGraphics()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BUFFER_BIT
com.fasterxml.jackson.annotation.JsonInclude$Include: com.fasterxml.jackson.annotation.JsonInclude$Include[] values()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform1f(int,float)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter object()
com.google.android.material.textfield.TextInputLayout: void setErrorTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane getScrollPane()
com.esotericsoftware.reflectasm.ConstructorAccess: void insertConstructor(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners()
com.badlogic.gdx.math.Interpolation$Swing: float apply(float)
com.badlogic.gdx.utils.OrderedSet: boolean add(java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: float getLowMin()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector I
com.esotericsoftware.jsonbeans.JsonWriter: void setOutputType(com.esotericsoftware.jsonbeans.OutputType)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float[] getVertices()
com.badlogic.gdx.scenes.scene2d.Group: void setStage(com.badlogic.gdx.scenes.scene2d.Stage)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glTexParameterf(int,int,float)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
com.badlogic.gdx.utils.ObjectIntMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.backends.android.AndroidInput: void vibrate(long[],int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void setDuration(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean aligned
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor()
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int emissionDelta
com.esotericsoftware.kryo.util.IdentityMap$Keys: void remove()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node
com.google.android.material.bottomappbar.BottomAppBar: androidx.appcompat.widget.ActionMenuView getActionMenuView()
com.badlogic.gdx.utils.LongMap: void putStash(long,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue spawnWidthValue
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean unsafeAvailable
com.badlogic.gdx.Application: com.badlogic.gdx.ApplicationLogger getApplicationLogger()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void removeFromTree(com.badlogic.gdx.scenes.scene2d.ui.Tree)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: java.lang.String Seffect
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: com.badlogic.gdx.graphics.Color getColor()
com.google.android.material.chip.ChipGroup: void setSingleLine(int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void tint(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.GL30: int GL_SAMPLER_3D
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getYscale(long)
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: long Mask
androidx.appcompat.widget.AppCompatEditText: void setTextClassifier(android.view.textclassifier.TextClassifier)
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status[] values()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: boolean isPrepared
com.badlogic.gdx.scenes.scene2d.ui.TextField$1: void run()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean longPress(float,float)
com.esotericsoftware.kryo.util.ListReferenceResolver: boolean useReferences(java.lang.Class)
com.google.android.material.textfield.TextInputLayout: int getBoxBackgroundColor()
com.esotericsoftware.kryo.Kryo: java.lang.Object readObject
com.badlogic.gdx.backends.android.AndroidGL20: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.esotericsoftware.reflectasm.FieldAccess: FieldAccess()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1: int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1: com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy this$0
com.badlogic.gdx.utils.StringBuilder: void clear()
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void scale(float,float,float)
com.google.android.material.chip.Chip: void setTextEndPadding(float)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter pop(boolean)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean longPress(float,float)
com.badlogic.gdx.math.Quaternion: boolean isIdentity()
com.badlogic.gdx.graphics.g3d.decals.Decal: void setScale(float)
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2: void run()
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_actions_0()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void dispose()
com.esotericsoftware.kryonet.Connection: com.esotericsoftware.kryonet.TcpConnection tcp
com.badlogic.gdx.scenes.scene2d.ui.Value$6
com.badlogic.gdx.graphics.profiling.GL20Interceptor
com.badlogic.gdx.scenes.scene2d.ui.List: int overIndex
com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.BooleanArray: boolean[] shrink()
com.badlogic.gdx.graphics.Pixmap: com.badlogic.gdx.graphics.Pixmap$Blending getBlending()
com.esotericsoftware.kryonet.rmi.RemoteObject: java.lang.Object waitForLastResponse()
com.badlogic.gdx.scenes.scene2d.actions.IntAction: int getValue()
com.badlogic.gdx.graphics.GL30: int GL_CONDITION_SATISFIED
androidx.appcompat.widget.ActionBarContainer: android.view.View getTabContainer()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.utils.ReflectionPool
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight set(float,float,float,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float,float)
com.badlogic.gdx.utils.ObjectIntMap: java.util.Iterator iterator()
com.badlogic.gdx.scenes.scene2d.ui.Value$10: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide side
com.badlogic.gdx.graphics.GL30: void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator: com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy this$0
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver atlasResolver
com.badlogic.gdx.Input$Keys: int DPAD_UP
com.esotericsoftware.kryo.io.Input: double[] readDoubles(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(java.lang.String,java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle,java.lang.Object[])
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: boolean is(long)
com.badlogic.gdx.backends.android.AndroidGL20: void glLineWidth(float)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void begin()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color add(com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void renderObject(com.badlogic.gdx.maps.MapObject)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: int depthFunc
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setSelected(java.lang.Object)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCachedField: UnsafeCacheFields$UnsafeCachedField(long)
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.graphics.GL30: void glDepthRangef(float,float)
com.badlogic.gdx.graphics.g3d.Attributes: com.badlogic.gdx.utils.Array attributes
com.esotericsoftware.jsonbeans.ObjectMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[],float[])
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: boolean isColorTexture()
com.esotericsoftware.kryo.util.Util: java.lang.String className(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: CheckBox(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int newGlobalId()
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.Files$FileType type
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory access$500(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: float frequencyHz
com.badlogic.gdx.utils.DelayedRemovalArray: void end()
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter Nearest
com.badlogic.gdx.utils.Queue
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void flush()
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object getStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mStencilSize
com.badlogic.gdx.input.RemoteSender: boolean touchDragged(int,int,int)
com.badlogic.gdx.graphics.GL20: int GL_BUFFER_USAGE
com.badlogic.gdx.graphics.glutils.ETC1: com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImagePKM(com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.utils.CharArray: void clear()
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
com.badlogic.gdx.math.Quaternion: float getAngleAroundRad(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.Game: void resize(int,int)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.utils.Array getDependencyAssetDescriptors(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter)
com.badlogic.gdx.graphics.Texture$1: int val$refCount
com.esotericsoftware.kryonet.ClientDiscoveryHandler: void onDiscoveredHost(java.net.DatagramPacket,com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.g2d.Sprite: float getScaleX()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.scenes.scene2d.ui.Window: float getPrefWidth()
com.badlogic.gdx.backends.android.AndroidInput: void vibrate(int)
com.badlogic.gdx.utils.StreamUtils
com.esotericsoftware.jsonbeans.ObjectMap$Entries
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void renderObjects(com.badlogic.gdx.maps.MapLayer)
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler: boolean supportsMultitouch(android.content.Context)
com.badlogic.gdx.graphics.g3d.environment.ShadowMap
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable over
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: java.lang.String Alias
com.badlogic.gdx.physics.box2d.World: void jniSetContiousPhysics(long,boolean)
androidx.fragment.app.Fragment: void setReturnTransition(java.lang.Object)
com.badlogic.gdx.net.SocketHints: boolean linger
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: boolean delegate(float)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node: com.badlogic.gdx.math.Rectangle rect
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(int,int)
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int TOUCH_SCROLLED
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Object createCopy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.utils.ObjectMap: int stashSize
com.badlogic.gdx.utils.BufferUtils: void copyJni(float[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.physics.box2d.World$2: com.badlogic.gdx.physics.box2d.World this$0
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil genericsUtil
com.badlogic.gdx.math.Vector3: boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentHostCallback mHost
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.utils.async.AsyncResult depsFuture
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter$JsonObject current
com.badlogic.gdx.utils.compression.lzma.Base: int StateInit()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation pow2OutInverse
com.esotericsoftware.minlog.Log$Logger: void print(java.lang.String)
com.badlogic.gdx.maps.objects.PolygonMapObject: com.badlogic.gdx.math.Polygon getPolygon()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float space
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size
com.badlogic.gdx.net.HttpStatus: int SC_EXPECTATION_FAILED
com.badlogic.gdx.math.WindowedMean: float standardDeviation()
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: long AlphaTest
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int L2D
com.badlogic.gdx.graphics.g3d.utils.TextureBinder
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int UOffset
com.badlogic.gdx.utils.BufferUtils: void copy(int[],int,java.nio.Buffer,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glReadBuffer(int)
com.badlogic.gdx.maps.MapLayer: float offsetX
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2
com.badlogic.gdx.scenes.scene2d.ui.Skin: void load(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getY()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: boolean enabled
com.badlogic.gdx.graphics.g3d.Attributes: int indexOf(long)
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setPos(com.badlogic.gdx.math.Vector3)
androidx.appcompat.widget.AppCompatSpinner: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField: AsmCacheFields$AsmLongField()
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: DelayAction(float)
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl: void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: int minParticleCount
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int rotateButton
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: SpriteDrawable(com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable)
com.badlogic.gdx.math.Polyline: boolean contains(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean isOver()
com.badlogic.gdx.graphics.g2d.SpriteBatch: boolean blendingDisabled
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawArrays(int,int,int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: float duration
androidx.appcompat.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Keys keys1
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int _cacheSize
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FREM
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE19
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getWidth()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setNor(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Table$5: Table$5()
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: java.lang.reflect.Method setMethod
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.HyperSphere.Connection.PacketObjects.Map.Mark: void set(com.HyperSphere.Connection.PacketObjects.Map.Mark)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowOut pow2Out
com.badlogic.gdx.math.Path: float approxLength(int)
com.badlogic.gdx.graphics.g3d.environment.PointLight: float intensity
com.esotericsoftware.kryonet.Listener$QueuedListener$1: com.esotericsoftware.kryonet.Connection val$connection
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: InstanceBufferObject(boolean,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_MULTIPLE_MASTERS
com.badlogic.gdx.math.Matrix3: int M00
com.badlogic.gdx.physics.box2d.EdgeShape: boolean jniHasVertex3(long)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createEmissive(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.backends.android.AndroidInput: int[] resize(int[])
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void setLineHeight(float)
com.badlogic.gdx.math.MathUtils: float map(float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: ParticleShader$Config(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float)
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1: com.badlogic.gdx.backends.android.AndroidFragmentApplication this$0
com.badlogic.gdx.scenes.scene2d.ui.Label: Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,java.lang.String)
com.badlogic.gdx.utils.Array: Array(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.compression.lz.InWindow: int GetNumAvailableBytes()
com.esotericsoftware.reflectasm.FieldAccess: java.lang.Class[] fieldTypes
com.esotericsoftware.kryo.io.Output: void writeInts(int[])
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: boolean equals(java.lang.Object)
com.badlogic.gdx.utils.ObjectSet: void removeStashIndex(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,float,float,float,float,float,float)
com.badlogic.gdx.utils.IntMap: int capacity
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.Actor: float getOriginY()
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: java.nio.ByteBuffer compressedData
com.esotericsoftware.kryo.serializers.FieldSerializer: void setFixedFieldTypes(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void addAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int pixelWidth
com.badlogic.gdx.utils.ObjectMap: boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys: void remove()
com.badlogic.gdx.scenes.scene2d.ui.Slider: boolean mouseOver
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPadTop()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int TABLESWITCH
com.HyperSphere.Connection.PacketObjects.Map.MapChange: short switchType
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.GL20: int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.physics.box2d.CircleShape: void jniSetPosition(long,float,float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void removeLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.graphics.GL20: int GL_SAMPLER_2D
com.badlogic.gdx.backends.android.AndroidGraphics: android.view.View createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean programmaticChangeEvents
com.badlogic.gdx.utils.IntSet$IntSetIterator
com.badlogic.gdx.utils.viewport.Viewport: void setScreenY(int)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction
com.badlogic.gdx.Application: int LOG_INFO
com.badlogic.gdx.backends.android.AndroidFragmentApplication: long getJavaHeap()
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.util.UnsafeUtil: long longArrayBaseOffset
androidx.fragment.app.Fragment: boolean isHideReplaced()
com.badlogic.gdx.scenes.scene2d.ui.Window$3: float lastX
com.esotericsoftware.kryo.util.IntArray: int indexOf(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptySetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.math.Vector2 reactionForce
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField: UnsafeCacheFields$UnsafeShortField(java.lang.reflect.Field)
com.badlogic.gdx.graphics.g2d.SpriteCache: void end()
com.badlogic.gdx.utils.ArrayMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidGL20: int glCreateShader(int)
com.badlogic.gdx.utils.viewport.Viewport: int getRightGutterX()
com.badlogic.gdx.graphics.Texture: void clearAllTextures(com.badlogic.gdx.Application)
com.badlogic.gdx.graphics.GL30: void glDeleteTexture(int)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void scale(float,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0
com.esotericsoftware.kryo.Kryo: void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean isAscendantOf(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean stripWhitespaceY
com.badlogic.gdx.scenes.scene2d.utils.Layout: void validate()
com.badlogic.gdx.Net$HttpResponse: com.badlogic.gdx.net.HttpStatus getStatus()
com.badlogic.gdx.input.RemoteSender: boolean isConnected()
com.badlogic.gdx.backends.android.AndroidApplication: AndroidApplication()
com.badlogic.gdx.utils.IntSet: int hash3(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane
com.badlogic.gdx.graphics.g3d.environment.BaseLight: BaseLight()
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: CubemapAttribute(com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute)
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue getDelay()
com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType valueOf(java.lang.String)
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()
androidx.appcompat.widget.AppCompatButton: int getAutoSizeTextType()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollingDisabled(boolean,boolean)
com.badlogic.gdx.utils.BufferUtils: void copyJni(double[],int,java.nio.Buffer,int,int)
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject: JsonWriter$JsonObject(com.esotericsoftware.jsonbeans.JsonWriter,boolean)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void x(float,float,float)
com.badlogic.gdx.math.Intersector$SplitTriangle: int numBack
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int NEW
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.utils.FloatArray: com.badlogic.gdx.utils.FloatArray with(float[])
com.badlogic.gdx.scenes.scene2d.ui.Tree: boolean findExpandedValues(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.physics.box2d.Contact: boolean jniIsTouching(long)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: java.util.Map buffers
com.badlogic.gdx.utils.compression.lz.BinTree: void Skip(int)
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput(byte[])
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathEnd(float)
com.badlogic.gdx.graphics.GL30: int GL_RGBA32F
com.badlogic.gdx.graphics.g2d.SpriteCache: void setPackedColor(float)
com.esotericsoftware.kryo.io.UnsafeInput: UnsafeInput(byte[],int,int)
com.badlogic.gdx.physics.box2d.Body: boolean isAwake()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: java.lang.String toString()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void check()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createArrow(float,float,float,float,float,float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters)
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: java.io.InputStream getResultAsStream()
androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)
com.badlogic.gdx.audio.Music: void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.backends.android.AndroidInput
com.badlogic.gdx.utils.Timer$Task
com.badlogic.gdx.math.Interpolation$Elastic: float bounces
com.badlogic.gdx.ScreenAdapter: void resize(int,int)
com.esotericsoftware.kryo.util.IdentityMap$Values: void toArray(java.util.ArrayList)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String)
com.badlogic.gdx.scenes.scene2d.Action
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.ObjectMap graphContext
com.esotericsoftware.minlog.Log: com.esotericsoftware.minlog.Log$Logger logger
com.badlogic.gdx.utils.ObjectIntMap: int stashSize
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: SelectBox$SelectBoxStyle(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object getKey(java.lang.Object,boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ensureCapacity(int,int)
com.badlogic.gdx.utils.BooleanArray: void set(int,boolean)
com.badlogic.gdx.utils.ObjectMap$MapIterator: int nextIndex
com.badlogic.gdx.graphics.GL30: void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.IntSet: void shrink(int)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.Array freeContacts
com.badlogic.gdx.graphics.glutils.FileTextureData: int width
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle getStyle()
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.math.Vector2 getReactionForce(float)
com.badlogic.gdx.maps.tiled.TiledMap: com.badlogic.gdx.maps.tiled.TiledMapTileSets tilesets
com.badlogic.gdx.Files: com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: ScrollPane$ScrollPaneStyle()
com.badlogic.gdx.backends.android.AndroidGL30: void glBeginQuery(int,int)
com.badlogic.gdx.graphics.GL30: int GL_PACK_ROW_LENGTH
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: int offset
com.badlogic.gdx.utils.JsonValue$1: int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType
com.badlogic.gdx.utils.JsonValue: boolean isLong()
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType Android
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: int dirLightsOffset
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color fromHsv(float[])
com.badlogic.gdx.utils.Array: Array()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1: java.lang.Object newObject()
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: void initializeCachedFields()
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor Hand
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: FrameBufferCubemap(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean)
com.badlogic.gdx.backends.android.AndroidAudioDevice: void dispose()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void finish()
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: Button$ButtonStyle()
com.badlogic.gdx.backends.android.InputProcessorLW: boolean scrolled(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setMessageText(java.lang.String)
com.badlogic.gdx.maps.objects.PolylineMapObject: com.badlogic.gdx.math.Polyline getPolyline()
com.hyperspherestudio.kryonet.Packets.PacketStream: int MAXSIZE
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void checkValidBuilder()
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String getVertexShaderSource()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
com.badlogic.gdx.backends.android.AndroidInput$3$2: void onClick(android.content.DialogInterface,int)
com.badlogic.gdx.math.MathUtils: int random(int,int)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void update(float)
com.badlogic.gdx.files.FileHandleStream: boolean deleteDirectory()
com.badlogic.gdx.utils.JsonWriter$OutputType: java.util.regex.Pattern javascriptPattern
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: java.util.concurrent.ConcurrentHashMap responseTable
com.badlogic.gdx.physics.box2d.Joint: java.lang.Object userData
com.badlogic.gdx.utils.ObjectSet: ObjectSet(com.badlogic.gdx.utils.ObjectSet)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter emissiveUVTransform
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell fillY()
com.badlogic.gdx.ApplicationListener: void resume()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int maxTextureSize
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glStencilOpSeparate(int,int,int,int)
com.badlogic.gdx.math.GeometryUtils: GeometryUtils()
com.badlogic.gdx.scenes.scene2d.ui.List$2: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int a()
com.esotericsoftware.jsonbeans.JsonValue: boolean isNumber()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache: void setSmoothingUniform(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDrawElements(int,int,int,int)
com.hyperspherestudio.kryonet.Packets.PacketStream: void release()
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: void allocateChannels()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool: com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random this$0
com.gameanalytics.sdk.events.EGASdkErrorArea: com.gameanalytics.sdk.events.EGASdkErrorArea[] values()
com.badlogic.gdx.scenes.scene2d.Group: void drawChildren(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: java.lang.String DEFAULT_CHARS
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int[] getRenderBound()
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryonet.Listener invokeListener
com.badlogic.gdx.graphics.VertexAttributes$Usage
com.badlogic.gdx.scenes.scene2d.ui.Label: void setFontScale(float,float)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int register(com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType doubleValue
androidx.fragment.app.Fragment: void setAllowEnterTransitionOverlap(boolean)
com.esotericsoftware.kryonet.Listener$QueuedListener$2: void run()
com.badlogic.gdx.graphics.GL20: void glUniform3iv(int,int,int[],int)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data
com.badlogic.gdx.InputMultiplexer: void setProcessors(com.badlogic.gdx.InputProcessor[])
com.badlogic.gdx.utils.XmlReader: void attribute(java.lang.String,java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: float normalAngle
com.badlogic.gdx.scenes.scene2d.Stage: boolean debug
com.badlogic.gdx.graphics.Cubemap: com.badlogic.gdx.graphics.CubemapData getCubemapData()
com.badlogic.gdx.input.RemoteInput: float getAccelerometerZ()
com.badlogic.gdx.utils.JsonReader: java.lang.String unescape(java.lang.String)
com.badlogic.gdx.Input$Keys: int M
com.google.android.material.button.MaterialButton: void setIconResource(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void setColor(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollbarsOnTop(boolean)
com.badlogic.gdx.math.Matrix4: int M22
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.graphics.g2d.Batch getBatch()
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys: com.badlogic.gdx.utils.Array keys
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Input getInput(byte[])
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator: boolean validate(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.utils.ObjectIntMap$Values
com.badlogic.gdx.utils.ObjectFloatMap: void putAll(com.badlogic.gdx.utils.ObjectFloatMap)
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void setRightWidth(float)
com.badlogic.gdx.utils.BooleanArray: boolean get(int)
com.esotericsoftware.kryonet.Serialization: int getLengthLength()
com.badlogic.gdx.scenes.scene2d.ui.TextField: float keyRepeatInitialTime
com.badlogic.gdx.math.Matrix4: void rot(float[],float[],int,int,int)
com.esotericsoftware.kryo.io.Input: Input(byte[])
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: Encoder$LiteralEncoder(com.badlogic.gdx.utils.compression.lzma.Encoder)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setFlickScroll(boolean)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryo.util.IntMap pendingConnections
com.badlogic.gdx.physics.box2d.Contact: void jniResetFriction(long)
com.badlogic.gdx.graphics.TextureArray: boolean isManaged()
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart: java.lang.String id
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FADD
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: java.lang.String getResultAsString()
com.esotericsoftware.kryo.io.KryoDataOutput: void write(int)
androidx.appcompat.widget.AppCompatCheckBox: int getCompoundPaddingLeft()
com.HyperSphere.Connection.PacketObjects.Map.WorldKey: short type
com.esotericsoftware.kryo.util.IntArray: IntArray(boolean,int[])
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$Bounce bounce
com.badlogic.gdx.graphics.glutils.IndexBufferObject: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] values()
com.badlogic.gdx.InputEventQueue: void queueTime()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter ambientUVTransform
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder: int _posStateBits
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3: SelectBox$SelectBoxList$3(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.SelectBox)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: com.badlogic.gdx.files.FileHandle textureFile
com.badlogic.gdx.utils.FlushablePool: com.badlogic.gdx.utils.Array obtained
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean lightsSet
com.badlogic.gdx.utils.JsonValue: boolean getBoolean(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput$3$2$1
com.badlogic.gdx.utils.UBJsonReader: short readUChar(java.io.DataInputStream)
com.esotericsoftware.kryo.serializers.BeanSerializer$1: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.utils.ShortArray: ShortArray(boolean,short[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: void calculatePositionAndValue(float,float,boolean)
com.badlogic.gdx.utils.IdentityMap: IdentityMap(int)
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler: int toGdxButton(int)
androidx.appcompat.widget.SearchView: void setQuery(java.lang.CharSequence)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: void visitEnd()
com.badlogic.gdx.math.Polyline: float getLength()
com.badlogic.gdx.backends.android.AndroidSound: void resume()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.IntFloatMap$MapIterator: boolean hasNext
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidInput getInput()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setAlphas(float)
com.esotericsoftware.kryo.util.MapReferenceResolver: void reset()
androidx.appcompat.widget.ContentFrameLayout: void setAttachListener(androidx.appcompat.widget.ContentFrameLayout$OnAttachListener)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode[] values()
com.badlogic.gdx.physics.box2d.joints.WeldJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.esotericsoftware.kryo.io.Output: Output()
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void invalidate()
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Rectangle getCullingArea()
com.badlogic.gdx.graphics.GL30: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.assets.loaders.TextureAtlasLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.utils.TimSort: java.util.Comparator c
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenFramebuffers(int,java.nio.IntBuffer)
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String,boolean)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preShear(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_SYNTHETIC
com.badlogic.gdx.graphics.PerspectiveCamera: float fieldOfView
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None: int[] sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padLeft(float)
com.badlogic.gdx.graphics.g3d.Attributes: com.badlogic.gdx.graphics.g3d.Attribute get(long)
com.badlogic.gdx.net.SocketHints: boolean keepAlive
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glLineWidth(float)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.graphics.g2d.BitmapFont messageFont
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.scenes.scene2d.ui.Button: com.badlogic.gdx.scenes.scene2d.utils.ClickListener getClickListener()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: float getTopHeight()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: java.lang.Byte lastResponseID
com.badlogic.gdx.backends.android.AndroidDaydream: android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: int nextSpanTransition(int,int,java.lang.Class)
com.badlogic.gdx.utils.JsonValue$JsonIterator
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: DepthShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.utils.ShortArray: void add(short,short)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView
com.badlogic.gdx.graphics.GL30: void glStencilFunc(int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int H
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: void setFlipHorizontally(boolean)
com.badlogic.gdx.utils.ComparableTimSort: void mergeHi(int,int,int,int)
androidx.appcompat.widget.ActionMenuView: void setOverflowReserved(boolean)
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable down
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: Tooltip(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager)
com.badlogic.gdx.files.FileHandle: java.io.BufferedReader reader(int,java.lang.String)
com.badlogic.gdx.utils.ByteArray: com.badlogic.gdx.utils.ByteArray with(byte[])
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: java.lang.String prefix
com.badlogic.gdx.backends.android.AndroidGL30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.Timer$TimerThread: long pauseMillis
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int loc(int)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDragStartX()
com.esotericsoftware.jsonbeans.Json: Json(com.esotericsoftware.jsonbeans.OutputType)
com.badlogic.gdx.utils.SortedIntList$Iterator: boolean hasNext()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accelerationChannel
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isModal
com.esotericsoftware.kryo.util.DefaultClassResolver: byte NAME
com.badlogic.gdx.Application$ApplicationType: Application$ApplicationType(java.lang.String,int)
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Keys keys()
com.badlogic.gdx.utils.IntMap: java.util.Iterator iterator()
com.badlogic.gdx.utils.IntMap: int hashShift
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: float uOffset
com.badlogic.gdx.ScreenAdapter: void render(float)
com.hyperspherestudio.kryonet.Packets.CommonPacket
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void begin()
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int Backs0
com.badlogic.gdx.input.RemoteInput: void setCursorPosition(int,int)
com.badlogic.gdx.Input: boolean isCatchBackKey()
com.badlogic.gdx.audio.AudioRecorder: void dispose()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: float offset
com.badlogic.gdx.LifecycleListener: void dispose()
com.badlogic.gdx.physics.box2d.joints.MouseJointDef: float maxForce
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: TextureRegionDrawable()
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.esotericsoftware.kryo.io.ByteBufferInput: java.nio.ByteOrder byteOrder
com.esotericsoftware.kryonet.Connection: void notifyDisconnected()
com.badlogic.gdx.Input$Keys: int BUTTON_Y
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool: com.badlogic.gdx.graphics.Mesh obtain(com.badlogic.gdx.graphics.VertexAttributes,int,int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void endpart()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.google.android.material.button.MaterialButton: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData: BillboardControllerRenderData()
com.esotericsoftware.jsonbeans.ObjectMap
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup top()
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: void setCapture(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindTexture(int,int)
com.badlogic.gdx.graphics.glutils.VertexArray: boolean isBound
com.esotericsoftware.kryonet.JsonSerialization: JsonSerialization()
com.badlogic.gdx.graphics.g2d.SpriteBatch: void disableBlending()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(float)
com.badlogic.gdx.graphics.VertexAttributes$Usage: int TextureCoordinates
com.badlogic.gdx.maps.Map: Map()
com.badlogic.gdx.utils.IntIntMap: int removeStash(int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder: void BaseInit()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2: TooltipManager$2(com.badlogic.gdx.scenes.scene2d.ui.TooltipManager)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: float tileWidth
com.badlogic.gdx.scenes.scene2d.ui.Stack: void layout()
com.badlogic.gdx.scenes.scene2d.ui.Widget: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.utils.ArrayMap: void shuffle()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDepthMask(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Skin$2
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4
com.badlogic.gdx.utils.IntIntMap$Entries: void reset()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int SKIP_DEBUG
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINEJOIN_MITER_VARIABLE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: int a
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights0cutoffAngle
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACONST_NULL
com.esotericsoftware.kryo.util.ObjectMap$Entry: ObjectMap$Entry()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int METHOD
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType FrictionJoint
com.badlogic.gdx.utils.ObjectSet: void resize(int)
com.badlogic.gdx.utils.ArrayMap$Entries: java.util.Iterator iterator()
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter value(java.lang.Object)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion exp(float)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 start
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_diffuseTexture
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: int defaultCullFace
com.badlogic.gdx.graphics.GL30: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT8
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE12
com.badlogic.gdx.backends.android.InputProcessorLW: boolean keyTyped(char)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: VertexBufferObjectWithVAO(boolean,java.nio.ByteBuffer,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isAbstract(java.lang.Class)
com.badlogic.gdx.graphics.glutils.InstanceData: void setInstanceData(float[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean expand
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight set(float,float,float,com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.utils.ByteArray: byte[] shrink()
com.badlogic.gdx.utils.IntSet: IntSet(int,float)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: SpawnShapeValue()
com.badlogic.gdx.graphics.g3d.loader.MtlLoader
com.badlogic.gdx.utils.Array: void truncate(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(float)
com.badlogic.gdx.utils.Align: boolean isTop(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBlendFunc(int,int)
com.badlogic.gdx.InputMultiplexer: boolean keyUp(int)
com.esotericsoftware.kryonet.FrameworkMessage$Ping: int id
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: java.lang.String name
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 setToRandomDirection()
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: com.badlogic.gdx.scenes.scene2d.ui.Button getChecked()
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int kNumBitPriceShiftBits
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void sphere(float,float,float,int,int,float,float,float,float)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE9
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBeginQuery(int,int)
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType LWJGL3
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glSamplerParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.Base64Coder: byte[] decode(char[],byte[])
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidGraphics graphics
com.badlogic.gdx.graphics.g3d.ModelBatch: void flush()
com.badlogic.gdx.graphics.GL30: void glScissor(int,int,int,int)
com.badlogic.gdx.graphics.g3d.model.Node: boolean isAnimated
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes()
com.badlogic.gdx.utils.ShortArray: short first()
com.badlogic.gdx.math.Circle: float area()
com.HyperSphere.Connection.PacketObjects.Misc.Item: int level
com.esotericsoftware.jsonbeans.ObjectMap$Entry: java.lang.Object value
com.esotericsoftware.kryo.Serializer
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type getType()
com.badlogic.gdx.utils.PropertiesUtils: int KEY_DONE
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void clear()
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler: AndroidMultiTouchHandler()
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings: int singleLineColumns
com.badlogic.gdx.backends.android.AndroidGL20: void glGenFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.backends.android.AndroidApplication: void onWindowFocusChanged(boolean)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2
com.badlogic.gdx.Net$HttpMethods: java.lang.String PUT
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void box(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: void remove()
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer: FloatFrameBuffer()
com.badlogic.gdx.scenes.scene2d.ui.TextField: TextField(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: void visitEnd()
com.badlogic.gdx.input.RemoteSender: boolean scrolled(int)
com.badlogic.gdx.graphics.GL30: int GL_MAX
com.badlogic.gdx.graphics.g3d.environment.BaseLight: com.badlogic.gdx.graphics.g3d.environment.BaseLight setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.glutils.GLVersion: java.lang.String TAG
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(int,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.Input$Keys: int SOFT_LEFT
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer
com.badlogic.gdx.utils.QuickSelect: int medianOfThreePivot(int,int)
com.esotericsoftware.kryo.util.IntMap: IntMap(com.esotericsoftware.kryo.util.IntMap)
androidx.appcompat.widget.AppCompatButton: void setBackgroundResource(int)
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: float maxForce
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: com.badlogic.gdx.scenes.scene2d.EventListener listener
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction: VisibleAction()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: UnsafeMemoryOutput()
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1
com.badlogic.gdx.Input$Keys: int MEDIA_STOP
com.badlogic.gdx.graphics.GL20: int GL_BOOL_VEC4
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: int getGlType()
com.badlogic.gdx.utils.QuickSelect: int partition(int,int,int)
com.badlogic.gdx.utils.LongArray: void swap(int,int)
com.esotericsoftware.kryo.util.IdentityMap$Entries: boolean hasNext()
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.rangecoder.Decoder m_RangeDecoder
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel)
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float)
com.badlogic.gdx.InputProcessor: boolean keyUp(int)
androidx.recyclerview.widget.RecyclerView: void setScrollState(int)
com.esotericsoftware.jsonbeans.JsonReader: int json_en_object
com.esotericsoftware.kryo.serializers.JavaSerializer: JavaSerializer()
com.esotericsoftware.kryo.util.ObjectMap: void clear()
com.esotericsoftware.kryo.io.Input: java.io.InputStream inputStream
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getNodeAt(float)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: boolean containsValue(int)
androidx.appcompat.widget.SearchView$SearchAutoComplete: int getSearchViewTextMinWidthDp()
com.badlogic.gdx.graphics.g2d.Sprite: void translateX(float)
com.badlogic.gdx.utils.ObjectSet: java.lang.String toString()
com.badlogic.gdx.utils.XmlReader$Element: void removeChild(com.badlogic.gdx.utils.XmlReader$Element)
com.google.android.material.button.MaterialButton: void setIconSize(int)
com.badlogic.gdx.backends.android.AndroidAudio: void dispose()
com.esotericsoftware.kryo.io.OutputChunked: void writeChunkSize()
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy: float ratio
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.glutils.HdpiUtils: int toBackBufferX(int)
androidx.fragment.app.Fragment: boolean getUserVisibleHint()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle getStyle()
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.GL30: void glUniform2i(int,int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void setVertices(float[],int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1: DefaultShader$Setters$1()
com.badlogic.gdx.graphics.g2d.NinePatch: float padBottom
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.BodyDef: float angularVelocity
com.esotericsoftware.kryo.io.KryoDataInput: boolean readBoolean()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_TRANSIENT
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: void setSize(float,float)
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader: SynchronousAssetLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion(com.badlogic.gdx.graphics.Texture,int,int)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter viewWorldTrans
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: DefaultTextureBinder(int)
com.badlogic.gdx.maps.objects.RectangleMapObject: RectangleMapObject(float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode mode
com.badlogic.gdx.graphics.GL30: void glBindTexture(int,int)
com.badlogic.gdx.utils.JsonValue: boolean[] asBooleanArray()
com.badlogic.gdx.utils.IntIntMap: int pushIterations
com.badlogic.gdx.backends.android.AndroidInput: float getGyroscopeZ()
com.google.android.material.chip.Chip: void setChipMinHeightResource(int)
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type Polygon
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteShader(int)
com.esotericsoftware.kryo.io.Output: int writeVarLong(long,boolean)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: int usage
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBindBuffer(int,int)
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean continuous
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell[][] cells
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void instant()
com.badlogic.gdx.math.Vector3: float dst2(float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Label: float getFontScaleY()
com.badlogic.gdx.utils.compression.lz.OutWindow: void SetStream(java.io.OutputStream)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.google.android.material.textfield.TextInputLayout: void setErrorIconOnClickListener(android.view.View$OnClickListener)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters
com.badlogic.gdx.graphics.g3d.decals.Decal: int X2
com.badlogic.gdx.scenes.scene2d.ui.Table: void layout()
com.badlogic.gdx.backends.android.AndroidGL30: void glVertexAttribDivisor(int,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float padRight
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue()
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glCreateProgram()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundDisabled
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType type
com.badlogic.gdx.utils.reflect.ClassReflection: java.lang.Class forName(java.lang.String)
com.badlogic.gdx.math.Polyline: float[] getTransformedVertices()
com.esotericsoftware.kryo.util.IntMap: boolean containsKeyStash(int)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: void setDistanceFieldSmoothing(float)
com.badlogic.gdx.utils.IntSet$IntSetIterator: com.badlogic.gdx.utils.IntSet set
androidx.fragment.app.Fragment: int ACTIVITY_CREATED
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawLine(long,int,int,int,int,int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useGyroscope
com.badlogic.gdx.scenes.scene2d.ui.Cell: int getColumn()
com.badlogic.gdx.utils.BooleanArray: void swap(int,int)
com.esotericsoftware.kryo.serializers.AsmCachedFieldFactory: AsmCachedFieldFactory()
com.badlogic.gdx.utils.JsonReader: byte[] init__json_indicies_0()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: boolean vertical
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.graphics.g2d.NinePatch: float getPadTop()
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue remove(java.lang.String)
com.badlogic.gdx.graphics.GL30: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.GL30: void glVertexAttrib3f(int,float,float,float)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float getStartX()
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Audio getAudio()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.math.Interpolation$4: Interpolation$4()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.ObjectMap loaders
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setKeepWithinStage(boolean)
com.badlogic.gdx.backends.android.AndroidApplication: void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getCorner010(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart: ModelNodePart()
com.badlogic.gdx.graphics.Mesh$VertexDataType: Mesh$VertexDataType(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.utils.Selection: void addAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: int pressedPointer
com.badlogic.gdx.graphics.g2d.Sprite: void setBounds(float,float,float,float)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: long initialTimeOffset
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 nearestSegmentPoint(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine
com.badlogic.gdx.physics.box2d.JointDef$JointType
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_COMPONENT
com.badlogic.gdx.utils.compression.lz.InWindow: void MovePos()
com.badlogic.gdx.utils.SerializationException
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell center()
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean getUseMemRegions()
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String getAttribute(java.lang.String)
com.badlogic.gdx.utils.XmlReader: int xml_start
com.badlogic.gdx.graphics.g3d.model.NodePart: boolean enabled
com.esotericsoftware.kryonet.Connection: com.esotericsoftware.kryonet.EndPoint getEndPoint()
com.badlogic.gdx.graphics.g3d.Material: com.badlogic.gdx.graphics.g3d.Material copy()
com.badlogic.gdx.utils.Base64Coder: byte[] decode(char[],int,int,com.badlogic.gdx.utils.Base64Coder$CharMap)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.InputStream)
com.esotericsoftware.kryo.serializers.BeanSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.GL20: void glDrawElements(int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.GL20: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float amountY
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: void manage(com.badlogic.gdx.utils.Disposable)
com.badlogic.gdx.Game: void resume()
com.badlogic.gdx.math.Interpolation$3
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: BaseAnimationController$Transform()
com.esotericsoftware.kryo.util.Util: void log(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: void afterGroup(int)
com.badlogic.gdx.graphics.g2d.Sprite: void set(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.graphics.glutils.InstanceData
com.esotericsoftware.kryo.io.ByteBufferOutput: java.nio.ByteBuffer getByteBuffer()
com.esotericsoftware.kryonet.Listener$QueuedListener$3: Listener$QueuedListener$3(com.esotericsoftware.kryonet.Listener$QueuedListener,com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGraphics: int getBackBufferHeight()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged
com.badlogic.gdx.scenes.scene2d.ui.Image: float getMinWidth()
androidx.cardview.widget.CardView: void setRadius(float)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: float getKnobY()
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver: com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[] descriptors
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniformMatrix3fv(int,int,boolean,float[],int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int getDebugFlags()
com.badlogic.gdx.utils.Queue$QueueIterator: com.badlogic.gdx.utils.Queue queue
com.badlogic.gdx.utils.GdxRuntimeException
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void index(short,short)
com.google.android.material.textfield.TextInputLayout: void setErrorIconOnLongClickListener(android.view.View$OnLongClickListener)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getMaxY()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_MATRIX_STRIDE
com.badlogic.gdx.utils.PooledLinkedList: void iterReverse()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.utils.Array: java.lang.Object selectRanked(java.util.Comparator,int)
com.badlogic.gdx.utils.JsonValue: boolean notEmpty()
com.badlogic.gdx.utils.reflect.Method: boolean isPublic()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int numTexCoords
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool: ModelCache$SimpleMeshPool()
com.google.android.material.chip.Chip: void setChipIconEnabled(boolean)
com.esotericsoftware.kryo.io.ByteBufferInput: void readBytes(byte[])
com.badlogic.gdx.utils.Json: void toJson(java.lang.Object,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int SWAP
com.badlogic.gdx.graphics.g2d.PolygonBatch: boolean isBlendingEnabled()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeLittleEndianInt(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue strengthValue
com.badlogic.gdx.scenes.scene2d.Actor: boolean isTouchFocusTarget()
com.badlogic.gdx.physics.box2d.JointDef: com.badlogic.gdx.physics.box2d.Body bodyB
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glShaderSource(int,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor
com.badlogic.gdx.math.CumulativeDistribution: void generateUniform()
com.badlogic.gdx.Files: com.badlogic.gdx.files.FileHandle internal(java.lang.String)
com.esotericsoftware.jsonbeans.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.esotericsoftware.kryo.util.IdentityMap: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters: PixmapPackerIO$SaveParameters()
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: boolean enableLimit
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,float,float,float,float,float,float)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal
com.badlogic.gdx.utils.IntSet: int PRIME3
com.badlogic.gdx.graphics.glutils.KTXTextureData: int pixelDepth
com.badlogic.gdx.Input$Keys: int BUTTON_L2
androidx.recyclerview.widget.RecyclerView: RecyclerView(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryo.io.FastInput: FastInput(java.io.InputStream)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getJointSpeed()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setTimeline(float[])
com.google.android.material.internal.CheckableImageButton
com.badlogic.gdx.utils.UBJsonReader: int readUShort(java.io.DataInputStream)
com.badlogic.gdx.utils.UBJsonReader: boolean oldFormat
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.graphics.g2d.PolygonRegion getRegion()
com.esotericsoftware.reflectasm.AccessClassLoader: int activeAccessClassLoaders()
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object get(java.lang.Object)
com.badlogic.gdx.physics.box2d.EdgeShape: boolean hasVertex3()
com.esotericsoftware.jsonbeans.ObjectMap$Values: void reset()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void begin(long)
com.badlogic.gdx.utils.ArrayMap$Entries
com.badlogic.gdx.audio.Sound: void stop()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: DynamicsInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer)
com.badlogic.gdx.input.RemoteInput: float getGyroscopeZ()
com.badlogic.gdx.backends.android.AndroidDaydream: boolean firstResume
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.Array findRegions(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetInteger64v(int,java.nio.LongBuffer)
com.badlogic.gdx.assets.loaders.CubemapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: SphericalHarmonics(float[])
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4: ParticleShader$Setters$4()
com.badlogic.gdx.math.Bezier: java.lang.Object valueAt(java.lang.Object,float)
com.badlogic.gdx.scenes.scene2d.ui.List: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void hide(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)
com.badlogic.gdx.graphics.GL20: int GL_FLOAT_VEC3
com.badlogic.gdx.physics.box2d.MassData: float mass
com.badlogic.gdx.utils.IntMap: void putResize(int,java.lang.Object)
com.badlogic.gdx.graphics.g2d.NinePatch: float getMiddleWidth()
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean isDisabled()
com.badlogic.gdx.utils.XmlReader: void text(java.lang.String)
com.badlogic.gdx.utils.Logger: void error(java.lang.String)
com.badlogic.gdx.utils.ByteArray: void truncate(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getColumnWidth(int)
com.badlogic.gdx.scenes.scene2d.ui.Table$3: Table$3()
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_range_lengths_0()
com.badlogic.gdx.utils.IntSet: int hashShift
com.esotericsoftware.jsonbeans.Json: java.lang.String prettyPrint(java.lang.String,com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings)
com.google.firebase.messaging.EnhancedIntentService: EnhancedIntentService()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: SequenceAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.physics.box2d.Fixture: boolean testPoint(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)
com.esotericsoftware.kryo.util.IntMap: int pushIterations
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl: long getObjectFieldOffset(java.lang.reflect.Field)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: void invalidate()
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType Unknown
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha
com.badlogic.gdx.graphics.g2d.TextureRegion: void setU2(float)
com.badlogic.gdx.utils.JsonValue: void prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,java.io.Writer)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float jniGetMaxTorque(long)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: long Type
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String IfNoneMatch
com.badlogic.gdx.net.HttpStatus: int SC_INTERNAL_SERVER_ERROR
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long mWhenModified
com.HyperSphere.Connection.PacketObjects.Misc.DropBox: java.util.ArrayList itemList
com.badlogic.gdx.graphics.g2d.TextureRegion: boolean isFlipX()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
com.badlogic.gdx.graphics.g3d.particles.ResourceData: ResourceData(java.lang.Object)
com.badlogic.gdx.math.Interpolation$ElasticOut
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: void setListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.esotericsoftware.kryonet.JsonSerialization: byte[] logBuffer
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.utils.ComparableTimSort: void mergeAt(int)
com.badlogic.gdx.Net$HttpRequest: void setMethod(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(float)
com.badlogic.gdx.net.NetJavaSocketImpl: java.lang.String getRemoteAddress()
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: com.badlogic.gdx.scenes.scene2d.EventListener getListener()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glStencilFuncSeparate(int,int,int,int)
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder m_PosAlignDecoder
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void enableLimit(boolean)
com.badlogic.gdx.utils.IntArray: void insert(int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int getMaxTextureSize()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float getTopHeight()
com.badlogic.gdx.utils.ObjectIntMap$Values: void remove()
com.HyperSphere.Connection.PacketObjects.Misc.HyperSoundFx: java.lang.String id
com.badlogic.gdx.graphics.g2d.NinePatch: float getPadRight()
com.badlogic.gdx.utils.JsonValue$JsonIterator: java.lang.Object next()
com.badlogic.gdx.physics.box2d.joints.GearJoint
com.badlogic.gdx.backends.android.AndroidInput: void onResume()
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.utils.XmlReader xml
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.esotericsoftware.kryo.io.KryoDataOutput: void writeUTF(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.physics.box2d.FixtureDef: float friction
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int EGL_OPENGL_ES2_BIT
com.esotericsoftware.reflectasm.AccessClassLoader: AccessClassLoader(java.lang.ClassLoader)
com.badlogic.gdx.graphics.GL20: int GL_FIXED
com.badlogic.gdx.utils.compression.lzma.Encoder: int ReadMatchDistances()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_FAIL
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setBottomHeight(float)
com.badlogic.gdx.graphics.GL20: void glStencilMaskSeparate(int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)
com.esotericsoftware.kryonet.ClientDiscoveryHandler: com.esotericsoftware.kryonet.ClientDiscoveryHandler DEFAULT
com.badlogic.gdx.backends.android.AndroidGL20: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.HyperSphere.Connection.PacketObjects.Map.Mark: int Height
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: float degreesPerPixel
com.badlogic.gdx.Net: void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBufferSubData(int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Quaternion rotation
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
com.badlogic.gdx.utils.ReflectionPool: java.lang.Object newObject()
com.badlogic.gdx.graphics.GL30: int GL_MAX_VERTEX_UNIFORM_BLOCKS
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1: void dispose()
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.glutils.ShaderProgram shader
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DRETURN
com.esotericsoftware.kryo.Registration: int id
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData
androidx.appcompat.widget.AbsActionBarView: int getAnimatedVisibility()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float)
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
com.esotericsoftware.kryo.io.UnsafeInput: boolean varIntsEnabled
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDragX()
com.google.android.material.textfield.TextInputLayout: void setErrorIconDrawable(int)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int forwardButton
androidx.appcompat.widget.SearchView: void setIconified(boolean)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: java.util.ArrayList getCollisionBound()
com.badlogic.gdx.utils.Array: boolean containsAny(com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1: ParticleShader$Setters$1()
androidx.cardview.widget.CardView: int getContentPaddingTop()
com.badlogic.gdx.utils.ScreenUtils: com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture()
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.utils.Logger: int ERROR
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.backends.android.AndroidFiles files
com.badlogic.gdx.net.HttpStatus: int SC_GATEWAY_TIMEOUT
androidx.appcompat.widget.ActionMenuView: void setPopupTheme(int)
com.badlogic.gdx.backends.android.AndroidInput: int getDeltaX()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField: void copy(java.lang.Object,java.lang.Object)
com.esotericsoftware.kryo.io.Input: byte readByte()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String AmbientAlias
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue getChild(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform lerp(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean environmentCubemap
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,float)
com.esotericsoftware.kryonet.Client: void reconnect()
com.esotericsoftware.kryonet.Connection: int getID()
com.esotericsoftware.kryonet.Listener$LagListener$1
com.badlogic.gdx.physics.box2d.Body: void jniGetTransform(long,float[])
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool: java.lang.Object newObject()
com.badlogic.gdx.physics.box2d.ContactImpulse
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.files.FileHandle toFileHandle(com.badlogic.gdx.files.FileHandle,java.util.Locale)
com.badlogic.gdx.net.NetJavaSocketImpl: java.net.Socket socket
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.glutils.InstanceData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.math.collision.Segment: Segment(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.ArrayMap$Keys: com.badlogic.gdx.utils.ArrayMap map
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int posOffset
com.badlogic.gdx.scenes.scene2d.ui.Cell: void set(com.badlogic.gdx.scenes.scene2d.ui.Cell)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidNet net
com.google.android.material.internal.NavigationMenuItemView: void setIconPadding(int)
com.badlogic.gdx.graphics.glutils.ETC1TextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 tmpForward
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.backends.android.ZipResourceFile expansionFile
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType[] $VALUES
com.badlogic.gdx.utils.PooledLinkedList: com.badlogic.gdx.utils.Pool pool
com.badlogic.gdx.backends.android.AndroidFragmentApplication
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glHint(int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getAscender(long)
com.badlogic.gdx.Input$Keys: int ALT_LEFT
com.badlogic.gdx.utils.LongArray: int lastIndexOf(char)
com.esotericsoftware.kryo.serializers.BlowfishSerializer$1: com.esotericsoftware.kryo.serializers.BlowfishSerializer this$0
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1fv(int,int,float[],int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE26
com.badlogic.gdx.math.DelaunayTriangulator: DelaunayTriangulator()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Interpolation
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle fromString(java.lang.String)
com.badlogic.gdx.utils.reflect.Field: boolean isSynthetic()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle getStyle()
com.esotericsoftware.kryo.serializers.MapSerializer: MapSerializer()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int format
com.HyperSphere.Connection.PacketObjects.Misc.AlterableKey
com.google.android.material.chip.ChipGroup: int getChipSpacingHorizontal()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.utils.FlushablePool vectorPool
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2: ScrollPane$2(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane)
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_RANDOM
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: com.badlogic.gdx.maps.tiled.TiledMapTile tile
com.google.android.material.chip.Chip: void setOnCloseIconClickListener(android.view.View$OnClickListener)
androidx.appcompat.widget.ActionBarContainer: void setVisibility(int)
com.badlogic.gdx.physics.box2d.World: void postSolve(long,long)
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type OpenGL
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: int compareTo(java.lang.Object)
androidx.fragment.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random: void activateParticles(int,int)
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.Array stack
com.google.android.material.chip.Chip: void setCheckedIconEnabled(boolean)
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.animation.MotionSpec getHideMotionSpec()
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: void setPolygon(com.badlogic.gdx.graphics.g2d.TextureRegion,float[])
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value spaceRight
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int HalfWidthOffset
com.badlogic.gdx.utils.viewport.ExtendViewport: void setMinWorldWidth(float)
com.HyperSphere.Connection.PacketObjects.Misc.QuestPage: QuestPage()
com.badlogic.gdx.utils.CharArray: void mul(int,char)
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.JsonWriter$OutputType outputType
com.badlogic.gdx.math.Interpolation$BounceIn
com.esotericsoftware.kryonet.TcpConnection: int IPTOS_LOWDELAY
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.scenes.scene2d.Stage: void setDebugTableUnderMouse(boolean)
com.esotericsoftware.kryo.serializers.FieldSerializer: void setFieldsAsAccessible(boolean)
com.esotericsoftware.kryo.io.Input: long[] readLongs(int,boolean)
androidx.appcompat.widget.AppCompatImageView
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setCursorPosition(int)
com.badlogic.gdx.utils.GdxNativesLoader: void load()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory: void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)
com.esotericsoftware.jsonbeans.JsonException: java.lang.String getMessage()
com.badlogic.gdx.input.RemoteInput$TouchEvent: int x
androidx.appcompat.widget.AppCompatSpinner: android.content.Context getPopupContext()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glEndTransformFeedback()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setInstanceData(float[])
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.utils.LongArray: LongArray(long[])
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: void MakeAsChar()
com.badlogic.gdx.net.HttpStatus: int SC_FORBIDDEN
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_IS_ROW_MAJOR
com.badlogic.gdx.backends.android.ZipResourceFile: int kEOCDSignature
com.badlogic.gdx.graphics.glutils.HdpiUtils: HdpiUtils()
com.badlogic.gdx.math.Intersector: boolean intersectSegments(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void cone(float,float,float,float,float)
com.badlogic.gdx.utils.TimeUtils: long nanosToMillis(long)
com.badlogic.gdx.maps.MapObjects: void remove(com.badlogic.gdx.maps.MapObject)
com.badlogic.gdx.utils.ObjectIntMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask: TextField$KeyRepeatTask(com.badlogic.gdx.scenes.scene2d.ui.TextField)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: int getNumVertices()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int scaleToFitSquare(int,int,int)
com.badlogic.gdx.maps.Map: com.badlogic.gdx.maps.MapLayers getLayers()
com.badlogic.gdx.physics.box2d.World: long jniCreateDistanceJoint(long,long,long,boolean,float,float,float,float,float,float,float)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[])
com.badlogic.gdx.graphics.profiling.GL20Interceptor: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.esotericsoftware.kryonet.Client: boolean tcpRegistered
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.model.data.ModelData: com.badlogic.gdx.utils.Array animations
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(float)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener gestureListener
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation sineIn
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptySetSerializer
androidx.appcompat.widget.AppCompatTextView: void setTextMetricsParamsCompat(androidx.core.text.PrecomputedTextCompat$Params)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.model.Node node(com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.utils.TimSort: void rangeCheck(int,int,int)
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)
com.badlogic.gdx.backends.android.AndroidDaydream$1: void resume()
com.badlogic.gdx.utils.ObjectFloatMap: int PRIME3
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool meshPool
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral HardwareKeyboard
com.badlogic.gdx.graphics.Mesh: boolean autoBind
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter: java.lang.String encoding
com.esotericsoftware.kryo.util.IntMap: com.esotericsoftware.kryo.util.IntMap$Entries entries()
com.badlogic.gdx.utils.LongMap: void shrink(int)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.model.MeshPart: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.utils.IntIntMap: boolean containsKey(int)
androidx.recyclerview.widget.GridLayoutManager
com.badlogic.gdx.utils.LongArray: void add(long)
com.badlogic.gdx.graphics.g3d.decals.Decal: int VERTEX_SIZE
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.Class,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsBullet(long)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: void load(java.io.BufferedReader)
com.badlogic.gdx.graphics.g3d.ModelCache: ModelCache(com.badlogic.gdx.graphics.g3d.utils.RenderableSorter,com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool)
com.badlogic.gdx.utils.Predicate$PredicateIterator: boolean end
com.esotericsoftware.kryonet.Listener
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: int keyCode
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Color
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawRangeElements(int,int,int,int,int,int)
com.badlogic.gdx.math.Polyline: void rotate(float)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: float[] textureBundle
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void setChecked(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glLinkProgram(int)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void draw(com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch,float)
com.esotericsoftware.kryo.io.InputChunked: InputChunked(java.io.InputStream)
com.badlogic.gdx.math.GridPoint2
com.badlogic.gdx.utils.Align: int topRight
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: void setVisible(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(float)
com.badlogic.gdx.scenes.scene2d.ui.Skin: java.lang.Object get(java.lang.Class)
com.badlogic.gdx.physics.box2d.QueryCallback
com.badlogic.gdx.utils.IdentityMap$Keys: boolean hasNext()
com.esotericsoftware.kryo.util.IntArray: int size
com.google.android.material.circularreveal.CircularRevealFrameLayout: int getCircularRevealScrimColor()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int depth
com.badlogic.gdx.backends.android.AndroidApplication: android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int lifeOffset
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void dispose()
com.badlogic.gdx.utils.FloatArray: int indexOf(float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3i(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Widget: void sizeChanged()
com.badlogic.gdx.physics.box2d.joints.WeldJoint: com.badlogic.gdx.math.Vector2 localAnchorA
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()
com.badlogic.gdx.utils.IntMap$Entries
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.Stage: void setViewport(com.badlogic.gdx.utils.viewport.Viewport)
com.badlogic.gdx.math.ConvexHull: void sort(float[],int)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.physics.box2d.Shape: float jniGetRadius(long)
androidx.appcompat.widget.ActionBarOverlayLayout: void setUiOptions(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void updateInstanceData(int,float[],int,int)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float[] snapToGrid(float[])
com.badlogic.gdx.math.Polygon: float scaleX
com.google.android.material.card.MaterialCardView: void setCheckedIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glStencilMaskSeparate(int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: Gdx2DPixmap(int,int,int)
com.esotericsoftware.kryo.util.ObjectMap$Keys: java.lang.Object next()
com.badlogic.gdx.backends.android.AndroidInput: boolean isKeyJustPressed(int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node: com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node leftChild
com.badlogic.gdx.utils.IntIntMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.google.android.material.textfield.TextInputLayout: void setStartIconTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g3d.decals.Decal: int value
com.badlogic.gdx.backends.android.AndroidGraphics: float getRawDeltaTime()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void surfaceCreated()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void setLogLevel(int)
androidx.appcompat.view.menu.ActionMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
com.esotericsoftware.kryo.io.InputChunked: InputChunked(java.io.InputStream,int)
com.badlogic.gdx.ScreenAdapter: void pause()
com.badlogic.gdx.assets.loaders.SoundLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter)
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void rotate(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
com.google.android.material.chip.Chip: void setRippleColor(android.content.res.ColorStateList)
com.badlogic.gdx.physics.box2d.Body: float jniGetAngularVelocity(long)
com.badlogic.gdx.graphics.GL20: void glUniformMatrix4fv(int,int,boolean,float[],int)
com.badlogic.gdx.utils.SortedIntList$Iterator: java.lang.Object next()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool: java.lang.Object newObject()
com.badlogic.gdx.scenes.scene2d.utils.Selection: java.util.Iterator iterator()
com.badlogic.gdx.audio.Sound: long play()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: float unitScale
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.utils.IdentityMap: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.Mesh end(com.badlogic.gdx.graphics.Mesh)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,float[])
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor getDepthMap()
com.badlogic.gdx.graphics.Cubemap: com.badlogic.gdx.assets.AssetManager assetManager
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void cylinder(float,float,float,int,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer: ParticleChannels$ColorInitializer()
com.esotericsoftware.jsonbeans.JsonValue: int asInt()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.PixmapPacker: int[] getSplits(com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.Color: int rgba8888(float,float,float,float)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: com.badlogic.gdx.graphics.g2d.SpriteCache spriteCache
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setPosition(float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4iv(int,int,int[],int)
com.badlogic.gdx.math.Bezier: Bezier(com.badlogic.gdx.math.Vector[])
com.badlogic.gdx.graphics.glutils.VertexData: void updateVertices(int,float[],int,int)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float getItemCenterX()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void activateParticles(int,int)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void resize(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.InputListener inputManager
com.badlogic.gdx.backends.android.AndroidSound: long loop(float,float,float)
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$TimerThread thread
com.badlogic.gdx.scenes.scene2d.ui.TextField: void drawText(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float)
com.HyperSphere.Connection.PacketObjects.Map.Mark: int Width
com.badlogic.gdx.graphics.g2d.PixmapPacker: int pageWidth
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void updateBufferAddress()
com.badlogic.gdx.graphics.Mesh: float calculateRadius(float,float,float)
com.badlogic.gdx.graphics.g2d.PixmapPacker: int alphaThreshold
com.HyperSphere.Connection.PacketObjects.Misc.HashMapEntry: HashMapEntry()
com.badlogic.gdx.utils.reflect.Method: void setAccessible(boolean)
com.badlogic.gdx.math.Frustum: boolean boundsInFrustum(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType RopeJoint
com.badlogic.gdx.backends.android.AndroidInput: boolean[] justPressedKeys
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: ParticleControllerInfluencer$Single(com.badlogic.gdx.graphics.g3d.particles.ParticleController[])
com.badlogic.gdx.graphics.g2d.Sprite: void setCenterX(float)
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.graphics.g3d.model.NodePart set(com.badlogic.gdx.graphics.g3d.model.NodePart)
com.badlogic.gdx.utils.ObjectIntMap$Keys: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.io.ByteBufferInput: int readInt()
com.badlogic.gdx.scenes.scene2d.ui.Image: float getImageX()
com.badlogic.gdx.utils.JsonValue: java.lang.String getString(java.lang.String,java.lang.String)
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.Actor widget
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet send(boolean)
com.badlogic.gdx.scenes.scene2d.Stage: boolean touchDragged(int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: float textOffset
com.badlogic.gdx.scenes.scene2d.Actor: float rotation
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute depthTestAttribute
com.esotericsoftware.kryonet.Client: int emptySelects
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch
com.badlogic.gdx.graphics.TextureData: boolean useMipMaps()
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
com.badlogic.gdx.utils.UBJsonWriter$JsonObject
com.badlogic.gdx.graphics.Pixmap: void setFilter(com.badlogic.gdx.graphics.Pixmap$Filter)
com.badlogic.gdx.math.Circle: Circle(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V6
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: void set(java.lang.Object,java.lang.Object)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundResource(int)
com.badlogic.gdx.physics.box2d.ChainShape: long newChainShape()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onCreate(android.view.SurfaceHolder)
com.badlogic.gdx.Graphics: float getPpcX()
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarHideOffset(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsRenderbuffer(int)
com.badlogic.gdx.utils.StringBuilder: java.lang.String substring(int)
com.badlogic.gdx.utils.reflect.ClassReflection: java.lang.Class getComponentType(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: ImageButton(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,float)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData: ResourceData$AssetData(java.lang.String,java.lang.Class)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$OnFlingListener getOnFlingListener()
com.badlogic.gdx.backends.android.AndroidGraphics: boolean supportsExtension(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int bindTextureRoundRobin(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.maps.tiled.TmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.backends.android.AndroidInput: int getDeltaX(int)
com.badlogic.gdx.physics.box2d.Fixture: void setUserData(java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getInternalName()
com.HyperSphere.Connection.PacketObjects.Purchase.Purchaseable: java.lang.String clientJson
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.math.Vector2 anchorA
com.badlogic.gdx.graphics.glutils.FloatTextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setEGLConfigChooser(boolean)
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel)
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES
androidx.fragment.app.Fragment: boolean getRetainInstance()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: boolean genMipMaps
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetStart()
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType Phong
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,int,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: Table$Debug(java.lang.String,int)
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: com.badlogic.gdx.assets.loaders.FileHandleResolver baseResolver
com.badlogic.gdx.audio.Sound: void setPitch(long,float)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: void setDampingRatio(float)
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INVOKEDYNAMIC
com.badlogic.gdx.graphics.g2d.Batch: boolean isDrawing()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer: ParticleChannels$TextureRegionInitializer()
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] reps
com.esotericsoftware.kryo.io.ByteBufferInput: boolean getVarIntsEnabled()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])
com.badlogic.gdx.graphics.GL30: void glUniform1iv(int,int,int[],int)
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] rowMinHeight
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.Array getContactList()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int)
com.hyperspherestudio.kryonet.Packets.CommonPacket: CommonPacket(java.lang.Object,boolean,com.hyperspherestudio.kryonet.HyperSphereClient)
com.badlogic.gdx.utils.Json: java.lang.Object[] getDefaultValues(java.lang.Class)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean mMultipleGLESContextsAllowed
com.google.android.material.textfield.TextInputLayout: void setHint(java.lang.CharSequence)
com.esotericsoftware.kryo.Kryo: java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.input.RemoteInput: void run()
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: com.esotericsoftware.kryo.util.IdentityMap map
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int height
com.badlogic.gdx.scenes.scene2d.ui.Skin$1: com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
com.badlogic.gdx.ScreenAdapter: ScreenAdapter()
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: boolean needsLayout()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float tapSquareSize
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int hCalc
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: boolean valid
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: RegularEmitter(com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter)
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight set(float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: BaseShader$Uniform(java.lang.String,long,long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: boolean jniIsLimitEnabled(long)
com.badlogic.gdx.utils.ObjectIntMap: int PRIME1
com.badlogic.gdx.physics.box2d.World: int getBodyCount()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.utils.reflect.Constructor: java.lang.Class getDeclaringClass()
com.esotericsoftware.kryo.Kryo: java.lang.Object copy(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2fv(int,int,float[],int)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int mipLevel
com.badlogic.gdx.graphics.VertexAttributes: int calculateOffsets()
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node getChild(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IDIV
com.badlogic.gdx.math.ConvexHull: ConvexHull()
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Input getInput(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetRight()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder
com.badlogic.gdx.backends.android.AndroidInput: boolean isCatchMenuKey()
com.badlogic.gdx.math.CatmullRomSpline: int nearest(com.badlogic.gdx.math.Vector,int,int)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: com.badlogic.gdx.math.Rectangle viewBounds
com.google.android.material.textfield.TextInputLayout: void setEndIconContentDescription(java.lang.CharSequence)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node getChild(java.lang.String,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: ImageTextButton$ImageTextButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle)
com.badlogic.gdx.math.collision.BoundingBox: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int getGlInternalFormat()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrap()
com.badlogic.gdx.math.RandomXS128: long murmurHash3(long)
com.badlogic.gdx.graphics.GL30: int GL_STATIC_COPY
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: com.badlogic.gdx.assets.loaders.FileHandleResolver getBaseResolver()
com.badlogic.gdx.graphics.g3d.Model: void loadNodes(java.lang.Iterable)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder
com.esotericsoftware.kryonet.Server: java.lang.Thread getUpdateThread()
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer
com.esotericsoftware.kryo.util.ObjectMap: ObjectMap()
com.badlogic.gdx.utils.ObjectFloatMap: int capacity
com.badlogic.gdx.graphics.Pixmap$Filter
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: java.util.TreeSet createCopy(com.esotericsoftware.kryo.Kryo,java.util.Collection)
com.badlogic.gdx.graphics.GL30: void glBlendEquationSeparate(int,int)
com.esotericsoftware.kryonet.KryoSerialization: com.esotericsoftware.kryo.io.ByteBufferInput input
com.badlogic.gdx.assets.loaders.TextureAtlasLoader: TextureAtlasLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBlendFunc(int,int)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: float touchOffsetY
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color VELOCITY_COLOR
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation sine
com.badlogic.gdx.physics.box2d.World: long jniCreateRevoluteJoint(long,long,long,boolean,float,float,float,float,float,boolean,float,float,boolean,float,float)
com.badlogic.gdx.Screen
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setDragTime(int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: int getHeight()
com.badlogic.gdx.math.CumulativeDistribution
com.badlogic.gdx.utils.compression.lzma.Encoder: int _distTableSize
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetString(int)
com.badlogic.gdx.math.Vector2: float len2(float,float)
com.badlogic.gdx.utils.IdentityMap: int mask
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short,int[],java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_OUT_OF_MEMORY
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.Files files
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label b
com.badlogic.gdx.scenes.scene2d.ui.Skin$1: Skin$1(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.Application: int LOG_NONE
com.badlogic.gdx.files.FileHandleStream: FileHandleStream(java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.io.Input: java.lang.StringBuilder readStringBuilder()
com.badlogic.gdx.Preferences: void flush()
com.badlogic.gdx.graphics.Camera
com.badlogic.gdx.scenes.scene2d.InputEvent: float stageY
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void useImmersiveMode(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Tree: float iconSpacingLeft
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries: void remove()
com.HyperSphere.Connection.PacketObjects.Map.Mark: void set(int,int,int,int,short,java.lang.String)
com.badlogic.gdx.backends.android.AndroidPreferences: com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean)
com.badlogic.gdx.graphics.GLTexture: void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: android.app.Dialog createDialog()
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.ByteArray: void clear()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float,com.badlogic.gdx.math.Interpolation)
com.esotericsoftware.kryo.serializers.DeflateSerializer: com.esotericsoftware.kryo.Serializer serializer
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction
com.esotericsoftware.kryo.io.ByteBufferInput: java.lang.String readString()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowOut pow4Out
androidx.recyclerview.widget.RecyclerView: void setItemAnimator(androidx.recyclerview.widget.RecyclerView$ItemAnimator)
com.badlogic.gdx.input.RemoteInput: float getGyroscopeY()
com.badlogic.gdx.physics.box2d.Body: boolean isSleepingAllowed()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleY(float)
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode[] values()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.VertexAttributes attributes
com.google.android.material.card.MaterialCardView: int getContentPaddingTop()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_NAME_LENGTH
com.esotericsoftware.kryonet.UdpConnection: UdpConnection(com.esotericsoftware.kryonet.Serialization,int)
com.badlogic.gdx.net.ServerSocketHints: int performancePrefBandwidth
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table left()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter: java.lang.String atlasFile
com.badlogic.gdx.utils.StringBuilder: int capacity()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void clear()
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.utils.Array dependencies
com.badlogic.gdx.utils.Clipboard: void setContents(java.lang.String)
com.badlogic.gdx.net.ServerSocketHints: int performancePrefConnectionTime
com.google.android.material.button.MaterialButton: java.lang.String getA11yClassName()
com.badlogic.gdx.utils.LongMap: com.badlogic.gdx.utils.LongMap$Keys keys()
androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.physics.box2d.Body: Body(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setPosition(float,float,float)
com.badlogic.gdx.utils.BaseJsonReader: com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void invalidateCache()
com.badlogic.gdx.scenes.scene2d.ui.Table: void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.Color getColor()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float distY
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10: com.badlogic.gdx.math.Matrix4 temp
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15: DefaultShader$Setters$15()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeLongs(long[])
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float volX
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glLinkProgram(int)
com.badlogic.gdx.graphics.Cubemap: Cubemap(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean)
com.badlogic.gdx.utils.ObjectFloatMap: ObjectFloatMap(int,float)
com.badlogic.gdx.backends.android.AndroidInput: boolean justTouched
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int maxTrianglesInBatch
com.badlogic.gdx.graphics.Cubemap: java.util.Map managedCubemaps
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1: boolean deleteSurroundingText(int,int)
com.badlogic.gdx.utils.IntMap: java.lang.Object[] valueTable
com.badlogic.gdx.input.RemoteInput: java.lang.String[] getIPs()
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: float maxTorque
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: SpriteDrawable()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.Net$Protocol
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: boolean flipY
com.badlogic.gdx.physics.box2d.Contact: com.badlogic.gdx.physics.box2d.World world
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: int lifeOffsetDiff
com.badlogic.gdx.input.RemoteInput: void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: void activateParticles(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_PUBLIC
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight set(com.badlogic.gdx.graphics.Color,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.io.Input: long readVarLong(boolean)
com.badlogic.gdx.graphics.GL20: void glCullFace(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel regionChannel
com.badlogic.gdx.audio.Music: void setPan(float,float)
com.badlogic.gdx.utils.reflect.Field: boolean isStatic()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target target
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_projViewWorldTrans
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int getDepthStencilPackedBuffer()
com.badlogic.gdx.utils.JsonValue: void setName(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: int KEY_TYPED
com.badlogic.gdx.net.HttpParametersUtils: java.lang.String nameValueSeparator
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4$1: com.badlogic.gdx.scenes.scene2d.ui.Dialog$4 this$1
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setTranslation(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.TextureArray: TextureArray(com.badlogic.gdx.graphics.TextureArrayData)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform opacity
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: java.net.HttpURLConnection connection
com.badlogic.gdx.math.Polygon: void setScale(float,float)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String,int)
com.badlogic.gdx.graphics.profiling.GLProfiler: com.badlogic.gdx.graphics.profiling.GLErrorListener getListener()
com.badlogic.gdx.scenes.scene2d.ui.List: float getItemHeight()
androidx.appcompat.widget.ActionBarContextView
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute q
com.badlogic.gdx.graphics.GL20: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.esotericsoftware.minlog.Log: void warn(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBindTexture(int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.lang.String getFailureReason()
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap
com.esotericsoftware.kryo.io.UnsafeOutput: void writeLittleEndianInt(int)
com.badlogic.gdx.utils.Json: java.lang.String getTag(java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.MapChange: java.util.ArrayList listTile
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_LCD_V
com.esotericsoftware.kryo.io.ByteBufferInput: int require(int)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal)
com.esotericsoftware.kryonet.rmi.RemoteObject: byte getLastResponseID()
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.utils.ObjectSet: int capacity
com.badlogic.gdx.graphics.g2d.ParticleEmitter: ParticleEmitter()
com.badlogic.gdx.graphics.Color: void rgba4444ToColor(com.badlogic.gdx.graphics.Color,int)
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy: void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.glutils.ShaderProgram: boolean hasUniform(java.lang.String)
com.badlogic.gdx.assets.AssetLoadingTask: com.badlogic.gdx.assets.AssetDescriptor assetDesc
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
com.esotericsoftware.kryo.Kryo: void setStreamFactory(com.esotericsoftware.kryo.StreamFactory)
com.badlogic.gdx.math.Matrix4: int M30
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: void layoutWrapped()
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float[] offset(float[])
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float[] timeline
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Values values()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int unsignedByteToInt(byte)
com.badlogic.gdx.utils.reflect.Method: java.lang.Class[] getParameterTypes()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: void activateParticles(int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue windValue
com.badlogic.gdx.maps.MapLayer: void calculateRenderOffsets()
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String)
androidx.appcompat.view.menu.ListMenuItemView: ListMenuItemView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.assets.loaders.SoundLoader: com.badlogic.gdx.audio.Sound sound
com.badlogic.gdx.scenes.scene2d.ui.Button: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.utils.ObjectMap$Values
com.badlogic.gdx.utils.JsonReader: byte[] _json_trans_targs
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getLocalPoint(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer: DefaultSerializers$BooleanSerializer()
androidx.fragment.app.Fragment: java.lang.Runnable mPostponedDurationRunnable
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyMapSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteProgram(int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.Array getRunnables()
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: void getColor(float,float[],int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float accumulator
com.esotericsoftware.jsonbeans.JsonValue: boolean isObject()
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setPageFormat(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2: void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.math.FloatCounter: FloatCounter(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean isDisabled()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: int frame
com.esotericsoftware.kryo.io.Input: void setPosition(int)
com.badlogic.gdx.utils.ComparableTimSort: void sort(java.lang.Object[])
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDisable(int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float[] tmp
com.badlogic.gdx.graphics.Mesh: float calculateRadius(float,float,float,int,int)
com.esotericsoftware.kryonet.util.ObjectIntMap: int hash3(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter: void ensureCapacity(int)
com.badlogic.gdx.math.Matrix3: Matrix3()
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer: void set(com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer)
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int maxNetThreads
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.utils.IntFloatMap: IntFloatMap(int,float)
com.esotericsoftware.kryo.util.ObjectMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.scenes.scene2d.InputEvent: com.badlogic.gdx.scenes.scene2d.InputEvent$Type type
com.badlogic.gdx.utils.LittleEndianInputStream: LittleEndianInputStream(java.io.InputStream)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.backends.android.AndroidMusic$1
com.badlogic.gdx.maps.MapObjects: com.badlogic.gdx.utils.Array getByType(java.lang.Class,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.scenes.scene2d.ui.Container getContainer()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int sensorDelay
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: GLFrameBuffer()
androidx.fragment.app.Fragment: android.view.View mView
com.badlogic.gdx.utils.Queue$QueueIterator: void remove()
com.badlogic.gdx.utils.IdentityMap$MapIterator: IdentityMap$MapIterator(com.badlogic.gdx.utils.IdentityMap)
com.badlogic.gdx.scenes.scene2d.ui.Tree: Tree(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)
com.badlogic.gdx.graphics.Mesh: float calculateRadiusSquared(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute(boolean,float)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void line(float,float,float,float,float,float)
com.esotericsoftware.kryonet.TcpConnection: void close()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getPadBottom()
com.badlogic.gdx.scenes.scene2d.ui.Value$10
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.compression.lzma.Encoder: void SetEndMarkerMode(boolean)
com.badlogic.gdx.graphics.g3d.ModelCache: ModelCache()
com.badlogic.gdx.backends.android.AndroidZipFileHandle: void initialize()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: boolean mGLESVersionCheckComplete
com.badlogic.gdx.scenes.scene2d.utils.Drawable: float getBottomHeight()
com.badlogic.gdx.input.RemoteSender: boolean keyTyped(char)
com.badlogic.gdx.physics.box2d.World: void destroyBody(com.badlogic.gdx.physics.box2d.Body)
com.badlogic.gdx.utils.IntIntMap$Entry: int key
com.badlogic.gdx.graphics.GL30: int GL_PIXEL_PACK_BUFFER
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer: DefaultSerializers$CharSerializer()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isPremultipliedAlpha()
com.badlogic.gdx.physics.box2d.joints.WheelJoint
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.input.GestureDetector$GestureAdapter
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float[] tmp
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.math.Matrix4 transformMatrix
com.badlogic.gdx.graphics.GL20: void glBindRenderbuffer(int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getSupportImageTintList()
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable disabled
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25
com.badlogic.gdx.graphics.g2d.GlyphLayout: float width
com.badlogic.gdx.graphics.glutils.MipMapGenerator: void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int)
com.esotericsoftware.kryo.io.Input: int read(byte[],int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$GuillotinePage: PixmapPacker$GuillotineStrategy$GuillotinePage(com.badlogic.gdx.graphics.g2d.PixmapPacker)
androidx.appcompat.widget.ActionMenuView: void setPresenter(androidx.appcompat.widget.ActionMenuPresenter)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void patch(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform2iv(int,int,int[],int)
com.badlogic.gdx.scenes.scene2d.ui.Button: float getPrefWidth()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
com.google.android.material.textfield.TextInputLayout: android.widget.EditText getEditText()
com.esotericsoftware.jsonbeans.Json: void writeArrayStart()
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: java.util.Date create(com.esotericsoftware.kryo.Kryo,java.lang.Class,long)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setCol(com.badlogic.gdx.graphics.Color)
com.google.android.material.bottomappbar.BottomAppBar: void setBackgroundTint(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup reverse()
com.badlogic.gdx.graphics.g3d.ModelInstance: void calculateTransforms()
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer
com.badlogic.gdx.utils.viewport.Viewport: int screenWidth
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_NONE
com.gameanalytics.sdk.events.EGASdkErrorParameter: com.gameanalytics.sdk.events.EGASdkErrorParameter[] values()
com.badlogic.gdx.graphics.g2d.TextureAtlas: TextureAtlas(java.lang.String)
androidx.fragment.app.Fragment: boolean isPostponed()
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder: void SetPrices(int,int,int[],int)
com.badlogic.gdx.physics.box2d.Body: void jniApplyTorque(long,float,boolean)
com.esotericsoftware.kryonet.UdpConnection: java.nio.ByteBuffer readBuffer
com.badlogic.gdx.scenes.scene2d.ui.Slider: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void a(java.lang.String)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.physics.box2d.joints.RopeJoint: RopeJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.graphics.g2d.PixmapPacker: void updatePageTextures(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
com.esotericsoftware.reflectasm.FieldAccess: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor insertThrowExceptionForFieldNotFound(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float[] getVertices()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.files.FileHandle getAtlasFileHandle(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.GL30: void glBindRenderbuffer(int,int)
com.badlogic.gdx.graphics.GL30: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidInput: int[] button
androidx.appcompat.widget.AbsActionBarView: AbsActionBarView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: boolean bitmapped
com.badlogic.gdx.graphics.g2d.TextureRegion: float getV()
com.badlogic.gdx.scenes.scene2d.ui.Image: void setScaling(com.badlogic.gdx.utils.Scaling)
com.esotericsoftware.kryo.Kryo: java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
com.badlogic.gdx.graphics.GL30: int glGetUniformLocation(int,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsFramebuffer(int)
com.badlogic.gdx.Graphics$Monitor
com.badlogic.gdx.utils.OrderedSet: void clear()
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Entries entries1
com.google.android.material.chip.Chip: void setCloseIconStartPaddingResource(int)
com.esotericsoftware.kryo.io.Output: void setOutputStream(java.io.OutputStream)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsShader(int)
com.badlogic.gdx.utils.IntFloatMap$MapIterator: void reset()
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.physics.box2d.EdgeShape: long newEdgeShape()
com.badlogic.gdx.math.BSpline: BSpline()
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: BaseShader()
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: ParticleEmitterBox2D(com.badlogic.gdx.physics.box2d.World)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.math.Matrix4 combinedMatrix
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void addMesh(float[],short[])
com.esotericsoftware.kryo.io.ByteBufferOutputStream: ByteBufferOutputStream(int)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: com.badlogic.gdx.math.Affine2 adjustAffine
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.Object get(java.lang.Object)
com.esotericsoftware.kryo.io.Input: int fill(byte[],int,int)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Authorization
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_SHORT
com.badlogic.gdx.graphics.glutils.VertexArray: void setVertices(float[],int,int)
com.badlogic.gdx.utils.ShortArray: void add(short,short,short)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3: Dialog$3(com.badlogic.gdx.scenes.scene2d.ui.Dialog)
com.badlogic.gdx.graphics.Mesh: void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int)
com.google.android.material.checkbox.MaterialCheckBox
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef: RevoluteJointDef()
com.badlogic.gdx.utils.XmlWriter: com.badlogic.gdx.utils.Array stack
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: byte[] a(java.io.InputStream,boolean)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String)
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: com.badlogic.gdx.utils.IntMap plugs
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int mBlueSize
com.badlogic.gdx.math.MathUtils: double clamp(double,double,double)
com.badlogic.gdx.files.FileHandle: int readBytes(byte[],int,int)
com.esotericsoftware.reflectasm.ConstructorAccess: void insertNewInstanceInner(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g2d.Animation: void setFrameDuration(float)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int register(java.lang.String,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter)
com.badlogic.gdx.input.RemoteInput$KeyEvent: int type
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.Kryo: boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)
com.google.android.material.chip.ChipGroup: void setChipSpacing(int)
com.badlogic.gdx.net.SocketHints: int trafficClass
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsExponentOffset
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float)
com.badlogic.gdx.graphics.GL30: void glViewport(int,int,int,int)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(char[],int,int)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean ctrl(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsCutoffAngleOffset
com.badlogic.gdx.graphics.GL20: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.input.RemoteInput: int port
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1: android.view.SurfaceHolder getHolder()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_PASS_DEPTH_FAIL
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.g3d.model.Node: void calculateBoneTransforms(boolean)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RunnableAction run(java.lang.Runnable)
com.badlogic.gdx.utils.LongArray: void addAll(long[],int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean and(long,long)
com.badlogic.gdx.utils.XmlReader$Element: float getFloat(java.lang.String,float)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Mask
com.badlogic.gdx.backends.android.AndroidGL20: void glShaderSource(int,java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_NEWINVOKESPECIAL
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: float[] vertices
com.badlogic.gdx.Application: int LOG_ERROR
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.math.Rectangle pack(com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel getChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor)
com.esotericsoftware.kryo.io.ByteBufferInput: void readUtf8_slow(int,int)
androidx.appcompat.widget.SearchView: void setIconifiedByDefault(boolean)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction: com.badlogic.gdx.scenes.scene2d.Touchable touchable
com.badlogic.gdx.utils.Array: com.badlogic.gdx.utils.Array$ArrayIterable iterable
com.badlogic.gdx.physics.box2d.CircleShape
com.esotericsoftware.reflectasm.FieldAccess: void insertGetObject(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.util.ArrayList)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Button: boolean isOver()
com.badlogic.gdx.utils.IntIntMap: int stashCapacity
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector limit2(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput(java.nio.ByteBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean getFadeScrollBars()
com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
com.esotericsoftware.kryonet.JsonSerialization: int getLengthLength()
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node add(com.badlogic.gdx.utils.BinaryHeap$Node,float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform1fv(int,float[],int,int)
com.badlogic.gdx.graphics.CubemapData: void consumeCubemapData()
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension: ResolutionStrategy$MeasuredDimension(int,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getAttributeLocation(java.lang.String)
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: float clamp(float)
com.badlogic.gdx.utils.PerformanceCounter: com.badlogic.gdx.utils.StringBuilder toString(com.badlogic.gdx.utils.StringBuilder)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.g2d.SpriteBatch: SpriteBatch()
com.esotericsoftware.kryonet.Listener: Listener()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_HINTER
com.badlogic.gdx.graphics.GL30: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.VertexAttributes: int vertexSize
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector G
com.badlogic.gdx.physics.box2d.World: boolean jniGetAutoClearForces(long)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform normalMatrix
com.badlogic.gdx.utils.Timer$Task: Timer$Task()
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: PixmapPacker$PixmapPackerRectangle(int,int,int,int)
androidx.fragment.app.Fragment: java.lang.Object getSharedElementEnterTransition()
com.HyperSphere.Connection.PacketObjects.Entities.Player
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 add(com.badlogic.gdx.math.GridPoint2)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: SelectBox(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)
com.badlogic.gdx.physics.box2d.Body: float jniGetMass(long)
com.badlogic.gdx.backends.android.AndroidGraphics: void setUndecorated(boolean)
com.badlogic.gdx.utils.ObjectIntMap: boolean notEmpty()
com.HyperSphere.Connection.PacketObjects.Entities.Player: short subclass
com.esotericsoftware.kryonet.Client: java.lang.Object updateLock
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: void draw(com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch)
com.badlogic.gdx.physics.box2d.BodyDef: com.badlogic.gdx.math.Vector2 linearVelocity
com.badlogic.gdx.backends.android.AndroidPreferences: AndroidPreferences(android.content.SharedPreferences)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float[] tmp
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D copy()
com.esotericsoftware.jsonbeans.JsonWriter: void flush()
com.esotericsoftware.jsonbeans.JsonValue: int getInt(java.lang.String,int)
com.badlogic.gdx.utils.FloatArray: float[] items
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void mul(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable down
com.badlogic.gdx.scenes.scene2d.ui.Value$5: Value$5()
com.badlogic.gdx.graphics.Color: float toFloatBits(int,int,int,int)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void setMaxTorque(float)
com.badlogic.gdx.physics.box2d.PolygonShape: void jniSetAsBox(long,float,float,float,float,float)
com.badlogic.gdx.net.HttpStatus: int SC_MULTI_STATUS
androidx.fragment.app.Fragment: boolean isResumed()
com.badlogic.gdx.utils.compression.lz.OutWindow
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int getSort()
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder _lenEncoder
com.badlogic.gdx.math.WindowedMean: float getLowest()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle listStyle
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Values values1
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container left()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform emissiveColor
com.badlogic.gdx.math.Matrix4: int M13
com.badlogic.gdx.utils.ObjectSet: java.lang.Object[] keyTable
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor: ParallelArray$ChannelDescriptor(int,java.lang.Class,int)
com.badlogic.gdx.math.Matrix4: int M12
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler B
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
com.google.android.material.textfield.TextInputLayout: void setEndIconTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.utils.IntFloatMap: boolean isEmpty()
com.badlogic.gdx.graphics.GL30: int GL_MIN
com.badlogic.gdx.utils.ObjectFloatMap$Entries: java.lang.Object next()
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: FieldVisitor(int)
com.badlogic.gdx.Graphics: boolean supportsDisplayModeChange()
com.badlogic.gdx.utils.Bits: Bits()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer instance
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_PosDecoders
com.badlogic.gdx.utils.ObjectFloatMap$Entries: void remove()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void patch(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,int,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: int align
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int getBlendDstFunc()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: boolean engineIsVisible
com.badlogic.gdx.math.Frustum: float[] planePointsArray
com.badlogic.gdx.physics.box2d.EdgeShape: void jniGetVertex2(long,float[])
com.badlogic.gdx.utils.Sort: com.badlogic.gdx.utils.Sort instance()
com.badlogic.gdx.scenes.scene2d.InputEvent: int getPointer()
com.esotericsoftware.jsonbeans.JsonValue: boolean isValue()
com.esotericsoftware.kryonet.Connection: int returnTripTime
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform2f(int,float,float)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: void advance()
com.badlogic.gdx.math.EarClippingTriangulator: com.badlogic.gdx.utils.IntArray vertexTypes
com.badlogic.gdx.math.Rectangle: float x
com.badlogic.gdx.utils.compression.lzma.Encoder: void Init()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int getMaxLength()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: java.lang.String createPrefix(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPadLeft()
com.badlogic.gdx.scenes.scene2d.Stage: void unfocusAll()
com.badlogic.gdx.utils.compression.lzma.Encoder: void WriteCoderProperties(java.io.OutputStream)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getSuffixTextColor()
com.badlogic.gdx.scenes.scene2d.InputListener$1
com.badlogic.gdx.graphics.VertexAttributes: com.badlogic.gdx.graphics.VertexAttribute get(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: void dispose()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
com.badlogic.gdx.graphics.GL20: void glUniform1iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch()
com.badlogic.gdx.graphics.GL30: int GL_DRAW_FRAMEBUFFER_BINDING
com.esotericsoftware.jsonbeans.Json: boolean debug
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void hide()
com.badlogic.gdx.graphics.g2d.ParticleEffectPool: ParticleEffectPool(com.badlogic.gdx.graphics.g2d.ParticleEffect,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.utils.Array rootNodes
com.esotericsoftware.kryo.util.ListReferenceResolver: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getNumGray()
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator: SimpleOrthoGroupStrategy$Comparator(com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy)
com.badlogic.gdx.graphics.GL20: void glValidateProgram(int)
com.fasterxml.jackson.annotation.OptBoolean: com.fasterxml.jackson.annotation.OptBoolean[] values()
androidx.appcompat.widget.AppCompatEditText: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.scenes.scene2d.ui.Table: void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.physics.box2d.Transform: com.badlogic.gdx.math.Vector2 position
com.badlogic.gdx.scenes.scene2d.ui.Table$1
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.math.Vector3 TMP_V1
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int maxHealth
com.badlogic.gdx.utils.IntMap: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.scenes.scene2d.Actor firstWidget
com.badlogic.gdx.utils.Scaling
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accellerationChannel
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector3 tmp2
com.badlogic.gdx.physics.box2d.Shape: void jniSetRadius(long,float)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void setIcon(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.utils.IntArray[] pageGlyphIndices
com.badlogic.gdx.math.Polyline: float getScaledLength()
com.badlogic.gdx.math.CatmullRomSpline: boolean continuous
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackgroundDrawable()
com.badlogic.gdx.graphics.VertexAttribute: int usage
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer righti
com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader
com.badlogic.gdx.math.Interpolation$Pow: int power
androidx.fragment.app.Fragment: void setInitialSavedState(androidx.fragment.app.Fragment$SavedState)
com.badlogic.gdx.graphics.GL20: int GL_LESS
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.utils.Clipboard clipboard
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.math.Rectangle: float width
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean _writeEndMark
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
androidx.appcompat.widget.AppCompatRadioButton: void setSupportButtonTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDEUncompLen
com.badlogic.gdx.graphics.GL20: int GL_SRC_ALPHA
com.esotericsoftware.reflectasm.FieldAccess: java.lang.String[] fieldNames
com.badlogic.gdx.graphics.GL30: void glClearBufferfv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int a(java.lang.Object[],int,int,char[],com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[])
com.badlogic.gdx.utils.IntIntMap: int size
com.badlogic.gdx.graphics.GL30: void glTexParameteri(int,int,int)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$ParticleBox2D
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: void buildNormals(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.g3d.RenderableProvider,float)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getRotation()
com.badlogic.gdx.math.Circle: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setFocusTraversal(boolean)
com.badlogic.gdx.graphics.GL30: int GL_RGB10_A2
com.badlogic.gdx.backends.android.AndroidGraphics: float ppcX
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: float getHeight()
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: int repeatCount
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform pointLights
com.esotericsoftware.kryo.serializers.FieldSerializer: FieldSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup reverse(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glDrawElements(int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.DataOutput: int writeInt(int,boolean)
androidx.appcompat.widget.Toolbar: void setCollapseIcon(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void clearChildren()
com.badlogic.gdx.utils.ObjectIntMap: boolean containsKeyStash(java.lang.Object)
com.esotericsoftware.minlog.Log: void trace(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.ObjectIntMap: boolean containsValue(int)
com.badlogic.gdx.scenes.scene2d.ui.Window: Window(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.physics.box2d.Body: void setSleepingAllowed(boolean)
com.badlogic.gdx.maps.objects.TextureMapObject: TextureMapObject()
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_LowCoder
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform2fv(int,float[],int,int)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: com.badlogic.gdx.math.Rectangle viewBounds
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void reset()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.utils.ArraySelection selection
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float areaWidth
com.badlogic.gdx.utils.IntIntMap: void push(int,int,int,int,int,int,int,int)
com.badlogic.gdx.utils.async.ThreadUtils: ThreadUtils()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_IGNORE_TRANSFORM
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue zOffsetValue
com.badlogic.gdx.graphics.GL20: int GL_DST_ALPHA
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: float[] textureBundle
com.badlogic.gdx.math.Interpolation$ElasticIn: Interpolation$ElasticIn(float,float,int,float)
com.badlogic.gdx.graphics.GL30: void glBlendEquation(int)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryonet.UdpConnection: java.nio.channels.DatagramChannel datagramChannel
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] _distancesPrices
com.badlogic.gdx.backends.android.AndroidInput$3$2$1: AndroidInput$3$2$1(com.badlogic.gdx.backends.android.AndroidInput$3$2)
com.badlogic.gdx.utils.compression.lz.InWindow: int _pointerToLastSafePosition
com.badlogic.gdx.input.RemoteInput$EventTrigger: com.badlogic.gdx.input.RemoteInput$KeyEvent keyEvent
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPadY()
com.badlogic.gdx.graphics.g2d.Batch: int C4
com.badlogic.gdx.math.Interpolation$1: float apply(float)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_ATTACHMENT
com.esotericsoftware.jsonbeans.ObjectMap: int pushIterations
com.badlogic.gdx.physics.box2d.BodyDef: boolean active
com.badlogic.gdx.Input$Keys: int META_SHIFT_LEFT_ON
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void finalize()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.Sprite: float getOriginX()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: boolean isBound
com.badlogic.gdx.utils.ByteArray: void insert(int,byte)
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Entries entries2
com.badlogic.gdx.utils.LongMap$MapIterator: int INDEX_ILLEGAL
com.esotericsoftware.kryo.io.ByteBufferOutputStream: void write(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void line(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.utils.Predicate: boolean evaluate(java.lang.Object)
com.badlogic.gdx.utils.IdentityMap: boolean containsValue(java.lang.Object,boolean)
com.badlogic.gdx.utils.IntFloatMap$Values: float next()
com.badlogic.gdx.graphics.Mesh: float[] getVertices(int,float[])
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setTouchOffset(float,float)
com.badlogic.gdx.utils.ByteArray: void addAll(byte[])
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int translateButton
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.utils.Array regions
com.badlogic.gdx.math.Intersector: boolean isPointInTriangle(float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void init()
com.badlogic.gdx.graphics.profiling.GLProfiler: void setListener(com.badlogic.gdx.graphics.profiling.GLErrorListener)
com.badlogic.gdx.physics.box2d.World: void jniGetGravity(long,float[])
com.badlogic.gdx.graphics.GL20: java.lang.String glGetString(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.glutils.KTXTextureData: int glBaseInternalFormat
com.google.android.material.circularreveal.cardview.CircularRevealCardView
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color BLUE
com.esotericsoftware.kryo.util.DefaultClassResolver: void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createAmbient(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_DEFAULT
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: boolean hasUV
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.World getWorld()
com.esotericsoftware.kryo.util.IntMap: void resize(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void drawSelection(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.utils.StringBuilder: int indexOfIgnoreCase(java.lang.String,int)
com.HyperSphere.Connection.PacketObjects.Entities.Player: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.World: void getBodies(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.util.IntMap: java.lang.Object get(int,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void init()
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Keys keys2
com.badlogic.gdx.math.Plane: void set(com.badlogic.gdx.math.Plane)
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling,int)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$BufferFormat bufferFormat
com.badlogic.gdx.scenes.scene2d.ui.Tree: float getPrefWidth()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: int getSelectedIndex()
com.badlogic.gdx.math.MathUtils: short clamp(short,short,short)
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.graphics.g2d.NinePatch)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: float uScale
com.esotericsoftware.kryo.serializers.JavaSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.input.RemoteInput$EventTrigger
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer: com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer bigIntegerSerializer
com.badlogic.gdx.utils.UBJsonReader: java.lang.String parseString(java.io.DataInputStream,boolean,byte)
com.badlogic.gdx.math.Interpolation$PowOut: Interpolation$PowOut(int)
com.esotericsoftware.kryo.io.Input: long total
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void setMaxMotorTorque(float)
com.badlogic.gdx.math.GridPoint2: GridPoint2(com.badlogic.gdx.math.GridPoint2)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: int maxCount
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.utils.Array androidEventListeners
com.badlogic.gdx.scenes.scene2d.ui.Widget: boolean needsLayout
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0
com.badlogic.gdx.graphics.GL20: int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
androidx.recyclerview.widget.RecyclerView: void setOnFlingListener(androidx.recyclerview.widget.RecyclerView$OnFlingListener)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation fade
com.badlogic.gdx.scenes.scene2d.Actor: float width
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: java.lang.String getErrorString(int)
com.badlogic.gdx.graphics.GL30: int GL_RGB16I
com.esotericsoftware.kryo.Kryo: void setDefaultSerializer(com.esotericsoftware.kryo.factories.SerializerFactory)
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: void setAmount(float,float)
com.esotericsoftware.kryo.util.IdentityMap$Keys: java.lang.Object next()
com.badlogic.gdx.backends.android.AndroidNet: boolean openURI(java.lang.String)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: float getBackgroundOverlayColorAlpha()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle set(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,int)
com.badlogic.gdx.utils.XmlReader$Element: void removeChild(int)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: void setMesh(com.badlogic.gdx.graphics.Mesh,com.badlogic.gdx.graphics.g3d.Model)
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Input getInput()
com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getPrefixTextColor()
com.esotericsoftware.kryonet.util.ObjectIntMap: int[] valueTable
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useCompass
com.badlogic.gdx.math.Intersector: boolean intersectRayTriangles(com.badlogic.gdx.math.collision.Ray,float[],com.badlogic.gdx.math.Vector3)
com.esotericsoftware.jsonbeans.JsonValue$ValueType: JsonValue$ValueType(java.lang.String,int)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1: void sendDownUpKeyEventForBackwardCompatibility(int)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver: java.lang.String atlasName
com.badlogic.gdx.graphics.GL20: int GL_INT
com.esotericsoftware.jsonbeans.ObjectMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: javax.microedition.khronos.egl.EGLSurface mEglSurface
com.badlogic.gdx.assets.loaders.BitmapFontLoader: com.badlogic.gdx.graphics.g2d.BitmapFont loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter)
com.badlogic.gdx.physics.box2d.Filter: Filter()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int maxLength
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.physics.box2d.World: void QueryAABB(com.badlogic.gdx.physics.box2d.QueryCallback,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue yOffsetValue
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Input getInput()
com.esotericsoftware.kryo.util.ListReferenceResolver: ListReferenceResolver()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField: boolean bulkReadsSupported
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: int value
androidx.appcompat.widget.LinearLayoutCompat: int getDividerPadding()
com.badlogic.gdx.utils.TimeUtils: long timeSinceNanos(long)
com.badlogic.gdx.backends.android.ZipResourceFile: int kEOCDFileOffset
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glCullFace(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void addMesh(float[],short[],int,int)
androidx.recyclerview.widget.RecyclerView$LayoutManager: RecyclerView$LayoutManager()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void setTopHeight(float)
com.esotericsoftware.kryo.io.Input: boolean eof()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int yoffset
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void createDefaultShader()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void dispose()
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getStyleFlags(long)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0
com.esotericsoftware.kryonet.Connection: com.esotericsoftware.kryonet.Listener[] listeners
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel angularVelocityChannel
com.badlogic.gdx.graphics.glutils.ShaderProgram: void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.utils.compression.lz.BinTree: int kEmptyHashValue
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newClass(java.lang.String)
com.badlogic.gdx.utils.DataInput: int readInt(boolean)
com.badlogic.gdx.Input$Buttons: int LEFT
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)
com.badlogic.gdx.backends.android.AndroidNet$1: void run()
androidx.fragment.app.Fragment: boolean mAdded
com.badlogic.gdx.graphics.g3d.environment.BaseLight: com.badlogic.gdx.graphics.Color color
com.esotericsoftware.kryonet.Server$1
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: java.util.ArrayList CollisionBounds
com.badlogic.gdx.utils.LongArray: void set(int,long)
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction: void setAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.Mesh: void getIndices(int,short[],int)
com.badlogic.gdx.assets.AssetManager: java.lang.Object finishLoadingAsset(com.badlogic.gdx.assets.AssetDescriptor)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getActorX()
com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard: TextField$DefaultOnscreenKeyboard()
com.badlogic.gdx.graphics.g3d.loader.MtlLoader: com.badlogic.gdx.utils.Array materials
com.google.android.material.internal.NavigationMenuItemView: void setChecked(boolean)
com.esotericsoftware.jsonbeans.JsonValue: char getChar(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getTouchDownY()
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void getContents()
com.badlogic.gdx.utils.IntFloatMap: float getAndIncrementStash(int,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: Window$WindowStyle()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.utils.viewport.Viewport: void update(int,int,boolean)
com.badlogic.gdx.math.Plane: float getD()
com.badlogic.gdx.input.RemoteSender: boolean keyUp(int)
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_COMPARE_FUNC
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated copy()
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isMemberClass(java.lang.Class)
com.badlogic.gdx.graphics.g2d.NinePatch: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glPolygonOffset(float,float)
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: ETC1$ETC1Data(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: void remove()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: boolean onKeyUp(int,android.view.KeyEvent)
com.esotericsoftware.kryo.io.UnsafeInput: UnsafeInput(java.io.InputStream,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void start()
com.esotericsoftware.kryonet.KryoNetException: KryoNetException(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator this$0
com.badlogic.gdx.utils.compression.rangecoder.Decoder: void Init()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: boolean isDirty
com.badlogic.gdx.math.Quaternion: int getGimbalPole()
com.badlogic.gdx.graphics.g2d.SpriteBatch: SpriteBatch(int,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: boolean isBound
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float)
com.HyperSphere.Connection.PacketObjects.Misc.Item: short maxCapacity
com.badlogic.gdx.graphics.Color: int rgb888(float,float,float)
com.badlogic.gdx.utils.Array: java.lang.Object[] resize(int)
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int[] weights
com.badlogic.gdx.InputEventQueue: com.badlogic.gdx.utils.IntArray processingQueue
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.math.Matrix4 projectionMatrix
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newNameType(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,java.lang.String,boolean)
com.badlogic.gdx.math.Interpolation$14: float apply(float)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.ApplicationLogger applicationLogger
com.badlogic.gdx.math.Bresenham2
com.badlogic.gdx.Application: void addLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.utils.IntSet: boolean hasZeroValue
androidx.appcompat.widget.SearchView: void setQueryRefinementEnabled(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_reflectionTexture
com.esotericsoftware.kryonet.Server: void sendToAllExceptTCP(int,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform projTrans
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getUnderlineThickness(long)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void ellipse(float,float,float,float,int)
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryonet.rmi.ObjectSpace$CachedMethod[] getMethods(com.esotericsoftware.kryo.Kryo,java.lang.Class)
com.badlogic.gdx.graphics.GL30: int GL_TIMEOUT_EXPIRED
com.badlogic.gdx.utils.UBJsonWriter$JsonObject: UBJsonWriter$JsonObject(com.badlogic.gdx.utils.UBJsonWriter,boolean)
com.google.android.material.datepicker.MaterialCalendarGridView: MaterialCalendarGridView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.ui.Window$1: Window$1(com.badlogic.gdx.scenes.scene2d.ui.Window)
com.badlogic.gdx.utils.ByteArray: byte pop()
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: boolean flipHorizontally
com.esotericsoftware.kryonet.Client: void connect(int,java.net.InetAddress,int,int)
com.badlogic.gdx.backends.android.AndroidDaydream: void createWakeLock(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: FieldWriter(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.g3d.Shader: boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: void setScale(float,float)
com.esotericsoftware.kryonet.rmi.ObjectSpace: void remove(java.lang.Object)
com.esotericsoftware.kryo.io.UnsafeOutput: int writeInt(int,boolean)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.math.Vector2 getGravity()
com.badlogic.gdx.files.FileHandleStream: boolean isDirectory()
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData createSaveData()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int spaceY
com.esotericsoftware.kryo.io.ByteBufferInput: boolean readBoolean()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Image image
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteSamplers(int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getMotorSpeed()
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2: short[] m_Decoders
com.badlogic.gdx.scenes.scene2d.ui.Label: int getLineAlign()
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsBuffer(int)
com.badlogic.gdx.utils.JsonReader: char[] _json_trans_keys
com.badlogic.gdx.math.Matrix3: float[] getValues()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F_NEW
com.badlogic.gdx.graphics.Mesh: java.lang.String getManagedStatus()
com.badlogic.gdx.physics.box2d.Contact: void jniResetRestitution(long)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float z1
com.badlogic.gdx.graphics.Texture: com.badlogic.gdx.graphics.TextureData data
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] frameTiles
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean drawAABBs
com.badlogic.gdx.math.Matrix4: long serialVersionUID
com.badlogic.gdx.utils.FloatArray: boolean isEmpty()
com.badlogic.gdx.backends.android.AndroidGraphics: float getPpiX()
com.badlogic.gdx.utils.ObjectMap$Values: boolean hasNext()
com.badlogic.gdx.utils.ShortArray: boolean ordered
com.esotericsoftware.kryo.serializers.FieldSerializer: java.util.HashSet removedFields
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 setToTranslation(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String ProxyAuthorization
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short,java.lang.Object)
com.esotericsoftware.kryo.serializers.CollectionSerializer: void setElementClass(java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.badlogic.gdx.utils.LongArray: void add(long,long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face
com.badlogic.gdx.scenes.scene2d.actions.IntAction: IntAction(int,int)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
androidx.core.graphics.drawable.IconCompat
com.esotericsoftware.kryo.io.Input: Input(java.io.InputStream)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetMotorTorque(long,float)
com.badlogic.gdx.graphics.CubemapData: int getWidth()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: int getBufferHandle()
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction: com.badlogic.gdx.scenes.scene2d.Action getAction()
com.esotericsoftware.kryonet.util.ObjectIntMap: int stashSize
androidx.appcompat.widget.SearchView: void setImeOptions(int)
com.badlogic.gdx.input.RemoteInput: int getX()
com.badlogic.gdx.physics.box2d.Body: void setLinearVelocity(float,float)
com.badlogic.gdx.Graphics$DisplayMode: Graphics$DisplayMode(int,int,int,int)
com.badlogic.gdx.utils.ArrayMap
com.badlogic.gdx.scenes.scene2d.ui.Cell: void clear()
com.badlogic.gdx.utils.IntArray: boolean isEmpty()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: int getVertexCount(int)
com.badlogic.gdx.utils.Logger: void debug(java.lang.String)
com.badlogic.gdx.graphics.OrthographicCamera: void translate(float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter: com.badlogic.gdx.assets.AssetManager manager
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending None
com.badlogic.gdx.physics.box2d.PolygonShape: void getVertex(int,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.Graphics
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeShort(int)
com.badlogic.gdx.utils.JsonReader: short[] init__json_index_offsets_0()
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setupMatrices()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean)
com.badlogic.gdx.assets.AssetManager: int peakTasks
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: int m_NumPrevBits
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int colorOffset
com.badlogic.gdx.utils.JsonReader: void string(java.lang.String,java.lang.String)
com.badlogic.gdx.maps.tiled.TiledMapTileSet: void putTile(int,com.badlogic.gdx.maps.tiled.TiledMapTile)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell colspan(int)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: long bufaddress
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setCenter(float,float)
com.badlogic.gdx.utils.ObjectMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.utils.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int j
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.google.android.material.appbar.MaterialToolbar
com.badlogic.gdx.graphics.GL30: void glDeleteVertexArrays(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])
com.badlogic.gdx.math.GeometryUtils: float triangleCircumradius(float,float,float,float,float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.input.GestureDetector: boolean inTapRectangle
com.badlogic.gdx.math.Intersector$SplitTriangle: Intersector$SplitTriangle(int)
com.google.android.material.textfield.TextInputLayout: void setSuffixText(java.lang.CharSequence)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 v1
com.badlogic.gdx.math.Interpolation$SwingOut: float apply(float)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: void ReverseEncode(short[],int,com.badlogic.gdx.utils.compression.rangecoder.Encoder,int,int)
com.badlogic.gdx.physics.box2d.joints.MouseJoint
com.badlogic.gdx.Net$HttpRequest: long contentLength
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: java.io.File getZipFile()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_SYNCHRONIZED
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void setBlending(boolean,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int mDepthSize
com.badlogic.gdx.net.NetJavaImpl: com.badlogic.gdx.Net$HttpResponseListener getFromListeners(com.badlogic.gdx.Net$HttpRequest)
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: SequenceAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.glutils.ShaderProgram: int fetchUniformLocation(java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.Stage: void unfocus(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryo.Serializer: boolean getAcceptsNull()
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell growY()
com.google.android.material.chip.Chip: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
com.badlogic.gdx.math.Polygon: float originY
androidx.appcompat.widget.Toolbar: android.widget.TextView getTitleTextView()
com.google.android.material.chip.ChipGroup: int getChipCount()
com.badlogic.gdx.utils.PerformanceCounters: com.badlogic.gdx.utils.PerformanceCounter add(java.lang.String,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.util.IdentityMap: void ensureCapacity(int)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: com.badlogic.gdx.scenes.scene2d.Action getAction()
com.badlogic.gdx.scenes.scene2d.ui.Table: int rows
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: android.opengl.GLSurfaceView$Renderer mRenderer
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.ApplicationListener listener
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: int alignment
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String getAttribute(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.GL30: void glGenSamplers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void hide()
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver
com.badlogic.gdx.utils.SortedIntList
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type[] values()
com.esotericsoftware.kryo.util.IdentityMap: IdentityMap(int)
com.badlogic.gdx.math.Bresenham2$1: Bresenham2$1(com.badlogic.gdx.math.Bresenham2)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer
com.badlogic.gdx.utils.Array: boolean equals(java.lang.Object)
com.badlogic.gdx.utils.Select: java.lang.Object select(java.lang.Object[],java.util.Comparator,int,int)
com.esotericsoftware.kryo.io.ByteBufferOutput: void release()
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundColorStateList(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable vScrollKnob
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.esotericsoftware.kryonet.util.ObjectIntMap: int threshold
com.badlogic.gdx.graphics.g2d.NinePatch: int bottomRight
com.google.android.material.chip.ChipGroup: void setOnCheckedChangeListener(com.google.android.material.chip.ChipGroup$OnCheckedChangeListener)
com.badlogic.gdx.math.Plane: float distance(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.Color color
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setShrinkMotionSpec(com.google.android.material.animation.MotionSpec)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: BitmapFont$BitmapFontData()
com.badlogic.gdx.graphics.g2d.Sprite: float getRotation()
com.badlogic.gdx.audio.Sound: void setLooping(long,boolean)
com.badlogic.gdx.math.Circle: void set(com.badlogic.gdx.math.Circle)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value padTop
com.google.android.material.chip.Chip: void setCloseIconEndPaddingResource(int)
com.badlogic.gdx.scenes.scene2d.ui.Button: float getMinWidth()
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: TiledDrawable(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float[] tmp
com.badlogic.gdx.physics.box2d.joints.WeldJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setImagePaths(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void hide(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: int getHeight()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void addMesh(float[],short[])
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: boolean Prev2
com.badlogic.gdx.utils.IntFloatMap$Keys: boolean hasNext()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(java.lang.String,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_DEFAULT
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 idt()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: VertexBufferObjectWithVAO(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.utils.XmlReader$Element: void setAttribute(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable focusedBackground
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float gridHeight
androidx.fragment.app.Fragment: android.content.Context requireContext()
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Keys keys2
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: float previousZoom
com.badlogic.gdx.math.Vector3: float dst2(float,float,float)
com.badlogic.gdx.graphics.Cubemap: void reload()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder
com.badlogic.gdx.graphics.GL30: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidFiles: boolean isLocalStorageAvailable()
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: java.lang.String Alias
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: boolean a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: RegionInfluencer$AspectTextureRegion(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion)
com.badlogic.gdx.graphics.Texture: boolean isManaged()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: int usage
com.esotericsoftware.kryo.serializers.ObjectField: com.esotericsoftware.kryo.serializers.FieldSerializer fieldSerializer
com.google.android.material.chip.Chip: void setCloseIconTint(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs
com.esotericsoftware.kryonet.util.ObjectIntMap: int mask
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
androidx.appcompat.widget.Toolbar: int getTitleMarginTop()
com.badlogic.gdx.graphics.GL20: int GL_REPEAT
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidNet net
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glFlush()
com.badlogic.gdx.math.Interpolation$Elastic: float value
com.badlogic.gdx.scenes.scene2d.Stage: float getHeight()
com.esotericsoftware.jsonbeans.JsonValue: boolean isFlat(com.esotericsoftware.jsonbeans.JsonValue)
androidx.lifecycle.SavedStateHandleController
com.badlogic.gdx.graphics.GL20: int GL_FALSE
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int getKerning(char)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(long)
com.esotericsoftware.jsonbeans.OutputType: com.esotericsoftware.jsonbeans.OutputType[] $VALUES
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 position
com.badlogic.gdx.graphics.glutils.VertexBufferObject: com.badlogic.gdx.graphics.VertexAttributes attributes
com.HyperSphere.Connection.PacketObjects.Misc.DropBox: DropBox()
com.badlogic.gdx.math.MathUtils: int SIN_COUNT
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.BaseLight)
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryonet.rmi.ObjectSpace[] instances
com.esotericsoftware.kryo.util.UnsafeUtil: long intArrayBaseOffset
com.badlogic.gdx.graphics.GL20: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: com.badlogic.gdx.math.Vector2 localPoint
com.badlogic.gdx.graphics.GL20: void glColorMask(boolean,boolean,boolean,boolean)
com.badlogic.gdx.utils.ObjectSet: void addAll(com.badlogic.gdx.utils.Array,int,int)
com.badlogic.gdx.backends.android.AndroidDaydream$2: com.badlogic.gdx.backends.android.AndroidDaydream this$0
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.Input$TextInputListener textListener
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.Json getJsonLoader(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setBlinkTime(float)
com.badlogic.gdx.backends.android.AndroidMusic
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType[] values()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.TextField: void calculateOffsets()
com.badlogic.gdx.graphics.Color: float a
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable[] values()
com.badlogic.gdx.utils.compression.lz.OutWindow: OutWindow()
com.badlogic.gdx.utils.JsonWriter: boolean quoteLongValues
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_REF
com.google.android.material.chip.Chip
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void start()
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)
com.badlogic.gdx.graphics.Color: Color(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug none
com.badlogic.gdx.maps.MapProperties: com.badlogic.gdx.utils.ObjectMap properties
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel: java.lang.Object[] data
com.badlogic.gdx.backends.android.AndroidDaydream: void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setV2(float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int directionUsage
com.badlogic.gdx.graphics.GL30: int GL_VERTEX_ATTRIB_ARRAY_INTEGER
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.Array getRegions(java.lang.String)
com.badlogic.gdx.utils.Align: int topLeft
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean fling(float,float,int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks: void exit()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: com.badlogic.gdx.utils.LongMap fontData
com.esotericsoftware.kryo.util.IdentityObjectIntMap: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IMUL
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
com.badlogic.gdx.utils.DataBuffer: DataBuffer(int)
com.badlogic.gdx.net.NetJavaServerSocketImpl: void dispose()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel
androidx.fragment.app.Fragment: int STARTED
com.badlogic.gdx.net.ServerSocketHints: int acceptTimeout
com.badlogic.gdx.utils.GdxNativesLoader: boolean nativesLoaded
com.badlogic.gdx.utils.StreamUtils: byte[] copyStreamToByteArray(java.io.InputStream,int)
com.badlogic.gdx.utils.OrderedSet: com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsIntensityOffset
com.badlogic.gdx.graphics.g2d.SpriteBatch: int blendSrcFuncAlpha
androidx.fragment.app.Fragment: void setExitTransition(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Table: void setDebug(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: byte[] a
androidx.appcompat.widget.AppCompatRadioButton: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV0
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setColor(com.badlogic.gdx.graphics.Color)
com.HyperSphere.Connection.PacketObjects.Entities.Monster: int anchorValY
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Vector3 tmpV2
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight
com.badlogic.gdx.graphics.g3d.ModelBatch: void end()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup center()
com.badlogic.gdx.utils.JsonReader: byte[] init__json_single_lengths_0()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFlushMappedBufferRange(int,int,int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.Texture lastTexture
com.HyperSphere.Connection.PacketObjects.Misc.Item: int moveSpeed
com.esotericsoftware.kryonet.FrameworkMessage$Ping: boolean isReply
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean panStop(float,float,int,int)
com.badlogic.gdx.scenes.scene2d.Actor: boolean isTouchFocusListener()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void drawCursor(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float)
com.badlogic.gdx.utils.Collections: boolean allocateIterators
com.google.android.material.chip.ChipGroup: void setChipSpacingVertical(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label a
com.badlogic.gdx.math.GeometryUtils: float lowestPositiveRoot(float,float,float)
com.badlogic.gdx.utils.StringBuilder: void append0(char[])
com.badlogic.gdx.math.Circle: Circle(float,float,float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: java.util.TreeSet create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void setMaxCheckCount(int)
com.badlogic.gdx.graphics.GL30: int GL_RG16F
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] values()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory: javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object)
com.badlogic.gdx.graphics.TextureData: int getHeight()
com.badlogic.gdx.utils.IntIntMap: int getStash(int,int)
com.badlogic.gdx.utils.Select
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.Array executedRunnables
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder: PatchShapeBuilder()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: GLSurfaceViewAPI18(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.compression.lzma.Encoder: void ReleaseStreams()
com.esotericsoftware.kryo.io.ByteBufferInput: int readUtf8Length_slow(int)
com.badlogic.gdx.graphics.GL30: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.Pixmap: boolean isDisposed()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float amountX
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float rightWidth
com.badlogic.gdx.scenes.scene2d.ui.Tree: void expandAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.IntIntMap$Values: void remove()
com.badlogic.gdx.ApplicationListener: void resize(int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config
com.badlogic.gdx.scenes.scene2d.Actor: float scaleX
com.badlogic.gdx.math.Intersector$SplitTriangle: float[] back
com.badlogic.gdx.math.Matrix3: long serialVersionUID
com.badlogic.gdx.backends.android.AndroidApplication: int wasFocusChanged
com.badlogic.gdx.graphics.g2d.SpriteBatch: int renderCalls
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground()
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelNode parseNodesRecursively(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.utils.CharArray: void swap(int,int)
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(boolean,java.lang.Object[],int,int)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int PRIME1
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT4
com.badlogic.gdx.utils.CharArray: char removeIndex(int)
com.badlogic.gdx.math.Interpolation$Elastic: float power
com.badlogic.gdx.files.FileHandle: FileHandle()
com.badlogic.gdx.utils.compression.lzma.Base: int kNumHighLenBits
com.badlogic.gdx.utils.PauseableThread: boolean isPaused()
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: void end()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener: boolean touchDown(float,float,int,int)
com.badlogic.gdx.scenes.scene2d.InputListener: void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.ui.Container
com.badlogic.gdx.graphics.GL30: void glAttachShader(int,int)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 v
com.badlogic.gdx.graphics.GL20: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
com.esotericsoftware.kryo.io.Input: java.lang.String readString()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type BYTE_TYPE
com.badlogic.gdx.utils.reflect.ArrayReflection: int getLength(java.lang.Object)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1: ObjectSpace$RemoteInvocationHandler$1(com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler,int)
com.esotericsoftware.kryonet.TcpConnection: TcpConnection(com.esotericsoftware.kryonet.Serialization,int,int)
com.badlogic.gdx.utils.CharArray: char[] toArray()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib2f(int,float,float)
com.badlogic.gdx.backends.android.AndroidGL30: void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean zoom(float,float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener
androidx.appcompat.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: int a()
com.badlogic.gdx.graphics.g2d.Sprite: float getWidth()
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: void reset()
com.badlogic.gdx.math.CatmullRomSpline: float approximate(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.physics.box2d.World: long addr
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.reflect.ClassReflection: java.lang.Object[] getEnumConstants(java.lang.Class)
com.esotericsoftware.kryonet.Server: void setDiscoveryHandler(com.esotericsoftware.kryonet.ServerDiscoveryHandler)
com.badlogic.gdx.utils.IntIntMap$MapIterator: boolean hasNext
com.google.android.material.internal.NavigationMenuView
com.badlogic.gdx.graphics.GL20: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.utils.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)
com.google.android.material.button.MaterialButton: void setRippleColorResource(int)
com.esotericsoftware.jsonbeans.ObjectMap: int capacity
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2: byte DecodeNormal(com.badlogic.gdx.utils.compression.rangecoder.Decoder)
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_UNDEFINED
com.badlogic.gdx.Graphics$DisplayMode: int height
com.badlogic.gdx.utils.ArrayMap: void clear()
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.utils.CharArray: CharArray()
com.google.android.material.textfield.TextInputLayout: int getBoxStrokeColor()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float padTop
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int SineOffset
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc,float)
com.badlogic.gdx.graphics.Texture$1: Texture$1(int)
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: float xOffset
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int SKIP_CODE
com.esotericsoftware.kryo.util.MapReferenceResolver: int nextReadId(java.lang.Class)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.google.android.material.appbar.AppBarLayout: int getDownNestedScrollRange()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: float offsetY
com.badlogic.gdx.utils.compression.lzma.Encoder: int _dictionarySize
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.google.android.material.textfield.TextInputLayout: android.widget.TextView getPrefixTextView()
androidx.appcompat.widget.ViewStubCompat: void setLayoutInflater(android.view.LayoutInflater)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer: java.lang.Double read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int engineHeight
androidx.appcompat.widget.DropDownListView: void setSelectorEnabled(boolean)
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.ShortArray computeTriangles(com.badlogic.gdx.utils.FloatArray,boolean)
com.badlogic.gdx.graphics.g2d.NinePatch: float padTop
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object get(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.Action: com.badlogic.gdx.utils.Pool pool
com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField: ObjectField$ObjectIntField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setOnscreenKeyboard(com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCachedField
com.badlogic.gdx.math.Quaternion: float y
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int Range
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: float startX
com.badlogic.gdx.graphics.g2d.Sprite: float[] vertices
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute(int,int)
com.badlogic.gdx.utils.ObjectFloatMap$Values: void reset()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: BillboardParticleBatch(int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData
com.badlogic.gdx.math.MathUtils: double CEIL
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter$JsonObject current
com.badlogic.gdx.graphics.g3d.ModelCache: void begin(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.scenes.scene2d.InputEvent: int button
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int getMaxParticleCount()
com.badlogic.gdx.Input$Keys: int SWITCH_CHARSET
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()
androidx.recyclerview.widget.RecyclerView: int getBaseline()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell space(float,float,float,float)
com.badlogic.gdx.math.Circle: float x
com.badlogic.gdx.utils.ComparableTimSort: void rangeCheck(int,int,int)
com.badlogic.gdx.utils.viewport.FillViewport: FillViewport(float,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: void begin()
com.esotericsoftware.kryo.Serializer: void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])
androidx.fragment.app.Fragment: void registerForContextMenu(android.view.View)
com.esotericsoftware.minlog.Log: void debug(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type getReturnType(java.lang.reflect.Method)
com.badlogic.gdx.graphics.g2d.NinePatch: void setPadRight(float)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: PrimitiveSpawnShapeValue$SpawnSide(java.lang.String,int)
com.badlogic.gdx.Graphics: boolean setWindowedMode(int,int)
com.badlogic.gdx.graphics.glutils.GLVersion: com.badlogic.gdx.graphics.glutils.GLVersion$Type type
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: CameraInputController(com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener,com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void setMotorSpeed(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer get()
com.badlogic.gdx.math.Plane: long serialVersionUID
com.badlogic.gdx.utils.Json: boolean debug
com.badlogic.gdx.graphics.g3d.Attributes: void set(java.lang.Iterable)
com.badlogic.gdx.utils.IntFloatMap$Entry: IntFloatMap$Entry()
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.MapProperties getProperties()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void createVAO()
com.badlogic.gdx.utils.IntIntMap: int get(int,int)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: DepthShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config,java.lang.String)
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: float motorSpeed
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.ModelInstance)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_dirLights0color
com.badlogic.gdx.scenes.scene2d.actions.IntAction: IntAction(int,int,float)
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: float start
com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_BINDING_CUBE_MAP
com.badlogic.gdx.Input: float getAccelerometerX()
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setRound(boolean)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: void add(com.badlogic.gdx.graphics.g2d.TextureRegion[])
com.badlogic.gdx.math.Vector2: float x
com.badlogic.gdx.math.Polyline: boolean contains(float,float)
com.badlogic.gdx.math.Vector2: boolean epsilonEquals(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 scl(float)
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: com.badlogic.gdx.math.Vector2 linearOffset
com.esotericsoftware.kryo.util.ObjectMap: int PRIME3
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container right()
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendFunc(int,int)
com.badlogic.gdx.utils.ShortArray: ShortArray()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINEJOIN_MITER
com.badlogic.gdx.utils.IntArray: int first()
com.esotericsoftware.kryo.io.Input: void setBuffer(byte[])
com.badlogic.gdx.utils.StringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)
com.google.android.material.internal.NavigationMenuItemView: void setIconSize(int)
com.badlogic.gdx.utils.IntFloatMap: int stashCapacity
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void scale(com.badlogic.gdx.math.Vector3)
androidx.appcompat.widget.SearchView: void setSubmitButtonEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: void updateImage()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: int compareTo(java.lang.Object)
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_indicies
com.badlogic.gdx.math.CatmullRomSpline: int nearest(com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryonet.rmi.ObjectSpace: ObjectSpace()
com.badlogic.gdx.graphics.Texture$TextureWrap: int glEnum
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.utils.Array influencers
com.badlogic.gdx.scenes.scene2d.ui.List: void setSelected(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void setLow(float,float)
com.badlogic.gdx.graphics.TextureArray
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters: FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float maxY
com.badlogic.gdx.utils.XmlReader: void close()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Preferences getPreferences(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ISTORE
com.badlogic.gdx.utils.FloatArray: void removeRange(int,int)
com.esotericsoftware.kryonet.Connection: java.net.InetSocketAddress getRemoteAddressUDP()
com.badlogic.gdx.Input$Keys: int NUM_3
com.badlogic.gdx.backends.android.InputProcessorLW: boolean touchDragged(int,int,int)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
com.badlogic.gdx.math.DelaunayTriangulator: float[] sortedPoints
com.badlogic.gdx.backends.android.AndroidPreferences: boolean getBoolean(java.lang.String)
com.google.firebase.messaging.FirebaseMessagingRegistrar: FirebaseMessagingRegistrar()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int textHAlign
com.badlogic.gdx.scenes.scene2d.ui.Skin: Skin(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Matrix4 TMP_M4
com.badlogic.gdx.utils.IntFloatMap$MapIterator: IntFloatMap$MapIterator(com.badlogic.gdx.utils.IntFloatMap)
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters defaultParameters
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glEnable(int)
com.esotericsoftware.kryonet.Server$1: void disconnected(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.utils.compression.Lzma: Lzma()
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
com.badlogic.gdx.backends.android.AndroidGL20: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.google.android.material.card.MaterialCardView: float getProgress()
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: Manifold$ManifoldType(java.lang.String,int)
com.esotericsoftware.kryo.io.Input: void close()
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage
com.badlogic.gdx.graphics.GL20: int GL_DONT_CARE
com.badlogic.gdx.utils.IntFloatMap: float getAndIncrement(int,float,float)
com.esotericsoftware.kryo.io.Input: void setBuffer(byte[],int,int)
com.badlogic.gdx.utils.IntArray
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setHigh(float,float)
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int getNumVertices()
com.badlogic.gdx.utils.JsonValue: double getDouble(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random copy()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()
com.badlogic.gdx.utils.ObjectFloatMap: void shrink(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table pad(float,float,float,float)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(char)
com.badlogic.gdx.utils.IntFloatMap: boolean notEmpty()
com.badlogic.gdx.assets.loaders.SoundLoader: com.badlogic.gdx.audio.Sound loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter)
androidx.appcompat.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)
androidx.appcompat.widget.AppCompatImageButton: void setImageResource(int)
com.badlogic.gdx.utils.TimSort: void mergeForceCollapse()
com.badlogic.gdx.physics.box2d.Manifold: int jniGetPointCount(long)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 this$0
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.graphics.g3d.particles.ParallelArray particles
com.badlogic.gdx.utils.DataBuffer: DataBuffer()
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_WRAP_T
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Bezier set(com.badlogic.gdx.math.Vector[])
com.badlogic.gdx.scenes.scene2d.ui.TextArea: float getCursorY()
com.esotericsoftware.kryo.util.DefaultClassResolver: int memoizedClassId
com.badlogic.gdx.math.DelaunayTriangulator: int circumCircle(float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable: com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable tint(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(float)
com.badlogic.gdx.graphics.Cubemap: Cubemap(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.scenes.scene2d.ui.Label: float getPrefHeight()
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: EllipseShapeBuilder()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean isVisualPressed()
com.badlogic.gdx.utils.CharArray: void addAll(com.badlogic.gdx.utils.CharArray)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 setLength2(float)
com.badlogic.gdx.graphics.Pixmap: java.nio.ByteBuffer getPixels()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.graphics.g2d.NinePatch: void setPadBottom(float)
com.badlogic.gdx.utils.JsonValue: java.lang.String name()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.graphics.GL20 gl20
com.badlogic.gdx.utils.Select: Select()
com.badlogic.gdx.math.Polyline: boolean calculateScaledLength
com.google.android.material.bottomappbar.BottomAppBar: int getLeftInset()
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer: DefaultSerializers$KryoSerializableSerializer()
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int hash3(int)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: boolean disposePixmap()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp1
com.google.android.material.internal.CheckableImageButton: void setPressed(boolean)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: float prefHeight
com.badlogic.gdx.utils.JsonWriter$OutputType
com.badlogic.gdx.graphics.Mesh: Mesh(boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: com.badlogic.gdx.backends.android.AndroidLiveWallpaper getLiveWallpaper()
com.google.android.material.chip.Chip: void setEnsureMinTouchTargetSize(boolean)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform1fv(int,int,float[],int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: java.util.Locale copy(com.esotericsoftware.kryo.Kryo,java.util.Locale)
com.badlogic.gdx.assets.loaders.SkinLoader
com.badlogic.gdx.utils.Json: void writeValue(java.lang.Object,java.lang.Class,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: int getAlign()
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.maps.MapLayer: void setVisible(boolean)
com.badlogic.gdx.utils.IdentityMap: java.lang.Object[] keyTable
com.esotericsoftware.kryo.Kryo: void pushGenericsScope(java.lang.Class,com.esotericsoftware.kryo.Generics)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void identity()
com.badlogic.gdx.graphics.g3d.ModelBatch
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: com.badlogic.gdx.graphics.Camera camera
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int F
com.badlogic.gdx.input.RemoteInput$KeyEvent: com.badlogic.gdx.input.RemoteInput this$0
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.IntArray computeIndices(float[],int,int,boolean,boolean)
com.badlogic.gdx.utils.PerformanceCounter
com.google.android.material.button.MaterialButton: void setStrokeWidthResource(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getLinearHoriAdvance(long)
com.badlogic.gdx.scenes.scene2d.ui.List: List(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.esotericsoftware.kryo.KryoException: void addTrace(java.lang.String)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: void consumeTextureArrayData()
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGetUniformLocation(int,java.lang.String)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.Graphics: void setVSync(boolean)
com.badlogic.gdx.backends.android.AndroidDaydream: void useImmersiveMode(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Container: void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
androidx.appcompat.widget.Toolbar: void setTitleTextColor(int)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: float getTileWidth()
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl: int fieldSizeOf(java.lang.Class)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: FreeTypeFontGenerator(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.IntFloatMap: boolean containsKey(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.glutils.InstanceData instances
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1: void run()
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundColor(int)
com.badlogic.gdx.assets.loaders.ModelLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float x
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup expand(boolean)
com.badlogic.gdx.graphics.GL30: int GL_RG16I
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathOffset()
com.badlogic.gdx.utils.BufferUtils: void transformV3M3Jni(java.nio.Buffer,int,int,float[],int)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float jniGetReferenceAngle(long)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: boolean isComplete()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: int getWidth()
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.collision.Ray)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: int numPointLights
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_SHADER
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void rotate(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.RayCastCallback rayCastCallback
com.badlogic.gdx.Input$Keys: int BUTTON_R2
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: com.badlogic.gdx.graphics.VertexAttributes attributes
com.badlogic.gdx.graphics.g3d.Shader: void init()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat[] $VALUES
androidx.fragment.app.Fragment: int mBackStackNesting
com.esotericsoftware.kryo.io.Output: boolean require(int)
com.badlogic.gdx.utils.Queue: java.lang.Object removeIndex(int)
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: java.lang.String atlasName
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_INDEX8
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFNULL
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollBarWidth()
com.badlogic.gdx.graphics.glutils.KTXTextureData: void prepare()
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTranslation(float,float)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniSetLength(long,float)
com.badlogic.gdx.utils.compression.lzma.Encoder: Encoder()
com.badlogic.gdx.utils.XmlReader$Element: boolean getBoolean(java.lang.String,boolean)
com.badlogic.gdx.Application: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: void reset()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: int getWrapIndex(com.badlogic.gdx.utils.Array,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer TOP
com.badlogic.gdx.utils.LongArray: long[] setSize(int)
com.badlogic.gdx.utils.XmlReader$Element: boolean getBooleanAttribute(java.lang.String,boolean)
com.badlogic.gdx.backends.android.AndroidMusic: void stop()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void allocRenderable()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getDragStartY()
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void setIndices(java.nio.ShortBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IXOR
com.badlogic.gdx.scenes.scene2d.ui.TextField: int[] wordUnderCursor(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: ParticleShader$Config(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType)
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(com.badlogic.gdx.graphics.Color,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: java.lang.Object getSelected()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: boolean drawing
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: com.badlogic.gdx.graphics.g2d.Sprite getSprite()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLife()
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: com.badlogic.gdx.math.Vector2 pointer2
com.google.android.material.chip.Chip: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
com.badlogic.gdx.assets.loaders.SoundLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color MAGENTA
com.badlogic.gdx.graphics.GL30: int GL_RGBA16F
androidx.appcompat.widget.AppCompatTextView: java.lang.CharSequence getText()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix4fv(int,float[],int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_alphaTest
com.badlogic.gdx.utils.LongMap$MapIterator: com.badlogic.gdx.utils.LongMap map
com.badlogic.gdx.graphics.glutils.ShapeRenderer: ShapeRenderer(int)
com.badlogic.gdx.assets.loaders.PixmapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: android.app.Dialog dialog
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: CubemapLoader$CubemapParameter()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver)
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: void dispose()
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format RGBA4444
com.badlogic.gdx.maps.tiled.TideMapLoader: com.badlogic.gdx.utils.Array loadTileSheets(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform normalTexture
com.badlogic.gdx.net.HttpStatus: int SC_PROXY_AUTHENTICATION_REQUIRED
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void setX(float)
com.badlogic.gdx.utils.IntArray: void addAll(com.badlogic.gdx.utils.IntArray,int,int)
com.badlogic.gdx.input.RemoteInput: RemoteInput(int)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetSpringFrequencyHz(long,float)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform getNodeAnimationTransform(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib1f(int,float)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Entries entries1
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getMaxAdvanceHeight()
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preMul(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2 GetSubCoder(int,byte)
com.badlogic.gdx.utils.IntFloatMap: int pushIterations
com.esotericsoftware.jsonbeans.Json: void setElementType(java.lang.Class,java.lang.String,java.lang.Class)
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.esotericsoftware.kryonet.TcpConnection: java.lang.Object writeLock
com.badlogic.gdx.graphics.g2d.NinePatch: int TOP_CENTER
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel allocateChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: int bufferedParticlesCount
com.esotericsoftware.kryonet.Connection: void addListener(com.esotericsoftware.kryonet.Listener)
androidx.cardview.widget.CardView: int getContentPaddingBottom()
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: ScissorStack()
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics: com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(float,float,float)
com.badlogic.gdx.graphics.GL30: boolean glIsBuffer(int)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: Encoder()
com.badlogic.gdx.utils.Array: java.lang.Object pop()
com.badlogic.gdx.graphics.glutils.FloatTextureData: int getWidth()
com.badlogic.gdx.utils.compression.CRC: CRC()
com.badlogic.gdx.utils.compression.CRC: int _value
com.google.android.material.circularreveal.cardview.CircularRevealCardView: android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DDIV
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap cacheAmbientCubemap
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_AMBIENT
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: com.badlogic.gdx.utils.Array renderables
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getFillColor()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_cameraUp
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
com.badlogic.gdx.graphics.profiling.GLErrorListener$1: GLErrorListener$1()
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: int NO_BLEND
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter environmentCubemap
com.badlogic.gdx.graphics.Color: int toIntBits()
com.badlogic.gdx.utils.compression.lzma.Encoder: int _numFastBytes
com.badlogic.gdx.graphics.Mesh: void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh)
androidx.fragment.app.Fragment: java.lang.Boolean mSavedUserVisibleHint
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: java.lang.Object waitForResponse(byte)
com.badlogic.gdx.graphics.Color: Color()
com.esotericsoftware.kryo.Kryo: void reset()
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 add(int,int,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: boolean hasAttribute(java.lang.String)
com.badlogic.gdx.Net$HttpRequest: java.lang.String content
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glCheckFramebufferStatus(int)
com.badlogic.gdx.utils.SerializationException: boolean causedBy(java.lang.Class)
com.google.android.material.transformation.ExpandableTransformationBehavior: ExpandableTransformationBehavior(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.reflect.ClassReflection
com.badlogic.gdx.utils.reflect.Method: boolean isFinal()
com.badlogic.gdx.graphics.GL30: void glClearBufferfi(int,int,float,int)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Stage stage
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.Environment)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void index(short,short,short,short,short,short)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.MassData massData
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float value
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.Array getExecutedRunnables()
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$Monitor[] getMonitors()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.Matrix4,float,float,float,int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: com.badlogic.gdx.utils.compression.lzma.Encoder this$0
com.badlogic.gdx.math.Plane: com.badlogic.gdx.math.Plane$PlaneSide testPoint(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollX(float)
com.badlogic.gdx.graphics.GL30: int GL_CURRENT_QUERY
com.badlogic.gdx.utils.BufferUtils: void copyJni(byte[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.Input$Keys: Input$Keys()
com.badlogic.gdx.input.RemoteInput$KeyEvent: char keyChar
com.esotericsoftware.kryo.Registration: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel controllerChannel
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.PointLight)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.File)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float wrapSpace
com.google.android.datatransport.cct.CctBackendFactory: CctBackendFactory()
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: void restart()
com.badlogic.gdx.graphics.GL30
com.esotericsoftware.kryo.io.Input: long skip(long)
com.esotericsoftware.jsonbeans.ReadOnlySerializer: java.lang.Object read(com.esotericsoftware.jsonbeans.Json,com.esotericsoftware.jsonbeans.JsonValue,java.lang.Class)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_BACK_VALUE_MASK
com.badlogic.gdx.InputEventQueue: int SKIP
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean alwaysScroll
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void onDestroy()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color ORANGE
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraUp
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Matrix4 tmpMat
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void setAlignMode(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode)
com.badlogic.gdx.graphics.GL20: int GL_ONE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label b
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Image: float getImageHeight()
com.badlogic.gdx.math.Intersector: Intersector()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int RENDERMODE_CONTINUOUSLY
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.graphics.glutils.ETC1: int getCompressedDataSize(int,int)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Host
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec stencilRenderBufferSpec
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter: ParticleEffectLoader$ParticleEffectLoadParameter(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.StringBuilder: void enlargeBuffer(int)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.Texture$TextureWrap wrapU
com.badlogic.gdx.utils.XmlWriter
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(int)
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.graphics.g3d.utils.MeshBuilder builder
com.badlogic.gdx.assets.AssetLoaderParameters
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue()
com.badlogic.gdx.utils.ScreenUtils: com.badlogic.gdx.graphics.Pixmap getFrameBufferPixmap(int,int,int,int)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: TextureAtlas$AtlasSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion)
com.badlogic.gdx.Input$Keys: int Q
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.input.GestureDetector: void invalidateTapSquare()
com.badlogic.gdx.scenes.scene2d.Stage: boolean ownsBatch
com.badlogic.gdx.backends.android.AndroidGL30: void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
androidx.annotation.Keep
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void add(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: boolean flip
com.badlogic.gdx.graphics.GL20: int GL_FLOAT_MAT4
com.google.android.material.chip.ChipGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size: long getMetrics(long)
com.badlogic.gdx.maps.tiled.TiledMapTile: void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.physics.box2d.Manifold: int getPointCount()
com.badlogic.gdx.graphics.GL30: void glFrontFace(int)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float[] tmp
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: AndroidInput$TouchEvent()
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.PointLight)
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.graphics.Texture$TextureFilter
com.badlogic.gdx.scenes.scene2d.ui.Table: float[] columnMinWidth
com.badlogic.gdx.graphics.glutils.KTXTextureData: int GL_TEXTURE_1D_ARRAY_EXT
com.badlogic.gdx.math.Ellipse: com.badlogic.gdx.math.Ellipse setSize(float,float)
com.badlogic.gdx.utils.async.AsyncExecutor: com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 set(float,float)
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
com.badlogic.gdx.scenes.scene2d.ui.Table$5: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.assets.loaders.MusicLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.DecalMaterial material
com.badlogic.gdx.graphics.glutils.FrameBuffer: void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: void remove()
com.badlogic.gdx.utils.Timer$TimerThread: void dispose()
com.badlogic.gdx.utils.Queue: java.lang.Object last()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBufferSubData(int,int,int,java.nio.Buffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFGT
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: TextureAtlas$TextureAtlasData$Page(com.badlogic.gdx.files.FileHandle,float,float,boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] ySizeValues
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void c(int)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.Texture texture
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int Lp
com.badlogic.gdx.graphics.GL30: void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.ObjectCachedFieldFactory: ObjectCachedFieldFactory()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: GLSurfaceViewAPI18(android.content.Context)
androidx.appcompat.widget.Toolbar: void setTitleMarginBottom(int)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.utils.ObjectMap: int PRIME3
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int)
com.badlogic.gdx.backends.android.AndroidSound: AndroidSound(android.media.SoundPool,android.media.AudioManager,int)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: boolean needsLayout
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter object()
com.badlogic.gdx.utils.compression.lz.BinTree: int kMinMatchCheck
com.badlogic.gdx.graphics.GL30: int GL_QUERY_RESULT
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int xPixelOffset
com.badlogic.gdx.math.Interpolation$Exp
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean getProgrammaticChangeEvents()
androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable getDividerDrawable()
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType External
com.badlogic.gdx.utils.JsonValue: char getChar(java.lang.String,char)
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.JsonSerializer getSerializer(java.lang.Class)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(com.badlogic.gdx.graphics.g2d.TextureRegion,boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexParameterf(int,int,float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetDampingRatio(long,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldVisitor: void visitEnd()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$29: DefaultShader$Setters$29()
com.esotericsoftware.kryonet.UdpConnection: java.lang.Object writeLock
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container align(int)
com.badlogic.gdx.scenes.scene2d.ui.Skin$5
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16
com.badlogic.gdx.utils.ObjectSet: ObjectSet(int)
com.badlogic.gdx.math.Ellipse: Ellipse(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder part(java.lang.String,int,long,com.badlogic.gdx.graphics.g3d.Material)
com.badlogic.gdx.utils.Json: void addClassTag(java.lang.String,java.lang.Class)
com.badlogic.gdx.backends.android.ZipResourceFile: int kCompressStored
com.badlogic.gdx.assets.AssetDescriptor: com.badlogic.gdx.files.FileHandle file
com.badlogic.gdx.graphics.GL30: int GL_MAX_ELEMENTS_INDICES
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,float)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: ObjectMap$MapIterator(com.esotericsoftware.jsonbeans.ObjectMap)
com.badlogic.gdx.physics.box2d.Body
com.badlogic.gdx.scenes.scene2d.utils.Cullable
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue: CylinderSpawnShapeValue()
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String Pragma
com.badlogic.gdx.math.MathUtils: float FLOAT_ROUNDING_ERROR
com.badlogic.gdx.scenes.scene2d.ui.Cell: void setActorBounds(float,float,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnHeightValue
com.badlogic.gdx.backends.android.AndroidAudioRecorder
com.badlogic.gdx.utils.ComparableTimSort: java.lang.Object[] ensureCapacity(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory
com.badlogic.gdx.maps.MapObject: float getOpacity()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform emissiveTexture
com.badlogic.gdx.scenes.scene2d.Actor: float getWidth()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_TARGET_MONO
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: android.opengl.GLSurfaceView$EGLConfigChooser access$300(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18)
com.badlogic.gdx.utils.CharArray: CharArray(com.badlogic.gdx.utils.CharArray)
com.esotericsoftware.kryonet.Listener: void connected(com.esotericsoftware.kryonet.Connection)
com.fasterxml.jackson.annotation.JsonProperty$Access: com.fasterxml.jackson.annotation.JsonProperty$Access valueOf(java.lang.String)
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Input getInput(int)
com.badlogic.gdx.backends.android.AndroidMusic: void pause()
com.badlogic.gdx.utils.XmlWriter: com.badlogic.gdx.utils.XmlWriter pop()
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: com.badlogic.gdx.math.Rectangle viewport
com.fasterxml.jackson.annotation.JsonFormat$Feature: com.fasterxml.jackson.annotation.JsonFormat$Feature[] values()
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 cpy()
com.badlogic.gdx.utils.CharArray: boolean removeValue(char)
com.badlogic.gdx.Game: void render()
com.badlogic.gdx.math.Quaternion: float getYaw()
com.badlogic.gdx.Game: void pause()
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_REVERSED
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void beforeGroups()
com.esotericsoftware.kryonet.EndPoint: void update(int)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$1: com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D this$0
com.badlogic.gdx.graphics.GL20: int glCreateProgram()
com.badlogic.gdx.graphics.GL20: int GL_ALPHA
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider: com.badlogic.gdx.graphics.g3d.Shader createShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.utils.Array getImagePaths()
com.badlogic.gdx.assets.loaders.AssetLoader
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.utils.Array getExecutedRunnables()
com.badlogic.gdx.utils.JsonReader: byte[] init__json_eof_actions_0()
com.esotericsoftware.kryo.io.Input: int[] readInts(int,boolean)
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int AlphaOffset
com.badlogic.gdx.utils.LongMap: java.lang.String toString()
com.esotericsoftware.kryo.util.ObjectMap: int threshold
androidx.recyclerview.widget.RecyclerView: int getMaxFlingVelocity()
com.badlogic.gdx.graphics.glutils.FileTextureData
com.badlogic.gdx.graphics.g3d.Attributes: boolean has(long)
com.badlogic.gdx.maps.MapLayers: int getIndex(com.badlogic.gdx.maps.MapLayer)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String DiffuseAlias
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1: com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source val$source
com.badlogic.gdx.scenes.scene2d.Group: void childrenChanged()
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute TexCoords(int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: void reset()
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: Encoder$Optimal(com.badlogic.gdx.utils.compression.lzma.Encoder)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3fv(int,int,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int getLinesShowing()
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction: boolean removed
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.graphics.g3d.model.MeshPart: com.badlogic.gdx.math.Vector3 center
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createBox(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.utils.IntSet: void clear(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] xSizeValues
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.FloatArray computePolygon(float[],boolean)
com.badlogic.gdx.scenes.scene2d.ui.Image: float getPrefWidth()
com.badlogic.gdx.graphics.glutils.VertexArray: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: int ROTATE_0
com.google.android.material.textfield.TextInputLayout: com.google.android.material.shape.MaterialShapeDrawable getBoxBackground()
com.badlogic.gdx.utils.LongMap: long findKey(java.lang.Object,boolean,long)
com.badlogic.gdx.utils.ObjectMap: java.lang.Object get(java.lang.Object,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: android.widget.TextView textView
com.badlogic.gdx.graphics.g3d.Model: void load(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.graphics.g3d.utils.TextureProvider)
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter pop()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2: void pan(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float highMax
com.badlogic.gdx.graphics.glutils.ETC1TextureData: boolean isPrepared()
com.badlogic.gdx.graphics.GL30: int GL_RG8I
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDelay()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.IntIntMap attributes
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean shift()
com.badlogic.gdx.Input: boolean isButtonPressed(int)
com.google.android.material.behavior.SwipeDismissBehavior: SwipeDismissBehavior()
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader
com.badlogic.gdx.utils.Json: void writeObjectStart()
com.badlogic.gdx.scenes.scene2d.ui.Skin: void setEnabled(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
androidx.fragment.app.Fragment: androidx.core.app.SharedElementCallback getEnterTransitionCallback()
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.Input$Orientation nativeOrientation
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool: com.badlogic.gdx.utils.Array freeMeshes
com.badlogic.gdx.graphics.GL30: int GL_RG8
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
com.badlogic.gdx.utils.Array$ArrayIterator: java.util.Iterator iterator()
com.esotericsoftware.minlog.Log: void trace(java.lang.String)
com.badlogic.gdx.math.Vector2: boolean isOnLine(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.maps.MapObject: java.lang.String name
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)
com.badlogic.gdx.graphics.g2d.PixmapPacker: void dispose()
com.badlogic.gdx.scenes.scene2d.Action: void reset()
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void invalidate()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float x
com.badlogic.gdx.utils.ShortArray: void addAll(short[],int,int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: TemporalAction(float)
com.badlogic.gdx.graphics.VertexAttribute: int unit
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3i(int,int,int,int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.graphics.GL20: int GL_INCR_WRAP
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: float ratio
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType: ModelMaterial$MaterialType(java.lang.String,int)
com.badlogic.gdx.physics.box2d.Shape: void setRadius(float)
androidx.fragment.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
com.badlogic.gdx.scenes.scene2d.Stage: boolean isInsideViewport(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitCode()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_2_10_10_10_REV
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.badlogic.gdx.physics.box2d.ContactImpulse: void jniGetNormalImpulses(long,float[])
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1: java.lang.String toString(java.lang.Object)
com.badlogic.gdx.math.Polyline: void setRotation(float)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph
com.badlogic.gdx.utils.XmlReader: short[] _xml_index_offsets
com.badlogic.gdx.physics.box2d.joints.WheelJointDef: float dampingRatio
com.badlogic.gdx.utils.Json: void writeArrayStart(java.lang.String)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String IfModifiedSince
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.BooleanArray complete
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE1
com.badlogic.gdx.scenes.scene2d.ui.Skin: java.lang.Object optional(java.lang.String,java.lang.Class)
com.badlogic.gdx.utils.viewport.ScreenViewport: ScreenViewport(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: void updateBufferAddress()
com.badlogic.gdx.scenes.scene2d.ui.Cell: boolean endRow
com.google.android.material.floatingactionbutton.FloatingActionButton: void setTranslationX(float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.utils.ShortArray tmpIndices
com.badlogic.gdx.graphics.Cubemap: int getNumManagedCubemaps()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String getSuperName()
com.gameanalytics.sdk.events.EGASdkErrorParameter: com.gameanalytics.sdk.events.EGASdkErrorParameter valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getStepSize()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
androidx.appcompat.widget.AppCompatCheckBox
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: short vertex(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.model.data.ModelData: com.badlogic.gdx.utils.Array nodes
com.badlogic.gdx.net.Socket: java.lang.String getRemoteAddress()
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy()
com.badlogic.gdx.utils.IntSet: boolean removeStash(int)
com.badlogic.gdx.graphics.PerspectiveCamera: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.Input$Keys: int A
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
com.badlogic.gdx.assets.AssetManager: java.lang.Object get(com.badlogic.gdx.assets.AssetDescriptor)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 tmpUp
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handler
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.utils.compression.lz.OutWindow: java.io.OutputStream _stream
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.glutils.VertexData vertices
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillColor(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: RegionInfluencer(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer)
com.badlogic.gdx.physics.box2d.BodyDef: boolean awake
com.badlogic.gdx.utils.BooleanArray: BooleanArray(int)
com.badlogic.gdx.backends.android.AndroidPreferences: void clear()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short,boolean[])
com.badlogic.gdx.backends.android.AndroidInput$3$2$1: void run()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setRelative(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: boolean replaceInfluencer(java.lang.Class,com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer)
com.badlogic.gdx.utils.IntMap$Values: void reset()
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer: DefaultSerializers$StringSerializer()
com.badlogic.gdx.utils.LongArray: long removeIndex(int)
com.google.android.material.card.MaterialCardView: void setDragged(boolean)
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: java.lang.Object clone()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value padLeft
com.badlogic.gdx.math.Circle: boolean overlaps(com.badlogic.gdx.math.Circle)
com.badlogic.gdx.math.Matrix4: float getScaleYSquared()
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.ShaderProvider)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.GL30: void glStencilMaskSeparate(int,int)
com.google.android.material.internal.CheckableImageButton: void setPressable(boolean)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.backends.android.AndroidInput getInput()
com.badlogic.gdx.graphics.g2d.NinePatch: float getMiddleHeight()
com.esotericsoftware.kryonet.Listener$QueuedListener: void idle(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.graphics.glutils.FrameBuffer: void disposeColorTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int dirLightsColorOffset
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: java.lang.CharSequence subSequence(int,int)
com.badlogic.gdx.utils.PerformanceCounters: com.badlogic.gdx.utils.PerformanceCounter add(java.lang.String)
com.esotericsoftware.kryonet.Connection: void close()
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: java.lang.Object find(com.badlogic.gdx.utils.Array,java.lang.Class)
com.badlogic.gdx.graphics.glutils.KTXTextureData: int GL_TEXTURE_3D
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeByte(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: java.lang.String glGetString(int)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.graphics.Color debugColor
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollBarPositions(boolean,boolean)
com.badlogic.gdx.backends.android.AndroidPreferences: com.badlogic.gdx.Preferences putString(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.profiling.GLInterceptor: com.badlogic.gdx.math.FloatCounter getVertexCount()
com.esotericsoftware.kryo.util.ObjectMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.Net$HttpMethods
com.badlogic.gdx.physics.box2d.BodyDef: com.badlogic.gdx.physics.box2d.BodyDef$BodyType type
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: int height
com.badlogic.gdx.backends.android.AndroidDaydream: void setLogLevel(int)
androidx.navigation.NavBackStackEntryState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.utils.async.AsyncResult: java.util.concurrent.Future future
com.badlogic.gdx.utils.ObjectMap$Keys: void remove()
com.badlogic.gdx.graphics.g2d.TextureRegion: int getRegionY()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: void doneFace(long)
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy
com.badlogic.gdx.utils.ObjectMap$Values: java.lang.Object next()
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void InitBitModels(short[])
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteBuffers(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.serializers.FieldSerializer: void setFieldsCanBeNull(boolean)
com.badlogic.gdx.utils.IntFloatMap: int PRIME2
androidx.activity.ImmLeaksCleaner
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.graphics.Color getDebugColor()
com.esotericsoftware.jsonbeans.ObjectMap: void clear(int)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: java.lang.String extension
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onSurfaceCreated(android.view.SurfaceHolder)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: void setFocused(boolean)
com.badlogic.gdx.utils.Queue: Queue(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int encode(char,char,char,char)
com.badlogic.gdx.math.GridPoint2: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Image: com.badlogic.gdx.utils.Scaling scaling
com.HyperSphere.Connection.PacketObjects.Misc.Item: short gameID
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.JsonValue: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15
com.esotericsoftware.jsonbeans.JsonValue: JsonValue(long)
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String getText()
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: void setActive(boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter
com.badlogic.gdx.input.RemoteInput: float getAccelerometerX()
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean right()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int b
com.badlogic.gdx.backends.android.AndroidMusic: boolean isPrepared
com.badlogic.gdx.graphics.g2d.NinePatch: void set(int,float,float,float,float,float)
com.badlogic.gdx.graphics.Texture$TextureFilter: int getGLEnum()
com.badlogic.gdx.graphics.g2d.PixmapPacker: void updateTextureRegions(com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
com.badlogic.gdx.utils.ReflectionPool: com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class)
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle sibling(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glStencilMask(int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int COMPUTE_MAXS
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type DOUBLE_TYPE
com.badlogic.gdx.physics.box2d.DestructionListener
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String AcceptDatetime
com.badlogic.gdx.graphics.g2d.PixmapPacker: PixmapPacker(int,int,com.badlogic.gdx.graphics.Pixmap$Format,int,boolean)
com.esotericsoftware.kryonet.rmi.RemoteObject: void setTransmitExceptions(boolean)
com.badlogic.gdx.graphics.g3d.environment.PointLight: PointLight()
com.HyperSphere.Connection.PacketObjects.Map.Mark
com.badlogic.gdx.graphics.g2d.SpriteCache: void setColor(float,float,float,float)
com.badlogic.gdx.utils.LongArray: boolean notEmpty()
com.badlogic.gdx.graphics.g2d.Batch: int Y4
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.g3d.utils.RenderContext context
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1
com.badlogic.gdx.graphics.TextureArrayData$Factory: TextureArrayData$Factory()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: com.badlogic.gdx.scenes.scene2d.ui.Cell getImageCell()
com.badlogic.gdx.scenes.scene2d.utils.Layout: void pack()
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: int sourceFunction
com.esotericsoftware.kryo.util.Util: java.lang.Class getElementClass(java.lang.Class)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.MassData: float I
com.badlogic.gdx.graphics.GL30: int GL_RGB32UI
com.google.android.material.chip.Chip: void setChipStrokeColor(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean getWrap()
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void enableMotor(boolean)
com.esotericsoftware.kryo.ReferenceResolver: void setReadObject(int,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void invalidateTapSquare()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void end()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: void flip(boolean,boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: boolean hasPosition
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: boolean createSurface()
com.esotericsoftware.kryo.io.ByteBufferInput: void close()
androidx.cardview.widget.CardView: void setMinimumHeight(int)
com.esotericsoftware.kryonet.ClientDiscoveryHandler$1: void onDiscoveredHost(java.net.DatagramPacket,com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform normalUVTransform
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getFillAlpha()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void updateCurrentLine()
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: int KEY_UP
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(java.lang.Class)
com.badlogic.gdx.physics.box2d.EdgeShape: void getVertex1(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void setMaxTorque(float)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: DragScrollListener(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane)
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: int dataOffset
com.badlogic.gdx.math.Ellipse: float x
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide bottom
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution: int portraitHeight
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getNumGlyphs()
com.esotericsoftware.reflectasm.FieldAccess: long getLong(java.lang.Object,int)
com.badlogic.gdx.math.Vector2: float dot(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.CharArray: boolean notEmpty()
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: com.badlogic.gdx.math.Vector2 groundAnchorB
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config: boolean useGPU
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setColor(float,float,float,float)
com.badlogic.gdx.utils.IntIntMap: boolean hasZeroValue
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container width(float)
com.badlogic.gdx.graphics.g3d.decals.Decal: void rotateZ(float)
com.badlogic.gdx.graphics.GL30: int GL_DEPTH24_STENCIL8
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute
com.esotericsoftware.kryo.util.IntMap$MapIterator: void findNextIndex()
com.badlogic.gdx.utils.PooledLinkedList$1
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: float end
com.google.android.material.floatingactionbutton.FloatingActionButton: float getCompatPressedTranslationZ()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void addMesh(float[],short[],int,int)
com.badlogic.gdx.graphics.g3d.environment.BaseLight: com.badlogic.gdx.graphics.g3d.environment.BaseLight setColor(float,float,float,float)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: boolean isPrepared()
com.badlogic.gdx.utils.IntSet: IntSet()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.Actor getActor()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: java.nio.FloatBuffer buffer
androidx.appcompat.app.AlertController$RecycleListView: AlertController$RecycleListView(android.content.Context,android.util.AttributeSet)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$RecycledViewPool getRecycledViewPool()
com.badlogic.gdx.utils.LongMap: int hashShift
com.badlogic.gdx.backends.android.AndroidGL20: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.badlogic.gdx.Input$Keys: int SEMICOLON
com.badlogic.gdx.graphics.GL30: int GL_UNPACK_ROW_LENGTH
com.esotericsoftware.kryo.io.UnsafeMemoryInput: double[] readDoubles(int)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp
com.badlogic.gdx.graphics.g3d.Attribute: int typeBit
com.badlogic.gdx.physics.box2d.CircleShape: com.badlogic.gdx.physics.box2d.Shape$Type getType()
com.badlogic.gdx.physics.box2d.Fixture: float jniGetFriction(long)
com.badlogic.gdx.utils.JsonValue: short getShort(java.lang.String)
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType object
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE21
com.esotericsoftware.kryo.util.ObjectMap: int pushIterations
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDECompLen
com.badlogic.gdx.utils.ObjectMap: ObjectMap(int,float)
androidx.appcompat.widget.Toolbar: int getTitleMarginBottom()
com.badlogic.gdx.graphics.GL30: boolean glIsTexture(int)
com.badlogic.gdx.graphics.glutils.KTXTextureData: com.badlogic.gdx.files.FileHandle file
com.badlogic.gdx.utils.SnapshotArray
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: FloatAction()
androidx.fragment.app.Fragment: boolean isInLayout()
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer: com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: com.badlogic.gdx.graphics.g2d.SpriteCache getSpriteCache()
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: DelegateAction()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_SURFACE
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int mask
com.google.android.material.card.MaterialCardView: void setClickable(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Container: float getPrefWidth()
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float)
com.badlogic.gdx.Input: boolean justTouched()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.Graphics: boolean supportsExtension(java.lang.String)
com.badlogic.gdx.maps.MapLayers: java.util.Iterator iterator()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean disableAudio
com.esotericsoftware.reflectasm.FieldAccess: java.lang.String[] getFieldNames()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: void a(java.lang.StringBuffer)
com.badlogic.gdx.utils.Bits: boolean get(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.google.android.material.chip.Chip: float getChipIconSize()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 rotateRad(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.Batch: void begin()
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: Handle(int,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.utils.IdentityMap$Entries: boolean hasNext()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean rotateLeftPressed
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL)
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: com.badlogic.gdx.math.Vector3 tmpV
com.google.android.material.chip.Chip: void setCheckedIconResource(int)
com.badlogic.gdx.assets.RefCountedContainer: void incRefCount()
com.badlogic.gdx.graphics.glutils.IndexArray: void setIndices(short[],int,int)
com.badlogic.gdx.utils.Json$FieldMetadata
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter()
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: FloatAction(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.assets.loaders.PixmapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeShorts(short[])
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int getId()
com.esotericsoftware.kryonet.util.ObjectIntMap: int PRIME3
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Allow
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String name
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int getX()
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float[] Collision
com.badlogic.gdx.utils.IntIntMap: void ensureCapacity(int)
com.badlogic.gdx.backends.android.AndroidGL30: void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setPasswordMode(boolean)
com.badlogic.gdx.graphics.glutils.GLVersion: GLVersion(com.badlogic.gdx.Application$ApplicationType,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.Input$Keys: int MUTE
com.badlogic.gdx.graphics.g2d.NinePatch: void prepareVertices(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.Input$Peripheral
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: DynamicsModifier$BrownianAcceleration()
androidx.appcompat.widget.SearchView$SearchAutoComplete: SearchView$SearchAutoComplete(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 preScale(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Entries entries()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void begin(com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.math.Vector2: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.physics.box2d.WorldManifold: com.badlogic.gdx.math.Vector2[] getPoints()
com.badlogic.gdx.math.MathUtils: int BIG_ENOUGH_INT
com.esotericsoftware.kryo.util.IntMap: boolean hasZeroValue
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.math.GridPoint3: float dst(com.badlogic.gdx.math.GridPoint3)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getUnsafeFieldFactory()
com.badlogic.gdx.graphics.GL20: int GL_SAMPLE_COVERAGE_VALUE
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: void setWidth(float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value minWidth
com.badlogic.gdx.math.CumulativeDistribution: void add(java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.nio.IntBuffer params
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int PosPrev2
androidx.appcompat.widget.SearchView
com.badlogic.gdx.scenes.scene2d.Actor: void scaleBy(float)
com.badlogic.gdx.utils.Array$ArrayIterator: java.lang.Object next()
com.badlogic.gdx.Input: int getY(int)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float readFloat(java.io.BufferedReader,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: ParticleControllerInfluencer()
com.badlogic.gdx.utils.IntFloatMap$MapIterator: int INDEX_ZERO
com.badlogic.gdx.utils.PerformanceCounters: void tick()
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.math.Vector2 tmp
com.badlogic.gdx.utils.StringBuilder: void insert0(int,char[],int,int)
com.badlogic.gdx.Net: void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: java.lang.Object getObject()
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute(boolean,int,int,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color mul(float)
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: void reset()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void validate()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getFillY()
com.badlogic.gdx.scenes.scene2d.ui.Table: float getMinWidth()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: void ReverseEncode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 trn(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Vector2: float angle(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.jsonbeans.OutputType: com.esotericsoftware.jsonbeans.OutputType minimal
com.badlogic.gdx.backends.android.AndroidApplicationBase: void postRunnable(java.lang.Runnable)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setMinSplitAmount(float)
com.badlogic.gdx.assets.loaders.SkinLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.ByteArray: int indexOf(byte)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: void allocateChannels()
com.esotericsoftware.kryo.ClassResolver: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)
com.esotericsoftware.kryo.util.DefaultClassResolver: int nextNameId
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model)
com.badlogic.gdx.maps.MapProperties
com.badlogic.gdx.utils.ObjectMap$Entry: java.lang.String toString()
com.badlogic.gdx.graphics.PixmapIO$CIM: com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(int,float,float,boolean)
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _isRep
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int getOpcode(int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup rowLeft()
com.badlogic.gdx.backends.android.AndroidInput$1: AndroidInput$1(com.badlogic.gdx.backends.android.AndroidInput,int,int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle newParticle(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean)
androidx.appcompat.view.menu.ActionMenuItemView: void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder$ItemInvoker)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform2i(int,int,int)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: com.badlogic.gdx.graphics.Cubemap createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.graphics.glutils.VertexArray: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6: DefaultShader$Setters$6()
com.google.android.material.card.MaterialCardView: void setRadius(float)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.utils.Clipboard getClipboard()
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.Logger log
com.badlogic.gdx.graphics.PixmapIO$PNG: void write(java.io.OutputStream,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.backends.android.AndroidInput$3$1: AndroidInput$3$1(com.badlogic.gdx.backends.android.AndroidInput$3,android.widget.EditText)
com.badlogic.gdx.math.Intersector: boolean isPointInTriangle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glEnableVertexAttribArray(int)
com.esotericsoftware.kryo.Kryo: boolean asmEnabled
androidx.appcompat.widget.ButtonBarLayout: ButtonBarLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.math.GridPoint3: GridPoint3(com.badlogic.gdx.math.GridPoint3)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$1: int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$freetype$FreeTypeFontGenerator$Hinting
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void dispose()
androidx.appcompat.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: SizeToAction()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16: DefaultShader$Setters$16()
com.badlogic.gdx.backends.android.AndroidGraphics: float deltaTime
com.badlogic.gdx.utils.ObjectFloatMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.utils.LongArray: boolean removeValue(long)
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver: PrefixFileHandleResolver(com.badlogic.gdx.assets.loaders.FileHandleResolver,java.lang.String)
com.badlogic.gdx.utils.reflect.Constructor: java.lang.Class[] getParameterTypes()
com.esotericsoftware.kryo.util.ObjectMap$Keys
com.hyperspherestudio.kryonet.Packets.EncryptedPacket: java.lang.Object decrypt(byte[])
com.badlogic.gdx.utils.CharArray: char first()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,float)
com.esotericsoftware.jsonbeans.JsonValue: float getFloat(java.lang.String,float)
com.google.android.material.datepicker.MaterialDatePicker
com.badlogic.gdx.scenes.scene2d.Touchable
com.badlogic.gdx.scenes.scene2d.ui.Tooltip
com.esotericsoftware.jsonbeans.JsonValue$1
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.graphics.Color disabledFontColor
androidx.appcompat.widget.AppCompatButton: void setAutoSizeTextTypeWithDefaults(int)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean touchDown(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue()
com.badlogic.gdx.graphics.GL30: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue: ParticleEmitter$GradientColorValue()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getGLInternalFormat()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setScrollingDisabled(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform diffuseTexture
androidx.appcompat.widget.AppCompatTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.backends.android.ZipResourceFile: com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getAllEntries()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target: void drop(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,float,float,int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void box(float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator: int compare(com.badlogic.gdx.graphics.g3d.decals.Decal,com.badlogic.gdx.graphics.g3d.decals.Decal)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: void jniGetGroundAnchorA(long,float[])
com.badlogic.gdx.physics.box2d.EdgeShape: void setHasVertex3(boolean)
com.badlogic.gdx.maps.tiled.TiledMapTileSet: TiledMapTileSet()
com.badlogic.gdx.Input: boolean isKeyJustPressed(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform spotLights
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCapsule(float,float,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: void update(float)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getErrorIconDrawable()
com.badlogic.gdx.utils.ArrayMap: int put(java.lang.Object,java.lang.Object,int)
com.hyperspherestudio.kryonet.Packets.PacketStream
com.esotericsoftware.kryo.Kryo: java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)
com.esotericsoftware.jsonbeans.ObjectMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.GL20: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.JsonValue: boolean isNumber()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float padBottom
com.badlogic.gdx.graphics.GL30: void glDepthFunc(int)
com.badlogic.gdx.graphics.GL30: int GL_RASTERIZER_DISCARD
com.esotericsoftware.jsonbeans.JsonWriter: java.io.Writer writer
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.ui.List: boolean typeToSelect
com.badlogic.gdx.physics.box2d.joints.WheelJoint: WheelJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.utils.GdxBuild
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: java.lang.String Alias
com.badlogic.gdx.physics.box2d.joints.RopeJoint: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle getStyle()
com.badlogic.gdx.input.GestureDetector: float tapRectangleHeight
com.badlogic.gdx.backends.android.AndroidInput: int sleepTime
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void setStartPosition(float,float)
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.utils.ArrayMap invBoneBindTransforms
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.scenes.scene2d.InputListener keyPressListener
com.badlogic.gdx.utils.ObjectFloatMap$Values: ObjectFloatMap$Values(com.badlogic.gdx.utils.ObjectFloatMap)
com.badlogic.gdx.graphics.Colors
com.badlogic.gdx.utils.ShortArray: void insert(int,short)
com.badlogic.gdx.utils.compression.lzma.Encoder: void FillAlignPrices()
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.utils.LongMap joints
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorB()
com.esotericsoftware.kryo.io.ByteBufferOutput: void flush()
com.badlogic.gdx.assets.AssetManager: void addAsset(java.lang.String,java.lang.Class,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib3f(int,float,float,float)
com.badlogic.gdx.utils.IntIntMap: void clear(int)
com.badlogic.gdx.utils.viewport.FitViewport: FitViewport(float,float,com.badlogic.gdx.graphics.Camera)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: void setSpeeds()
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float startX
com.badlogic.gdx.backends.android.AndroidGL30: void glGenTransformFeedbacks(int,int[],int)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void setDampingRatio(float)
com.badlogic.gdx.utils.JsonWriter: void setQuoteLongValues(boolean)
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: java.lang.String getString()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting[] values()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_BLEND_SRC_OVER
com.badlogic.gdx.utils.compression.lz.BinTree: int[] CrcTable
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value padRight
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeLong(long,boolean)
com.badlogic.gdx.graphics.Pixmap: void drawLine(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void reset()
androidx.fragment.app.Fragment: void setReenterTransition(java.lang.Object)
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void render()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glViewport(int,int,int,int)
com.badlogic.gdx.graphics.GL30: void glBindBufferRange(int,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getPitch()
com.esotericsoftware.jsonbeans.Json: void writeArrayStart(java.lang.String)
com.esotericsoftware.kryo.serializers.ObjectField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1: SplitPane$1(com.badlogic.gdx.scenes.scene2d.ui.SplitPane)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.Editable append(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable: com.badlogic.gdx.graphics.g2d.TextureRegion getRegion()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: boolean applying
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_VEC4
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBindAttribLocation(int,int,java.lang.String)
com.badlogic.gdx.graphics.VertexAttributes: long mask
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.utils.Array pages
com.badlogic.gdx.utils.StringBuilder: void append0(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLitPosStatesBitsEncodingMax
com.google.android.material.button.MaterialButton: void setIconTint(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle getStyle()
com.badlogic.gdx.utils.ObjectMap$Values: void remove()
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: float getStart()
com.badlogic.gdx.graphics.Mesh: Mesh(com.badlogic.gdx.graphics.glutils.VertexData,com.badlogic.gdx.graphics.glutils.IndexData,boolean)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle: Touchpad$TouchpadStyle()
com.badlogic.gdx.physics.box2d.World: void step(float,int,int)
com.badlogic.gdx.assets.loaders.SkinLoader: SkinLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
androidx.appcompat.widget.AppCompatImageView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: java.lang.String getOwner()
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.JsonWriter writer
com.google.android.material.internal.FlowLayout: int getLineSpacing()
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput(byte[],int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int a(int,int)
com.badlogic.gdx.files.FileHandle: void writeString(java.lang.String,boolean,java.lang.String)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getPlaceholderText()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: java.lang.String TAG
com.badlogic.gdx.utils.IntMap: int PRIME2
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer findInfluencer(java.lang.Class)
com.esotericsoftware.kryo.util.IntArray
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int width
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeBytes(java.lang.Object,long,long)
androidx.fragment.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
com.esotericsoftware.kryo.io.ByteBufferInput: java.lang.StringBuilder readStringBuilder()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void bind()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void end()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction timeScale(float,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: void initialize(com.badlogic.gdx.ApplicationListener)
com.badlogic.gdx.graphics.GL20: void glLineWidth(float)
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.XmlReader: byte[] _xml_single_lengths
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_dirLights0direction
com.badlogic.gdx.math.GridPoint3: GridPoint3()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue prev
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: void setVelocity(float)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void uncheckAll()
com.google.android.material.chip.Chip: void setIconEndPaddingResource(int)
com.badlogic.gdx.backends.android.AndroidMusic: android.media.MediaPlayer player
com.google.android.material.button.MaterialButton: void setBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void drawSelection(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: int packedHeight
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void index(short,short,short)
com.badlogic.gdx.utils.compression.lzma.Base: int StateUpdateMatch(int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void dispose()
com.badlogic.gdx.physics.box2d.Body: void jniSetMassData(long,float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void init()
com.badlogic.gdx.scenes.scene2d.ui.Tooltip$1: void act(float)
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: float[] getTimeline()
com.badlogic.gdx.utils.IntFloatMap: void putAll(com.badlogic.gdx.utils.IntFloatMap)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node overNode
com.esotericsoftware.kryo.io.UnsafeInput: int[] readInts(int)
com.esotericsoftware.kryo.io.ByteBufferOutput
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap[] values()
com.esotericsoftware.jsonbeans.Json: void readField(java.lang.Object,java.lang.String,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.math.EarClippingTriangulator: int nextIndex(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_TARGET_LIGHT
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: int CPU_COLOR_OFFSET
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
com.badlogic.gdx.graphics.Mesh: void setAutoBind(boolean)
com.esotericsoftware.kryo.serializers.FieldSerializer: void removeField(java.lang.String)
androidx.appcompat.widget.AppCompatButton
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float,float)
com.esotericsoftware.kryonet.FrameworkMessage$DiscoverHost: FrameworkMessage$DiscoverHost()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Server
com.badlogic.gdx.utils.LongArray: void add(long,long,long)
com.badlogic.gdx.Input$Keys: int F
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_BLEND_NONE
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.utils.Array renderables
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDEExtraLen
com.badlogic.gdx.utils.ObjectFloatMap: int threshold
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_pointLights1color
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc,float)
com.badlogic.gdx.utils.JsonValue: short getShort(java.lang.String,short)
com.esotericsoftware.kryo.io.Input: int readShortUnsigned()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2: ParticleShader$Setters$2()
com.badlogic.gdx.graphics.GL20: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: int hashCode()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: float time
com.badlogic.gdx.utils.ShortArray: com.badlogic.gdx.utils.ShortArray with(short[])
com.google.android.material.chip.Chip: android.graphics.Rect getCloseIconTouchBoundsInt()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_FORMAT_RGBA4444
com.badlogic.gdx.Input$Keys: int INSERT
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.esotericsoftware.jsonbeans.ObjectMap$Entries: boolean hasNext()
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.Sprite newSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion)
com.badlogic.gdx.math.MathUtils: boolean isEqual(float,float,float)
com.badlogic.gdx.utils.GdxRuntimeException: GdxRuntimeException(java.lang.String)
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String toString()
com.badlogic.gdx.backends.android.AndroidInput: float getPressure()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.backends.android.AndroidInput: boolean[] keys
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor av
com.badlogic.gdx.math.Frustum: boolean sphereInFrustumWithoutNearFar(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool: com.badlogic.gdx.graphics.g3d.Renderable newObject()
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectIntMap attributeSizes
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size: com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics getMetrics()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: boolean isTouched()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glTexParameterf(int,int,float)
com.badlogic.gdx.graphics.g2d.NinePatch: float padRight
com.badlogic.gdx.backends.android.AndroidGL30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: DynamicsModifier(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.utils.Array: java.util.Iterator iterator()
com.badlogic.gdx.utils.IntArray: int peek()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: long time
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: float getAmountX()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Pointer: FreeType$Pointer(long)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegionX(int)
com.badlogic.gdx.utils.IntSet: boolean add(int)
com.badlogic.gdx.utils.FlushablePool: void free(java.lang.Object)
com.badlogic.gdx.Input$Keys: int E
com.badlogic.gdx.scenes.scene2d.ui.Container: boolean round
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
androidx.appcompat.widget.AppCompatEditText
androidx.recyclerview.widget.RecyclerView: void setHasFixedSize(boolean)
com.badlogic.gdx.graphics.GL20: int GL_CW
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: java.lang.reflect.Field field
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFNE
com.badlogic.gdx.graphics.GL20: void glFramebufferTexture2D(int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: void begin()
com.badlogic.gdx.utils.BufferUtils: void copyJni(int[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Label: boolean textEquals(java.lang.CharSequence)
com.esotericsoftware.kryo.io.ByteBufferInput: long skip(long)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: com.badlogic.gdx.utils.Array renderData
com.badlogic.gdx.graphics.PixmapIO$PNG: void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters
com.esotericsoftware.kryonet.rmi.ObjectSpace: byte kReturnValMask
com.badlogic.gdx.physics.box2d.World$2
androidx.appcompat.widget.SearchView: int getInputType()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean getVariableSizeKnobs()
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters: PolygonRegionLoader$PolygonRegionParameters()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(long[])
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.math.Vector3 scale
com.badlogic.gdx.scenes.scene2d.ui.TextField: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener listener
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int getItemCount()
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_INDEX
com.badlogic.gdx.backends.android.AndroidMusic: com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.utils.ObjectMap: int mask
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.Array createSprites()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: BaseTransientBottomBar$SnackbarBaseLayout(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory unsafeFieldFactory
com.esotericsoftware.kryo.util.IdentityMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.esotericsoftware.kryo.Kryo: Kryo(com.esotericsoftware.kryo.ReferenceResolver)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: boolean isDirty
com.badlogic.gdx.utils.FloatArray: boolean removeValue(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setMaxParticleCount(int)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool
com.badlogic.gdx.math.MathUtils: MathUtils()
com.esotericsoftware.kryonet.rmi.ObjectSpace: void registerClasses(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.graphics.GL20: int GL_CCW
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters: boolean forceTextureFilters
com.badlogic.gdx.graphics.glutils.ShapeRenderer: boolean isDrawing()
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector scl(float)
com.badlogic.gdx.utils.IntIntMap$Keys: void reset()
com.esotericsoftware.reflectasm.FieldAccess: boolean getBoolean(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: com.badlogic.gdx.graphics.g3d.utils.TextureBinder textureBinder
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21: DefaultShader$Setters$21()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: int getHeight()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void flush()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: void remove()
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField
com.badlogic.gdx.physics.box2d.World: void jniClearForces(long)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: boolean act(float)
com.badlogic.gdx.math.Polygon: boolean dirty
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: int internalFormat
com.badlogic.gdx.utils.compression.lz.InWindow: boolean _streamEndWasReached
com.badlogic.gdx.backends.android.AndroidGL20: void glEnableVertexAttribArray(int)
com.badlogic.gdx.input.RemoteInput: boolean isButtonJustPressed(int)
com.badlogic.gdx.utils.Json: void setEnumNames(boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean hasKerning(long)
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int PosPrev
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder
com.HyperSphere.Connection.PacketObjects.Misc.EntityParticleEffect: java.lang.String entityID
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: void findNextIndex()
com.badlogic.gdx.utils.JsonValue: boolean isEmpty()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String StrictTransportSecurity
com.badlogic.gdx.backends.android.AndroidGL30: void glProgramParameteri(int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int S
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.FloatArray: void incr(int,float)
com.badlogic.gdx.math.Circle: void setX(float)
com.badlogic.gdx.graphics.glutils.VertexArray: int getNumMaxVertices()
com.badlogic.gdx.utils.StringBuilder: void delete0(int,int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output)
com.HyperSphere.Connection.PacketObjects.Purchase.Purchaseable: Purchaseable(short,java.lang.String)
com.badlogic.gdx.assets.AssetLoadingTask: void handleAsyncLoader()
com.badlogic.gdx.utils.LittleEndianInputStream: short readShort()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: void computeSize()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: void visitEnum(java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: void setTile(com.badlogic.gdx.maps.tiled.TiledMapTile)
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: float hexSideLength
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.scenes.scene2d.ui.Window: void setResizeBorder(int)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.Preferences: boolean contains(java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.glutils.VertexBufferObject: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element root
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float max
com.badlogic.gdx.scenes.scene2d.ui.TextArea: float getPrefHeight()
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void setMaxForce(float)
com.badlogic.gdx.backends.android.InputProcessorLW: boolean keyDown(int)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: int Price
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void line(short,short)
com.badlogic.gdx.math.Plane: Plane()
com.HyperSphere.Connection.PacketObjects.Misc.Item: java.lang.String description
com.esotericsoftware.kryonet.Client: com.esotericsoftware.kryonet.Serialization getSerialization()
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: int executedCount
com.badlogic.gdx.utils.reflect.ReflectionException: ReflectionException(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float getTapSquareSize()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isScrollX()
com.badlogic.gdx.input.RemoteInput: com.badlogic.gdx.Input$Orientation getNativeOrientation()
com.google.android.material.card.MaterialCardView: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Object[])
com.badlogic.gdx.backends.android.AndroidInput$3$3
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: void setValue(float)
com.badlogic.gdx.graphics.glutils.IndexBufferObject
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: com.badlogic.gdx.math.Vector2 localAnchorA
com.badlogic.gdx.backends.android.AndroidMusic: float getPosition()
com.badlogic.gdx.graphics.GL30: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Connection
com.badlogic.gdx.Graphics: float getPpiY()
com.badlogic.gdx.utils.ComparableTimSort: void doSort(java.lang.Object[],int,int)
com.badlogic.gdx.math.Intersector: void splitTriangle(float[],com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Intersector$SplitTriangle)
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color TAN
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: void updateImage()
com.badlogic.gdx.graphics.GL30: void glRenderbufferStorageMultisample(int,int,int,int,int)
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER15
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.Array elements
com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility: com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V2
com.badlogic.gdx.utils.SharedLibraryLoader: void load(java.lang.String)
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe: float keytime
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler: void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput)
com.badlogic.gdx.graphics.g3d.Attribute: long getAttributeType(java.lang.String)
com.badlogic.gdx.math.Affine2: Affine2()
com.HyperSphere.Connection.PacketObjects.Map.MapChange: java.lang.String key
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IASTORE
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library library
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect: void free()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer renderer
com.badlogic.gdx.scenes.scene2d.Actor: void sizeChanged()
com.esotericsoftware.kryo.util.IntArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void setDefaultCullFace(int)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter: java.lang.String fragmentFile
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_IsRep0LongDecoders
com.badlogic.gdx.graphics.g3d.decals.Decal: float[] vertices
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: int mRedSize
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: com.esotericsoftware.kryo.Serializer serializer
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int dodge
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float topHeight
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector d
com.badlogic.gdx.scenes.scene2d.Stage: void draw()
com.badlogic.gdx.backends.android.AndroidGL30: int glGetUniformBlockIndex(int,java.lang.String)
com.google.android.material.bottomappbar.BottomAppBar: android.content.res.ColorStateList getBackgroundTint()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean selectSize(long,int)
com.badlogic.gdx.physics.box2d.ContactImpulse: float[] getNormalImpulses()
com.badlogic.gdx.utils.Logger: int INFO
com.esotericsoftware.kryonet.Listener$LagListener: java.util.LinkedList runnables
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float[] scaling
com.esotericsoftware.kryo.io.Input: float readFloat(float,boolean)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void setMinWidth(float)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: void update(float)
com.esotericsoftware.jsonbeans.Json
com.badlogic.gdx.graphics.g3d.decals.GroupPlug: void afterGroup()
androidx.fragment.app.Fragment: android.content.Context getContext()
com.badlogic.gdx.graphics.GL20: int GL_MEDIUM_FLOAT
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity requireActivity()
androidx.appcompat.widget.AppCompatSpinner: int getDropDownHorizontalOffset()
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode valueOf(java.lang.String)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 mulLeft(com.badlogic.gdx.math.Matrix4)
com.HyperSphere.Connection.PacketObjects.Misc.EntityParticleEffect: EntityParticleEffect()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void requestRender()
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters: java.lang.String[] textureExtensions
com.badlogic.gdx.backends.android.AndroidDaydream: android.os.Handler getHandler()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniformMatrix3fv(int,int,boolean,float[],int)
com.badlogic.gdx.backends.android.AndroidInput: android.hardware.SensorEventListener compassListener
com.badlogic.gdx.assets.loaders.SoundLoader: com.badlogic.gdx.audio.Sound getLoadedSound()
com.badlogic.gdx.maps.tiled.TiledMapTileSets: com.badlogic.gdx.utils.Array tilesets
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider: com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config config
com.badlogic.gdx.Screen: void show()
com.badlogic.gdx.input.GestureDetector: void setTapRectangleSize(float,float)
com.badlogic.gdx.graphics.TextureArrayData: int getDepth()
com.badlogic.gdx.audio.Music: void stop()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation pow3InInverse
com.badlogic.gdx.physics.box2d.ContactImpulse: int jniGetCount(long)
com.badlogic.gdx.scenes.scene2d.ui.List$2: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: java.util.concurrent.locks.Condition responseCondition
com.badlogic.gdx.graphics.glutils.InstanceData: void updateInstanceData(int,float[],int,int)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void translateY(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random
com.badlogic.gdx.scenes.scene2d.ui.Value$10: float val$percent
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean hasKerning()
com.badlogic.gdx.backends.android.AndroidNet: com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node set(com.badlogic.gdx.graphics.g3d.model.Node)
com.badlogic.gdx.Input$Keys: int F9
com.badlogic.gdx.physics.box2d.Body: void jniSetAwake(long,boolean)
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.graphics.Texture getTexture()
com.badlogic.gdx.Application: com.badlogic.gdx.Graphics getGraphics()
com.esotericsoftware.kryonet.Server: void sendToTCP(int,java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: com.badlogic.gdx.utils.Array getRegions()
com.badlogic.gdx.graphics.g2d.PolygonRegion: com.badlogic.gdx.graphics.g2d.TextureRegion region
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.utils.Base64Coder$CharMap
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LREM
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(boolean,int)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: Packet(short,java.lang.Object,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.Array getRunnables()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,int,float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: Box2DDebugRenderer()
com.badlogic.gdx.utils.ObjectIntMap: int getAndIncrementStash(java.lang.Object,int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void invalidate()
com.badlogic.gdx.graphics.glutils.KTXTextureData: int pixelHeight
com.badlogic.gdx.utils.ByteArray: void shuffle()
com.badlogic.gdx.scenes.scene2d.Group: boolean isTransform()
androidx.appcompat.widget.FitWindowsLinearLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.Json: java.lang.String toJson(java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.Array getRegions()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void line(short,short)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void error(java.lang.String,java.lang.String)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int MASK_CLEAR
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetSpringDampingRatio(long)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe: java.lang.Object value
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
androidx.appcompat.widget.AppCompatRadioButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.ui.Stack: float maxWidth
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: long EnvironmentMap
com.badlogic.gdx.utils.ComparableTimSort: int INITIAL_TMP_STORAGE_LENGTH
com.badlogic.gdx.maps.MapLayers: int size()
com.badlogic.gdx.Net$HttpRequest: void setContent(java.io.InputStream,long)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: java.lang.String path
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padRight(float)
com.badlogic.gdx.utils.UBJsonReader
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,int,com.badlogic.gdx.graphics.g3d.model.MeshPart)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float)
com.badlogic.gdx.assets.AssetManager: void incrementRefCountedDependencies(java.lang.String)
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer: OrthogonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4: int val$keycode
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
com.badlogic.gdx.backends.android.AndroidInput$3$2: com.badlogic.gdx.backends.android.AndroidInput$3 this$1
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory: GLSurfaceView20API18$ContextFactory()
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(int,int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean vScrollOnRight
com.badlogic.gdx.graphics.glutils.GLFrameBuffer
com.badlogic.gdx.maps.MapLayer: void setOpacity(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.utils.Array usedArrays
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput(byte[])
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int mapTileHeight
com.badlogic.gdx.Input$Keys: int GRAVE
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter: ModelCache$Sorter()
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: int getGLType()
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Input getInput()
com.badlogic.gdx.math.collision.Segment: boolean equals(java.lang.Object)
com.esotericsoftware.kryo.serializers.ObjectField: ObjectField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.utils.Predicate$PredicateIterable: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int WEIGHTED
com.esotericsoftware.kryo.serializers.BeanSerializer$1
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.assets.AssetManager: int getQueuedAssets()
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: DelayAction()
com.badlogic.gdx.graphics.GL20: int GL_SAMPLE_ALPHA_TO_COVERAGE
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: long vertexMask
com.badlogic.gdx.math.Polygon: void setRotation(float)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean varIntsEnabled
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject: void setFlipVertically(boolean)
com.badlogic.gdx.Input$Keys: com.badlogic.gdx.utils.ObjectIntMap keyNames
com.badlogic.gdx.utils.BufferUtils: long find(java.nio.Buffer,int,int,float[],int,int,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(java.lang.Class)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: int compareTo(java.lang.Object)
com.badlogic.gdx.graphics.g2d.NinePatch: NinePatch(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_pointLights0intensity
com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.maps.Map: void dispose()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int CHECKCAST
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,java.lang.String,boolean,boolean)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Input getInput(byte[])
com.badlogic.gdx.utils.ByteArray: void addAll(com.badlogic.gdx.utils.ByteArray)
com.badlogic.gdx.Input$Keys: int F8
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.utils.Pool: void clear()
com.badlogic.gdx.graphics.GL20: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getStyleFlags()
com.badlogic.gdx.utils.TimSort: int MIN_GALLOP
com.badlogic.gdx.utils.JsonValue: boolean asBoolean()
com.badlogic.gdx.backends.android.AndroidAudioDevice: int latency
com.badlogic.gdx.scenes.scene2d.ui.Cell: float actorY
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setFromEulerAngles(float,float,float)
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.utils.FlushablePool meshPartPool
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: void onVisibilityChanged(boolean)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.utils.ArrayMap$Keys: void remove()
com.google.android.material.chip.Chip: void setCloseIconTintResource(int)
androidx.appcompat.widget.AppCompatSpinner: androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup getInternalPopup()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: int kGLES_20
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFramebufferTextureLayer(int,int,int,int,int)
com.badlogic.gdx.math.Rectangle: Rectangle(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: com.badlogic.gdx.scenes.scene2d.ui.Label label
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: void renderCell(com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell,float,float,float)
com.badlogic.gdx.physics.box2d.joints.RopeJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: void update()
com.badlogic.gdx.maps.tiled.TiledMapTileSets: TiledMapTileSets()
androidx.recyclerview.widget.RecyclerView: void setItemViewCacheSize(int)
com.badlogic.gdx.physics.box2d.Transform: com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: int index
com.badlogic.gdx.utils.FloatArray: void add(float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int norOffset
com.badlogic.gdx.assets.loaders.BitmapFontLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float getX()
com.badlogic.gdx.assets.RefCountedContainer: void decRefCount()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: int api
com.badlogic.gdx.utils.JsonValue: void setPrev(com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.jsonbeans.JsonReader: void bool(java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.Action: Action()
com.badlogic.gdx.net.ServerSocket
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory
com.badlogic.gdx.math.Interpolation$ElasticIn: float apply(float)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void setExpanded(boolean)
com.badlogic.gdx.utils.ArrayMap: boolean notEmpty()
com.badlogic.gdx.utils.compression.lzma.Decoder: Decoder()
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int d
com.badlogic.gdx.utils.Pool: Pool(int)
com.esotericsoftware.kryo.io.ByteBufferInput: void setBuffer(byte[])
com.badlogic.gdx.Input$Keys: int NUMPAD_7
com.google.android.material.internal.NavigationMenuItemView: void setIcon(android.graphics.drawable.Drawable)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerWidth()
com.badlogic.gdx.utils.NumberUtils: float intBitsToFloat(int)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.math.Matrix4 projectionMatrix
androidx.fragment.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void a(int[],int[],com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer: void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting Slight
com.badlogic.gdx.backends.android.AndroidWallpaperListener: void iconDropped(int,int)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int)
com.esotericsoftware.kryo.io.Input: int readInt(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int GETSTATIC
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder followRedirects(boolean)
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: int[] pads
com.badlogic.gdx.math.Intersector: boolean overlaps(com.badlogic.gdx.math.Circle,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.GL20: int GL_SAMPLES
com.badlogic.gdx.graphics.g3d.Shader: void dispose()
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Bezier set(com.badlogic.gdx.math.Vector[],int,int)
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy: void afterGroup(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal[] _optimum
com.badlogic.gdx.utils.StringBuilder: void append0(java.lang.CharSequence,int,int)
com.badlogic.gdx.scenes.scene2d.InputEvent: void setKeyCode(int)
com.badlogic.gdx.Application: com.badlogic.gdx.Net getNet()
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Keys keys2
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean cancelTouchFocus
com.badlogic.gdx.graphics.glutils.IndexData: void setIndices(java.nio.ShortBuffer)
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void render(int[])
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getWidth()
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void Encode(short[],int,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: boolean isCompiled
com.badlogic.gdx.physics.box2d.Contact: int getChildIndexB()
com.badlogic.gdx.graphics.GL20: int GL_HIGH_FLOAT
com.badlogic.gdx.backends.android.AndroidEventListener
com.badlogic.gdx.scenes.scene2d.ui.Stack: boolean sizeInvalid
com.badlogic.gdx.maps.MapProperties: java.lang.Object get(java.lang.String,java.lang.Object,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: ParticleControllerFinalizerInfluencer()
com.badlogic.gdx.graphics.g2d.ParticleEffect: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.esotericsoftware.jsonbeans.Json: java.lang.String prettyPrint(java.lang.Object,int)
com.badlogic.gdx.utils.IntMap: void removeStashIndex(int)
com.badlogic.gdx.utils.LongMap: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter: TextField$TextFieldFilter$DigitsOnlyFilter()
com.badlogic.gdx.graphics.g3d.environment.SpotLight
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector[] controlPoints
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useRotationVectorSensor
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button,java.lang.Object)
com.badlogic.gdx.utils.ObjectIntMap$Entries: com.badlogic.gdx.utils.ObjectIntMap$Entry next()
com.badlogic.gdx.graphics.VertexAttribute: int usageIndex
com.badlogic.gdx.graphics.g2d.NinePatch: int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,boolean,boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2iv(int,int,java.nio.IntBuffer)
androidx.fragment.app.Fragment: void noteStateNotSaved()
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setDragActorPosition(float,float)
com.badlogic.gdx.math.Bezier: Bezier(com.badlogic.gdx.math.Vector[],int,int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int,short[],int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ASTORE
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void flush(int[])
com.badlogic.gdx.graphics.Texture: java.lang.String toString()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: int id
com.badlogic.gdx.InputEventQueue: int SCROLLED
com.badlogic.gdx.scenes.scene2d.utils.Drawable: float getRightWidth()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_environmentCubemap
com.badlogic.gdx.utils.JsonValue: char getChar(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,int)
com.badlogic.gdx.scenes.scene2d.ui.Button: void initialize()
com.badlogic.gdx.backends.android.AndroidGL30: void glUniform3uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.IntArray: IntArray(boolean,int)
com.esotericsoftware.kryo.io.KryoDataOutput: void writeChars(java.lang.String)
com.badlogic.gdx.net.HttpStatus: int SC_NOT_MODIFIED
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int I2B
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RepeatAction repeat(int,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void allocRenderables(int)
com.esotericsoftware.kryo.util.Util: long swapLong(long)
com.badlogic.gdx.scenes.scene2d.Actor: boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
androidx.appcompat.widget.LinearLayoutCompat: int getShowDividers()
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteRenderbuffer(int)
com.esotericsoftware.kryonet.TcpConnection: java.lang.Object readObject(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
com.badlogic.gdx.maps.objects.TextureMapObject: void setY(float)
com.badlogic.gdx.backends.android.AndroidApplication: android.os.Handler getHandler()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: com.badlogic.gdx.maps.tiled.TiledMapTile tile
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1: int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput(java.io.OutputStream)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext)
com.esotericsoftware.kryo.serializers.CollectionSerializer: CollectionSerializer()
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void setClass(java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.MapChange: java.util.ArrayList listObstacle
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib1f(int,float)
com.esotericsoftware.jsonbeans.Json: void toJson(java.lang.Object,java.lang.Class,java.io.Writer)
com.esotericsoftware.kryonet.ClientDiscoveryHandler: java.net.DatagramPacket onRequestNewDatagramPacket()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(long,com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.GL30: void glDepthMask(boolean)
androidx.appcompat.view.menu.ActionMenuItemView: void setCheckable(boolean)
com.badlogic.gdx.utils.JsonWriter$OutputType: java.util.regex.Pattern minimalValuePattern
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp3
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_REF
com.HyperSphere.Connection.PacketObjects.Misc.Item: int armor
com.badlogic.gdx.math.Vector2: Vector2()
com.badlogic.gdx.graphics.PixmapIO: void writeCIM(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
com.esotericsoftware.jsonbeans.JsonValue: double getDouble(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getIconTintMode()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.math.GridPoint2: GridPoint2(int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect: Table$DebugRect()
com.badlogic.gdx.backends.android.AndroidApplication: void removeLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.assets.AssetManager: boolean update()
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: CheckBox(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.Application: void error(java.lang.String,java.lang.String)
com.badlogic.gdx.maps.MapLayers
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void setTarget(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Rectangle: float getHeight()
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Object access
com.badlogic.gdx.backends.android.AndroidGL30: void glBindBufferBase(int,int,int)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.utils.Array fixtures
com.HyperSphere.Connection.PacketObjects.Misc.Item: int dodge
com.google.firebase.datatransport.TransportRegistrar
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter set(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectIntMap uniforms
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: com.badlogic.gdx.graphics.TextureData[] textureDatas
com.esotericsoftware.kryo.util.IntMap: int threshold
com.badlogic.gdx.utils.viewport.Viewport: void setWorldSize(float,float)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: void update(float,float,long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FCONST_1
com.badlogic.gdx.math.GridPoint2: long serialVersionUID
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: void setAmount(float,float)
com.badlogic.gdx.math.Polyline: void setPosition(float,float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_SWIZZLE_B
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Quaternion quat
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector putByte(int)
com.badlogic.gdx.utils.Predicate$PredicateIterator: Predicate$PredicateIterator(java.util.Iterator,com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.graphics.GL30: void glDeleteQueries(int,int[],int)
com.esotericsoftware.kryo.util.IdentityMap: int stashSize
com.badlogic.gdx.math.Plane: com.badlogic.gdx.math.Plane$PlaneSide testPoint(float,float,float)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: ParticleShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: com.badlogic.gdx.graphics.GLTexture texture
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: int[] sync
com.esotericsoftware.jsonbeans.Json: java.lang.String prettyPrint(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsEnabled(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: int getNumMaxInstances()
com.esotericsoftware.kryo.io.KryoDataOutput: void writeInt(int)
com.badlogic.gdx.scenes.scene2d.ui.Skin$3: com.badlogic.gdx.files.FileHandle val$skinFile
com.badlogic.gdx.graphics.g2d.PolygonSprite: void scale(float)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2: com.badlogic.gdx.graphics.Camera val$camera
com.badlogic.gdx.graphics.GL30: void glDeleteSamplers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 set(float[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector linear_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: int getNumMaxIndices()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1f(int,float)
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: int bufferHandle
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ensureTriangleIndices(int)
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: GradientColorValue()
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver: ResolutionFileResolver(com.badlogic.gdx.assets.loaders.FileHandleResolver,com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[])
com.badlogic.gdx.scenes.scene2d.ui.List: void setSelectedIndex(int)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: FileTextureArrayData(com.badlogic.gdx.graphics.Pixmap$Format,boolean,com.badlogic.gdx.files.FileHandle[])
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToShearing(float,float)
com.badlogic.gdx.graphics.g3d.model.MeshPart: MeshPart(com.badlogic.gdx.graphics.g3d.model.MeshPart)
com.badlogic.gdx.scenes.scene2d.ui.List$2: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean resume
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: float checkedOffsetY
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.collision.Ray ray
com.badlogic.gdx.backends.android.AndroidGL30: int glGetFragDataLocation(int,java.lang.String)
com.esotericsoftware.kryo.serializers.MapSerializer: void setKeysCanBeNull(boolean)
com.badlogic.gdx.graphics.GL20: int GL_INCR
com.esotericsoftware.kryo.util.IdentityObjectIntMap: IdentityObjectIntMap()
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.utils.LongArray: void clear()
com.badlogic.gdx.Input: boolean isCatchMenuKey()
com.badlogic.gdx.utils.LongArray: void incr(int,long)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.content.Context getContext()
com.badlogic.gdx.graphics.Color: int luminanceAlpha(float,float)
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_single_lengths_0()
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int)
androidx.fragment.app.Fragment: void performMultiWindowModeChanged(boolean)
com.badlogic.gdx.Input$Keys: int NUMPAD_2
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String AcceptCharset
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void checkRenderThreadState()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int m
com.badlogic.gdx.math.FloatCounter: float min
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format Alpha
com.badlogic.gdx.graphics.Cubemap: int getWidth()
com.badlogic.gdx.backends.android.AndroidGL30: AndroidGL30()
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral[] values()
com.badlogic.gdx.scenes.scene2d.Actor: void sizeBy(float)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int getBlendSrcFunc()
com.badlogic.gdx.utils.FloatArray: float removeIndex(int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.utils.Array layouts
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter: ParticleEffectLoader$ParticleEffectParameter()
com.badlogic.gdx.physics.box2d.ChainShape: void createLoop(float[],int,int)
com.esotericsoftware.kryo.io.UnsafeInput: boolean getVarIntsEnabled()
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: SplitPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)
androidx.appcompat.widget.ActionBarContextView: void setTitleOptional(boolean)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 setLength(float)
com.badlogic.gdx.Gdx: com.badlogic.gdx.graphics.GL20 gl20
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData)
com.badlogic.gdx.utils.PauseableThread: void onPause()
com.badlogic.gdx.physics.box2d.Transform: int POS_Y
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setTile(com.badlogic.gdx.maps.tiled.TiledMapTile)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: com.badlogic.gdx.graphics.Pixmap getPixmap(com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.graphics.Color,float)
com.badlogic.gdx.utils.TextFormatter: java.lang.String simpleFormat(java.lang.String,java.lang.Object[])
com.badlogic.gdx.graphics.g3d.Attributes: int attributesHash()
com.badlogic.gdx.graphics.g3d.decals.Decal: void setRotation(float,float,float)
com.badlogic.gdx.scenes.scene2d.Actor: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: int loopCount
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void update(float)
androidx.fragment.app.Fragment: boolean mInLayout
com.esotericsoftware.kryonet.Server: void addListener(com.esotericsoftware.kryonet.Listener)
com.esotericsoftware.kryo.Registration: java.lang.Class type
com.badlogic.gdx.Application: int LOG_DEBUG
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getMinHeight()
com.badlogic.gdx.InputEventQueue: int KEY_TYPED
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float getRatio()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getWidth()
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void circle(float,float,float,int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.maps.tiled.TiledMapTile: int getId()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Generics getGenericsScope()
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float touchDownY
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: boolean remoteToString
com.esotericsoftware.kryo.util.IntMap$Entries: com.esotericsoftware.kryo.util.IntMap$Entry entry
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Constructor[] getConstructors(java.lang.Class)
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _isRepG0
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getMaxAdvanceWidth(long)
com.badlogic.gdx.graphics.GL30: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
androidx.appcompat.widget.AppCompatTextView: android.view.textclassifier.TextClassifier getTextClassifier()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mRequestRender
com.badlogic.gdx.scenes.scene2d.InputListener: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.graphics.GL30: void glRenderbufferStorage(int,int,int,int)
com.esotericsoftware.kryonet.KryoSerialization: com.esotericsoftware.kryo.io.ByteBufferOutput output
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void updateVertices(int,float[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Button$1: com.badlogic.gdx.scenes.scene2d.ui.Button this$0
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: com.badlogic.gdx.backends.android.AndroidInput input
com.badlogic.gdx.math.EarClippingTriangulator: EarClippingTriangulator()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 getAxis()
com.badlogic.gdx.Files$FileType
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int I2D
com.esotericsoftware.kryo.Kryo: boolean getReferences()
com.badlogic.gdx.utils.ObjectMap: java.lang.Object removeStash(java.lang.Object)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: DirectionalLightsAttribute(com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.utils.Array debugRects
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.Net$HttpRequest build()
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setShowMotionSpecResource(int)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool: com.badlogic.gdx.graphics.g2d.ParticleEffect effect
com.esotericsoftware.kryo.io.ByteBufferInput: boolean isNativeOrder()
com.esotericsoftware.kryonet.Server: int nextConnectionID
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: DefaultShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config,java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int[] f
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.utils.Select: int selectIndex(java.lang.Object[],java.util.Comparator,int,int)
com.badlogic.gdx.graphics.GL20: void glEnableVertexAttribArray(int)
com.badlogic.gdx.graphics.GL30: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int getNumIndices()
com.badlogic.gdx.math.MathUtils: float norm(float,float,float)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor
com.google.android.material.internal.ForegroundLinearLayout: android.graphics.drawable.Drawable getForeground()
androidx.appcompat.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)
androidx.fragment.app.Fragment: boolean mRetainInstanceChangedWhileDetached
com.badlogic.gdx.graphics.glutils.VertexBufferObject: java.nio.FloatBuffer getBuffer()
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: int STRAFE_LEFT
com.google.android.material.internal.BaselineLayout
com.esotericsoftware.kryonet.Connection: java.lang.Object listenerLock
com.badlogic.gdx.utils.IdentityMap$Entries: IdentityMap$Entries(com.badlogic.gdx.utils.IdentityMap)
com.badlogic.gdx.utils.Align: Align()
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: com.badlogic.gdx.math.Vector2 groundAnchorA
com.badlogic.gdx.graphics.GL20: int GL_RGB565
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glFrontFace(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindFramebuffer(int,int)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: ClickListener(int)
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: void bind()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.Input$Keys: int NUM_2
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: boolean hasDepthStencilPackedBuffer
com.badlogic.gdx.math.Interpolation$ExpIn
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(java.nio.ByteBuffer)
com.badlogic.gdx.physics.box2d.Fixture: void setDensity(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float windDiff
com.badlogic.gdx.backends.android.AndroidPreferences: long getLong(java.lang.String,long)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: com.badlogic.gdx.scenes.scene2d.Actor dragActor
com.esotericsoftware.kryonet.Listener$ReflectionListener: Listener$ReflectionListener()
com.badlogic.gdx.math.Interpolation
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int CASTORE
com.badlogic.gdx.files.FileHandle: int hashCode()
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.reflect.Method findMethod(java.lang.Class,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: java.lang.String defaultVertexShader
com.badlogic.gdx.backends.android.AndroidInput: float inclination
com.badlogic.gdx.math.Ellipse: boolean contains(float,float)
com.badlogic.gdx.graphics.g3d.model.MeshPart: void render(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.kryo.util.ObjectMap: int PRIME2
com.badlogic.gdx.math.Vector2: boolean hasSameDirection(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: Emitter()
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.Pixmap$Format format
com.badlogic.gdx.math.MathUtils: float nanoToSec
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool: com.badlogic.gdx.graphics.Mesh obtain(com.badlogic.gdx.graphics.VertexAttributes,int,int)
com.badlogic.gdx.utils.ByteArray: byte get(int)
com.esotericsoftware.kryo.io.Output: void setBuffer(byte[])
com.badlogic.gdx.Net$HttpMethods: java.lang.String POST
com.badlogic.gdx.assets.AssetDescriptor: AssetDescriptor(java.lang.String,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.Cell imageCell
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.badlogic.gdx.Input$Keys: int NUM
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container size(float)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: void result(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: void setVisualInterpolation(com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.Input$Keys: int AT
com.badlogic.gdx.graphics.glutils.ShaderProgram: void compileShaders(java.lang.String,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGraphics: void onDrawFrame(javax.microedition.khronos.opengles.GL10)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FNEG
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color clamp()
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue next()
com.esotericsoftware.kryo.util.IdentityMap$MapIterator
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: com.esotericsoftware.kryo.Kryo kryo
androidx.appcompat.widget.LinearLayoutCompat: int getBaseline()
com.badlogic.gdx.utils.IntSet$IntSetIterator: void findNextIndex()
com.badlogic.gdx.assets.AssetManager: void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters)
com.esotericsoftware.kryonet.Listener$QueuedListener$3
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void setLowMin(float)
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.ObjectMap classToSerializer
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: com.badlogic.gdx.utils.Array controllersRenderData
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_VALUE_MASK
com.badlogic.gdx.input.RemoteInput: int getMaxPointers()
com.badlogic.gdx.graphics.glutils.ShaderProgram: int program
com.badlogic.gdx.graphics.Camera: void lookAt(float,float,float)
com.esotericsoftware.kryo.util.MapReferenceResolver: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.utils.ArrayMap: void resize(int)
com.badlogic.gdx.utils.XmlWriter: com.badlogic.gdx.utils.XmlWriter attribute(java.lang.String,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type INT_TYPE
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.AndroidGraphics: float density
com.badlogic.gdx.scenes.scene2d.utils.DragListener
com.esotericsoftware.kryo.util.IdentityMap$Keys: java.util.ArrayList toArray()
com.badlogic.gdx.math.Circle: boolean contains(com.badlogic.gdx.math.Circle)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int getNumVertices()
com.badlogic.gdx.physics.box2d.World: long jniCreateRopeJoint(long,long,long,boolean,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.Contact: void resetFriction()
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType FaceB
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void scheduleKeyRepeatTask(int)
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject
com.badlogic.gdx.physics.box2d.ContactImpulse: long addr
com.esotericsoftware.kryo.util.IntMap: java.lang.String toString()
com.esotericsoftware.kryo.util.IntMap: int[] keyTable
com.badlogic.gdx.net.HttpStatus: int SC_PAYMENT_REQUIRED
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setOnlyFontChars(boolean)
com.google.android.material.card.MaterialCardView: void setUseCompatPadding(boolean)
com.badlogic.gdx.graphics.glutils.PixmapTextureData: com.badlogic.gdx.graphics.Pixmap pixmap
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue: LineSpawnShapeValue()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.utils.viewport.Viewport getViewport()
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.math.Vector2 tempCoords
com.badlogic.gdx.utils.PooledLinkedList$Item: com.badlogic.gdx.utils.PooledLinkedList$Item prev
com.badlogic.gdx.math.WindowedMean: float getMean()
com.badlogic.gdx.utils.IntArray: void mul(int,int)
com.badlogic.gdx.Input$Keys: int T
com.badlogic.gdx.math.MathUtils: float log(float,float)
com.badlogic.gdx.maps.MapLayer: void invalidateRenderOffset()
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable selection
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item g
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short,java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE2
com.badlogic.gdx.graphics.GL30: void glFinish()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory: void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setExtended(boolean)
com.badlogic.gdx.graphics.g2d.Sprite: void setRotation(float)
com.badlogic.gdx.utils.ArrayMap: void shrink()
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: float[] vertices
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.math.Rectangle cullingArea
com.badlogic.gdx.graphics.g3d.utils.RenderContext: boolean blending
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: float invTexWidth
com.badlogic.gdx.Input$Keys: int H
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glStencilOp(int,int,int)
com.esotericsoftware.kryonet.Listener$QueuedListener$1: Listener$QueuedListener$1(com.esotericsoftware.kryonet.Listener$QueuedListener,com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.Stage: boolean getActionsRequestRendering()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: float borderWidth
com.esotericsoftware.kryo.util.IdentityMap$Keys: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String,int)
com.badlogic.gdx.graphics.GL30: void glUniform2iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.ShortArray: boolean contains(short)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3: ParticleShader$Setters$3()
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus
com.badlogic.gdx.scenes.scene2d.ui.Widget: void setLayoutEnabled(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DMUL
com.badlogic.gdx.backends.android.AndroidInput: boolean[] justPressedButtons
com.badlogic.gdx.physics.box2d.Contact: int jniGetWorldManifold(long,float[])
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.esotericsoftware.kryo.io.ByteBufferOutput: void setVarIntsEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType Local
com.badlogic.gdx.backends.android.AndroidInput: android.hardware.SensorManager manager
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode align
com.badlogic.gdx.utils.DelayedRemovalArray: void begin()
com.badlogic.gdx.utils.viewport.ScalingViewport: com.badlogic.gdx.utils.Scaling getScaling()
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColors(float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_ABSTRACT
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: ModelInstanceParticleBatch()
com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader get(java.lang.Class)
com.badlogic.gdx.graphics.GL30: void glReadBuffer(int)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void drawContact(com.badlogic.gdx.physics.box2d.Contact)
com.badlogic.gdx.backends.android.AndroidDaydream
com.badlogic.gdx.graphics.Cubemap: void dispose()
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters: ModelLoader$ModelParameters()
com.badlogic.gdx.audio.AudioRecorder
com.google.android.material.behavior.SwipeDismissBehavior
com.badlogic.gdx.graphics.glutils.FacedCubemapData: void prepare()
com.badlogic.gdx.math.collision.Ray: long serialVersionUID
com.badlogic.gdx.physics.box2d.ContactImpulse: float[] normalImpulses
com.badlogic.gdx.graphics.glutils.ShaderProgram: ShaderProgram(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.esotericsoftware.jsonbeans.Json: java.lang.String toJson(java.lang.Object,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.utils.SortedIntList$NodePool: com.badlogic.gdx.utils.SortedIntList$Node obtain(com.badlogic.gdx.utils.SortedIntList$Node,com.badlogic.gdx.utils.SortedIntList$Node,java.lang.Object,int)
androidx.recyclerview.widget.RecyclerView: void setScrollingTouchSlop(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.environment.PointLight
com.badlogic.gdx.utils.ObjectFloatMap: int PRIME2
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.Graphics: int getBackBufferWidth()
com.badlogic.gdx.backends.android.AndroidGL20: int glGetAttribLocation(int,java.lang.String)
com.badlogic.gdx.utils.PooledLinkedList$Item: java.lang.Object payload
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType[] values()
com.badlogic.gdx.InputEventQueue: int MOUSE_MOVED
com.google.android.material.chip.Chip: void setShowMotionSpecResource(int)
com.esotericsoftware.kryonet.util.ObjectIntMap: java.lang.Object[] keyTable
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput(byte[],int)
com.badlogic.gdx.assets.AssetManager: int getReferenceCount(java.lang.String)
com.esotericsoftware.kryo.util.DefaultClassResolver: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.math.MathUtils: boolean isEqual(float,float)
com.badlogic.gdx.maps.tiled.TiledMapTileSet: java.lang.String getName()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel addChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor,com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer)
com.badlogic.gdx.utils.IntArray: void swap(int,int)
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.Environment,com.badlogic.gdx.graphics.g3d.Shader)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: java.lang.reflect.Field getField()
com.esotericsoftware.kryo.Generics: void setParentScope(com.esotericsoftware.kryo.Generics)
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.graphics.g3d.Renderable obtainRenderable(com.badlogic.gdx.graphics.g3d.Material,int)
com.badlogic.gdx.graphics.g2d.NinePatch: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniEnableMotor(long,boolean)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rect(float,float,float,float,float,float,float,float,float)
com.esotericsoftware.kryonet.Listener: void disconnected(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.math.Matrix4: int M20
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.utils.Array getFixtureList()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float overscrollSpeedMax
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraInvDirection
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.math.Vector: boolean isCollinear(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single: void init()
androidx.fragment.app.Fragment: java.lang.String getString(int,java.lang.Object[])
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.TimSort: int stackSize
androidx.appcompat.app.AppCompatActivity: void setContentView(android.view.View)
com.badlogic.gdx.math.Vector: boolean isZero()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniformMatrix4fv(int,int,boolean,float[],int)
com.badlogic.gdx.utils.viewport.Viewport: int getTopGutterHeight()
com.badlogic.gdx.utils.async.AsyncExecutor: AsyncExecutor(int,java.lang.String)
com.esotericsoftware.kryo.KryoSerializable: void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.utils.ArrayMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.graphics.glutils.ShaderProgram shader
com.esotericsoftware.jsonbeans.ObjectMap: int mask
com.esotericsoftware.kryonet.rmi.ObjectSpace: void invoke(com.esotericsoftware.kryonet.Connection,java.lang.Object,com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter
com.esotericsoftware.kryo.util.IdentityObjectIntMap: IdentityObjectIntMap(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitLabel(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean premultipliedAlpha
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void removeStashIndex(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int pointLightsSize
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: java.lang.String toString()
com.esotericsoftware.kryonet.KryoSerialization: KryoSerialization(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.InputEventQueue: boolean keyTyped(char)
com.google.android.gms.common.SupportErrorDialogFragment
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.KTXTextureData: void disposePreparedData()
com.esotericsoftware.kryonet.util.ObjectIntMap: float loadFactor
com.badlogic.gdx.graphics.GL20: int GL_DEPTH_BITS
com.badlogic.gdx.utils.Timer$Task: int repeatCount
com.esotericsoftware.reflectasm.FieldAccess: void setInt(java.lang.Object,int,int)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Matrix4 calculateWorldTransform()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable knob
com.badlogic.gdx.scenes.scene2d.Actor: boolean isTouchable()
com.badlogic.gdx.physics.box2d.Fixture: float jniGetRestitution(long)
com.esotericsoftware.kryo.io.Input: void readUtf8_slow(int,int)
com.esotericsoftware.kryo.io.Output: void flush()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 mulLeft(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.graphics.g2d.PixmapPacker: int getSplitPoint(com.badlogic.gdx.graphics.Pixmap,int,int,boolean,boolean)
com.badlogic.gdx.utils.LongArray: LongArray(boolean,long[],int,int)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: void advance()
androidx.appcompat.widget.Toolbar: int getContentInsetEnd()
com.esotericsoftware.kryo.util.IntMap: int stashCapacity
com.esotericsoftware.kryonet.Connection: void setTimeout(int)
com.badlogic.gdx.utils.PooledLinkedList: com.badlogic.gdx.utils.PooledLinkedList$Item tail
androidx.appcompat.widget.ActionBarOverlayLayout
com.badlogic.gdx.graphics.g2d.Sprite: void translateY(float)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel: com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0
com.badlogic.gdx.graphics.g2d.PolygonRegion: float[] getTextureCoords()
androidx.appcompat.widget.AppCompatSpinner: int getDropDownVerticalOffset()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float,float,float,float)
com.badlogic.gdx.assets.AssetLoadingTask: boolean cancel
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int header
com.badlogic.gdx.scenes.scene2d.ui.Skin: boolean has(java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
com.esotericsoftware.kryo.io.ByteBufferInput: java.nio.ByteOrder order()
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_NORMALIZED
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void setBatch(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item k
com.badlogic.gdx.Input$Keys: int END
com.badlogic.gdx.utils.Logger
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int emissionDelta
com.badlogic.gdx.utils.LongMap: float loadFactor
com.badlogic.gdx.utils.ArrayMap: java.lang.Object peekValue()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Preferences getPreferences(java.lang.String)
com.esotericsoftware.jsonbeans.OutputType: com.esotericsoftware.jsonbeans.OutputType javascript
com.badlogic.gdx.utils.IntSet: boolean contains(int)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue()
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.math.Vector2 tmpPosition
com.esotericsoftware.kryonet.Listener$QueuedListener$2
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3: boolean val$currentPreviewState
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Keys keys()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.physics.box2d.World: void setContactListener(com.badlogic.gdx.physics.box2d.ContactListener)
com.badlogic.gdx.utils.Align: boolean isCenterHorizontal(int)
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float)
com.badlogic.gdx.utils.Array: com.badlogic.gdx.utils.Array with(java.lang.Object[])
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glFinish()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix3fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setRotation(float)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.InputMultiplexer: boolean keyTyped(char)
com.badlogic.gdx.math.Polyline: float[] localVertices
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void render(com.badlogic.gdx.physics.box2d.World,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Pointer
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue$ValueType type
com.badlogic.gdx.utils.viewport.Viewport: com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
com.badlogic.gdx.utils.viewport.Viewport: int getLeftGutterWidth()
androidx.coordinatorlayout.widget.CoordinatorLayout: android.graphics.drawable.Drawable getStatusBarBackground()
com.badlogic.gdx.graphics.g2d.BitmapFont
com.esotericsoftware.kryonet.rmi.ObjectSpace: com.esotericsoftware.kryo.util.IntMap idToObject
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.backends.android.AndroidInput getInput()
com.badlogic.gdx.Graphics: boolean isContinuousRendering()
com.badlogic.gdx.input.RemoteInput
com.esotericsoftware.kryo.util.IntMap$Entries: boolean hasNext()
com.esotericsoftware.jsonbeans.JsonValue: JsonValue(com.esotericsoftware.jsonbeans.JsonValue$ValueType)
com.badlogic.gdx.utils.FloatArray: float[] resize(int)
com.badlogic.gdx.graphics.TextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: int colorID
com.esotericsoftware.kryo.io.ByteBufferOutputStream: void write(byte[],int,int)
com.badlogic.gdx.utils.IntArray: int size
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer getPixels()
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void setMaxForce(float)
com.badlogic.gdx.math.Ellipse: float area()
com.google.android.material.textfield.TextInputLayout: int getPlaceholderTextAppearance()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue: void setValue(float)
com.badlogic.gdx.math.FloatCounter: void put(float)
com.badlogic.gdx.math.Ellipse: Ellipse(com.badlogic.gdx.math.Circle)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder: com.badlogic.gdx.math.Vector3 middlePoint(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setFlip(boolean,boolean)
com.badlogic.gdx.utils.LongArray: void add(long,long,long,long)
com.badlogic.gdx.graphics.profiling.GL30Interceptor
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: void write(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
com.badlogic.gdx.graphics.GL20: int GL_CONSTANT_ALPHA
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES
com.badlogic.gdx.utils.XmlReader$Element: int getChildCount()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V3
com.esotericsoftware.kryo.util.IntMap$MapIterator: int INDEX_ILLEGAL
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setBlendFunctionSeparate(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float getTouchDownY()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setCenter(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: boolean longPress(com.badlogic.gdx.scenes.scene2d.Actor,float,float)
com.badlogic.gdx.utils.BufferUtils: java.nio.ByteBuffer newUnsafeByteBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.math.Vector3: boolean isZero(float)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 v2tmp
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: CameraGroupStrategy(com.badlogic.gdx.graphics.Camera,java.util.Comparator)
androidx.appcompat.widget.ActionBarContainer: ActionBarContainer(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryo.io.UnsafeInput: long[] readLongs(int,boolean)
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder _literalEncoder
com.badlogic.gdx.Input: void setCatchKey(int,boolean)
com.badlogic.gdx.Graphics$Monitor: java.lang.String name
com.esotericsoftware.kryonet.ClientDiscoveryHandler$1
com.esotericsoftware.kryo.serializers.FieldSerializer: void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])
com.badlogic.gdx.backends.android.AndroidInput: void setCatchKey(int,boolean)
com.badlogic.gdx.utils.OrderedMap: com.badlogic.gdx.utils.ObjectMap$Keys keys()
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: float amountY
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glScissor(int,int,int,int)
com.badlogic.gdx.math.collision.Segment: com.badlogic.gdx.math.Vector3 a
com.badlogic.gdx.utils.Array$ArrayIterator: int index
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.ObjectMap classToTag
com.badlogic.gdx.Application
com.badlogic.gdx.scenes.scene2d.utils.Layout: float getMaxHeight()
com.badlogic.gdx.utils.IntMap$Entries: void reset()
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class,java.lang.Class)
com.badlogic.gdx.Input$Keys: int SHIFT_LEFT
com.badlogic.gdx.utils.Logger: void info(java.lang.String,java.lang.Exception)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable
com.badlogic.gdx.graphics.GL30: void glUniform1i(int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: void goHome(boolean)
com.esotericsoftware.kryo.serializers.JavaSerializer
com.badlogic.gdx.utils.Pool: int peak
com.badlogic.gdx.InputProcessor: boolean keyTyped(char)
com.badlogic.gdx.input.GestureDetector: boolean touchDown(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.google.android.material.textfield.TextInputLayout: void setDefaultHintTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: com.badlogic.gdx.graphics.g3d.model.Animation animation
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: CameraGroupStrategy(com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.reflectasm.FieldAccess: void insertGetPrimitive(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.util.ArrayList,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type)
com.badlogic.gdx.physics.box2d.joints.GearJoint: float getRatio()
com.badlogic.gdx.Graphics: int getFramesPerSecond()
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: void update()
com.badlogic.gdx.Net$HttpRequest: void setUrl(java.lang.String)
com.badlogic.gdx.math.Vector3: float dst(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.net.Socket: java.io.OutputStream getOutputStream()
androidx.fragment.app.Fragment: boolean isAdded()
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean panStop(float,float,int,int)
com.badlogic.gdx.math.ConvexHull
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_BASE_LEVEL
com.badlogic.gdx.scenes.scene2d.utils.DragListener: float dragY
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: ImmediateModeRenderer20(int,boolean,boolean,int,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.HyperSphere.Connection.PacketObjects.Map.WorldKey: java.lang.String world
androidx.fragment.app.Fragment: android.content.res.Resources getResources()
com.badlogic.gdx.math.Quaternion: float getAxisAngle(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2: void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.graphics.GL30: void glBlendFuncSeparate(int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.utils.StringBuilder text
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String IfMatch
com.badlogic.gdx.graphics.g2d.PolygonBatch: com.badlogic.gdx.graphics.Color getColor()
com.esotericsoftware.kryo.io.InputChunked: void setBuffer(byte[],int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: DynamicsModifier$Rotational3D()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
com.badlogic.gdx.math.Vector: boolean isOnLine(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float,com.badlogic.gdx.math.Interpolation)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: float pressedOffsetX
com.badlogic.gdx.graphics.g2d.GlyphLayout: void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type LONG_TYPE
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setMinParticleCount(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glFramebufferTexture2D(int,int,int,int,int)
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Keys keys1
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteObjectSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void set(com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter)
com.badlogic.gdx.math.Vector3: float dst(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.ModelInstance,com.badlogic.gdx.math.Matrix4,boolean)
com.badlogic.gdx.backends.android.AndroidNet: com.badlogic.gdx.backends.android.AndroidApplicationBase app
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.math.Vector2 pointer1
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.Input$Keys: int FOCUS
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.physics.box2d.Body: float jniGetLinearDamping(long)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.ApplicationListener listener
com.badlogic.gdx.maps.tiled.TiledMapImageLayer: com.badlogic.gdx.graphics.g2d.TextureRegion region
com.badlogic.gdx.Net$HttpRequest: java.util.Map headers
com.badlogic.gdx.graphics.g3d.environment.PointLight: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padRight(float)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String UserAgent
com.badlogic.gdx.physics.box2d.joints.MotorJoint: MotorJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.backends.android.AndroidInput: float getAccelerometerZ()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$SwingOut swingOut
com.badlogic.gdx.graphics.g3d.ModelBatch: ModelBatch(com.badlogic.gdx.graphics.g3d.utils.RenderContext,com.badlogic.gdx.graphics.g3d.utils.ShaderProvider)
androidx.fragment.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
com.badlogic.gdx.input.GestureDetector$GestureListener: boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.viewport.Viewport: float worldWidth
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniEnableMotor(long,boolean)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: void act(float)
com.badlogic.gdx.input.GestureDetector: boolean isLongPressed()
com.badlogic.gdx.graphics.g3d.decals.Decal: int V1
com.badlogic.gdx.utils.Queue: boolean notEmpty()
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.graphics.glutils.ShaderProgram: boolean invalidated
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long mLocalHdrOffset
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy: RatioResolutionStrategy(float,float)
com.badlogic.gdx.backends.android.AndroidGraphics: void updatePpi()
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: com.badlogic.gdx.maps.MapObjects getObjects()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void setVertexTransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser
com.badlogic.gdx.utils.LongArray: boolean contains(long)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$29
com.badlogic.gdx.physics.box2d.Body: void setUserData(java.lang.Object)
com.esotericsoftware.kryo.io.UnsafeOutput: void writeLongs(long[],boolean)
androidx.appcompat.widget.ActionMenuView: void setOnMenuItemClickListener(androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh updateVertices(int,float[])
com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.Class defineClass(java.lang.String,byte[])
androidx.fragment.app.Fragment: void setExitSharedElementCallback(androidx.core.app.SharedElementCallback)
com.esotericsoftware.kryo.io.UnsafeOutput
com.badlogic.gdx.utils.compression.Lzma: void decompress(java.io.InputStream,java.io.OutputStream)
com.badlogic.gdx.utils.LongArray
com.badlogic.gdx.scenes.scene2d.ui.TextField: void cut()
com.badlogic.gdx.Input$Keys: int BACKSPACE
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: void set(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue()
com.badlogic.gdx.backends.android.AndroidInput: int[] touchX
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int getRenderMode()
com.badlogic.gdx.physics.box2d.EdgeShape: void jniGetVertex0(long,float[])
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int blendSrcFunc
com.badlogic.gdx.backends.android.AndroidSound: void setPitch(long,float)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_TYPE
androidx.appcompat.widget.AppCompatEditText: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: int hashCode()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: int getUsage()
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String prependFragmentCode
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox ext(float,float,float)
com.badlogic.gdx.scenes.scene2d.Stage: void setDebugUnderMouse(boolean)
com.badlogic.gdx.maps.MapProperties: java.util.Iterator getValues()
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle child(java.lang.String)
com.badlogic.gdx.math.Rectangle: long serialVersionUID
com.badlogic.gdx.graphics.g2d.PixmapPackerIO: PixmapPackerIO()
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter: java.lang.String textureAtlasPath
com.badlogic.gdx.utils.JsonValue: float asFloat()
com.esotericsoftware.kryo.util.ObjectMap: void resize(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: float paddingRight
com.badlogic.gdx.net.HttpParametersUtils: HttpParametersUtils()
com.badlogic.gdx.maps.MapLayer: java.lang.String name
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFLT
com.badlogic.gdx.math.Vector2: boolean isPerpendicular(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void invalidate()
com.badlogic.gdx.backends.android.AndroidGL20: int[] ints
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver
com.esotericsoftware.kryonet.Client: void setDiscoveryHandler(com.esotericsoftware.kryonet.ClientDiscoveryHandler)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void setDimensions(float,float,float)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setHideMotionSpecResource(int)
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion[] values()
androidx.appcompat.widget.ActivityChooserView$InnerLayout: ActivityChooserView$InnerLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.IntIntMap$Keys: int next()
com.badlogic.gdx.math.Affine2: long serialVersionUID
com.badlogic.gdx.scenes.scene2d.Event: boolean stopped
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.utils.OrderedMap rects
com.badlogic.gdx.Input: int getRotation()
com.badlogic.gdx.backends.android.AndroidMusic: void onCompletion(android.media.MediaPlayer)
androidx.coordinatorlayout.widget.CoordinatorLayout: java.util.List getDependencySortedChildren()
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: void allocateChannels()
com.esotericsoftware.kryonet.rmi.ObjectSpace: void remove(int)
com.badlogic.gdx.scenes.scene2d.Stage: void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Preferences getPreferences(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: int getAnimatedVisibility()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LRETURN
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: void beforeGroups()
com.badlogic.gdx.input.RemoteInput: void getRotationMatrix(float[])
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float padTop
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getX()
com.badlogic.gdx.input.GestureDetector: boolean touchDragged(int,int,int)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getReferenceAngle()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: void start()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11: com.badlogic.gdx.math.Matrix3 tmpM
com.esotericsoftware.kryo.io.ByteBufferOutput: void setOutputStream(java.io.OutputStream)
com.badlogic.gdx.graphics.g3d.decals.Decal: void resetVertices()
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: void setLayoutEnabled(com.badlogic.gdx.scenes.scene2d.Group,boolean)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void setOverCache(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: ParticleEmitter(java.io.BufferedReader)
com.badlogic.gdx.scenes.scene2d.ui.Slider: float threshold
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color LIME
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor tempDesc
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory: GLSurfaceViewAPI18$DefaultWindowSurfaceFactory()
com.badlogic.gdx.utils.Pool: void free(java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.Input: int getY()
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_NONE
com.badlogic.gdx.utils.BufferUtils: long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int)
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: int button
com.badlogic.gdx.math.WindowedMean: float getOldest()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput(int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: int[] tempGlyphCount
com.badlogic.gdx.utils.LongArray: void reverse()
com.esotericsoftware.kryonet.util.TcpIdleSender: TcpIdleSender()
com.badlogic.gdx.backends.android.AndroidAudio: android.media.SoundPool soundPool
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction: RelativeTemporalAction()
com.google.android.material.transformation.FabTransformationSheetBehavior: FabTransformationSheetBehavior()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: javax.microedition.khronos.opengles.GL createGL()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int NO_MAXIMUM
com.badlogic.gdx.utils.ObjectSet: ObjectSet()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: DynamicsModifier$FaceDirection(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection)
com.badlogic.gdx.utils.IdentityMap$Values: IdentityMap$Values(com.badlogic.gdx.utils.IdentityMap)
com.esotericsoftware.kryo.util.DefaultStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(byte[])
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Values values2
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: int count
com.esotericsoftware.kryo.io.ByteBufferOutput: boolean require(int)
com.badlogic.gdx.graphics.g3d.Attributes: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean scrollTarget
com.google.android.material.textfield.TextInputLayout: void setTextInputAccessibilityDelegate(com.google.android.material.textfield.TextInputLayout$AccessibilityDelegate)
com.esotericsoftware.kryo.serializers.CollectionSerializer: void setElementsCanBeNull(boolean)
com.badlogic.gdx.graphics.g3d.model.Node
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: int compare(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Renderable)
com.esotericsoftware.kryo.io.ByteBufferOutput: java.nio.ByteOrder byteOrder
com.badlogic.gdx.graphics.glutils.KTXTextureData: int numberOfMipmapLevels
com.badlogic.gdx.Net$HttpResponseListener
com.badlogic.gdx.assets.loaders.ShaderProgramLoader
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void rect(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.esotericsoftware.kryonet.Server: void sendToAllTCP(java.lang.Object)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior: ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap
com.badlogic.gdx.graphics.glutils.MipMapTextureData: boolean disposePixmap()
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.graphics.g2d.GlyphLayout drawItem(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,int,java.lang.Object,float,float,float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
com.badlogic.gdx.graphics.GL30: int GL_STATIC_READ
com.badlogic.gdx.graphics.Mesh: Mesh(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.assets.loaders.I18NBundleLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter)
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: boolean isUseShortestDirection()
com.esotericsoftware.kryo.Registration: com.esotericsoftware.kryo.Serializer getSerializer()
com.badlogic.gdx.graphics.GL20: int GL_STREAM_DRAW
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.utils.viewport.Viewport viewport
com.badlogic.gdx.scenes.scene2d.ui.TextArea: int calculateCurrentLineIndex(int)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor: int count
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.ModelCache
com.badlogic.gdx.physics.box2d.joints.GearJointDef
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float,float)
com.badlogic.gdx.utils.IntIntMap$MapIterator: com.badlogic.gdx.utils.IntIntMap map
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue tintValue
com.badlogic.gdx.backends.android.AndroidAudioRecorder: void dispose()
com.badlogic.gdx.math.BSpline: java.lang.Object derivativeAt(java.lang.Object,float)
com.badlogic.gdx.utils.IntFloatMap$MapIterator: int INDEX_ILLEGAL
com.badlogic.gdx.utils.LongMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindFramebuffer(int,int)
com.badlogic.gdx.utils.ObjectMap$Entries
com.badlogic.gdx.physics.box2d.PolygonShape: void jniSet(long,float[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void findExpandedValues(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.BitmapFont: float getSpaceXadvance()
com.badlogic.gdx.graphics.Cubemap: void load(com.badlogic.gdx.graphics.CubemapData)
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.StringBuilder textBuffer
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.NumericValue)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getPadBottom()
com.badlogic.gdx.utils.Timer$TimerThread: com.badlogic.gdx.utils.Timer instance
com.esotericsoftware.kryo.util.IdentityMap: com.esotericsoftware.kryo.util.IdentityMap$Values values
com.badlogic.gdx.scenes.scene2d.Actor: void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.graphics.g3d.Shader: void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value padTop
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,float,float,float)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.Cubemap cubemap
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedFocused
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getMinWidth()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
androidx.lifecycle.AndroidViewModel
com.badlogic.gdx.scenes.scene2d.Event: boolean bubbles
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(float,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float angleCos
com.badlogic.gdx.graphics.GL20: int GL_DST_COLOR
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value padBottom
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,byte)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetFloatv(int,java.nio.FloatBuffer)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: void addThrowable(com.HyperSphere.Connection.PacketObjects.Misc.Throwable)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int xCalc
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: ColorAttribute(long,float,float,float,float)
com.badlogic.gdx.utils.viewport.ExtendViewport: float getMaxWorldHeight()
com.badlogic.gdx.scenes.scene2d.Actor: java.lang.String getName()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value minHeight
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp4
com.badlogic.gdx.graphics.GL20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.IntIntMap: java.lang.String toString()
com.badlogic.gdx.math.Interpolation$ElasticOut: Interpolation$ElasticOut(float,float,int,float)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float getCorrectionFactor()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniformMatrix2fv(int,int,boolean,float[],int)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: boolean over
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: float scrollFactor
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter: void flushBuilder()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IREM
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 localPoint2
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2: void Init()
com.badlogic.gdx.utils.Base64Coder: Base64Coder()
com.badlogic.gdx.math.CatmullRomSpline: float approximate(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction: float getAmount()
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel: int[] data
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory: void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)
com.badlogic.gdx.utils.FloatArray: void addAll(com.badlogic.gdx.utils.FloatArray,int,int)
com.esotericsoftware.kryonet.Client: Client(int,int)
com.badlogic.gdx.utils.Array: Array(int)
com.badlogic.gdx.backends.android.AndroidInput: boolean rotationVectorAvailable
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void renderBody(com.badlogic.gdx.physics.box2d.Body)
com.badlogic.gdx.input.GestureDetector$VelocityTracker
com.badlogic.gdx.backends.android.ZipResourceFile: com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getEntriesAt(java.lang.String)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float)
com.esotericsoftware.jsonbeans.Json: java.lang.String getTag(java.lang.Class)
com.badlogic.gdx.graphics.GL20: void glClearStencil(int)
com.badlogic.gdx.physics.box2d.Body: void setTransform(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: ButtonGroup(com.badlogic.gdx.scenes.scene2d.ui.Button[])
com.badlogic.gdx.utils.reflect.Field: boolean isPrivate()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: float rotateAngle
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IFNONNULL
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider: DefaultShaderProvider(java.lang.String,java.lang.String)
com.badlogic.gdx.Input$Keys: int ENVELOPE
com.badlogic.gdx.utils.JsonReader: int json_en_array
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider: DepthShaderProvider(com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config)
com.esotericsoftware.kryo.util.IntArray: void sort()
com.badlogic.gdx.backends.android.AndroidApplicationBase: long getJavaHeap()
com.esotericsoftware.jsonbeans.Json: void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.Writer)
com.badlogic.gdx.input.RemoteInput$TouchEvent: int pointer
com.badlogic.gdx.graphics.g2d.TextureRegion: void setV(float)
com.badlogic.gdx.graphics.GL20: int GL_FRONT_AND_BACK
com.esotericsoftware.kryonet.EndPoint: com.esotericsoftware.kryonet.Serialization getSerialization()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void rotate(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilOpSeparate(int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.utils.ObjectMap uniqueData
com.badlogic.gdx.utils.JsonValue: java.lang.String asString()
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter: int[] sort(com.badlogic.gdx.utils.Array)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short,java.lang.Object,java.lang.Object,int[])
com.esotericsoftware.kryo.io.UnsafeInput: UnsafeInput(int)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: void pinchStop()
com.badlogic.gdx.math.Plane: Plane(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.IdentityMap: int hashShift
com.badlogic.gdx.scenes.scene2d.ui.Tree: void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.glutils.VertexArray: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.utils.Array columnDefaults
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: com.badlogic.gdx.graphics.g2d.Animation$PlayMode valueOf(java.lang.String)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 unrotate(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.utils.StringBuilder: boolean equalsIgnoreCase(java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.FloatArray computePolygon(com.badlogic.gdx.utils.FloatArray,boolean)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle: SplitPane$SplitPaneStyle(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle set(float,float,float,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: DefaultShader$Config()
com.badlogic.gdx.scenes.scene2d.ui.TextField: char TAB
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: float halfHeight
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
com.badlogic.gdx.utils.IdentityMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void exit()
com.esotericsoftware.kryonet.JsonSerialization: java.lang.Object read(com.esotericsoftware.kryonet.Connection,java.nio.ByteBuffer)
androidx.fragment.app.Fragment: boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
com.badlogic.gdx.math.Vector2: boolean isOnLine(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.utils.OrderedMap: java.lang.Object remove(java.lang.Object)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.utils.Pool arrayPool
com.badlogic.gdx.files.FileHandle: void emptyDirectory(java.io.File,boolean)
com.badlogic.gdx.utils.LongArray: void truncate(int)
com.badlogic.gdx.input.GestureDetector$GestureAdapter: boolean pan(float,float,float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Position
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeBytes(byte[],int,int)
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_trans_actions
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: float normalImpulse
com.badlogic.gdx.graphics.GL20: void glStencilFunc(int,int,int)
com.badlogic.gdx.utils.StreamUtils: void copyStream(java.io.InputStream,java.nio.ByteBuffer)
com.gameanalytics.sdk.errorreporter.GameAnalyticsExceptionReportService: GameAnalyticsExceptionReportService()
com.esotericsoftware.kryonet.rmi.TimeoutException: TimeoutException(java.lang.String)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(byte[])
com.badlogic.gdx.scenes.scene2d.actions.FloatAction: void setEnd(float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float getMotorTorque(float)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute: com.badlogic.gdx.utils.Array lights
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void translate(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.GL30: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack
com.badlogic.gdx.graphics.glutils.MipMapTextureData
com.badlogic.gdx.graphics.VertexAttribute: int offset
com.badlogic.gdx.scenes.scene2d.InputListener
com.badlogic.gdx.graphics.GL20: int glGenFramebuffer()
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: DepthShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_REFLECTION
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool: java.lang.Object obtain()
com.badlogic.gdx.Input$Keys: int F11
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCapsule(float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.GL30: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable knob
com.badlogic.gdx.utils.IntMap: boolean hasZeroValue
com.badlogic.gdx.utils.ArrayMap$Entries: boolean valid
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer
com.esotericsoftware.kryo.io.ByteBufferOutput: void setPosition(int)
com.badlogic.gdx.utils.ObjectFloatMap: boolean containsKey(java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rect(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.utils.IdentityMap: IdentityMap(com.badlogic.gdx.utils.IdentityMap)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel modelChannel
com.badlogic.gdx.Input$Keys: int PLUS
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Vector3 scale
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ensureRectangleIndices(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int XOffset
com.badlogic.gdx.graphics.g3d.Attributes: java.util.Iterator iterator()
com.esotericsoftware.kryonet.KryoNetException: KryoNetException(java.lang.Throwable)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_EGL
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsTexture(int)
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector cubic_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_single_lengths
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode Screen
com.badlogic.gdx.utils.ObjectSet: int size
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2: byte DecodeWithMatchByte(com.badlogic.gdx.utils.compression.rangecoder.Decoder,byte)
com.badlogic.gdx.utils.compression.Lzma: void compress(java.io.InputStream,java.io.OutputStream)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: int compareTo(com.badlogic.gdx.graphics.g3d.Shader)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBindSampler(int,int)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: java.lang.String PeffectUponThrowableCompletion
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: boolean nextSide()
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput(java.nio.ByteBuffer)
androidx.appcompat.widget.AppCompatEditText: void setBackgroundResource(int)
com.badlogic.gdx.audio.Sound: long loop()
com.badlogic.gdx.utils.IdentityMap$Entries: java.lang.Object next()
com.badlogic.gdx.math.EarClippingTriangulator: com.badlogic.gdx.utils.ShortArray triangles
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights1color
com.badlogic.gdx.utils.IntMap$Entry: java.lang.String toString()
com.badlogic.gdx.math.Interpolation$8
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: void setAmountWidth(float)
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch: void end()
com.badlogic.gdx.utils.ArrayMap: void setValue(int,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.Actor: void toFront()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: java.lang.String fileName
com.esotericsoftware.kryonet.Listener$QueuedListener$2: com.esotericsoftware.kryonet.Connection val$connection
com.badlogic.gdx.utils.LongArray: void sort()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: void consumeCustomData(int)
com.badlogic.gdx.graphics.glutils.VertexBufferObject
com.badlogic.gdx.utils.ObjectIntMap$Entries: com.badlogic.gdx.utils.ObjectIntMap$Entry entry
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void line(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.GL20: int GL_CULL_FACE
com.badlogic.gdx.utils.BufferUtils: void copyJni(java.nio.Buffer,int,java.nio.Buffer,int,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean reverse
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector3 getPosition()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int)
com.badlogic.gdx.graphics.Color: int rgba4444(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float fadeAlphaSeconds
com.badlogic.gdx.utils.ObjectFloatMap: int pushIterations
com.badlogic.gdx.utils.Json: void writeObjectStart(java.lang.String,java.lang.Class,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationalVelocity2dChannel
com.badlogic.gdx.physics.box2d.Joint: long jniGetBodyB(long)
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute: int hashCode()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void c()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.Color borderColor
com.badlogic.gdx.utils.JsonValue: float[] asFloatArray()
com.badlogic.gdx.utils.JsonValue: short getShort(int)
com.badlogic.gdx.utils.Array: java.lang.Object first()
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: int ReverseGetPrice(short[],int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.math.Vector2 temp
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glStencilFuncSeparate(int,int,int,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleY()
com.badlogic.gdx.assets.AssetManager: void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader)
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusTopEnd()
com.esotericsoftware.jsonbeans.JsonReader: void number(java.lang.String,double)
com.badlogic.gdx.scenes.scene2d.Action: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.graphics.glutils.GLVersion: int parseInt(java.lang.String,int)
com.badlogic.gdx.utils.DataInput: void readUtf8_slow(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: void init()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: long materialMask
com.badlogic.gdx.utils.IntMap
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetMotorSpeed(long,float)
com.badlogic.gdx.graphics.g2d.SpriteCache: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float originY
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float)
com.esotericsoftware.jsonbeans.JsonValue: boolean getBoolean(java.lang.String)
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter array(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glCullFace(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: int blendDstFunc
com.badlogic.gdx.Graphics: void setResizable(boolean)
com.badlogic.gdx.backends.android.AndroidNet$1
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: VertexAttributes$ReadonlyIterator(java.lang.Object[])
com.badlogic.gdx.utils.JsonReader
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void line(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_PIXEL_MODE_GRAY
com.badlogic.gdx.graphics.g2d.Sprite: void setSize(float,float)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion set(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4$1: void run()
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(int)
com.badlogic.gdx.graphics.TextureArrayData: void consumeTextureArrayData()
com.badlogic.gdx.graphics.GL20: int GL_ONE_MINUS_CONSTANT_ALPHA
com.google.android.material.button.MaterialButton: void setElevation(float)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LDIV
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.Array runnables
com.esotericsoftware.kryonet.UdpConnection: boolean needsKeepAlive(long)
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: SpriteDrawable(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel: ParallelArray$Channel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: TextureDescriptor(com.badlogic.gdx.graphics.GLTexture,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$ParticleBox2D: ParticleEmitterBox2D$ParticleBox2D(com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D,com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setItems(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.compression.lzma.Encoder: boolean SetDictionarySize(int)
com.badlogic.gdx.graphics.g2d.SpriteCache: void begin()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int COMPUTE_FRAMES
com.badlogic.gdx.math.Vector3: float x
com.esotericsoftware.kryo.util.IntMap: java.lang.Object remove(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3: com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0
com.badlogic.gdx.graphics.GL20: int GL_INT_VEC3
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToScaling(float,float)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable plus
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getUniformLocation(java.lang.String)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String LastModified
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: AndroidOnscreenKeyboard(android.content.Context,android.os.Handler,com.badlogic.gdx.backends.android.AndroidInput)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void start()
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGenerateMipmap(int)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int getHeight()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4iv(int,int,int[],int)
com.badlogic.gdx.utils.DelayedRemovalArray: void shuffle()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell fillX()
com.esotericsoftware.kryo.Kryo: boolean isRegistrationRequired()
com.badlogic.gdx.graphics.g2d.Animation: java.lang.Object getKeyFrame(float)
com.badlogic.gdx.Gdx: com.badlogic.gdx.graphics.GL30 gl30
com.badlogic.gdx.math.RandomXS128: RandomXS128(long,long)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: java.lang.Integer INTEGER
com.badlogic.gdx.math.Vector2: boolean isCollinear(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.model.NodePart: NodePart(com.badlogic.gdx.graphics.g3d.model.MeshPart,com.badlogic.gdx.graphics.g3d.Material)
com.badlogic.gdx.Net$HttpResponse: java.lang.String getResultAsString()
com.badlogic.gdx.utils.viewport.ScalingViewport: void setScaling(com.badlogic.gdx.utils.Scaling)
com.badlogic.gdx.utils.compression.lz.InWindow: int _posLimit
com.google.android.material.button.MaterialButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.esotericsoftware.kryo.serializers.CollectionSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.utils.Array emitters
com.google.android.gms.common.stats.WakeLockEvent: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.GL20: void glScissor(int,int,int,int)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.utils.viewport.Viewport: int getTopGutterY()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: float gamma
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraRight
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 v2
com.esotericsoftware.kryonet.ConnectionValues: com.esotericsoftware.kryonet.TcpConnection getTCPConnection(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.maps.MapLayers: com.badlogic.gdx.maps.MapLayer get(int)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: float referenceAngle
com.google.android.material.textfield.TextInputLayout: int getCounterMaxLength()
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData: int loadIndex
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeErrorColor(android.content.res.ColorStateList)
com.esotericsoftware.kryo.Kryo: java.lang.Object needsCopyReference
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.ApplicationListener getApplicationListener()
com.google.android.material.card.MaterialCardView: int getContentPaddingRight()
com.badlogic.gdx.backends.android.AndroidApplication$1
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: int j
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.Mesh: boolean isInstanced
com.badlogic.gdx.physics.box2d.EdgeShape: void setVertex0(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.ConvexHull: int quicksortPartition(float[],int,int)
com.badlogic.gdx.utils.ObjectSet: java.lang.Object getKeyStash(java.lang.Object)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color SHAPE_NOT_ACTIVE
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue prev()
com.badlogic.gdx.graphics.GL30: int GL_RGB8UI
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void sphere(float,float,float,int,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDrawArrays(int,int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.esotericsoftware.kryo.util.IntArray: IntArray()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int[] RenderBounds
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel
com.badlogic.gdx.utils.ObjectSet: java.util.Iterator iterator()
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: boolean prepared
com.esotericsoftware.kryo.ReferenceResolver: int getWrittenId(java.lang.Object)
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: float getDistanceFieldSmoothing()
com.badlogic.gdx.math.Polyline: float scaleX
com.badlogic.gdx.utils.viewport.FillViewport: FillViewport(float,float,com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.kryonet.Connection: void setIdleThreshold(float)
com.badlogic.gdx.utils.BinaryHeap$Node: float getValue()
com.badlogic.gdx.graphics.GL30: void glCopyBufferSubData(int,int,int,int,int)
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction: TimeScaleAction()
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: ParallelAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.Mesh: void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int)
com.badlogic.gdx.Graphics$GraphicsType
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: void parseAnimations(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.Actor getScrollFocus()
com.badlogic.gdx.utils.Predicate$PredicateIterator: void set(java.util.Iterator,com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: com.badlogic.gdx.math.Interpolation visualInterpolation
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getActorHeight()
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue require(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void e()
com.badlogic.gdx.graphics.GL30: int GL_INTERLEAVED_ATTRIBS
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: long Bump
com.esotericsoftware.reflectasm.ConstructorAccess: com.esotericsoftware.reflectasm.ConstructorAccess get(java.lang.Class)
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput(java.io.InputStream)
com.badlogic.gdx.utils.IdentityMap: int size
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.google.android.material.button.MaterialButton: void setIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.glutils.PixmapTextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.profiling.GLProfiler: com.badlogic.gdx.graphics.profiling.GLInterceptor glInterceptor
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle style
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 interpolate(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean pinchZoom(float)
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: PointSpriteParticleBatch(int,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config)
com.badlogic.gdx.physics.box2d.Joint: com.badlogic.gdx.math.Vector2 getAnchorB()
androidx.appcompat.widget.ViewStubCompat: int getInflatedId()
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.Color downFontColor
androidx.fragment.app.Fragment: void performResume()
com.esotericsoftware.minlog.Log: void info(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.Game
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: ParticleEmitterBox2D(com.badlogic.gdx.physics.box2d.World,com.badlogic.gdx.graphics.g2d.ParticleEmitter)
com.badlogic.gdx.graphics.g2d.Batch: int getBlendSrcFunc()
com.badlogic.gdx.utils.Base64Coder: char[] encode(byte[],char[])
com.badlogic.gdx.utils.compression.lz.BinTree: int _hashMask
com.badlogic.gdx.Game: void create()
com.badlogic.gdx.utils.StringBuilder: char[] digits
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: java.lang.String ShininessAlias
com.badlogic.gdx.utils.IntMap: boolean containsValue(java.lang.Object,boolean)
com.esotericsoftware.kryo.util.ListReferenceResolver: int getWrittenId(java.lang.Object)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDrawArrays(int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label b
com.badlogic.gdx.math.Vector3: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.math.Polyline: float getRotation()
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(int)
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.math.Matrix4 projectionMatrix
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.scenes.scene2d.ui.Button: void setChecked(boolean,boolean)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.Vector3 origin
com.badlogic.gdx.math.CumulativeDistribution: void generate()
com.badlogic.gdx.math.Quaternion: float getAngleAround(float,float,float)
com.badlogic.gdx.input.GestureDetector: boolean isPanning()
com.badlogic.gdx.scenes.scene2d.ui.Stack: float prefWidth
com.esotericsoftware.kryo.Kryo: java.util.ArrayList defaultSerializers
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: boolean dirty
com.badlogic.gdx.graphics.profiling.GLInterceptor: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.scenes.scene2d.ui.Skin: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float stepSize
com.badlogic.gdx.assets.RefCountedContainer: java.lang.Object object
com.badlogic.gdx.graphics.glutils.ETC1TextureData
com.badlogic.gdx.backends.android.AndroidApplicationBase: android.content.Context getContext()
com.badlogic.gdx.utils.PerformanceCounter: boolean valid
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: boolean disabled
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int getWidth()
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: ShapeCache()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: Item()
com.badlogic.gdx.utils.ByteArray: byte[] ensureCapacity(int)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int engineWidth
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float endX
com.esotericsoftware.jsonbeans.ObjectMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Window$2: com.badlogic.gdx.scenes.scene2d.ui.Window this$0
com.badlogic.gdx.utils.IntMap: boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.serializers.ObjectField: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getScaleY()
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: com.badlogic.gdx.graphics.g3d.Attributes combineAttributes(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Entries entries()
com.badlogic.gdx.graphics.g2d.Sprite
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: ModelInfluencer()
com.badlogic.gdx.utils.ObjectFloatMap$Entries: com.badlogic.gdx.utils.ObjectFloatMap$Entry next()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padTop(float)
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 position
com.badlogic.gdx.utils.Array: Array(java.lang.Class)
com.badlogic.gdx.input.GestureDetector: float longPressSeconds
androidx.appcompat.widget.SearchView: int getMaxWidth()
com.badlogic.gdx.physics.box2d.Body: void jniSetType(long,int)
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction: void reset()
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: float g
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: ParallelAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setRegion(com.badlogic.gdx.graphics.g2d.PolygonRegion)
com.esotericsoftware.kryo.io.UnsafeInput: UnsafeInput(java.io.InputStream)
com.esotericsoftware.kryo.io.Input: void setTotal(int)
com.badlogic.gdx.graphics.g2d.Sprite: void setV2(float)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver: com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String)
com.badlogic.gdx.math.EarClippingTriangulator: com.badlogic.gdx.utils.ShortArray computeTriangles(float[])
com.badlogic.gdx.maps.MapLayers: int getCount()
com.badlogic.gdx.backends.android.AndroidInput$3: com.badlogic.gdx.Input$TextInputListener val$listener
com.badlogic.gdx.utils.LongArray: long[] shrink()
com.badlogic.gdx.graphics.g2d.Sprite: float originY
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy: void beforeGroups()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: java.nio.ByteBuffer getBuffer()
com.badlogic.gdx.Preferences: long getLong(java.lang.String,long)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mSurfaceIsBad
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: void checkNPOT()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.Shader getShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(float)
com.badlogic.gdx.math.Intersector: boolean overlaps(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper)
com.badlogic.gdx.graphics.GL30: int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type[] $VALUES
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: RegionInfluencer()
com.badlogic.gdx.scenes.scene2d.ui.List: void setAlignment(int)
com.esotericsoftware.kryo.util.UnsafeUtil: long doubleArrayBaseOffset
com.badlogic.gdx.graphics.g3d.decals.Decal: void setX(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: void a(int,java.lang.String,char[],boolean,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 clamp(float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGenFramebuffer()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mShouldExit
com.badlogic.gdx.utils.Bits: void xor(com.badlogic.gdx.utils.Bits)
com.google.android.material.transformation.TransformationChildCard
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getY()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup
com.badlogic.gdx.backends.android.AndroidInput: int getRotation()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType: com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType[] values()
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.XmlReader$Element getChild(int)
com.badlogic.gdx.physics.box2d.PolygonShape: void jniGetVertex(long,int,float[])
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: com.badlogic.gdx.math.Vector2 localAxisA
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones: com.badlogic.gdx.math.Matrix4 idtMatrix
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean readBoolean(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeTextType()
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.Vector3 direction
com.badlogic.gdx.backends.android.AndroidAudioDevice: void writeSamples(float[],int,int)
com.google.android.material.chip.Chip: void setChipText(java.lang.CharSequence)
com.badlogic.gdx.utils.GdxRuntimeException: long serialVersionUID
com.badlogic.gdx.graphics.g3d.utils.RenderContext: int blendSFactor
com.badlogic.gdx.backends.android.AndroidApplication: int getLogLevel()
com.badlogic.gdx.scenes.scene2d.ui.Window$3: boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getPasswordVisibilityToggleDrawable()
com.badlogic.gdx.graphics.glutils.ETC1: void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
com.badlogic.gdx.utils.StringBuilder: void insert0(int,char)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: void init()
com.badlogic.gdx.utils.LongArray: LongArray(boolean,int)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.utils.Array bodies
com.badlogic.gdx.graphics.Mesh: float[] getVertices(float[])
com.badlogic.gdx.input.RemoteInput$KeyEvent: int KEY_DOWN
com.badlogic.gdx.utils.ArrayMap: void insert(int,java.lang.Object,java.lang.Object)
com.google.android.material.floatingactionbutton.FloatingActionButton: float getCompatElevation()
com.badlogic.gdx.input.RemoteInput$TouchEvent: int type
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.graphics.Color debugActorColor
com.badlogic.gdx.scenes.scene2d.ui.TextButton: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color GREEN
com.badlogic.gdx.graphics.glutils.PixmapTextureData: com.badlogic.gdx.graphics.Pixmap$Format format
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FCONST_0
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source: DragAndDrop$Source(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.backends.android.AndroidMouseHandler: void logAction(int)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: SpotLightsAttribute(com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute)
com.badlogic.gdx.utils.compression.lzma.Encoder: short[] _isRepG1
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String AccessControlAllowOrigin
com.badlogic.gdx.graphics.GL20: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: void enter(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: int mGLESVersion
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int currentGlobalId
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction: void setAmountX(float)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean enforceContinuousRendering
com.badlogic.gdx.assets.loaders.CubemapLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.physics.box2d.FixtureDef
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: int getBufferedCount()
com.badlogic.gdx.math.Vector2: Vector2(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.Actor: void setPosition(float,float)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 idt()
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.g2d.BitmapFont getFont(java.lang.String)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setRenderer(android.opengl.GLSurfaceView$Renderer)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.utils.IntIntMap: void clear()
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: IntAction(int,int,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.input.RemoteInput: com.badlogic.gdx.InputProcessor processor
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetActiveUniformBlockName(int,int)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int mapWidthInPixels
com.badlogic.gdx.graphics.GL30: int GL_SYNC_STATUS
com.badlogic.gdx.utils.TimSort: TimSort()
com.badlogic.gdx.physics.box2d.joints.RopeJoint: float[] tmp
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 max
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform dirLights
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.backends.android.ZipResourceFile expansionFile
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: int GetPrice(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool: com.badlogic.gdx.graphics.g3d.ModelInstance newObject()
com.badlogic.gdx.backends.android.AndroidGL20: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.utils.ObjectIntMap: ObjectIntMap()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBlendEquation(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.utils.FloatArray: float get(int)
com.badlogic.gdx.math.BSpline: BSpline(com.badlogic.gdx.math.Vector[],int,boolean)
com.badlogic.gdx.utils.StringBuilder: int INITIAL_CAPACITY
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: void end()
com.badlogic.gdx.utils.ArrayMap$Values: int index
com.badlogic.gdx.graphics.GL20: void glDeleteProgram(int)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: com.badlogic.gdx.math.Vector2 getLocalAnchorA()
com.badlogic.gdx.scenes.scene2d.ui.TextField: int[] wordUnderCursor(int)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void end()
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues: java.lang.Object next()
com.badlogic.gdx.net.SocketHints: int performancePrefConnectionTime
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,char[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container fillX()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.physics.box2d.ChainShape: void createChain(float[],int,int)
com.badlogic.gdx.graphics.g2d.SpriteCache: void add(com.badlogic.gdx.graphics.Texture,float,float)
com.google.android.material.textfield.TextInputLayout: void setStartIconTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float space
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.math.Matrix4 transform
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)
com.badlogic.gdx.InputMultiplexer: void setProcessors(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.JsonReader: void bool(java.lang.String,boolean)
androidx.appcompat.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.OutputType outputType
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField: AsmCacheFields$AsmFloatField()
com.HyperSphere.Connection.PacketObjects.Misc.HyperSoundFx
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength
com.badlogic.gdx.backends.android.AndroidDaydream: android.content.Context getContext()
com.badlogic.gdx.backends.android.AndroidGL20: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDisable(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: short lastIndex()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action[])
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib1f(int,float)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.ActionMenuPresenter getOuterActionMenuPresenter()
com.badlogic.gdx.backends.android.AndroidApplication: void error(java.lang.String,java.lang.String)
com.esotericsoftware.kryo.util.DefaultClassResolver: void reset()
com.google.android.material.circularreveal.CircularRevealFrameLayout: com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()
com.esotericsoftware.jsonbeans.ObjectMap: int stashCapacity
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getHoriBearingX(long)
com.badlogic.gdx.assets.loaders.PixmapLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter)
com.badlogic.gdx.utils.ArrayMap: int hashCode()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getXScale()
com.badlogic.gdx.graphics.TextureData$Factory: com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
com.badlogic.gdx.assets.RefCountedContainer: int refCount
com.badlogic.gdx.graphics.GL20: int GL_ONE_MINUS_SRC_COLOR
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 getMin(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: ScrollPane$ScrollPaneStyle(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)
com.badlogic.gdx.utils.LittleEndianInputStream: int readInt()
androidx.fragment.app.Fragment: boolean mDeferStart
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsShader(int)
com.badlogic.gdx.graphics.g3d.decals.Decal: void setRotationY(float)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void shrink(int)
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.ui.Table titleTable
com.esotericsoftware.kryonet.Server: Server()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: void update(float)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setPixel(int,int,int)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: int ROTATE_90
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy: void sort(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal)
com.badlogic.gdx.input.GestureDetector: boolean touchDragged(float,float,int)
com.badlogic.gdx.graphics.GL20: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.ByteArray: ByteArray()
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode ALPHA
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void removeTarget(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target)
com.esotericsoftware.kryonet.UdpConnection: java.nio.channels.SelectionKey selectionKey
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean loadGlyph(long,int,int)
com.badlogic.gdx.utils.Bits: void and(com.badlogic.gdx.utils.Bits)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGenFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBlendEquation(int)
com.badlogic.gdx.utils.SharedLibraryLoader: boolean isMac
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: AmbientCubemap(float[])
com.badlogic.gdx.utils.ObjectFloatMap: float loadFactor
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.utils.LongMap$Values
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory getEdgeEffectFactory()
com.badlogic.gdx.utils.compression.lzma.Decoder: com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder m_LiteralDecoder
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.physics.box2d.Manifold: void jniGetLocalNormal(long,float[])
com.badlogic.gdx.graphics.glutils.GLVersion: boolean isVersionEqualToOrHigher(int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter fontParameters
com.esotericsoftware.kryo.util.ObjectMap: ObjectMap(int,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.BufferUtils: void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4)
androidx.cardview.widget.CardView: int getContentPaddingRight()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void setAlways(boolean)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClear(int)
com.badlogic.gdx.graphics.GL30: void glBindFramebuffer(int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random: void init()
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegionWidth(int)
com.badlogic.gdx.math.GridPoint3: float dst2(com.badlogic.gdx.math.GridPoint3)
androidx.appcompat.widget.AppCompatImageView: void setBackgroundResource(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library library
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void pinch(com.badlogic.gdx.scenes.scene2d.InputEvent,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.model.Node: boolean hasParent()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: com.badlogic.gdx.math.Interpolation interpolation
com.esotericsoftware.kryo.io.ByteBufferInput: boolean varIntsEnabled
com.esotericsoftware.kryo.Registration: void setSerializer(com.esotericsoftware.kryo.Serializer)
com.esotericsoftware.jsonbeans.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object,com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.input.RemoteSender: int GYRO
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void setTapSquareSize(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int I2S
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(boolean,int)
com.badlogic.gdx.input.RemoteSender: int TOUCH_DOWN
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.g3d.particles.ResourceData: int currentLoadIndex
com.badlogic.gdx.utils.IntSet: void resize(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void addMesh(com.badlogic.gdx.graphics.g3d.model.MeshPart)
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle absolute(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.math.Matrix4 tmpTransform
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean middle()
com.badlogic.gdx.physics.box2d.Shape: void dispose()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: DefaultShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.glutils.VertexArray: VertexArray(int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isAttached()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_VERTICAL_LAYOUT
com.esotericsoftware.kryo.serializers.MapSerializer: java.lang.Class keyClass
com.google.android.material.transformation.ExpandableBehavior
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float getHighMin()
com.badlogic.gdx.backends.android.AndroidGL30: void glVertexAttribIPointer(int,int,int,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: javax.microedition.khronos.egl.EGLConfig mEglConfig
com.badlogic.gdx.scenes.scene2d.ui.TextField: void drawCursor(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float)
com.esotericsoftware.kryo.serializers.BeanSerializer: java.lang.Object[] noArgs
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: short[] Models
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: com.badlogic.gdx.utils.Array controllers
com.badlogic.gdx.net.ServerSocketHints
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setClamp(boolean)
com.badlogic.gdx.physics.box2d.Joint: long jniGetBodyA(long)
com.badlogic.gdx.utils.DelayedRemovalArray: com.badlogic.gdx.utils.DelayedRemovalArray with(java.lang.Object[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int INVOKESTATIC
com.badlogic.gdx.backends.android.AndroidInput: float getAzimuth()
com.badlogic.gdx.scenes.scene2d.Stage: void setDebugInvisible(boolean)
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.ContactFilter contactFilter
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Via
com.badlogic.gdx.utils.reflect.Field: boolean isProtected()
com.badlogic.gdx.utils.Array: void add(java.lang.Object)
com.esotericsoftware.kryo.io.KryoDataOutput: void writeShort(int)
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int usage
com.badlogic.gdx.physics.box2d.PolygonShape: void set(com.badlogic.gdx.math.Vector2[])
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetIntegerv(int,java.nio.IntBuffer)
com.badlogic.gdx.input.GestureDetector: GestureDetector(com.badlogic.gdx.input.GestureDetector$GestureListener)
com.badlogic.gdx.Files: com.badlogic.gdx.files.FileHandle external(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: boolean tap(float,float,int,int)
com.esotericsoftware.kryonet.rmi.TimeoutException: TimeoutException()
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void allocateChannels()
com.badlogic.gdx.scenes.scene2d.ui.Skin$3: com.badlogic.gdx.graphics.g2d.BitmapFont read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DCONST_0
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Values values1
com.badlogic.gdx.math.Bezier: float locate(com.badlogic.gdx.math.Vector)
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: JsonValue$JsonIterator(com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.Json: void toJson(java.lang.Object,java.lang.Class,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.math.Quaternion: float dot(float,float,float,float)
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue prev()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: float[] getColor(float)
com.badlogic.gdx.utils.JsonReader: byte[] _json_eof_actions
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: int writeInt(int,boolean)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetMotorSpeed(long)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib3f(int,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.graphics.glutils.ShapeRenderer debugShapes
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.collision.Ray getPickRay(float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.BodyDef$BodyType getType()
com.badlogic.gdx.maps.MapObject: void setVisible(boolean)
com.badlogic.gdx.utils.IdentityMap
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidAudio audio
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void setButton(int)
com.badlogic.gdx.physics.box2d.World: void dispose()
com.badlogic.gdx.utils.IntArray: int[] shrink()
com.badlogic.gdx.graphics.GL30: int GL_QUERY_RESULT_AVAILABLE
com.badlogic.gdx.utils.ShortArray: short[] resize(int)
com.badlogic.gdx.graphics.glutils.FrameBuffer: com.badlogic.gdx.graphics.Texture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.math.Vector2 upper
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQueryHint()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: int colOffset
com.badlogic.gdx.utils.reflect.ClassReflection: java.lang.String getSimpleName(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Tree$1: void changed()
com.badlogic.gdx.graphics.GL30: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 limit(float)
com.badlogic.gdx.utils.ObjectIntMap: int hashShift
com.badlogic.gdx.utils.viewport.ExtendViewport: void setMaxWorldWidth(float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Matrix4 obtainM4()
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int getAndIncrement(java.lang.Object,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation pow2InInverse
com.badlogic.gdx.graphics.g2d.Sprite: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.physics.box2d.Transform: float[] vals
com.esotericsoftware.kryo.util.IdentityObjectIntMap: IdentityObjectIntMap(int,float)
com.badlogic.gdx.scenes.scene2d.actions.AfterAction: void setTarget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: boolean isMotorEnabled()
com.badlogic.gdx.input.RemoteSender: boolean keyDown(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: com.badlogic.gdx.utils.Array templates
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: boolean fixedWidth
com.badlogic.gdx.backends.android.AndroidZipFileHandle: boolean hasAssetFd
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void clear()
com.badlogic.gdx.scenes.scene2d.ui.Widget: void setFillParent(boolean)
com.badlogic.gdx.utils.IdentityMap$MapIterator: void findNextIndex()
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isResizable
com.google.android.material.internal.NavigationMenuItemView: void setTextAppearance(int)
com.badlogic.gdx.graphics.g2d.Batch: void end()
com.badlogic.gdx.scenes.scene2d.ui.Skin$2: void readNamedObjects(com.badlogic.gdx.utils.Json,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: java.lang.String name
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float getX()
com.badlogic.gdx.backends.android.AndroidGL30: void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
com.badlogic.gdx.graphics.Pixmap: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener listener
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter)
com.badlogic.gdx.utils.ObjectFloatMap: void clear(int)
com.badlogic.gdx.graphics.glutils.FrameBuffer: void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton: java.lang.String toString()
com.esotericsoftware.kryonet.TcpConnection
com.badlogic.gdx.utils.LongMap: long[] keyTable
com.esotericsoftware.jsonbeans.OutputType: OutputType(java.lang.String,int)
com.badlogic.gdx.backends.android.AndroidGraphics: int getHeight()
com.esotericsoftware.kryo.util.IntArray: void set(int,int)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: java.lang.String getUniformAlias(int)
com.badlogic.gdx.physics.box2d.Joint: float getReactionTorque(float)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: com.badlogic.gdx.scenes.scene2d.ui.Button lastChecked
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3
com.esotericsoftware.reflectasm.FieldAccess: int getIndex(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: com.badlogic.gdx.utils.Array checkedButtons
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getWrapSpace()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsTexture(int)
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void capsule(float,float,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: boolean isCodeAttribute()
com.badlogic.gdx.utils.Align: int top
com.badlogic.gdx.Application: int getLogLevel()
com.esotericsoftware.jsonbeans.Json: void writeObjectStart(java.lang.String,java.lang.Class,java.lang.Class)
com.badlogic.gdx.physics.box2d.World: void rayCast(com.badlogic.gdx.physics.box2d.RayCastCallback,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.LittleEndianInputStream: int readUnsignedByte()
com.badlogic.gdx.graphics.VertexAttribute: VertexAttribute(int,int,int,boolean,java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getVertAdvance(long)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformBlockBinding(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: boolean active
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Float fillX
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float scaleX
com.esotericsoftware.kryo.serializers.CollectionSerializer: com.esotericsoftware.kryo.Serializer serializer
com.badlogic.gdx.scenes.scene2d.Actor: void rotateBy(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getTransparency()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatHoveredFocusedTranslationZResource(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$4: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void surfaceDestroyed()
com.badlogic.gdx.utils.ObjectSet: int PRIME3
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusBottomEnd()
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling fit
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: G3dModelLoader(com.badlogic.gdx.utils.BaseJsonReader)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory
com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.physics.box2d.joints.WeldJoint: void setFrequency(float)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean right(int)
com.badlogic.gdx.utils.ByteArray: ByteArray(boolean,byte[],int,int)
com.badlogic.gdx.graphics.g3d.model.Node: int addChildren(java.lang.Iterable)
com.HyperSphere.Connection.PacketObjects.Entities.Player: int level
com.badlogic.gdx.scenes.scene2d.Actor: void setWidth(float)
com.esotericsoftware.kryo.util.IntMap$Values: java.util.ArrayList toArray()
com.badlogic.gdx.graphics.Mesh: void transformUV(com.badlogic.gdx.math.Matrix3)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: float percent
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setTarget(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type Edge
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void render(com.badlogic.gdx.graphics.g3d.Renderable)
com.esotericsoftware.kryonet.Server: void close()
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: void setCanBeNull(boolean)
com.esotericsoftware.kryo.util.IdentityMap$Entries: com.esotericsoftware.kryo.util.IdentityMap$Entry entry
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Connection[] connections
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader: java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer load(long[],byte[],int,int)
androidx.fragment.app.Fragment: java.lang.Object getExitTransition()
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1: com.badlogic.gdx.backends.android.AndroidApplicationBase val$application
com.badlogic.gdx.utils.LongMap$Values: boolean hasNext()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: int visibleEngines
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.math.Rectangle firstWidgetBounds
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: void close()
com.badlogic.gdx.utils.LongArray: LongArray()
com.esotericsoftware.kryo.io.UnsafeInput: long readLong(boolean)
com.badlogic.gdx.utils.ObjectIntMap$Entry: ObjectIntMap$Entry()
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.g2d.PixmapPacker packer
com.badlogic.gdx.utils.IntArray: int[] resize(int)
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: boolean getCapture()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform reflectionUVTransform
com.badlogic.gdx.utils.ObjectMap$Values: ObjectMap$Values(com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.math.Interpolation$SwingIn: float scale
com.badlogic.gdx.Input: int getDeltaY(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String)
androidx.recyclerview.widget.RecyclerView: boolean getClipToPadding()
com.badlogic.gdx.utils.Logger: int NONE
com.badlogic.gdx.utils.Json: boolean ignoreUnknownFields
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int minParticleCount
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: boolean isDirty
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Audio getAudio()
com.badlogic.gdx.math.Vector2: float len(float,float)
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Filter getFilterData()
com.badlogic.gdx.assets.loaders.TextureLoader: com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: void b(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,long,int)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: void setContinuous(boolean)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,int,float)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void ellipse(float,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void setLinearOffset(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.IntArray: boolean removeValue(int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.math.Vector3 translation
com.badlogic.gdx.graphics.g2d.SpriteCache: void draw(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getMinHeightValue()
androidx.core.app.RemoteActionCompat
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryonet.util.ObjectIntMap: java.util.Random random
com.badlogic.gdx.utils.ObjectFloatMap: boolean equals(java.lang.Object)
com.esotericsoftware.minlog.Log: void INFO()
com.badlogic.gdx.graphics.GL20: int GL_FLOAT_MAT2
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float getAngularOffset()
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_indicies_0()
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter name(java.lang.String)
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g2d.TextureRegion: void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
com.badlogic.gdx.utils.LongMap: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: void fix(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: java.nio.FloatBuffer buffer
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: java.nio.FloatBuffer buffer
com.badlogic.gdx.backends.android.AndroidGL30: void glCopyBufferSubData(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidFiles: java.lang.String getExternalStoragePath()
com.esotericsoftware.kryo.Kryo: boolean copyShallow
com.badlogic.gdx.graphics.g2d.Animation: void setKeyFrames(java.lang.Object[])
com.badlogic.gdx.Input$Keys: int NUMPAD_3
com.esotericsoftware.kryonet.rmi.ObjectSpace: java.util.HashMap methodCache
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1: AndroidLiveWallpaperService$AndroidWallpaperEngine$1(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine)
com.badlogic.gdx.physics.box2d.Body: float getGravityScale()
com.esotericsoftware.kryo.util.IdentityMap: int size
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: BodyDef$BodyType(java.lang.String,int,int)
androidx.fragment.app.Fragment: java.lang.String getTag()
com.badlogic.gdx.math.CumulativeDistribution: void setInterval(int,float)
com.esotericsoftware.kryo.util.IdentityMap$Values: java.lang.Object next()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Age
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: boolean isStatic
com.badlogic.gdx.utils.compression.lz.BinTree: int kFixHashSize
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void logEglErrorAsWarning(java.lang.String,java.lang.String,int)
androidx.appcompat.widget.ActionBarOverlayLayout: int getActionBarHideOffset()
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean ctrl()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.SpotLight)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color valueOf(java.lang.String)
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setHeight(float)
com.badlogic.gdx.scenes.scene2d.ui.Image: Image()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void arc(float,float,float,float,float)
com.badlogic.gdx.assets.loaders.I18NBundleLoader: com.badlogic.gdx.utils.I18NBundle loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: BaseDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.utils.JsonValue$JsonIterator: void remove()
com.badlogic.gdx.Input: boolean isCatchKey(int)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.Kryo getKryo()
androidx.appcompat.widget.AppCompatCheckBox: AppCompatCheckBox(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryo.Kryo: boolean autoReset
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] $VALUES
com.badlogic.gdx.graphics.glutils.PixmapTextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Trailer
com.esotericsoftware.kryo.util.IntMap$Entries: IntMap$Entries(com.esotericsoftware.kryo.util.IntMap)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DNEG
com.badlogic.gdx.graphics.Pixmap$Format: int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.g2d.NinePatch: float rightWidth
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int top
com.badlogic.gdx.utils.BooleanArray: boolean[] setSize(int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$3: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.jsonbeans.Json: void addClassTag(java.lang.String,java.lang.Class)
com.badlogic.gdx.utils.ShortArray: boolean removeAll(com.badlogic.gdx.utils.ShortArray)
com.badlogic.gdx.scenes.scene2d.ui.Value$8: float get(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.glutils.ETC1TextureData: com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 lerp(com.badlogic.gdx.math.Matrix4,float)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.ClassResolver getClassResolver()
com.google.android.material.appbar.ViewOffsetBehavior: ViewOffsetBehavior(android.content.Context,android.util.AttributeSet)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setImageResource(int)
com.esotericsoftware.kryo.Kryo: java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: long mCRC32
com.badlogic.gdx.input.RemoteInput: int DEFAULT_PORT
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer: java.lang.String read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.reflect.Field: boolean isAnnotationPresent(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.Actor: void rotationChanged()
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: void SetTableSize(int)
com.badlogic.gdx.physics.box2d.joints.GearJointDef: GearJointDef()
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: RunnableAction()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int mStencilSize
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.math.Polygon: float[] worldVertices
com.google.android.material.card.MaterialCardView: void setCheckedIconResource(int)
com.badlogic.gdx.maps.MapLayers: int getIndex(java.lang.String)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void render()
com.badlogic.gdx.graphics.glutils.ShaderProgram: com.badlogic.gdx.utils.ObjectIntMap attributes
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory: void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetBooleanv(int,java.nio.Buffer)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: boolean checkIdt(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.input.GestureDetector$GestureListener listener
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setColor(com.badlogic.gdx.graphics.Color)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getDescriptor()
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: void init()
com.badlogic.gdx.utils.IntIntMap: boolean notEmpty()
com.google.android.material.bottomappbar.BottomAppBar: void setCradleVerticalOffset(float)
com.badlogic.gdx.utils.Array: java.lang.Object[] ensureCapacity(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.IntMap$MapIterator: int INDEX_ZERO
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.Pixmap$Format getPageFormat()
com.badlogic.gdx.graphics.GL20: void glClearDepthf(float)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_MIN_FILTER
com.badlogic.gdx.scenes.scene2d.ui.Widget: void invalidateHierarchy()
androidx.appcompat.widget.Toolbar: android.widget.TextView getSubtitleTextView()
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager this$0
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Files getFiles()
com.badlogic.gdx.math.DelaunayTriangulator: com.badlogic.gdx.utils.ShortArray computeTriangles(float[],int,int,boolean)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: java.lang.String Alias
com.badlogic.gdx.scenes.scene2d.ui.List: int pressedIndex
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeDouble(double)
com.esotericsoftware.kryonet.Connection: int getReturnTripTime()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getUnderlineThickness()
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.utils.Timer$Task showTask
com.badlogic.gdx.input.RemoteInput$EventTrigger: RemoteInput$EventTrigger(com.badlogic.gdx.input.RemoteInput,com.badlogic.gdx.input.RemoteInput$TouchEvent,com.badlogic.gdx.input.RemoteInput$KeyEvent)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void setMaxForce(float)
com.badlogic.gdx.backends.android.AndroidDaydream: int logLevel
com.esotericsoftware.kryo.serializers.BlowfishSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setPackedColor(float)
com.badlogic.gdx.Input$Keys: int BUTTON_MODE
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.utils.FloatArray: FloatArray(boolean,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19
com.esotericsoftware.kryonet.Client: void run()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: boolean transmitExceptions
com.badlogic.gdx.scenes.scene2d.utils.DragListener: boolean isDragging()
com.badlogic.gdx.maps.tiled.TiledMapTileLayer: float tileHeight
com.badlogic.gdx.utils.Array: boolean equalsIdentity(java.lang.Object)
com.esotericsoftware.kryo.util.IntMap: int mask
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean forceScrollY
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getMaxWidthValue()
com.google.android.material.transformation.FabTransformationBehavior: FabTransformationBehavior()
com.badlogic.gdx.backends.android.AndroidGraphics: void setGL30(com.badlogic.gdx.graphics.GL30)
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Keys keys()
com.badlogic.gdx.scenes.scene2d.ui.Skin$2: java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.esotericsoftware.kryo.io.Input: int position
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2: AndroidFragmentApplication$2(com.badlogic.gdx.backends.android.AndroidFragmentApplication)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: com.badlogic.gdx.graphics.GL20 gl20
com.badlogic.gdx.scenes.scene2d.ui.TextField$1: com.badlogic.gdx.scenes.scene2d.ui.TextField this$0
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel)
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver: com.badlogic.gdx.files.FileHandle resolve(java.lang.String)
com.badlogic.gdx.math.Matrix4: void rot(float[],float[])
com.badlogic.gdx.utils.Queue: int head
com.badlogic.gdx.physics.box2d.PolygonShape: PolygonShape(long)
com.badlogic.gdx.utils.FloatArray: float random()
com.badlogic.gdx.graphics.g2d.Batch: void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryo.util.IdentityMap: int hashShift
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDetachShader(int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createRect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.g3d.Material,long)
com.gameanalytics.sdk.events.EGASdkErrorAction: com.gameanalytics.sdk.events.EGASdkErrorAction valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.Matrix4,float,float,float,int,int,float,float,float,float)
com.badlogic.gdx.utils.IdentityMap: int stashCapacity
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FCONST_2
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value padBottom
com.badlogic.gdx.graphics.g2d.GlyphLayout: GlyphLayout(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 limit2(float)
com.badlogic.gdx.input.GestureDetector: int lastTapPointer
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: Tree$Node()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value backgroundLeft
com.badlogic.gdx.backends.android.AndroidGL30: void glDrawRangeElements(int,int,int,int,int,int)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 add(float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser
com.esotericsoftware.jsonbeans.JsonValue: java.lang.String getString(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int height
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float speed
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rectLine(float,float,float,float,float)
com.badlogic.gdx.utils.LongMap$MapIterator: LongMap$MapIterator(com.badlogic.gdx.utils.LongMap)
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable knobOver
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setBlendFunctionSeparate(int,int,int,int)
com.badlogic.gdx.utils.Predicate$PredicateIterable
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: float amountWidth
com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings: com.esotericsoftware.jsonbeans.OutputType outputType
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer: java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.utils.Array renderables
com.badlogic.gdx.math.MathUtils: float random(float)
com.badlogic.gdx.graphics.GL30: int GL_RGB_INTEGER
com.badlogic.gdx.utils.SnapshotArray: boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.Input$Keys: int MENU
com.badlogic.gdx.graphics.glutils.ShaderProgram: int fetchUniformLocation(java.lang.String)
com.badlogic.gdx.utils.viewport.FitViewport
com.badlogic.gdx.backends.android.AndroidInput$3$3$1: void run()
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.lang.String)
com.esotericsoftware.jsonbeans.JsonValue: boolean isNumeric(com.esotericsoftware.jsonbeans.JsonValue)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength: DynamicsModifier$Strength()
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: boolean isOpaque()
com.badlogic.gdx.graphics.g3d.model.Node: boolean inheritTransform
com.esotericsoftware.kryo.util.IntArray: void swap(int,int)
com.badlogic.gdx.Input$Keys: int ENDCALL
com.badlogic.gdx.utils.ObjectMap: int size
com.badlogic.gdx.graphics.GL30: void glGenVertexArrays(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: boolean isSelectable()
com.esotericsoftware.kryo.util.Util: java.lang.Class getWrapperClass(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle style
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int kDecode
androidx.appcompat.widget.ActionMenuView: ActionMenuView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[])
com.badlogic.gdx.math.Matrix4
com.badlogic.gdx.graphics.g2d.Sprite: void scroll(float,float)
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.graphics.Color getPackedColor()
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug table
com.badlogic.gdx.utils.ObjectMap: void putResize(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.utils.Array createSprites(java.lang.String)
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isStaticClass(java.lang.Class)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(int,int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean packToTexture
com.badlogic.gdx.backends.android.AndroidInput: java.util.ArrayList keyEvents
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int F_CHOP
com.badlogic.gdx.physics.box2d.World: void setContactFilter(com.badlogic.gdx.physics.box2d.ContactFilter)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: Gdx2DPixmap(java.io.InputStream,int)
com.badlogic.gdx.graphics.glutils.GLVersion: void extractVersion(java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void layout()
com.badlogic.gdx.scenes.scene2d.ui.List: void setItems(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.net.SocketHints: int lingerDuration
com.badlogic.gdx.graphics.GL30: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,int,int,int,int)
com.badlogic.gdx.graphics.GL20: void glGetBooleanv(int,java.nio.Buffer)
androidx.appcompat.widget.Toolbar: void setSubtitle(int)
com.esotericsoftware.jsonbeans.Json: void setDefaultSerializer(com.esotericsoftware.jsonbeans.JsonSerializer)
com.esotericsoftware.jsonbeans.Json: void setUsePrototypes(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: int glGenFramebuffer()
com.badlogic.gdx.maps.tiled.TideMapLoader: java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle loadBundle(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.Locale)
com.badlogic.gdx.utils.Predicate$PredicateIterable: Predicate$PredicateIterable(java.lang.Iterable,com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 scl(float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyMapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.maps.MapLayers: void remove(com.badlogic.gdx.maps.MapLayer)
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.net.NetJavaImpl: com.badlogic.gdx.utils.ObjectMap listeners
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setSize(float,float)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 nor()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: ScaleToAction()
com.fasterxml.jackson.annotation.Nulls: com.fasterxml.jackson.annotation.Nulls valueOf(java.lang.String)
com.badlogic.gdx.InputEventQueue: int TOUCH_DRAGGED
com.badlogic.gdx.scenes.scene2d.ui.Window: int MOVE
com.fasterxml.jackson.databind.annotation.JsonSerialize$Typing: com.fasterxml.jackson.databind.annotation.JsonSerialize$Typing valueOf(java.lang.String)
com.badlogic.gdx.net.ServerSocketHints: int backlog
com.esotericsoftware.kryo.util.IntMap$Values: java.lang.Object next()
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: int originalHeight
com.badlogic.gdx.Audio: com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.GL20: int GL_ALPHA_BITS
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: void update()
com.badlogic.gdx.ApplicationAdapter: void resize(int,int)
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.Array disposables
com.esotericsoftware.jsonbeans.ObjectMap$Entry: ObjectMap$Entry()
com.esotericsoftware.reflectasm.FieldAccess: void setBoolean(java.lang.Object,int,boolean)
com.esotericsoftware.kryo.util.ListReferenceResolver
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_SCALE_NEAREST
com.badlogic.gdx.scenes.scene2d.ui.Window: Window(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: void renderMiniMapObject()
com.badlogic.gdx.scenes.scene2d.utils.Layout: float getPrefWidth()
androidx.fragment.app.Fragment: java.lang.String mTag
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.lang.String)
com.badlogic.gdx.graphics.GL20: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isBottomEdge()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: FocusListener$FocusEvent()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void bufferChanged()
com.badlogic.gdx.utils.SharedLibraryLoader: boolean canExecute(java.io.File)
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue: int triangleCount
com.badlogic.gdx.graphics.glutils.ShaderProgram: void checkManaged()
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: void plugIn(com.badlogic.gdx.graphics.g3d.decals.GroupPlug,int)
com.badlogic.gdx.scenes.scene2d.ui.Value$10: Value$10(com.badlogic.gdx.scenes.scene2d.Actor,float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: void setMaxLength(int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: ParticleValue()
com.badlogic.gdx.Input$Keys: int BUTTON_CIRCLE
com.badlogic.gdx.graphics.GL30: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: javax.microedition.khronos.egl.EGLDisplay mEglDisplay
com.badlogic.gdx.utils.ByteArray: void addAll(com.badlogic.gdx.utils.ByteArray,int,int)
com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature[] values()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup right()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getMinHeight()
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: com.badlogic.gdx.utils.XmlReader xml
androidx.fragment.app.Fragment: android.view.LayoutInflater mLayoutInflater
com.badlogic.gdx.graphics.PixmapIO$PNG: int IEND
com.badlogic.gdx.utils.IntIntMap: void removeStashIndex(int)
com.badlogic.gdx.graphics.PixmapIO$PNG: byte FILTER_NONE
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel
com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard
com.badlogic.gdx.graphics.g3d.ModelCache$2: com.badlogic.gdx.graphics.g3d.model.MeshPart newObject()
com.badlogic.gdx.graphics.profiling.GLInterceptor
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mRenderComplete
androidx.appcompat.widget.DialogTitle: DialogTitle(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.glutils.KTXTextureData: com.badlogic.gdx.graphics.Pixmap consumePixmap()
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rotate(float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: boolean isMotorEnabled()
com.esotericsoftware.kryonet.util.ObjectIntMap: int capacity
com.esotericsoftware.kryonet.rmi.ObjectSpace: void removeConnection(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.scenes.scene2d.Actor: boolean debug
com.badlogic.gdx.utils.compression.lz.BinTree: boolean Create(int,int,int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsFramebuffer(int)
com.badlogic.gdx.graphics.g2d.Batch: int X2
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer: void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel)
com.badlogic.gdx.utils.IntMap: void shrink(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: boolean ownsBuffer
com.badlogic.gdx.graphics.g2d.Batch: void dispose()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: float translateUnits
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void scaleSize(float)
com.badlogic.gdx.utils.Logger: void setLevel(int)
com.badlogic.gdx.graphics.g2d.Batch: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
com.badlogic.gdx.scenes.scene2d.ui.Container: float getMaxWidth()
com.badlogic.gdx.scenes.scene2d.utils.Layout: void invalidate()
com.badlogic.gdx.assets.loaders.ModelLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.ArrayMap: java.lang.Object firstKey()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.AfterAction after(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.GL30: int GL_RGBA_INTEGER
com.badlogic.gdx.net.HttpStatus: int SC_MOVED_PERMANENTLY
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell fill(float,float)
com.badlogic.gdx.utils.ArrayMap: boolean equals(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.LayoutAction layout(boolean)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setPixel(long,int,int,int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void b(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame)
com.badlogic.gdx.utils.LongArray: long[] items
androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Entries iterator()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: void save(java.io.Writer)
com.badlogic.gdx.math.FloatCounter: float latest
com.badlogic.gdx.scenes.scene2d.Actor: void setSize(float,float)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void setGroupStrategy(com.badlogic.gdx.graphics.g3d.decals.GroupStrategy)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.graphics.Mesh currentMesh
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeVarInt(int,boolean)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration copy()
com.esotericsoftware.kryo.io.ByteBufferInput: byte[] readBytes(int)
com.badlogic.gdx.input.RemoteInput: boolean[] isTouched
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDisableVertexAttribArray(int)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.utils.compression.lz.OutWindow: byte GetByte(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix3fv(int,int,boolean,float[],int)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.String toString()
com.badlogic.gdx.assets.loaders.ModelLoader
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh disableInstancedRendering()
com.badlogic.gdx.Net$HttpMethods: java.lang.String PATCH
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mGreenSize
com.badlogic.gdx.maps.objects.TextureMapObject: float getOriginY()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillCircle(int,int,int,int)
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector setToRandomDirection()
com.badlogic.gdx.utils.ObjectSet: void addAll(com.badlogic.gdx.utils.ObjectSet)
com.badlogic.gdx.math.MathUtils: float radToIndex
com.badlogic.gdx.utils.IntArray: void sort()
com.badlogic.gdx.graphics.GL20: int glGetUniformLocation(int,java.lang.String)
com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell uniform()
com.badlogic.gdx.scenes.scene2d.Group: void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getMaxAdvance()
com.badlogic.gdx.scenes.scene2d.ui.TextArea: TextArea(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int V2Offset
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int padLeft
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: DynamicsModifier()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: ParticleEmitter$Particle(com.badlogic.gdx.graphics.g2d.Sprite)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 intersection
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener
com.badlogic.gdx.scenes.scene2d.ui.Widget
com.badlogic.gdx.backends.android.ZipResourceFile: int kCompressDeflated
com.badlogic.gdx.utils.OrderedSet: OrderedSet(com.badlogic.gdx.utils.OrderedSet)
androidx.fragment.app.Fragment: int mFragmentId
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mGLThread
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: float durationTimer
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int GetPrice0(int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setElevation(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24: DefaultShader$Setters$24()
com.badlogic.gdx.backends.android.APKExpansionSupport: APKExpansionSupport()
com.badlogic.gdx.physics.box2d.FixtureDef: float density
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream: byte[] toByteArray()
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.String messageText
com.badlogic.gdx.utils.LongArray: void mul(int,long)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g2d.SpriteBatch: boolean ownsShader
com.badlogic.gdx.graphics.GL30: int GL_R32I
com.badlogic.gdx.InputAdapter: boolean keyDown(int)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: com.badlogic.gdx.utils.Array lights
com.badlogic.gdx.net.NetJavaServerSocketImpl
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label,int)
com.badlogic.gdx.input.GestureDetector: com.badlogic.gdx.utils.Timer$Task longPressTask
com.badlogic.gdx.backends.android.AndroidGL30: void glFramebufferTextureLayer(int,int,int,int,int)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.google.firebase.messaging.RemoteMessage: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float jniGetCorrectionFactor(long)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: AppCompatAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: byte readByte()
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String getManagedStatus()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.view.WindowManager getWindowManager()
com.badlogic.gdx.math.Intersector: boolean intersectPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs: ParticleShader$Inputs()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.graphics.GL20: int GL_NO_ERROR
com.badlogic.gdx.graphics.PixmapIO$PNG: byte COMPRESSION_DEFLATE
com.badlogic.gdx.utils.IntFloatMap: float[] valueTable
com.badlogic.gdx.utils.QuickSelect: int recursiveSelect(int,int,int)
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction
com.badlogic.gdx.input.GestureDetector$1
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteQueries(int,int[],int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollBarTouch(boolean)
com.badlogic.gdx.physics.box2d.Body: int jniGetType(long)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.math.Matrix4 matTmp1
com.badlogic.gdx.math.Vector3: boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.utils.StreamUtils: java.lang.String copyStreamToString(java.io.InputStream,int,java.lang.String)
com.google.android.material.stateful.ExtendableSavedState: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.utils.ArrayMap: int size
com.esotericsoftware.jsonbeans.JsonReader: byte[] _json_eof_actions
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 localToParentCoordinates(com.badlogic.gdx.math.Vector2)
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setSelectedIndex(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: boolean isEdges()
com.badlogic.gdx.utils.BufferUtils: long find(java.nio.Buffer,int,int,float[],int,int)
com.badlogic.gdx.graphics.g3d.Model: void loadMaterials(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.utils.TextureProvider)
com.badlogic.gdx.physics.box2d.JointEdge: JointEdge(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Joint)
com.badlogic.gdx.net.HttpStatus: int SC_METHOD_FAILURE
com.badlogic.gdx.utils.Array: java.lang.Object[] setSize(int)
com.badlogic.gdx.scenes.scene2d.Stage: int[] pointerScreenX
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FSTORE
com.esotericsoftware.kryo.io.Output: void writeBoolean(boolean)
com.badlogic.gdx.utils.JsonValue: long asLong()
com.badlogic.gdx.backends.android.ZipResourceFile: int kCDELocalOffset
com.badlogic.gdx.assets.AssetLoadingTask: boolean dependenciesLoaded
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: int dragTime
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction: void updateRelative(float)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE24
com.gameanalytics.sdk.events.EGASdkErrorArea: com.gameanalytics.sdk.events.EGASdkErrorArea valueOf(java.lang.String)
com.badlogic.gdx.math.collision.BoundingBox: float getCenterZ()
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1: com.esotericsoftware.kryonet.Connection val$connection
com.esotericsoftware.kryo.util.ObjectMap$Keys: boolean hasNext()
com.esotericsoftware.kryo.util.IdentityMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.backends.android.AndroidApplicationBase: void log(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: AndroidOnscreenKeyboard$PassThroughEditable()
com.badlogic.gdx.utils.DelayedRemovalArray: void truncate(int)
com.badlogic.gdx.utils.Array: boolean ordered
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row: PixmapPacker$SkylineStrategy$SkylinePage$Row()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_INVOKESTATIC
com.badlogic.gdx.Net$HttpResponse: java.io.InputStream getResultAsStream()
com.badlogic.gdx.maps.objects.TextureMapObject
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: RotateToAction(boolean)
com.esotericsoftware.kryonet.Listener$QueuedListener: Listener$QueuedListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.scenes.scene2d.actions.IntAction: int getStart()
com.badlogic.gdx.scenes.scene2d.ui.Slider: int draggingPointer
com.badlogic.gdx.graphics.g2d.NinePatch: void setMiddleWidth(float)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: void setDragStartX(float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetMotorTorque(long,float)
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation[] $VALUES
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values()
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: TextButton$TextButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: float time
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void color(float,float,float,float)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Quaternion)
com.esotericsoftware.reflectasm.FieldAccess: void setDouble(java.lang.Object,int,double)
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: boolean is(long)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Container: void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void draw()
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator: void reset()
com.google.android.material.internal.NavigationMenuItemView: void setActionView(android.view.View)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.graphics.Color tempColor
com.badlogic.gdx.graphics.PixmapIO$PNG: void dispose()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: ParticleChannels()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.math.BSpline: java.lang.Object valueAt(java.lang.Object,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
com.badlogic.gdx.assets.loaders.TextureAtlasLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glDeleteFramebuffer(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int GPU_SIZE_ROTATION_OFFSET
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void setLimits(float,float)
com.badlogic.gdx.graphics.g2d.NinePatch: float leftWidth
com.badlogic.gdx.scenes.scene2d.Stage: boolean debugParentUnderMouse
com.badlogic.gdx.utils.ByteArray: byte first()
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.InputMultiplexer: boolean mouseMoved(int,int)
com.badlogic.gdx.physics.box2d.World: int getFixtureCount()
com.esotericsoftware.kryo.util.ObjectMap: void clear(int)
com.badlogic.gdx.utils.ByteArray: byte[] resize(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: Tree$TreeStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.utils.JsonWriter: void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType)
com.badlogic.gdx.utils.reflect.ArrayReflection
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter: ShaderProgramLoader$ShaderProgramParameter()
com.badlogic.gdx.backends.android.AndroidDaydream: AndroidDaydream()
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: java.lang.String createPrefix(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void putStash(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void rect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle: SelectBox$SelectBoxStyle()
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput(java.io.OutputStream)
com.badlogic.gdx.scenes.scene2d.ui.Table: void clearChildren()
com.esotericsoftware.kryo.Kryo: java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.math.Interpolation$ExpOut
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float)
com.badlogic.gdx.backends.android.AndroidGraphics: void setTitle(java.lang.String)
com.badlogic.gdx.math.Vector2: float dst2(com.badlogic.gdx.math.Vector)
androidx.appcompat.widget.Toolbar: void setNavigationIcon(int)
com.badlogic.gdx.utils.compression.lzma.Encoder: void Create()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,float,float,float)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight set(com.badlogic.gdx.graphics.g3d.environment.SpotLight)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: void unbind()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: java.lang.String getManagedStatus()
com.badlogic.gdx.physics.box2d.joints.DistanceJoint
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String)
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isInstance(java.lang.Class,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.math.Vector3: float len2(float,float,float)
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathStart()
androidx.appcompat.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)
com.esotericsoftware.kryo.io.KryoObjectInput: java.lang.Object readObject()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.math.Vector3 up
com.badlogic.gdx.scenes.scene2d.ui.Image: float imageWidth
androidx.coordinatorlayout.widget.CoordinatorLayout
com.esotericsoftware.kryonet.KryoSerialization: KryoSerialization()
com.badlogic.gdx.utils.Json: void setReadDeprecated(boolean)
com.badlogic.gdx.graphics.g3d.model.NodePart: com.badlogic.gdx.graphics.g3d.model.NodePart copy()
com.google.android.material.button.MaterialButton: void setShouldDrawSurfaceColorStroke(boolean)
com.badlogic.gdx.InputEventQueue: com.badlogic.gdx.InputProcessor getProcessor()
com.badlogic.gdx.graphics.glutils.ShaderProgram: ShaderProgram(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: DefaultArraySerializers$LongArraySerializer()
com.esotericsoftware.kryonet.Connection: void removeListener(com.esotericsoftware.kryonet.Listener)
com.google.android.material.internal.CheckableImageButton: void setCheckable(boolean)
com.badlogic.gdx.graphics.GL30: int GL_COPY_READ_BUFFER_BINDING
com.HyperSphere.FireBase.FireBaseMessageManager: FireBaseMessageManager()
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1: com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 this$1
com.badlogic.gdx.graphics.glutils.PixmapTextureData: PixmapTextureData(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean,boolean)
com.badlogic.gdx.graphics.GL20: void glVertexAttrib2f(int,float,float)
com.badlogic.gdx.scenes.scene2d.Actor: java.lang.Object userObject
com.esotericsoftware.kryo.serializers.MapSerializer: java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.backends.android.AndroidApplication: android.view.View initializeForView(com.badlogic.gdx.ApplicationListener)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int ARRAY
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: com.esotericsoftware.reflectasm.FieldAccess access
com.badlogic.gdx.Preferences: java.lang.String getString(java.lang.String,java.lang.String)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: float Range
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle style
com.badlogic.gdx.graphics.GL30: void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform viewWorldTrans
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteTexture(int)
com.badlogic.gdx.graphics.GL20: void glDepthMask(boolean)
com.esotericsoftware.kryo.io.FastInput: int readInt(boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData: com.badlogic.gdx.graphics.g2d.PixmapPacker packer
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsEnabled(int)
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Entries entries2
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float gridWidth
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: SimpleOrthoGroupStrategy()
com.badlogic.gdx.utils.DataBuffer
com.badlogic.gdx.graphics.Cubemap: void setAssetManager(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.GL30: void glDrawBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void allocParticlesData(int)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color LIGHT_GRAY
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformi(int,int,int,int,int)
com.esotericsoftware.jsonbeans.JsonValue: long getLong(int)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$1: void run()
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.graphics.g3d.loader.MtlLoader: MtlLoader()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: int getRenderMode()
com.badlogic.gdx.math.Ellipse: Ellipse(com.badlogic.gdx.math.Ellipse)
androidx.appcompat.widget.SearchView: void setSuggestionsAdapter(androidx.cursoradapter.widget.CursorAdapter)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2
com.badlogic.gdx.scenes.scene2d.ui.Window: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.GL20: int GL_SUBPIXEL_BITS
com.esotericsoftware.kryonet.rmi.ObjectSpace$2: int compare(java.lang.Object,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,byte[],int,int,int,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: float currentTint
com.badlogic.gdx.backends.android.AndroidInput$4
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder deleteCharAt(int)
com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails: boolean checkSID(java.lang.String)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glColorMask(boolean,boolean,boolean,boolean)
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeDouble(double,double,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: ClassWriter(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader,int)
com.badlogic.gdx.maps.MapObjects: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue
com.badlogic.gdx.physics.box2d.Shape: long addr
com.google.android.material.chip.Chip: void setCloseIconEnabledResource(int)
com.badlogic.gdx.scenes.scene2d.actions.AfterAction: com.badlogic.gdx.utils.Array waitForActions
com.badlogic.gdx.physics.box2d.Body: long addr
com.badlogic.gdx.math.Interpolation$5
com.badlogic.gdx.scenes.scene2d.ui.Tree: boolean sizeInvalid
com.badlogic.gdx.utils.IntIntMap: int PRIME2
com.esotericsoftware.kryonet.util.InputStreamSender
com.badlogic.gdx.utils.IntIntMap: void putAll(com.badlogic.gdx.utils.IntIntMap)
com.google.android.material.appbar.AppBarLayout: void setVisibility(int)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: com.badlogic.gdx.utils.Timer$Task scrollUp
com.badlogic.gdx.maps.MapObject
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer: java.lang.Enum read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue getDuration()
com.badlogic.gdx.physics.box2d.Fixture: void setSensor(boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setBlend(int)
com.esotericsoftware.jsonbeans.JsonReader: byte[] init__json_single_lengths_0()
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.ObjectMap cacheFields(java.lang.Class)
com.badlogic.gdx.graphics.g3d.environment.BaseLight
androidx.fragment.app.Fragment: boolean mRestored
com.badlogic.gdx.utils.IntIntMap: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g2d.Sprite: void setOriginBasedPosition(float,float)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: com.badlogic.gdx.math.Vector2 initialPointer2
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.graphics.g3d.model.Node getNode(com.badlogic.gdx.utils.Array,java.lang.String,boolean,boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsProgram(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void insert(int,com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.scenes.scene2d.utils.Drawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: com.badlogic.gdx.math.Matrix4 virtualMatrix
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean notEmpty()
com.badlogic.gdx.graphics.g3d.ModelInstance: ModelInstance(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String[])
com.badlogic.gdx.backends.android.APKExpansionSupport: com.badlogic.gdx.backends.android.ZipResourceFile getAPKExpansionZipFile(android.content.Context,int,int)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder appendLine(java.lang.String)
com.badlogic.gdx.utils.JsonReader: void startArray(java.lang.String)
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: boolean zoom(float,float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ArrowShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,float,float,float,float,int)
com.badlogic.gdx.graphics.GL30: void glGetInteger64v(int,java.nio.LongBuffer)
com.badlogic.gdx.graphics.GL30: void glGetIntegerv(int,java.nio.IntBuffer)
com.badlogic.gdx.assets.AssetManager: void handleTaskError(java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int getPressedButton()
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: java.util.Iterator iterator()
com.esotericsoftware.kryo.util.IntMap: java.lang.Object get(int)
com.badlogic.gdx.assets.AssetManager: AssetManager(com.badlogic.gdx.assets.loaders.FileHandleResolver,boolean)
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide valueOf(java.lang.String)
com.esotericsoftware.kryo.io.InputChunked: InputChunked()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void setTapCountInterval(float)
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.IntArray indices
com.badlogic.gdx.scenes.scene2d.ui.List$2: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteObjectSerializer: ObjectSpace$RemoteObjectSerializer()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector2 dimensions
androidx.core.widget.NestedScrollView: float getVerticalScrollFactorCompat()
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void cancelTouchFocus()
com.badlogic.gdx.utils.JsonValue: void json(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,com.badlogic.gdx.utils.JsonWriter$OutputType)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetLeft()
androidx.fragment.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib2f(int,float,float)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int[] getOffset()
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float jniGetFrequency(long)
com.badlogic.gdx.math.Vector3: float dot(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: float getMaxHeight()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: void setTapSquareSize(float)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder newRequest()
com.badlogic.gdx.utils.viewport.ScalingViewport
com.badlogic.gdx.Net$HttpRequest: java.io.InputStream contentStream
com.badlogic.gdx.utils.ArrayMap: boolean isEmpty()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: com.badlogic.gdx.math.Quaternion TMP_Q
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy: int width
com.google.android.material.textfield.TextInputLayout: void setEndIconVisible(boolean)
com.google.android.material.card.MaterialCardView: void setCheckable(boolean)
com.badlogic.gdx.math.Intersector: boolean intersectRayBounds(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.collision.BoundingBox,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.glutils.FloatTextureData
com.badlogic.gdx.utils.ObjectMap: java.lang.Object getStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.math.Matrix4: int M33
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatPressedTranslationZ(float)
com.badlogic.gdx.utils.PropertiesUtils: void writeComment(java.io.Writer,java.lang.String)
com.badlogic.gdx.physics.box2d.Contact: boolean isEnabled()
com.badlogic.gdx.math.Intersector: boolean intersectLines(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.physics.box2d.Fixture: float jniGetDensity(long)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: long getGlyph(long)
com.google.android.material.datepicker.MaterialCalendar
com.esotericsoftware.kryo.io.KryoDataInput
com.badlogic.gdx.backends.android.AndroidInput$1: com.badlogic.gdx.backends.android.AndroidInput this$0
com.badlogic.gdx.utils.Array: com.badlogic.gdx.utils.Array of(java.lang.Class)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color YELLOW
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider: DepthShaderProvider(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glClearBufferuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.ByteArray: void swap(int,int)
com.badlogic.gdx.backends.android.AndroidGraphics: void setVSync(boolean)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: OrthoCachedTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float)
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.assets.loaders.AssetLoader: com.badlogic.gdx.assets.loaders.FileHandleResolver resolver
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int vertexSize
com.badlogic.gdx.math.Intersector: boolean intersectRectangles(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.physics.box2d.JointDef$JointType: int value
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.math.Vector2 tmp
com.badlogic.gdx.utils.Json: void writeValue(java.lang.Object,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Button: void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void end()
com.badlogic.gdx.utils.XmlReader$Element: boolean getBooleanAttribute(java.lang.String)
com.badlogic.gdx.physics.box2d.WorldManifold: com.badlogic.gdx.math.Vector2[] points
com.badlogic.gdx.graphics.VertexAttribute: int numComponents
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: int getMaxVertices()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float velocityY
com.esotericsoftware.kryo.io.KryoDataInput: float readFloat()
com.badlogic.gdx.math.Bresenham2$1: com.badlogic.gdx.math.Bresenham2 this$0
com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField: ObjectField$ObjectBooleanField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.utils.TimSort: int[] runLen
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int bind(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.utils.ObjectSet: int hash2(int)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container size(float,float)
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int xoffset
com.badlogic.gdx.utils.BufferUtils: long find(float[],int,int,java.nio.Buffer,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)
com.badlogic.gdx.graphics.g2d.Batch: int getBlendDstFuncAlpha()
com.esotericsoftware.kryo.io.ByteBufferOutput: void clear()
com.badlogic.gdx.InputMultiplexer: void clear()
com.badlogic.gdx.utils.IntArray: void addAll(int[])
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.widget.FrameLayout$LayoutParams createLayoutParams()
androidx.appcompat.widget.ActionMenuView: android.view.Menu getMenu()
com.hyperspherestudio.kryonet.Packets.EncryptedPacket: void encrypt(byte[],java.lang.Object)
com.badlogic.gdx.utils.PauseableThread: void stopThread()
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: DistanceFieldFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean,boolean)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: com.badlogic.gdx.graphics.glutils.ShaderProgram shader
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.math.Bresenham2: com.badlogic.gdx.utils.Array points
com.badlogic.gdx.graphics.GL20: int GL_MIRRORED_REPEAT
com.esotericsoftware.kryo.Kryo: void popGenericsScope()
com.badlogic.gdx.utils.IntIntMap: float loadFactor
com.badlogic.gdx.graphics.GL20: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1
com.badlogic.gdx.graphics.g2d.PolygonSprite: float y
com.badlogic.gdx.math.Bresenham2: com.badlogic.gdx.utils.Array line(com.badlogic.gdx.math.GridPoint2,com.badlogic.gdx.math.GridPoint2)
androidx.fragment.app.Fragment: android.os.Bundle mSavedFragmentState
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp5
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBlendEquationSeparate(int,int)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: boolean complete
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField: void copy(java.lang.Object,java.lang.Object)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int ID
com.badlogic.gdx.Gdx: com.badlogic.gdx.Input input
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: java.lang.String toString()
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput(int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform3f(int,float,float,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter projViewWorldTrans
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle style
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform3i(int,int,int,int)
com.badlogic.gdx.physics.box2d.ContactListener: void beginContact(com.badlogic.gdx.physics.box2d.Contact)
com.badlogic.gdx.math.Quaternion: float getPitchRad()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: float maxTileHeight
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13: DefaultShader$Setters$13()
com.HyperSphere.Connection.PacketObjects.Misc.PathProgress: PathProgress(int[])
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: TextureAtlas$AtlasRegion(com.badlogic.gdx.graphics.Texture,int,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void begin(com.badlogic.gdx.graphics.VertexAttributes,int)
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: com.badlogic.gdx.graphics.g2d.BitmapFont loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter)
com.esotericsoftware.jsonbeans.JsonValue: byte getByte(int)
com.badlogic.gdx.utils.IdentityMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entry entry
com.badlogic.gdx.graphics.g2d.Batch: void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int GPU_UV_OFFSET
com.badlogic.gdx.utils.compression.lzma.Base: int StateUpdateRep(int)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior
com.badlogic.gdx.scenes.scene2d.ui.Table$2
com.badlogic.gdx.graphics.GLTexture: void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
com.badlogic.gdx.graphics.g3d.model.Node: int insertChildren(int,java.lang.Iterable)
com.badlogic.gdx.Input$Keys: int MEDIA_PREVIOUS
androidx.fragment.app.Fragment: java.lang.String toString()
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
com.badlogic.gdx.utils.ObjectSet: int PRIME2
com.badlogic.gdx.graphics.g2d.PolygonSprite: float scaleY
com.badlogic.gdx.utils.ObjectSet: void addAll(java.lang.Object[])
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: long[] readLongs(int,boolean)
com.badlogic.gdx.math.MathUtils: int floorPositive(float)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padBottom(float)
com.badlogic.gdx.Graphics$BufferFormat: int r
com.badlogic.gdx.graphics.GL20: int GL_LINES
com.esotericsoftware.kryonet.Client: java.lang.Thread getUpdateThread()
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
androidx.fragment.app.Fragment: boolean performContextItemSelected(android.view.MenuItem)
com.badlogic.gdx.Input$Keys: int DOWN
com.esotericsoftware.kryo.serializers.MapSerializer: java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.math.Polygon: float[] getVertices()
com.esotericsoftware.kryonet.util.InputStreamSender: java.lang.Object next()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getUnderlinePosition()
com.badlogic.gdx.utils.ObjectMap: java.lang.Object[] keyTable
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelProvider$Factory mDefaultFactory
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox set(java.util.List)
com.badlogic.gdx.backends.android.AndroidInput: void setCatchBackKey(boolean)
com.badlogic.gdx.graphics.Mesh: void transformUV(com.badlogic.gdx.math.Matrix3,float[],int,int,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float)
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.Table: float getRowPrefHeight(int)
com.badlogic.gdx.scenes.scene2d.utils.Selection: int size()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: GLFrameBuffer$FloatFrameBufferBuilder(int,int)
com.esotericsoftware.kryo.Generics: java.lang.String toString()
com.badlogic.gdx.graphics.GL20: int GL_FUNC_ADD
com.badlogic.gdx.InputAdapter: boolean touchUp(int,int,int,int)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color sub(float,float,float,float)
com.badlogic.gdx.physics.box2d.Contact: com.badlogic.gdx.physics.box2d.WorldManifold worldManifold
com.badlogic.gdx.utils.compression.lzma.Decoder: short[] m_IsRepDecoders
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int,short[],int,int)
com.esotericsoftware.kryo.serializers.BeanSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
androidx.fragment.app.Fragment: void setHasOptionsMenu(boolean)
com.badlogic.gdx.math.BSpline: float approximate(java.lang.Object)
com.esotericsoftware.kryonet.TcpConnection: java.nio.ByteBuffer writeBuffer
com.badlogic.gdx.maps.tiled.TideMapLoader: TideMapLoader()
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] _alignPrices
com.esotericsoftware.kryo.util.IdentityMap$MapIterator: int nextIndex
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void dispose()
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver
com.esotericsoftware.kryonet.rmi.ObjectSpace$3: com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO
com.badlogic.gdx.graphics.g3d.ModelBatch: void dispose()
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode getEmissionMode()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: long[] copy(com.esotericsoftware.kryo.Kryo,long[])
androidx.fragment.app.Fragment: void performOptionsMenuClosed(android.view.Menu)
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.ui.Label: int lineAlign
androidx.fragment.app.Fragment: void onStart()
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: CreatureFactors()
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.compression.lzma.Base: Base()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer: com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer get()
com.badlogic.gdx.graphics.GL30: int GL_HALF_FLOAT
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2
com.esotericsoftware.jsonbeans.JsonWriter: void write(char[],int,int)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Float fillY
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList: com.badlogic.gdx.scenes.scene2d.InputListener hideListener
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: UIUtils()
com.badlogic.gdx.Input$Keys: int NUMPAD_4
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode getBlendMode()
com.google.android.material.chip.ChipGroup: void setShowDividerHorizontal(int)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float animateFromValue
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform3iv(int,int,int[],int)
com.esotericsoftware.kryonet.Serialization: void writeLength(java.nio.ByteBuffer,int)
com.badlogic.gdx.utils.ObjectIntMap$Keys: com.badlogic.gdx.utils.ObjectIntMap$Keys iterator()
com.badlogic.gdx.graphics.g3d.Attributes: void disable(long)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: short vertex(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBlendFunc(int,int)
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType[] $VALUES
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Audio getAudio()
com.badlogic.gdx.physics.box2d.Body: void applyTorque(float,boolean)
com.esotericsoftware.kryonet.Client: Client(int,int,com.esotericsoftware.kryonet.Serialization)
com.badlogic.gdx.math.Vector2: float dst2(float,float,float,float)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean updateParticle(com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle,float,int)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.math.Rectangle handleBounds
com.badlogic.gdx.graphics.g2d.Sprite: void setCenterY(float)
com.badlogic.gdx.scenes.scene2d.InputEvent: com.badlogic.gdx.scenes.scene2d.Actor relatedActor
com.badlogic.gdx.graphics.Texture: void setAssetManager(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue: boolean isActive()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getVisualScrollPercentX()
com.badlogic.gdx.utils.ObjectMap: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch: void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData)
com.badlogic.gdx.math.Circle: void setPosition(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.IntMap$Entries: IntMap$Entries(com.badlogic.gdx.utils.IntMap)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Quaternion rotator
com.badlogic.gdx.maps.tiled.TiledMap: TiledMap()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell uniformX()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void draw(com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.graphics.g2d.Sprite: int VERTEX_SIZE
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: DefaultArraySerializers$BooleanArraySerializer()
com.HyperSphere.Connection.PacketObjects.Map.Mark: Mark()
com.badlogic.gdx.graphics.GL30: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void updateFirstLineShowing()
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean getCopyTransient()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useAccelerometer
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Application$ApplicationType getType()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: boolean glIsProgram(int)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void log(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE20
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform alphaTest
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void setValue(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue colorValue
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer: IsometricStaggeredTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap)
com.badlogic.gdx.utils.IdentityMap: void clear()
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: com.badlogic.gdx.utils.compression.lzma.Encoder this$0
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge
com.badlogic.gdx.utils.BooleanArray: void addAll(boolean[])
com.badlogic.gdx.scenes.scene2d.utils.FocusListener: FocusListener()
com.esotericsoftware.kryonet.Server: java.nio.channels.Selector selector
com.badlogic.gdx.utils.compression.lz.InWindow: int _streamPos
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider: TextureProvider$FileTextureProvider(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean)
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: NetJavaImpl$HttpClientResponse(java.net.HttpURLConnection)
com.badlogic.gdx.utils.LongMap: int threshold
com.badlogic.gdx.Version: int REVISION
com.esotericsoftware.kryo.Kryo: byte NOT_NULL
com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int register(java.lang.String,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter)
com.badlogic.gdx.graphics.g2d.BitmapFont: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide Back
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.physics.box2d.JointEdge
com.badlogic.gdx.scenes.scene2d.ui.Value$4: Value$4()
com.esotericsoftware.kryo.util.IntMap$Keys: IntMap$Keys(com.esotericsoftware.kryo.util.IntMap)
com.badlogic.gdx.utils.PauseableThread: java.lang.Runnable runnable
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: boolean alwaysActive
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int EXPAND_FRAMES
com.badlogic.gdx.backends.android.AndroidInput: java.util.ArrayList keyListeners
com.badlogic.gdx.graphics.TextureArray: TextureArray(boolean,com.badlogic.gdx.files.FileHandle[])
com.esotericsoftware.kryonet.JsonSerialization: void writeLength(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter: ParticleEffectLoader$ParticleEffectSaveParameter(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.utils.Array)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateX(float)
androidx.lifecycle.Lifecycling$1
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell height(float)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
com.badlogic.gdx.graphics.GL20: int GL_BLEND
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.XmlReader$Element getChildByName(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ArrowShapeBuilder
com.badlogic.gdx.graphics.g3d.ModelBatch: boolean ownContext
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip: TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.esotericsoftware.kryo.Kryo: void setInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)
com.badlogic.gdx.utils.IntSet: boolean equals(java.lang.Object)
com.badlogic.gdx.math.Polygon: float getScaleX()
com.esotericsoftware.jsonbeans.JsonValue: double asDouble()
com.esotericsoftware.kryo.io.OutputChunked: void endChunks()
com.badlogic.gdx.input.RemoteInput: void vibrate(long[],int)
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: int getMaxParticleCount()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.nio.IntBuffer intbuf
com.badlogic.gdx.physics.box2d.Body: long jniCreateFixture(long,long,float,float,float,boolean,short,short,short)
com.badlogic.gdx.math.Circle
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9: com.badlogic.gdx.math.Matrix4 temp
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter: I18NBundleLoader$I18NBundleParameter(java.util.Locale,java.lang.String)
com.google.android.material.datepicker.MaterialDatePicker: MaterialDatePicker()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell expandY()
com.esotericsoftware.minlog.Log: void setLogger(com.esotericsoftware.minlog.Log$Logger)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: short[] Models
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.Generics genericsScope
com.badlogic.gdx.utils.Queue: java.lang.Object removeFirst()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void update()
com.badlogic.gdx.Graphics: float getDensity()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VelocityPhiDiffOffset
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int threshold
com.badlogic.gdx.files.FileHandle: void writeString(java.lang.String,boolean)
com.badlogic.gdx.utils.BooleanArray: boolean[] toArray()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,float,float,float)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: TextureLoader$TextureParameter()
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void setVisualPressed(boolean)
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion
com.badlogic.gdx.backends.android.AndroidInput: float getPitch()
com.badlogic.gdx.utils.JsonValue: void addChild(com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.kryo.io.Input: int[] readInts(int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getJointAngle()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String EmissiveAlias
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.math.Matrix3 normalTransform
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createAmbient(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField
com.esotericsoftware.kryo.util.IntMap$Entries: com.esotericsoftware.kryo.util.IntMap$Entry next()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence)
com.badlogic.gdx.files.FileHandle: java.lang.String readString(java.lang.String)
com.badlogic.gdx.utils.LongMap: java.lang.Object get(long,java.lang.Object)
com.badlogic.gdx.utils.JsonWriter$OutputType: JsonWriter$OutputType(java.lang.String,int)
com.badlogic.gdx.graphics.glutils.GLVersion: java.lang.String getRendererString()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: boolean hasRotation
com.badlogic.gdx.files.FileHandle: java.lang.String pathWithoutExtension()
com.badlogic.gdx.graphics.Texture$TextureWrap: Texture$TextureWrap(java.lang.String,int,int)
com.badlogic.gdx.graphics.Pixmap: Pixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap)
androidx.fragment.app.Fragment: void setTargetFragment(androidx.fragment.app.Fragment,int)
com.badlogic.gdx.backends.android.AndroidMusic: void setVolume(float)
com.esotericsoftware.kryonet.Server: int emptySelects
com.badlogic.gdx.utils.StringBuilder: void move(int,int)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.Vector3 min
com.badlogic.gdx.scenes.scene2d.Event: void cancel()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int newId()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: com.badlogic.gdx.utils.ObjectIntMap map
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColors(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter: java.lang.StringBuilder mBuilder
com.badlogic.gdx.scenes.scene2d.ui.Value: com.badlogic.gdx.scenes.scene2d.ui.Value minWidth
com.badlogic.gdx.math.Vector2: long serialVersionUID
com.esotericsoftware.kryo.io.UnsafeInput: long readLong()
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: GdxEglConfigChooser(int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int padTop
com.google.android.material.chip.ChipGroup: void setCheckedId(int)
com.google.android.material.chip.Chip: void setTextStartPaddingResource(int)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor: java.lang.Class type
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10
com.badlogic.gdx.input.RemoteSender: java.io.DataOutputStream out
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getRows(long)
com.google.android.material.textfield.TextInputLayout: void setPlaceholderTextEnabled(boolean)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: UnsafeMemoryOutput(long,int)
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues: OrderedMap$OrderedMapValues(com.badlogic.gdx.utils.OrderedMap)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_NATIVE
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glShaderSource(int,java.lang.String)
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: int index
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer
com.badlogic.gdx.physics.box2d.CircleShape: CircleShape()
com.badlogic.gdx.utils.Json: void toJson(java.lang.Object,java.lang.Class,java.io.Writer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteRenderbuffer(int)
com.esotericsoftware.kryo.Kryo: boolean references
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setColor(float,float,float,float)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
com.badlogic.gdx.utils.ShortArray: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.graphics.g3d.ModelInstance target
com.esotericsoftware.kryo.io.Input: void setLimit(int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int getDefaultCullFace()
com.esotericsoftware.kryonet.Connection: Connection()
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String name
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.Actor previousKeyboardFocus
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart: int primitiveType
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: com.esotericsoftware.kryo.util.ObjectMap map
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glGetError()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void triangle(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: boolean isDrawing()
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed: float value
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathEnd()
com.esotericsoftware.kryo.io.UnsafeOutput: UnsafeOutput()
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue get(int)
com.badlogic.gdx.math.CumulativeDistribution: com.badlogic.gdx.utils.Array values
com.badlogic.gdx.graphics.g2d.SpriteBatch: float invTexWidth
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: com.badlogic.gdx.utils.Array models
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glResumeTransformFeedback()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable handle
com.badlogic.gdx.math.Plane: boolean isFrontFacing(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform3f(int,float,float,float)
androidx.appcompat.widget.AlertDialogLayout
com.badlogic.gdx.assets.loaders.TextureAtlasLoader
com.esotericsoftware.kryonet.EndPoint: void run()
com.google.android.material.card.MaterialCardView: void setCardBackgroundColor(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeStepGranularity()
com.badlogic.gdx.utils.IntSet: int EMPTY
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String,boolean)
com.badlogic.gdx.maps.tiled.TideMapLoader: void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: boolean isPlayer
com.badlogic.gdx.backends.android.AndroidFileHandle
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_fogColor
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setX(float)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: float visualPressedDuration
com.badlogic.gdx.physics.box2d.ChainShape: void createChain(float[])
androidx.appcompat.view.menu.ListMenuItemView: void setGroupDividerEnabled(boolean)
com.badlogic.gdx.physics.box2d.EdgeShape: void jniSetHasVertex0(long,boolean)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void box(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell expand()
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void enableMotor(boolean)
com.badlogic.gdx.graphics.Pixmap$Format: Pixmap$Format(java.lang.String,int)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: boolean varIntsEnabled
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int T_BYTE
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
com.badlogic.gdx.graphics.GL30: void glUniform4fv(int,int,float[],int)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String)
com.badlogic.gdx.graphics.g2d.BitmapFont: boolean ownsTexture()
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute: com.badlogic.gdx.utils.Array lights
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable minus
androidx.viewpager2.adapter.FragmentStateAdapter$5
com.badlogic.gdx.utils.ObjectFloatMap: boolean containsValue(float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: boolean allowSameAnimation
com.esotericsoftware.kryo.io.Input: long total()
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: int mMethod
com.badlogic.gdx.physics.box2d.Contact: void jniSetEnabled(long,boolean)
com.badlogic.gdx.utils.StringBuilder: StringBuilder()
com.esotericsoftware.kryo.io.UnsafeInput: float[] readFloats(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$4: SelectBox$SelectBoxList$4(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.SelectBox)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float jniGetMaxForce(long)
com.badlogic.gdx.utils.Json: void setIgnoreDeprecated(boolean)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO: java.lang.String getZipFileName()
com.badlogic.gdx.math.CatmullRomSpline: float approximate(com.badlogic.gdx.math.Vector,int)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: boolean fling(float,float,int)
com.badlogic.gdx.utils.ObjectFloatMap$Values: com.badlogic.gdx.utils.FloatArray toArray()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setRippleColor(int)
com.badlogic.gdx.scenes.scene2d.ui.Window: void setModal(boolean)
com.badlogic.gdx.math.RandomXS128: long seed1
com.esotericsoftware.reflectasm.FieldAccess: void setLong(java.lang.Object,int,long)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.scenes.scene2d.ui.Container container
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.Joint createJoint(com.badlogic.gdx.physics.box2d.JointDef)
com.esotericsoftware.reflectasm.ConstructorAccess
androidx.appcompat.widget.AppCompatButton: void setSupportAllCaps(boolean)
com.google.android.material.appbar.AppBarLayout: android.graphics.drawable.Drawable getStatusBarForeground()
com.badlogic.gdx.math.Polyline: float getScaleY()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void expandAll()
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.utils.FloatArray floatArray2
com.badlogic.gdx.math.Polyline: void translate(float,float)
com.badlogic.gdx.net.NetJavaImpl$1
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int accuracy
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int getAndIncrementStash(java.lang.Object,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getParent()
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.Cell getImageCell()
com.badlogic.gdx.graphics.GL30: int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.ApplicationLogger getApplicationLogger()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup center()
com.badlogic.gdx.utils.Array: java.lang.Object[] items
com.badlogic.gdx.math.Interpolation$2: Interpolation$2()
com.badlogic.gdx.scenes.scene2d.ui.Container: void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable,boolean)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_SIZE
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short)
com.badlogic.gdx.graphics.GL30: int GL_ALREADY_SIGNALED
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(double[])
com.esotericsoftware.kryo.io.UnsafeMemoryInput: UnsafeMemoryInput()
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1: AndroidFragmentApplication$1(com.badlogic.gdx.backends.android.AndroidFragmentApplication)
com.badlogic.gdx.graphics.VertexAttributes: int compareTo(com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel
com.badlogic.gdx.graphics.glutils.IndexData: void setIndices(short[],int,int)
com.badlogic.gdx.input.RemoteInput$TouchEvent: int TOUCH_DRAGGED
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer expandY
com.badlogic.gdx.maps.tiled.TiledMapTile: void setOffsetY(float)
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.lang.String)
androidx.fragment.app.Fragment$SavedState: android.os.Parcelable$Creator CREATOR
androidx.appcompat.app.AppCompatViewInflater: AppCompatViewInflater()
com.badlogic.gdx.files.FileHandle: boolean deleteDirectory(java.io.File)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat: com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.HdpiUtils: int toBackBufferY(int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void onResume()
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction
com.badlogic.gdx.utils.ObjectFloatMap: ObjectFloatMap(com.badlogic.gdx.utils.ObjectFloatMap)
com.badlogic.gdx.utils.IntFloatMap: boolean containsValue(float)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createDiffuse(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.utils.viewport.Viewport: void setCamera(com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.utils.TimeUtils: long millisToNanos(long)
com.esotericsoftware.kryo.io.ByteBufferOutputStream: java.nio.ByteBuffer getByteBuffer()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: boolean isBound
com.badlogic.gdx.assets.AssetDescriptor: java.lang.String fileName
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
androidx.cardview.widget.CardView: void setCardBackgroundColor(android.content.res.ColorStateList)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: com.badlogic.gdx.utils.Array getButtons()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: void setInstanceData(java.nio.FloatBuffer,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_FAST_GLYPHS
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: int FLAG_FLIP_VERTICALLY
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int getArgumentsAndReturnSizes()
com.badlogic.gdx.scenes.scene2d.utils.Selection: void setAll(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.SortedIntList$NodePool: SortedIntList$NodePool()
com.badlogic.gdx.math.WindowedMean: int added_values
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniGetLocalAnchorB(long,float[])
com.badlogic.gdx.graphics.GL20: void glVertexAttrib3f(int,float,float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glActiveTexture(int)
com.esotericsoftware.kryo.io.KryoDataOutput: void writeFloat(float)
com.badlogic.gdx.utils.OrderedSet: boolean add(java.lang.Object,int)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: int nextIndex
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer: OrthogonalTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER5
com.esotericsoftware.kryonet.Listener$QueuedListener$2: com.esotericsoftware.kryonet.Listener$QueuedListener this$0
com.badlogic.gdx.utils.DelayedRemovalArray: DelayedRemovalArray(com.badlogic.gdx.utils.Array)
com.google.android.material.button.MaterialButton: void setStrokeColor(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.GL30: int GL_INVALID_INDEX
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: java.lang.String vertexFileSuffix
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int getBlendDstFuncAlpha()
com.badlogic.gdx.graphics.glutils.ETC1TextureData: int width
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable: com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean zoom(float)
com.badlogic.gdx.graphics.GL30: void glValidateProgram(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: boolean isEndRow()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker: FreeType$Stroker(long)
com.badlogic.gdx.utils.ArrayMap: boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: int viewFormat
com.badlogic.gdx.utils.LongMap$Entry: LongMap$Entry()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: int srcX
com.badlogic.gdx.physics.box2d.Manifold: int jniGetPoint(long,float[],int)
com.badlogic.gdx.utils.IdentityMap: com.badlogic.gdx.utils.IdentityMap$Entries entries1
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Entries entries()
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.Input getInput()
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool: ModelCache$TightMeshPool()
com.badlogic.gdx.input.RemoteInput: int getDeltaY()
com.esotericsoftware.kryo.io.ByteBufferOutput: void write(byte[])
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(float)
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue$ValueType type
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int TOUCH_MOVED
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Table table
com.badlogic.gdx.graphics.glutils.HdpiUtils: int toLogicalY(int)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 shear(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void drawAdjustedUV(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,float,float,float,float,boolean,boolean)
com.esotericsoftware.kryo.util.IdentityMap: java.lang.Object remove(java.lang.Object)
com.badlogic.gdx.utils.viewport.ScreenViewport: ScreenViewport()
com.badlogic.gdx.utils.Pools: com.badlogic.gdx.utils.Pool get(java.lang.Class)
com.badlogic.gdx.physics.box2d.MassData
androidx.fragment.app.Fragment: boolean isMenuVisible()
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,boolean)
com.badlogic.gdx.utils.ObjectSet: java.lang.Object get(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue
com.badlogic.gdx.math.Quaternion: float getAngleRad()
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundColorResource(int)
com.badlogic.gdx.Input$Buttons: int FORWARD
com.badlogic.gdx.utils.ObjectIntMap$MapIterator: boolean hasNext
com.badlogic.gdx.utils.viewport.FitViewport: FitViewport(float,float)
com.esotericsoftware.jsonbeans.ObjectMap$Values: java.lang.Object next()
com.badlogic.gdx.graphics.glutils.MipMapGenerator
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: com.badlogic.gdx.math.Vector2 readVector2(com.badlogic.gdx.utils.JsonValue,float,float)
com.badlogic.gdx.utils.PooledLinkedList: com.badlogic.gdx.utils.PooledLinkedList$Item head
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: OrthoCachedTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float,int)
com.google.android.material.card.MaterialCardView: int getContentPaddingLeft()
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: void setRangeSelect(boolean)
com.badlogic.gdx.math.Intersector: boolean intersectRayTriangles(com.badlogic.gdx.math.collision.Ray,float[],short[],int,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.jsonbeans.JsonValue: int getInt(java.lang.String)
com.badlogic.gdx.graphics.VertexAttributes: int getOffset(int,int)
com.badlogic.gdx.graphics.Cursor: void dispose()
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction: void setAmount(float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean scrollX
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: float endWidth
com.badlogic.gdx.scenes.scene2d.Stage: void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType[] $VALUES
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: int xIconDrop
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int GDX2D_FORMAT_RGBA8888
com.badlogic.gdx.backends.android.AndroidInput: boolean compassAvailable
com.badlogic.gdx.physics.box2d.CircleShape: float[] tmp
com.esotericsoftware.kryonet.Server: boolean shutdown
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor
com.badlogic.gdx.scenes.scene2d.ui.Table
com.badlogic.gdx.physics.box2d.World: int jniGetBodyCount(long)
com.badlogic.gdx.graphics.Mesh: float calculateRadius(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.maps.MapGroupLayer: com.badlogic.gdx.maps.MapLayers getLayers()
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: void setAmountY(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle: int hashCode()
com.badlogic.gdx.math.MathUtils: int roundPositive(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D
com.badlogic.gdx.graphics.GL20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.input.RemoteInput$EventTrigger: void run()
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder content(java.lang.String)
com.esotericsoftware.kryo.util.ObjectMap$Entries: ObjectMap$Entries(com.esotericsoftware.kryo.util.ObjectMap)
com.google.android.material.chip.Chip: void setMaxWidth(int)
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean isPasswordMode()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
com.esotericsoftware.jsonbeans.Json: com.esotericsoftware.jsonbeans.ObjectMap classToTag
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.graphics.Cubemap$CubemapSide[] values()
com.badlogic.gdx.scenes.scene2d.ui.List$2: List$2(com.badlogic.gdx.scenes.scene2d.ui.List)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2: void onDestroy()
com.badlogic.gdx.physics.box2d.World: void jniRayCast(long,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidApplication: boolean hideStatusBar
com.badlogic.gdx.files.FileHandle: void moveTo(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.Camera: float viewportWidth
com.badlogic.gdx.backends.android.AndroidClipboard: java.lang.String getContents()
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue: RectangleSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.utils.FloatArray columnSizes
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void allocShader()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder: ConeShapeBuilder()
com.badlogic.gdx.scenes.scene2d.utils.Selection: void remove(java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: void setHighMin(float)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: int[] screenloc
androidx.fragment.app.Fragment: boolean mHasMenu
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getSpawnHeight()
com.badlogic.gdx.scenes.scene2d.ui.Image: float imageHeight
com.badlogic.gdx.graphics.TextureData: boolean isPrepared()
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: com.badlogic.gdx.graphics.glutils.ShaderProgram loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter)
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: int m_NumPosBits
com.badlogic.gdx.files.FileHandle: com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.math.Rectangle vKnobBounds
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: long toBitmap(long,int)
com.badlogic.gdx.math.MathUtils: float randomTriangular(float)
androidx.cardview.widget.CardView: boolean getPreventCornerOverlap()
com.badlogic.gdx.graphics.GL30: int GL_TEXTURE_SWIZZLE_G
com.badlogic.gdx.graphics.GL30: int glCheckFramebufferStatus(int)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Circle: void set(com.badlogic.gdx.math.Vector2,float)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotX()
com.badlogic.gdx.math.MathUtils: float radiansToDegrees
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,float)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField: UnsafeCacheFields$UnsafeDoubleField(java.lang.reflect.Field)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: float checkedOffsetX
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: float[] vertices
com.badlogic.gdx.graphics.g2d.NinePatch: void setTopHeight(float)
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction: boolean finished
com.badlogic.gdx.scenes.scene2d.ui.Value$1
com.badlogic.gdx.utils.Queue$QueueIterator: boolean allowRemove
androidx.appcompat.view.menu.ListMenuItemView
com.badlogic.gdx.utils.compression.lzma.Base: boolean StateIsCharState(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void sphere(float,float,float,int,int,float,float,float,float)
com.esotericsoftware.minlog.Log: void warn(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader
com.badlogic.gdx.graphics.GL30: int GL_VERTEX_ATTRIB_ARRAY_DIVISOR
com.badlogic.gdx.utils.reflect.Method
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: void zoom(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.utils.IntArray: boolean removeAll(com.badlogic.gdx.utils.IntArray)
com.badlogic.gdx.graphics.GL20: int GL_FRAGMENT_SHADER
com.badlogic.gdx.utils.ObjectMap: com.badlogic.gdx.utils.ObjectMap$Entries entries()
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FCMPL
com.badlogic.gdx.scenes.scene2d.ui.Image: Image(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling)
com.esotericsoftware.kryo.serializers.ObjectField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.esotericsoftware.jsonbeans.JsonReader: int json_start
com.badlogic.gdx.graphics.GL20: int GL_BLEND_COLOR
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: void reset()
com.esotericsoftware.kryonet.util.TcpIdleSender: boolean started
com.esotericsoftware.jsonbeans.JsonException: JsonException(java.lang.Throwable)
com.badlogic.gdx.utils.OrderedSet: java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.JsonValue: java.lang.String toString()
com.badlogic.gdx.scenes.scene2d.ui.Value$3: Value$3()
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setSelector(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.Camera: void update()
androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundResource(int)
com.badlogic.gdx.graphics.GL20: int GL_VERTEX_ATTRIB_ARRAY_STRIDE
com.badlogic.gdx.backends.android.AndroidInput: int getY()
com.esotericsoftware.kryonet.Server: void dispose()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo
com.badlogic.gdx.utils.ObjectMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entry next()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void curve(float,float,float,float,float,float,float,float,int)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Keys keys()
com.badlogic.gdx.backends.android.AndroidFiles: boolean isExternalStorageAvailable()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value backgroundRight
com.esotericsoftware.kryonet.Server: int writeBufferSize
com.badlogic.gdx.utils.IntFloatMap$Values: boolean hasNext()
com.badlogic.gdx.physics.box2d.WorldManifold: WorldManifold()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean isDrawVelocities()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glFramebufferRenderbuffer(int,int,int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: int getBufferHandle()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowOut fastSlow
com.badlogic.gdx.graphics.glutils.VertexArray: void dispose()
com.badlogic.gdx.Version
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glFrontFace(int)
com.badlogic.gdx.Input$Keys: int MINUS
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.XmlReader$Element: void getChildrenByNameRecursively(java.lang.String,com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.BlowfishSerializer$1
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: int getLogLevel()
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT9
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape shape
com.esotericsoftware.jsonbeans.JsonValue: char getChar(java.lang.String)
com.badlogic.gdx.backends.android.AndroidInputThreePlus: boolean onGenericMotion(android.view.View,android.view.MotionEvent)
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node[] nodes
com.esotericsoftware.kryo.Registration: void setInstantiator(org.objenesis.instantiator.ObjectInstantiator)
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type[] values()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: com.badlogic.gdx.math.Interpolation getInterpolation()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.math.Matrix3: int M21
com.badlogic.gdx.backends.android.AndroidAudio: com.badlogic.gdx.audio.Music newMusic(java.io.FileDescriptor)
com.badlogic.gdx.graphics.g3d.ModelCache$1: com.badlogic.gdx.graphics.g3d.Renderable newObject()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix2fv(int,int,boolean,float[],int)
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean,boolean)
com.badlogic.gdx.audio.Music: boolean isLooping()
com.badlogic.gdx.backends.android.AndroidApplication: void useImmersiveMode(boolean)
com.badlogic.gdx.files.FileHandle: void copyDirectory(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder: int ReverseDecode(com.badlogic.gdx.utils.compression.rangecoder.Decoder)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: com.badlogic.gdx.scenes.scene2d.ui.Window this$0
com.esotericsoftware.kryo.io.ByteBufferInput: java.nio.ByteOrder nativeOrder
com.badlogic.gdx.graphics.g2d.BitmapFont: float getScaleX()
com.badlogic.gdx.utils.FlushablePool: void flush()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_worldTrans
com.badlogic.gdx.math.ConvexHull: com.badlogic.gdx.utils.ShortArray originalIndices
com.badlogic.gdx.Input$Keys: int CAMERA
com.badlogic.gdx.assets.loaders.TextureLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void addMesh(com.badlogic.gdx.graphics.Mesh)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setHighMax(float)
com.google.android.material.appbar.AppBarLayout$BaseBehavior: AppBarLayout$BaseBehavior()
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void beginRender()
com.badlogic.gdx.utils.async.AsyncExecutor: void dispose()
com.badlogic.gdx.utils.ArrayMap: ArrayMap(com.badlogic.gdx.utils.ArrayMap)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: ColorAttribute(long,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef: FrictionJointDef()
com.badlogic.gdx.scenes.scene2d.Actor: void scaleBy(float,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: com.badlogic.gdx.graphics.g3d.particles.ParticleEffect copy()
com.badlogic.gdx.Input$Keys: int META_SHIFT_ON
com.badlogic.gdx.utils.StringBuilder: java.lang.Appendable append(char)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setFromEulerAnglesRad(float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: int glGetUniformLocation(int,java.lang.String)
com.esotericsoftware.kryo.util.MapReferenceResolver: void setReadObject(int,java.lang.Object)
com.badlogic.gdx.math.Vector: float dst2(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.ObjectMap resources
com.badlogic.gdx.graphics.glutils.HdpiUtils: com.badlogic.gdx.graphics.glutils.HdpiMode mode
com.badlogic.gdx.net.SocketHints
com.badlogic.gdx.graphics.VertexAttribute
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Label: float getPrefWidth()
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single copy()
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random: void allocateChannels()
com.HyperSphere.Connection.PacketObjects.Entities.Monster: com.HyperSphere.Connection.PacketObjects.Entities.Monster clone()
com.badlogic.gdx.math.GeometryUtils: float polygonArea(float[],int,int)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()
com.badlogic.gdx.utils.IdentityMap: void resize(int)
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField: ObjectField$ObjectByteField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getYscale()
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: boolean act(float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: short vertex(float[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newInvokeDynamic(java.lang.String,java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Handle,java.lang.Object[])
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.files.FileHandle getFileHandle()
com.badlogic.gdx.backends.android.AndroidInputThreePlus: java.util.ArrayList genericMotionListeners
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: int getDstBlendFactor()
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.TextFormatter formatter
com.esotericsoftware.jsonbeans.JsonReader: void pop()
com.badlogic.gdx.utils.LongMap$Entries: com.badlogic.gdx.utils.LongMap$Entry next()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: void end()
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void end()
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute createAlphaTest(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void end()
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer: DefaultSerializers$IntSerializer()
com.esotericsoftware.kryo.factories.PseudoSerializerFactory: com.esotericsoftware.kryo.Serializer serializer
com.esotericsoftware.kryonet.EndPoint: java.lang.Thread getUpdateThread()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.physics.box2d.BodyDef$BodyType
com.badlogic.gdx.graphics.Color: int argb8888(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.glutils.IndexData: java.nio.ShortBuffer getBuffer()
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener: void setCursorPosition(float,float)
com.badlogic.gdx.Net
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] values()
com.badlogic.gdx.physics.box2d.World: void jniSetWarmStarting(long,boolean)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: ParallelAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] values()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: com.badlogic.gdx.graphics.g3d.loader.ObjLoader this$0
com.badlogic.gdx.utils.compression.lzma.Base: int kEndPosModelIndex
com.badlogic.gdx.graphics.Cubemap: int getHeight()
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters
com.badlogic.gdx.graphics.g3d.Attributes: long mask
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable: VertexAttributes$ReadonlyIterable(java.lang.Object[])
com.badlogic.gdx.scenes.scene2d.Event: boolean isCancelled()
com.badlogic.gdx.physics.box2d.World: void beginContact(long)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: com.badlogic.gdx.graphics.VertexAttributes CPU_ATTRIBUTES
com.badlogic.gdx.utils.UBJsonWriter: void flush()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: boolean isDisabled()
com.esotericsoftware.jsonbeans.ObjectMap$Values: boolean hasNext()
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setAttached(boolean)
com.badlogic.gdx.input.GestureDetector: float lastTapX
com.badlogic.gdx.graphics.GL30: void glVertexAttribDivisor(int,int)
com.badlogic.gdx.physics.box2d.World$2: World$2(com.badlogic.gdx.physics.box2d.World,int,int)
com.badlogic.gdx.backends.android.ZipResourceFile
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator: com.badlogic.gdx.utils.Array items
com.badlogic.gdx.graphics.GL30: int GL_INT_SAMPLER_2D
com.badlogic.gdx.utils.BufferUtils: void copy(float[],int,java.nio.Buffer,int)
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node peek()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData
com.HyperSphere.Connection.PacketObjects.Misc.ParticleEffectPacket: int duration
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Float zerof
com.esotericsoftware.kryo.io.Input: int optional(int)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3: void focusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent)
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.g2d.TextureAtlas generateTextureAtlas(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float rotationDiff
com.badlogic.gdx.physics.box2d.joints.MotorJointDef: float angularOffset
com.badlogic.gdx.math.Shape2D: boolean contains(float,float)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField: AsmCacheFields$AsmShortField()
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer: void init(com.badlogic.gdx.maps.tiled.TiledMap)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setDrawBodies(boolean)
com.badlogic.gdx.utils.BufferUtils: void transformV2M4Jni(float[],int,int,float[],int)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide valueOf(java.lang.String)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: boolean[] b
com.badlogic.gdx.graphics.g2d.ParticleEffectPool: com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect newObject()
com.badlogic.gdx.math.MathUtils: float degreesToRadians
com.badlogic.gdx.physics.box2d.World: int jniGetJointcount(long)
com.badlogic.gdx.Input$Keys: int HOME
com.badlogic.gdx.scenes.scene2d.ui.Table: void layout(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextButton: void setText(java.lang.String)
com.badlogic.gdx.backends.android.AndroidMusic: void play()
com.badlogic.gdx.utils.ComparableTimSort: ComparableTimSort()
com.esotericsoftware.kryo.io.Output: void writeLongs(long[],boolean)
com.badlogic.gdx.physics.box2d.EdgeShape: void jniGetVertex3(long,float[])
com.badlogic.gdx.graphics.g2d.Batch: int U4
com.esotericsoftware.jsonbeans.JsonException: java.lang.StringBuffer trace
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void setId(int)
com.badlogic.gdx.utils.Queue: int tail
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue angleValue
com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature valueOf(java.lang.String)
com.esotericsoftware.kryo.io.ByteBufferInputStream: ByteBufferInputStream()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.utils.Array getActions()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.graphics.VertexAttributes createAttributes(long)
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[])
com.badlogic.gdx.graphics.VertexAttributes: int hashCode()
com.badlogic.gdx.graphics.g2d.SpriteCache: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker: void set(long,int,int,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node rangeStart
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: void setSide(com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide)
com.badlogic.gdx.utils.Bits: boolean notEmpty()
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType iOSGL
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Enum)
com.badlogic.gdx.backends.android.AndroidGL30: void glBindBufferRange(int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer: void set(com.badlogic.gdx.graphics.g3d.particles.ParticleController)
com.esotericsoftware.kryo.serializers.BlowfishSerializer: BlowfishSerializer(com.esotericsoftware.kryo.Serializer,byte[])
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting Full
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getCharIndex(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide getSide()
com.badlogic.gdx.utils.IntFloatMap: int[] keyTable
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: float time
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_MAT2x4
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: DefaultSerializers$EnumSetSerializer()
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean shift(int)
com.esotericsoftware.jsonbeans.ObjectMap: boolean containsValue(java.lang.Object,boolean)
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: void setAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.utils.ObjectIntMap: boolean equals(java.lang.Object)
com.badlogic.gdx.math.collision.BoundingBox: BoundingBox(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.utils.Array getNodes()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float[] getScaling()
com.badlogic.gdx.graphics.GL30: int GL_RGBA16I
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glCullFace(int)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float getRightWidth()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int POP2
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: Obstacle(int,int,int,int,int,float,float)
com.google.android.material.internal.FlowLayout: int getRowCount()
com.badlogic.gdx.math.Rectangle: com.badlogic.gdx.math.Rectangle setWidth(float)
androidx.appcompat.widget.Toolbar: Toolbar(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.Json: com.badlogic.gdx.utils.Json$Serializer getSerializer(java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int BYTE
com.badlogic.gdx.maps.tiled.TiledMapTileSets: void addTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: RevoluteJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector tmp
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Expires
com.esotericsoftware.kryo.io.Output: int writeInt(int,boolean)
com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[],int,int)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue
com.esotericsoftware.jsonbeans.JsonValue: void setName(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.physics.box2d.Contact: float getRestitution()
com.badlogic.gdx.utils.IntMap$MapIterator: IntMap$MapIterator(com.badlogic.gdx.utils.IntMap)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.GL20: void glGenTextures(int,java.nio.IntBuffer)
com.esotericsoftware.kryo.io.KryoDataOutput: void write(byte[])
com.esotericsoftware.kryo.Kryo: boolean setReferences(boolean)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void beforeGroup(int,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider
com.badlogic.gdx.graphics.profiling.GLInterceptor: java.lang.String resolveErrorNumber(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
com.badlogic.gdx.utils.compression.rangecoder.Decoder: int Code
com.badlogic.gdx.graphics.g2d.Animation: java.lang.Object[] getKeyFrames()
com.esotericsoftware.kryo.util.ObjectMap: com.esotericsoftware.kryo.util.ObjectMap$Entries entries()
com.google.android.material.appbar.AppBarLayout: int getUpNestedPreScrollRange()
com.badlogic.gdx.math.Vector2: float crs(float,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape ellipse
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void updateAndDraw()
com.badlogic.gdx.utils.BufferUtils: java.nio.CharBuffer newCharBuffer(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: float getPrefHeight()
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation Portrait
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: ParticleEmitter$IndependentScaledNumericValue()
com.badlogic.gdx.input.RemoteInput$TouchEvent
androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glBeginTransformFeedback(int)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: char charAt(int)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void switchTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.utils.ObjectSet: boolean add(java.lang.Object)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: com.badlogic.gdx.math.Vector2 localAxisA
com.badlogic.gdx.utils.XmlReader$Element: java.lang.String get(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.NinePatch createPatch(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue()
com.badlogic.gdx.graphics.GL30: void glDeleteSamplers(int,int[],int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void applyAnimations(com.badlogic.gdx.graphics.g3d.model.Animation,float,com.badlogic.gdx.graphics.g3d.model.Animation,float,float)
com.esotericsoftware.kryo.io.Input: int readInt_slow(boolean)
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType[] $VALUES
com.badlogic.gdx.utils.Json: void toJson(java.lang.Object,java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.XmlReader: byte[] init__xml_trans_actions_0()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder begin(int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.model.NodeAnimation: NodeAnimation()
com.badlogic.gdx.math.MathUtils: int randomSign()
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType valueOf(java.lang.String)
com.google.android.gms.common.api.GoogleApiActivity
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float x1
com.badlogic.gdx.graphics.profiling.GL20Interceptor: java.lang.String glGetShaderInfoLog(int)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void jniSetMaxTorque(long,float)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int GPU_VERTEX_SIZE
com.badlogic.gdx.physics.box2d.Transform: void setPosition(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.TimSort: void mergeHi(int,int,int,int)
com.badlogic.gdx.graphics.Pixmap: void drawPixel(int,int)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
com.badlogic.gdx.graphics.GL20: int GL_POLYGON_OFFSET_FILL
androidx.appcompat.widget.AppCompatTextView: void setTextClassifier(android.view.textclassifier.TextClassifier)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(double)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsProgram(int)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer)
com.badlogic.gdx.utils.ObjectFloatMap: int size
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool: void dispose()
com.badlogic.gdx.graphics.glutils.ShaderProgram: int getNumManagedShaderPrograms()
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity getActivity()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown
com.badlogic.gdx.graphics.GL20: int GL_SRC_ALPHA_SATURATE
com.badlogic.gdx.graphics.GL30: int GL_INT_SAMPLER_3D
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.utils.ByteArray: void addAll(byte[],int,int)
com.badlogic.gdx.backends.android.AndroidGL30: void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.Texture: java.lang.String getManagedStatus()
com.google.android.material.floatingactionbutton.FloatingActionButton: int getSizeDimension()
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.utils.ClickListener getClickListener()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.Button$2: com.badlogic.gdx.scenes.scene2d.ui.Button this$0
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: int setterAccessIndex
com.esotericsoftware.kryonet.Server: int objectBufferSize
com.badlogic.gdx.graphics.g2d.ParticleEffect: ParticleEffect()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2: boolean keyboardShowing
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType Desktop
com.badlogic.gdx.graphics.GL20: void glEnable(int)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.io.ByteBufferOutput: void setBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue: LineSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue)
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: int compareTo(com.badlogic.gdx.graphics.g3d.Attribute)
com.esotericsoftware.kryo.io.UnsafeInput: UnsafeInput(byte[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode[] values()
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getLogo()
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 set(com.badlogic.gdx.math.GridPoint3)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute blendingAttribute
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform: BaseShader$Uniform(java.lang.String)
com.badlogic.gdx.utils.Queue: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.GL30: void glUniform3iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$1
com.esotericsoftware.kryonet.ServerDiscoveryHandler
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: com.badlogic.gdx.utils.compression.lzma.Encoder this$0
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: java.lang.String defaultFragmentShader
com.badlogic.gdx.physics.box2d.joints.GearJoint: void setRatio(float)
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus: com.badlogic.gdx.scenes.scene2d.EventListener listener
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int mNumSamples
com.badlogic.gdx.physics.box2d.Joint: java.lang.Object getUserData()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: void freeAll()
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Values values()
com.badlogic.gdx.utils.BooleanArray: boolean notEmpty()
com.badlogic.gdx.scenes.scene2d.ui.TextField: char ENTER_ANDROID
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int i
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: float offsetY
com.esotericsoftware.kryo.io.UnsafeMemoryInput
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportImageTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float density
com.badlogic.gdx.backends.android.AndroidGraphics: boolean setWindowedMode(int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.badlogic.gdx.assets.loaders.I18NBundleLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: void part(com.badlogic.gdx.graphics.g3d.model.MeshPart,com.badlogic.gdx.graphics.g3d.Material)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: long optionalAttributes
com.esotericsoftware.kryo.util.ObjectMap$Values: void toArray(java.util.ArrayList)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Cell getCell(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.LongArray: com.badlogic.gdx.utils.LongArray with(long[])
com.badlogic.gdx.scenes.scene2d.Group: void setTransform(boolean)
com.badlogic.gdx.math.MathUtils: float lerpAngle(float,float,float)
com.badlogic.gdx.graphics.GL20: void glUniform1i(int,int)
com.badlogic.gdx.graphics.glutils.ETC1TextureData: ETC1TextureData(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Value$2: Value$2()
com.badlogic.gdx.backends.android.AndroidGraphics: void onPauseGLSurfaceView()
com.badlogic.gdx.math.Interpolation$12: float apply(float)
com.esotericsoftware.jsonbeans.JsonWriter: com.esotericsoftware.jsonbeans.JsonWriter array()
com.badlogic.gdx.utils.BufferUtils: void disposeUnsafeByteBuffer(java.nio.ByteBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int IUSHR
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.math.Vector3: boolean isOnLine(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.graphics.Color ambient
com.badlogic.gdx.graphics.GL30: int GL_R32F
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mRequestPaused
com.badlogic.gdx.LifecycleListener: void pause()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.ETC1: java.nio.ByteBuffer encodeImagePKM(java.nio.ByteBuffer,int,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void box(float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: float getPrefHeight()
com.badlogic.gdx.math.Interpolation$3: float apply(float)
com.badlogic.gdx.maps.tiled.TiledMapRenderer: void setView(com.badlogic.gdx.graphics.OrthographicCamera)
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: com.badlogic.gdx.math.Vector3 translation
com.badlogic.gdx.backends.android.AndroidInput: void processEvents()
com.esotericsoftware.kryo.io.UnsafeOutput: void writeChars(char[])
com.badlogic.gdx.graphics.GLTexture: void bind(int)
com.badlogic.gdx.scenes.scene2d.Stage: void removeTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle: TextTooltip$TextTooltipStyle()
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void add(com.badlogic.gdx.graphics.g3d.decals.Decal)
com.badlogic.gdx.math.Intersector: boolean intersectRayBoundsFast(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: void load(java.io.BufferedReader)
com.badlogic.gdx.utils.I18NBundle: java.lang.String get(java.lang.String)
com.badlogic.gdx.graphics.Colors: com.badlogic.gdx.graphics.Color put(java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.Input$Keys: int DPAD_DOWN
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache: void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int)
com.badlogic.gdx.maps.objects.PolylineMapObject
com.badlogic.gdx.utils.BufferUtils: java.nio.ByteBuffer newByteBuffer(int)
com.badlogic.gdx.input.RemoteInput$KeyEvent: RemoteInput$KeyEvent(com.badlogic.gdx.input.RemoteInput)
com.badlogic.gdx.math.Interpolation$SwingOut: Interpolation$SwingOut(float)
com.badlogic.gdx.utils.Predicate$PredicateIterator: com.badlogic.gdx.utils.Predicate predicate
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: IsometricTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,float)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE3
com.esotericsoftware.kryo.util.IntMap: int hashShift
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: boolean isDepth
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.utils.ObjectMap jsonClassTags
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: int getCheckedIndex()
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.Array getChildrenByName(java.lang.String)
com.badlogic.gdx.graphics.glutils.FileTextureData: java.lang.String toString()
com.badlogic.gdx.graphics.glutils.PixmapTextureData: void prepare()
com.badlogic.gdx.math.Affine2: void applyTo(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.IntFloatMap$Entry: float value
com.badlogic.gdx.graphics.g2d.ParticleEffect: float xSizeScale
com.badlogic.gdx.graphics.glutils.KTXTextureData: int glType
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: int[] c
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int getAccess()
com.badlogic.gdx.math.Polygon: com.badlogic.gdx.math.Rectangle getBoundingRectangle()
com.badlogic.gdx.maps.MapProperties: java.util.Iterator getKeys()
androidx.fragment.app.Fragment: void onOptionsMenuClosed(android.view.Menu)
com.badlogic.gdx.maps.MapLayer: com.badlogic.gdx.maps.MapProperties properties
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None
com.google.android.material.transformation.FabTransformationScrimBehavior
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.TextField: int cursor
com.badlogic.gdx.utils.Queue$QueueIterator: Queue$QueueIterator(com.badlogic.gdx.utils.Queue,boolean)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeDouble(double)
com.badlogic.gdx.utils.viewport.Viewport: float worldHeight
com.google.android.material.textfield.TextInputLayout: com.google.android.material.textfield.EndIconDelegate getEndIconDelegate()
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Class[][] getParameterTypes()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy
com.google.android.material.floatingactionbutton.FloatingActionButton: void setTranslationY(float)
com.badlogic.gdx.graphics.Camera: void update(boolean)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeInts(int[])
com.badlogic.gdx.math.Quaternion: float getAngleAround(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics: int getVertAdvance()
com.esotericsoftware.jsonbeans.ObjectMap$Keys: void remove()
com.badlogic.gdx.physics.box2d.Shape: com.badlogic.gdx.physics.box2d.Shape$Type getType()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void init()
com.esotericsoftware.reflectasm.ConstructorAccess: void insertNewInstance(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.Stage: void setDebugTableUnderMouse(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)
com.esotericsoftware.kryonet.util.ObjectIntMap: int PRIME2
com.esotericsoftware.kryo.serializers.MapSerializer: boolean valuesCanBeNull
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.Net getNet()
com.badlogic.gdx.math.EarClippingTriangulator
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int tapCount
com.badlogic.gdx.graphics.GL20: int GL_BOOL_VEC2
com.esotericsoftware.kryonet.rmi.ObjectSpace$2
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: void set()
com.badlogic.gdx.files.FileHandle: FileHandle(java.io.File,com.badlogic.gdx.Files$FileType)
com.badlogic.gdx.graphics.Color: int rgba4444(float,float,float,float)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.math.Intersector: boolean intersectRayBoundsFast(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.scenes.scene2d.Stage: boolean actionsRequestRendering
com.badlogic.gdx.scenes.scene2d.Actor: boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float)
com.google.android.gms.cloudmessaging.CloudMessagingReceiver: CloudMessagingReceiver()
com.badlogic.gdx.utils.ObjectMap: java.lang.String toString()
com.badlogic.gdx.utils.IdentityMap: boolean containsKeyStash(java.lang.Object)
com.badlogic.gdx.graphics.g3d.Attribute: java.lang.String getAttributeAlias(long)
com.esotericsoftware.kryo.util.IntArray: int[] items
com.badlogic.gdx.scenes.scene2d.ui.Table: float getPadTop()
com.badlogic.gdx.graphics.GL20: int GL_ES_VERSION_2_0
com.badlogic.gdx.scenes.scene2d.utils.Cullable: void setCullingArea(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int RENDERMODE_WHEN_DIRTY
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glLinkProgram(int)
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: void setValue(float)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel directionalVelocityChannel
com.badlogic.gdx.utils.Json: Json()
com.badlogic.gdx.utils.BufferUtils: void copyJni(short[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Vector3 screenPos
com.badlogic.gdx.graphics.g3d.Shader: void end()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform4iv(int,int,int[],int)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.graphics.g2d.NinePatch
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: void setTime(float)
com.badlogic.gdx.utils.viewport.ScalingViewport: ScalingViewport(com.badlogic.gdx.utils.Scaling,float,float,com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.utils.BufferUtils: void copy(java.nio.Buffer,java.nio.Buffer,int)
com.badlogic.gdx.input.GestureDetector: boolean touchUp(int,int,int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject: boolean ownsBuffer
com.badlogic.gdx.scenes.scene2d.ui.TextArea: TextArea(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetRestitution(long,float)
com.badlogic.gdx.Input$Keys: int F10
com.esotericsoftware.kryo.io.Input: int readInt()
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void setTransform(float,float,float,float,float,float,float,float)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void setBuffer(java.nio.ByteBuffer,int)
androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)
com.badlogic.gdx.input.RemoteSender: int KEY_TYPED
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.utils.SnapshotArray getChildren()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Edge: Edge()
com.badlogic.gdx.utils.CharArray: void addAll(char[],int,int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void index(short,short,short,short,short,short,short,short)
com.esotericsoftware.jsonbeans.ObjectMap: int hashShift
com.google.android.material.internal.FlowLayout: void setSingleLine(boolean)
com.esotericsoftware.kryonet.Listener$LagListener: int lagMillisMin
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform1iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.math.Intersector$SplitTriangle
com.badlogic.gdx.utils.IntArray: int[] items
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Serialization serialization
com.badlogic.gdx.utils.Json: void setIgnoreUnknownFields(boolean)
com.badlogic.gdx.utils.Bits: boolean getAndSet(int)
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap: DefaultShader$Setters$ACubemap(int,int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String NORMAL_ATTRIBUTE
com.badlogic.gdx.graphics.g3d.model.MeshPart: com.badlogic.gdx.math.collision.BoundingBox bounds
com.badlogic.gdx.graphics.GL30: int GL_UNPACK_SKIP_IMAGES
com.badlogic.gdx.graphics.g2d.PolygonRegion: short[] triangles
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: ObjLoader$Group(com.badlogic.gdx.graphics.g3d.loader.ObjLoader,java.lang.String)
com.badlogic.gdx.utils.JsonWriter$JsonObject: JsonWriter$JsonObject(com.badlogic.gdx.utils.JsonWriter,boolean)
com.badlogic.gdx.backends.android.AndroidDaydream$1
com.esotericsoftware.kryonet.Server: com.esotericsoftware.kryonet.Listener[] listeners
com.badlogic.gdx.math.Vector2: float dst2(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getSelectedNode()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void polyline(float[])
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: float offsetX
com.badlogic.gdx.backends.android.AndroidGraphics: int getFramesPerSecond()
com.badlogic.gdx.utils.JsonWriter: void requireCommaOrName()
com.badlogic.gdx.math.DelaunayTriangulator: int COMPLETE
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: int DEBUG_CHECK_GL_ERROR
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.physics.box2d.Transform transform
com.badlogic.gdx.math.Vector3: boolean hasSameDirection(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.LongMap: java.lang.Object zeroValue
com.badlogic.gdx.graphics.g2d.ParticleEffect: void setPosition(float,float)
com.badlogic.gdx.graphics.glutils.VertexData: void invalidate()
com.badlogic.gdx.utils.JsonValue: boolean hasChild(java.lang.String)
com.badlogic.gdx.scenes.scene2d.Actor: void moveBy(float,float)
com.esotericsoftware.kryo.util.IntMap: void removeStashIndex(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool: com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random this$0
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D
com.badlogic.gdx.utils.compression.lz.BinTree: int kHash3Offset
com.badlogic.gdx.utils.viewport.ExtendViewport: float minWorldWidth
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.google.android.material.card.MaterialCardView: void setOnCheckedChangeListener(com.google.android.material.card.MaterialCardView$OnCheckedChangeListener)
com.esotericsoftware.jsonbeans.Json$FieldMetadata: Json$FieldMetadata(java.lang.reflect.Field)
androidx.appcompat.widget.Toolbar: void setTitle(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getMinHeight()
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox mul(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.backends.android.AndroidClipboard: AndroidClipboard(android.content.Context)
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format[] values()
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void dispose()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
androidx.appcompat.widget.ContentFrameLayout
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion: float u
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform1iv(int,int,int[],int)
com.badlogic.gdx.files.FileHandleStream: com.badlogic.gdx.files.FileHandle[] list()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy
com.badlogic.gdx.utils.ObjectSet: void addAll(java.lang.Object[],int,int)
com.badlogic.gdx.utils.compression.lzma.Decoder: void Init()
com.badlogic.gdx.physics.box2d.World: com.badlogic.gdx.physics.box2d.ContactImpulse impulse
com.badlogic.gdx.math.GeometryUtils: boolean colinear(float,float,float,float,float,float)
com.badlogic.gdx.math.Quaternion: float getPitch()
androidx.recyclerview.widget.RecyclerView
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: void set(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor)
com.badlogic.gdx.graphics.g2d.NinePatch: int bottomLeft
com.esotericsoftware.kryo.io.ByteBufferOutput: int writeVarLong(long,boolean)
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult: int objectID
com.badlogic.gdx.graphics.g2d.PixmapPacker: boolean stripWhitespaceX
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: StaticTiledMapTile(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value spaceBottom
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: ParticleEffect(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect)
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy: com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int)
com.badlogic.gdx.graphics.GL30: int GL_UNPACK_SKIP_PIXELS
com.google.android.material.internal.NavigationMenuItemView: void setTitle(java.lang.CharSequence)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DSUB
com.esotericsoftware.jsonbeans.ObjectMap$Values: java.util.ArrayList toArray()
com.badlogic.gdx.graphics.profiling.GLProfiler
com.badlogic.gdx.graphics.GL30: int GL_DEPTH32F_STENCIL8
com.badlogic.gdx.utils.SortedIntList$Iterator: void remove()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3: void run()
com.badlogic.gdx.utils.Json: void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.Writer)
com.esotericsoftware.jsonbeans.ObjectMap$Keys: java.lang.Object next()
com.badlogic.gdx.backends.android.AndroidPreferences: int getInteger(java.lang.String,int)
com.badlogic.gdx.math.Interpolation$8: Interpolation$8()
com.esotericsoftware.kryo.io.ByteBufferInputStream: void setByteBuffer(java.nio.ByteBuffer)
com.badlogic.gdx.utils.XmlReader: byte[] _xml_trans_targs
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: float width
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue alphaValue
com.badlogic.gdx.utils.BufferUtils: void freeMemory(java.nio.ByteBuffer)
com.badlogic.gdx.utils.ObjectMap: boolean containsValue(java.lang.Object,boolean)
com.badlogic.gdx.graphics.GL20: void glLinkProgram(int)
com.badlogic.gdx.graphics.g3d.Attributes: void enable(long)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: WidgetGroup()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.graphics.Color messageFontColor
com.esotericsoftware.jsonbeans.JsonException
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_7
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getRippleColor()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float changeSpeedX
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int[] locations
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPadBottom()
com.badlogic.gdx.utils.JsonWriter: com.badlogic.gdx.utils.JsonWriter value(java.lang.Object)
com.esotericsoftware.kryonet.rmi.ObjectSpace: ObjectSpace(com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: android.widget.TextView createView(android.content.Context)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: ParallelAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.math.MathUtils
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int toGlFormat(int)
com.esotericsoftware.kryo.io.ByteBufferInput: long readLong_slow(boolean)
com.badlogic.gdx.graphics.g2d.SpriteBatch: void end()
com.badlogic.gdx.graphics.g2d.PolygonBatch: com.badlogic.gdx.math.Matrix4 getTransformMatrix()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: int columnAlign
com.esotericsoftware.jsonbeans.JsonValue$ValueType
com.badlogic.gdx.utils.I18NBundle: boolean getExceptionOnMissingKey()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: DefaultShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void addActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: boolean active
com.badlogic.gdx.utils.BooleanArray: int size
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean setPixelSizes(long,int,int)
com.badlogic.gdx.input.GestureDetector: float tapRectangleCenterX
com.badlogic.gdx.utils.BooleanArray: void insert(int,boolean)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setEulerAnglesRad(float,float,float)
com.google.android.material.button.MaterialButton: android.graphics.drawable.Drawable getIcon()
com.badlogic.gdx.math.Vector2: boolean hasOppositeDirection(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item a(java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: Button$ButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator: int currentIndex
com.badlogic.gdx.Net$HttpResponseListener: void cancelled()
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.math.Vector2 localNormal
com.badlogic.gdx.utils.AtomicQueue: int next(int)
com.badlogic.gdx.graphics.GL30: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP_NEGATIVE_X
com.badlogic.gdx.graphics.glutils.FileTextureArrayData
com.badlogic.gdx.utils.ObjectIntMap: void ensureCapacity(int)
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap: void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: TextureAttribute(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor,float,float,float,float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label N
com.badlogic.gdx.graphics.g2d.TextureAtlas: com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: float getHeight()
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack: com.badlogic.gdx.math.Rectangle getViewport()
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: float depthRangeNear
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: Button$ButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.g3d.Material: Material(com.badlogic.gdx.graphics.g3d.Attribute[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_STATIC
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.utils.Array getRegions()
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool: com.badlogic.gdx.graphics.g3d.Renderable obtain()
com.badlogic.gdx.utils.IntIntMap$MapIterator: int INDEX_ZERO
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser: GLSurfaceViewAPI18$SimpleEGLConfigChooser(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,boolean)
com.badlogic.gdx.scenes.scene2d.InputEvent: char character
com.badlogic.gdx.Preferences: float getFloat(java.lang.String)
com.google.android.material.button.MaterialButton: void setRippleColor(android.content.res.ColorStateList)
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners()
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean round
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap ambientCubemap
com.esotericsoftware.kryo.serializers.BeanSerializer$1: int compare(java.beans.PropertyDescriptor,java.beans.PropertyDescriptor)
com.google.android.material.chip.Chip: void setHideMotionSpecResource(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetStringi(int,int)
com.esotericsoftware.kryo.io.Input: long readLong_slow(boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: java.lang.String glGetShaderInfoLog(int)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeBoolean(boolean)
com.badlogic.gdx.utils.DataOutput
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newFace(com.badlogic.gdx.files.FileHandle,int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: java.nio.FloatBuffer getBuffer()
androidx.appcompat.widget.SearchView: void setInputType(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: ClassReader(byte[],int,int)
com.esotericsoftware.kryo.io.KryoDataInput: java.lang.String readUTF()
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction: com.badlogic.gdx.scenes.scene2d.EventListener listener
com.badlogic.gdx.scenes.scene2d.ui.List
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager access$800()
com.esotericsoftware.kryo.KryoException: KryoException(java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform diffuseColor
com.badlogic.gdx.utils.Array$ArrayIterator: Array$ArrayIterator(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform bones
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void drawText(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float)
com.badlogic.gdx.graphics.GL20: int GL_DELETE_STATUS
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform2f(int,float,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGenerateMipmap(int)
com.esotericsoftware.kryonet.util.ObjectIntMap: void shrink(int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void setInstanceData(java.nio.FloatBuffer,int)
com.badlogic.gdx.graphics.GL30: void glEndQuery(int)
com.esotericsoftware.kryo.io.ByteBufferOutput: boolean getVarIntsEnabled()
com.badlogic.gdx.utils.ObjectFloatMap: void resize(int)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 localToStageCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1: com.badlogic.gdx.utils.Array newObject()
com.badlogic.gdx.graphics.Colors: void reset()
com.badlogic.gdx.graphics.GL30: int GL_MAP_FLUSH_EXPLICIT_BIT
com.badlogic.gdx.physics.box2d.ContactListener: void postSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.ContactImpulse)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: boolean round
com.badlogic.gdx.utils.ObjectSet: void addResize(java.lang.Object)
com.badlogic.gdx.utils.Json: java.lang.String prettyPrint(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: void allocateChannels()
androidx.fragment.app.Fragment: void performPause()
com.badlogic.gdx.graphics.glutils.FloatTextureData: int width
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getCounterOverflowDescription()
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createXYZCoordinates(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener: ActorGestureListener()
com.badlogic.gdx.graphics.PerspectiveCamera: PerspectiveCamera()
com.badlogic.gdx.graphics.GL20: int GL_SHADING_LANGUAGE_VERSION
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: Obstacle()
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.XmlWriter: java.io.Writer writer
com.badlogic.gdx.scenes.scene2d.Stage: boolean setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor)
androidx.appcompat.widget.ViewStubCompat: ViewStubCompat(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.SortedIntList: boolean notEmpty()
com.esotericsoftware.jsonbeans.Json: java.lang.Object[] getDefaultValues(java.lang.Class)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE17
com.badlogic.gdx.utils.XmlReader$Element: float getFloatAttribute(java.lang.String,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int dirLightsSize
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void initialize()
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void layout()
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: short t
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: com.badlogic.gdx.math.Vector2 topRight
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_time
com.badlogic.gdx.math.Interpolation$4
com.badlogic.gdx.graphics.GL30: void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Application$ApplicationType getType()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer pixelPtr
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToWorld(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.util.ObjectMap: int mask
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.physics.box2d.Body: float[] tmp
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: com.badlogic.gdx.math.Vector3 tmpV1
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type[] values()
com.badlogic.gdx.graphics.glutils.KTXTextureData: void consumeCubemapData()
com.badlogic.gdx.graphics.g2d.Sprite: void draw(com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.math.Vector2: boolean epsilonEquals(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController: boolean keyDown(int)
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(int,int,char)
com.badlogic.gdx.Audio: com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean left(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Acceleration
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell
com.esotericsoftware.kryo.io.UnsafeInput: int[] readInts(int,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: float newLowValue()
com.badlogic.gdx.graphics.Cubemap$CubemapSide: com.badlogic.gdx.math.Vector3 getDirection(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.utils.IdentityMap: void clear(int)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getWorldCenter()
com.badlogic.gdx.graphics.g3d.Attributes: void set(com.badlogic.gdx.graphics.g3d.Attribute[])
com.badlogic.gdx.Graphics: void setContinuousRendering(boolean)
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader: int parseTextureUsage(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLowLenBits
com.badlogic.gdx.utils.ArrayMap$Keys: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Container: void setCullingArea(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.utils.ObjectMap: void clear(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type[] getArgumentTypes(java.lang.reflect.Method)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttrib1f(int,float)
com.badlogic.gdx.utils.DelayedRemovalArray: int clear
com.badlogic.gdx.scenes.scene2d.ui.Slider
com.badlogic.gdx.utils.IdentityMap$MapIterator: int nextIndex
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.Color getColor(com.badlogic.gdx.graphics.Color,int)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: SpriteCache$Cache(int,int)
com.badlogic.gdx.backends.android.AndroidInput: android.os.Handler handle
com.badlogic.gdx.ApplicationListener: void pause()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void drawAdjusted(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.utils.ByteArray: void removeRange(int,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.decals.Decal: float getScaleY()
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float jniGetFrequency(long)
com.badlogic.gdx.utils.ObjectIntMap: int threshold
androidx.recyclerview.widget.RecyclerView$SavedState: android.os.Parcelable$Creator CREATOR
androidx.fragment.app.Fragment: void onLowMemory()
com.badlogic.gdx.graphics.g3d.model.NodeAnimation: com.badlogic.gdx.graphics.g3d.model.Node node
com.badlogic.gdx.scenes.scene2d.ui.Container: int getAlign()
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer
com.google.android.material.chip.Chip: void setCheckable(boolean)
com.esotericsoftware.kryo.util.IntMap: IntMap(int,float)
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: void add(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector setLength2(float)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedOver
com.badlogic.gdx.graphics.GL30: int GL_R8UI
com.badlogic.gdx.backends.android.AndroidGraphics: boolean destroy
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.utils.Array materials
com.badlogic.gdx.graphics.GL30: int GL_R8
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean isLeftEdge()
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$Monitor getMonitor()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Skin skin
com.badlogic.gdx.graphics.profiling.GLErrorListener$1
com.badlogic.gdx.utils.CharArray: void set(int,char)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: float DEFAULT_TIME_STEP
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void setUVRange(float,float,float,float)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ensureVertices(int)
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Annotation getAnnotation(java.lang.Class,java.lang.Class)
com.badlogic.gdx.maps.tiled.TiledMapTileSet: int size()
com.badlogic.gdx.math.collision.BoundingBox: boolean contains(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getMaxHeightValue()
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(int)
com.badlogic.gdx.math.GridPoint3: com.badlogic.gdx.math.GridPoint3 sub(com.badlogic.gdx.math.GridPoint3)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: ButtonGroup()
androidx.fragment.app.Fragment: void setStateAfterAnimating(int)
com.badlogic.gdx.math.Vector2: float dst(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload: com.badlogic.gdx.scenes.scene2d.Actor getDragActor()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.graphics.Texture getTexture()
com.badlogic.gdx.physics.box2d.World: float[] tmpGravity
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener: void goEnd(boolean)
com.badlogic.gdx.physics.box2d.EdgeShape: boolean jniHasVertex0(long)
com.badlogic.gdx.utils.reflect.Constructor: boolean isAccessible()
androidx.fragment.app.Fragment: void onActivityResult(int,int,android.content.Intent)
androidx.appcompat.widget.AppCompatSpinner: void setAdapter(android.widget.SpinnerAdapter)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getFormat(long)
com.badlogic.gdx.graphics.g2d.TextureRegion: float getU()
com.badlogic.gdx.scenes.scene2d.ui.Image: float imageY
com.badlogic.gdx.graphics.GL30: int GL_COLOR_ATTACHMENT2
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
com.badlogic.gdx.utils.IntMap$Values: IntMap$Values(com.badlogic.gdx.utils.IntMap)
com.badlogic.gdx.utils.Queue: void resize(int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.esotericsoftware.jsonbeans.JsonValue: short[] asShortArray()
com.badlogic.gdx.utils.XmlWriter: com.badlogic.gdx.utils.XmlWriter element(java.lang.String)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeInt(int)
com.badlogic.gdx.utils.ObjectFloatMap$Keys: java.lang.Object next()
com.badlogic.gdx.graphics.glutils.FloatTextureData: void prepare()
com.badlogic.gdx.backends.android.ZipResourceFile: int read4LE(java.io.RandomAccessFile)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent
com.badlogic.gdx.utils.LongMap$MapIterator: boolean valid
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: boolean useShortestDirection
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean[] active
com.badlogic.gdx.Input: void setCursorCatched(boolean)
com.badlogic.gdx.graphics.g2d.Sprite: Sprite(com.badlogic.gdx.graphics.Texture,int,int)
com.badlogic.gdx.math.Shape2D: boolean contains(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CapsuleShapeBuilder
com.badlogic.gdx.math.Matrix4: void mulVec(float[],float[])
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getPadRight()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: float spawnDepthDiff
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnobBefore
com.esotericsoftware.kryo.io.Output: void writeByte(int)
com.esotericsoftware.jsonbeans.ObjectMap$Keys: void reset()
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture: int USAGE_DIFFUSE
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: SpecialString(java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Value backgroundTop
com.badlogic.gdx.backends.android.AndroidDaydream: int getVersion()
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 linVelLoc
com.badlogic.gdx.backends.android.ZipResourceFile: boolean LOGV
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField: long offset
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(float,float,float,float,float)
com.badlogic.gdx.utils.OrderedSet: OrderedSet(int,float)
com.badlogic.gdx.physics.box2d.Contact: void ResetRestitution()
com.badlogic.gdx.graphics.GL30: int GL_OBJECT_TYPE
com.badlogic.gdx.scenes.scene2d.ui.Label: boolean prefSizeInvalid
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void EncodeDirectBits(int,int)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: float lengthA
androidx.appcompat.widget.Toolbar: void setLogoDescription(int)
com.badlogic.gdx.graphics.GL30: void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.nio.IntBuffer type
com.badlogic.gdx.graphics.g2d.NinePatch: int middleRight
com.badlogic.gdx.backends.android.AndroidGraphics: void setupGL(javax.microedition.khronos.opengles.GL10)
com.badlogic.gdx.math.Matrix3: float getRotation()
com.badlogic.gdx.graphics.TextureArray: void clearAllTextureArrays(com.badlogic.gdx.Application)
com.HyperSphere.Connection.PacketObjects.Entities.Creature: com.HyperSphere.Connection.PacketObjects.Misc.EffectDetails effectDetails
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Shape getShape()
com.badlogic.gdx.backends.android.AndroidGraphics: boolean checkGL20()
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter
com.badlogic.gdx.math.Intersector: boolean overlapConvexPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Intersector$MinimumTranslationVector)
com.badlogic.gdx.graphics.GL20: int glGetError()
com.badlogic.gdx.physics.box2d.Transform: Transform(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Class type
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int DictionarySize
com.badlogic.gdx.utils.PooledLinkedList$1: com.badlogic.gdx.utils.PooledLinkedList$Item newObject()
com.badlogic.gdx.graphics.g2d.TextureRegion: int getRegionX()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc: AnimationController$AnimationDesc()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glStencilOpSeparate(int,int,int,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int glGenRenderbuffer()
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
com.badlogic.gdx.utils.ComparableTimSort: void pushRun(int,int)
com.esotericsoftware.kryo.Serializer: Serializer(boolean,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float actorX
com.esotericsoftware.reflectasm.MethodAccess: java.lang.Class[] getReturnTypes()
com.esotericsoftware.kryo.io.KryoDataOutput: com.esotericsoftware.kryo.io.Output output
com.esotericsoftware.kryo.io.ByteBufferInput: char readChar()
com.google.android.material.circularreveal.CircularRevealFrameLayout: android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()
com.esotericsoftware.kryo.Registration: int getId()
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue: void setLow(float)
com.badlogic.gdx.physics.box2d.joints.WheelJointDef
com.badlogic.gdx.graphics.g2d.ParticleEffect: void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getEndIconContentDescription()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.backends.android.AndroidDaydream: void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
com.badlogic.gdx.input.RemoteInput: float getAccelerometerY()
com.badlogic.gdx.maps.MapObjects: com.badlogic.gdx.maps.MapObject get(int)
com.badlogic.gdx.physics.box2d.utils.Box2DBuild: Box2DBuild()
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Vector3 TMP_V3
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.actions.FloatAction
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer zeroi
com.badlogic.gdx.physics.box2d.ContactImpulse: float[] tangentImpulses
com.badlogic.gdx.scenes.scene2d.Actor: void setX(float,int)
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.Clipboard getClipboard()
com.badlogic.gdx.utils.ObjectMap$Keys: boolean hasNext()
com.esotericsoftware.kryo.serializers.CollectionSerializer: void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColors(com.badlogic.gdx.graphics.Color,int,int)
com.esotericsoftware.kryo.io.ByteBufferInput: java.nio.ByteBuffer getByteBuffer()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createDiffuse(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: float lowMin
com.badlogic.gdx.utils.ArrayMap$Keys: int index
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2: int compare(com.badlogic.gdx.graphics.g3d.decals.Decal,com.badlogic.gdx.graphics.g3d.decals.Decal)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeFloats(float[])
com.badlogic.gdx.utils.IntSet$IntSetIterator: com.badlogic.gdx.utils.IntArray toArray()
com.HyperSphere.Connection.PacketObjects.Entities.Monster: int defaultVal
com.esotericsoftware.kryo.util.ObjectMap: int PRIME1
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setDrawInactiveBodies(boolean)
com.badlogic.gdx.physics.box2d.Contact: float getTangentSpeed()
com.esotericsoftware.kryonet.Connection: java.lang.String toString()
com.badlogic.gdx.graphics.GL30: int GL_GREEN
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib4f(int,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: float lowerTranslation
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType doubleValue
androidx.fragment.app.Fragment: void performStop()
com.badlogic.gdx.InputEventQueue: int TOUCH_UP
com.google.android.material.button.MaterialButton: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.os.Handler getHandler()
com.badlogic.gdx.graphics.TextureData: void consumeCustomData(int)
com.badlogic.gdx.graphics.g2d.BitmapFont: void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData)
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean isManaged()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.util.ListReferenceResolver: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter: void sort(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.graphics.glutils.IndexData: void dispose()
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: void init(boolean,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.backends.android.AndroidFileHandle: com.badlogic.gdx.files.FileHandle sibling(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: AnnotationVisitor(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getOverNode()
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type[] $VALUES
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter v
com.badlogic.gdx.utils.XmlReader
com.badlogic.gdx.graphics.g2d.BitmapFontCache: com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.utils.Array knots
com.esotericsoftware.kryo.util.IdentityMap$Values: void reset()
com.badlogic.gdx.graphics.GL20: void glActiveTexture(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.FieldWriter: int e
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float offsetX
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation circle
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isEnum(java.lang.Class)
com.badlogic.gdx.graphics.Pixmap: void setColor(float,float,float,float)
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer: DefaultSerializers$ByteSerializer()
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String BumpAlias
com.badlogic.gdx.graphics.GL20: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.Environment: com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight)
com.badlogic.gdx.utils.QuickSelect: int select(java.lang.Object[],java.util.Comparator,int,int)
com.badlogic.gdx.maps.objects.TextureMapObject: void setScaleX(float)
com.badlogic.gdx.backends.android.AndroidInput$SensorListener: AndroidInput$SensorListener(com.badlogic.gdx.backends.android.AndroidInput)
com.badlogic.gdx.net.HttpStatus: int SC_CREATED
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float getMotorSpeed()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(float)
com.badlogic.gdx.utils.reflect.ClassReflection: boolean isAnnotation(java.lang.Class)
androidx.appcompat.widget.AppCompatSpinner: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: void draw()
com.esotericsoftware.kryonet.rmi.ObjectSpace: void setExecutor(java.util.concurrent.Executor)
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType minimal
com.esotericsoftware.kryo.Kryo: int maxDepth
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float getPadLeft()
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.TextField
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getTitle()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle
com.badlogic.gdx.utils.BufferUtils: java.nio.ByteBuffer newDisposableByteBuffer(int)
com.esotericsoftware.jsonbeans.ObjectMap$Keys: boolean hasNext()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int spotLightsColorOffset
com.badlogic.gdx.net.HttpStatus: int SC_MULTIPLE_CHOICES
com.badlogic.gdx.backends.android.AndroidInput: float[] rotationVectorValues
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.rangecoder.Encoder _rangeEncoder
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glClearDepthf(float)
com.badlogic.gdx.graphics.GL20: int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.PerformanceCounters
com.badlogic.gdx.backends.android.AndroidInput: void setOnscreenKeyboardVisible(boolean)
com.badlogic.gdx.utils.ObjectMap$Keys: void reset()
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.graphics.g3d.Material material
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: boolean sizeInvalid
com.badlogic.gdx.graphics.g2d.SpriteBatch: com.badlogic.gdx.graphics.Mesh$VertexDataType defaultVertexDataType
com.badlogic.gdx.utils.DataInput: DataInput(java.io.InputStream)
com.badlogic.gdx.scenes.scene2d.ui.Image: float getImageY()
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getMotorTorque(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: void bindMaterial(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.glutils.FloatTextureData: boolean disposePixmap()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap clear()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked
com.badlogic.gdx.physics.box2d.Contact: Contact(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.math.Interpolation$3: Interpolation$3()
com.badlogic.gdx.physics.box2d.joints.RopeJointDef: RopeJointDef()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.IntFloatMap$Values: void reset()
androidx.appcompat.widget.AppCompatRadioButton: void setButtonDrawable(int)
com.badlogic.gdx.utils.XmlWriter: com.badlogic.gdx.utils.XmlWriter element(java.lang.String,java.lang.Object)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$ExpIn exp10In
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.backends.android.AndroidInput getInput()
com.badlogic.gdx.graphics.g3d.loader.MtlLoader: void load(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryonet.JsonSerialization: void write(com.esotericsoftware.kryonet.Connection,java.nio.ByteBuffer,java.lang.Object)
com.badlogic.gdx.utils.StreamUtils: void copyStream(java.io.InputStream,java.io.OutputStream,byte[])
com.badlogic.gdx.files.FileHandle: java.lang.String nameWithoutExtension()
com.badlogic.gdx.utils.Json$ReadOnlySerializer: java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: int targetGLESVersion
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute w
androidx.appcompat.widget.SearchView: SearchView(android.content.Context)
com.badlogic.gdx.graphics.g2d.SpriteCache: int totalRenderCalls
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: GLSurfaceView20(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.utils.StreamUtils: java.lang.String copyStreamToString(java.io.InputStream,int)
com.badlogic.gdx.graphics.Cubemap: void addManagedCubemap(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Cubemap)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean activatePressed
com.esotericsoftware.kryo.io.UnsafeInput: short[] readShorts(int)
com.badlogic.gdx.graphics.GL20: void glUniform1iv(int,int,int[],int)
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory
com.badlogic.gdx.graphics.GL20: void glUniform2i(int,int,int)
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion(com.badlogic.gdx.graphics.Texture,float,float,float,float)
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.XmlReader$Element parent
androidx.core.app.RemoteActionCompatParcelizer
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float getHighMin()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void scrollTo(float,float,float,float)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.glutils.ShapeRenderer renderer
com.badlogic.gdx.graphics.GL30: void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
com.google.android.material.transformation.ExpandableTransformationBehavior
com.badlogic.gdx.graphics.g3d.loader.ObjLoader
com.badlogic.gdx.backends.android.AndroidInputThreePlus: void addGenericMotionListener(android.view.View$OnGenericMotionListener)
com.badlogic.gdx.backends.android.AndroidInputThreePlus
com.badlogic.gdx.utils.Select: com.badlogic.gdx.utils.Select instance
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int getReuseCount()
android.support.v4.app.RemoteActionCompatParcelizer
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter: ParticleSorter()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: int shadowOffsetY
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.graphics.Color color
com.badlogic.gdx.math.Intersector: boolean overlapConvexPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon)
com.badlogic.gdx.graphics.g2d.SpriteBatch: int getBlendSrcFuncAlpha()
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter: com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData
com.esotericsoftware.kryonet.Listener$LagListener: java.util.concurrent.ScheduledExecutorService threadPool
com.esotericsoftware.kryo.serializers.BeanSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: RegularEmitter$EmissionMode(java.lang.String,int)
com.badlogic.gdx.utils.ObjectFloatMap$Entries: com.badlogic.gdx.utils.ObjectFloatMap$Entry entry
com.badlogic.gdx.physics.box2d.World: float getVelocityThreshold()
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile: com.badlogic.gdx.maps.MapObjects getObjects()
com.badlogic.gdx.utils.Base64Coder: java.lang.String encodeLines(byte[],int,int,int,java.lang.String,com.badlogic.gdx.utils.Base64Coder$CharMap)
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element parse(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getComputedPadRight()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: float getMinWidth()
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: com.esotericsoftware.jsonbeans.JsonValue this$0
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.scenes.scene2d.ui.Button: Button()
com.badlogic.gdx.backends.android.AndroidGraphics: long lastFrameTime
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer: ModelInstanceRenderer(com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void a(int,int,int)
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder: int NumBitLevels
com.badlogic.gdx.utils.IntSet: int first()
com.esotericsoftware.jsonbeans.JsonValue: com.esotericsoftware.jsonbeans.JsonValue$JsonIterator iterator()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void end()
com.badlogic.gdx.graphics.GL30: void glClearBufferuiv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.util.IntArray: int removeIndex(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void ensureRectangles(int)
com.badlogic.gdx.math.Intersector: boolean intersectLines(float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue: PointSpawnShapeValue(com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue)
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String RetryAfter
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.graphics.VertexAttributes$Usage: int Normal
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isContinuous()
com.badlogic.gdx.graphics.GL30: int GL_RGB8
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: javax.microedition.khronos.egl.EGL10 mEgl
com.badlogic.gdx.net.HttpStatus: int SC_INSUFFICIENT_SPACE_ON_RESOURCE
com.badlogic.gdx.maps.tiled.TiledMapRenderer
com.badlogic.gdx.scenes.scene2d.ui.Table: void clearDebugRects()
com.esotericsoftware.kryo.serializers.BlowfishSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void draw(com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.scenes.scene2d.ui.Tree: float getIndentSpacing()
androidx.appcompat.widget.LinearLayoutCompat: void setOrientation(int)
androidx.appcompat.widget.AppCompatTextView: void setFirstBaselineToTopHeight(int)
androidx.appcompat.widget.AppCompatImageButton: void setImageURI(android.net.Uri)
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator()
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int type
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glPixelStorei(int,int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void setAlignment(int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.Texture: Texture(com.badlogic.gdx.graphics.TextureData)
com.badlogic.gdx.graphics.glutils.ShaderProgram: java.lang.String TEXCOORD_ATTRIBUTE
com.badlogic.gdx.graphics.g2d.DistanceFieldFont: com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setScrollbarsVisible(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
com.esotericsoftware.jsonbeans.JsonValue: long[] asLongArray()
com.badlogic.gdx.Net$HttpRequest: java.lang.String url
com.badlogic.gdx.physics.box2d.Fixture: boolean testPoint(float,float)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float initialTime
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph: BitmapFont$Glyph()
com.badlogic.gdx.maps.MapObject: void setName(java.lang.String)
com.badlogic.gdx.graphics.OrthographicCamera: void setToOrtho(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleTintList(android.content.res.ColorStateList)
com.google.android.material.chip.Chip: void setCloseIconSize(float)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Vector3 l_vez
com.badlogic.gdx.utils.SnapshotArray: void reverse()
com.badlogic.gdx.assets.loaders.CubemapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter)
com.badlogic.gdx.backends.android.AndroidFiles: com.badlogic.gdx.files.FileHandle external(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.math.Vector2 prefSize
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float prefWidth
androidx.versionedparcelable.CustomVersionedParcelable
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeLongs(long[])
com.badlogic.gdx.scenes.scene2d.utils.Selection: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: java.lang.String getName()
com.badlogic.gdx.utils.JsonValue: JsonValue(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Window: void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsEnabled(int)
com.badlogic.gdx.assets.loaders.SkinLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: boolean usesIntegerPositions()
com.badlogic.gdx.scenes.scene2d.Action: com.badlogic.gdx.scenes.scene2d.Actor target
com.badlogic.gdx.Files: boolean isLocalStorageAvailable()
com.esotericsoftware.kryo.util.IdentityMap: IdentityMap(int,float)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver: com.badlogic.gdx.graphics.g2d.TextureAtlas atlas
com.badlogic.gdx.scenes.scene2d.utils.Selection: Selection()
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER8
androidx.recyclerview.widget.RecyclerView: void setNestedScrollingEnabled(boolean)
com.badlogic.gdx.utils.ObjectSet: int pushIterations
com.esotericsoftware.jsonbeans.JsonValue: double doubleValue
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide top
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer: void allocateChannels()
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackground(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.Queue$QueueIterator: java.lang.Object next()
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute: boolean is(long)
com.badlogic.gdx.scenes.scene2d.Group: void resetTransform(com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean isContinuousRendering()
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createXYZCoordinates(float,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.actions.DelayAction: void restart()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float gravityDiff
com.badlogic.gdx.scenes.scene2d.InputEvent: int scrollAmount
com.badlogic.gdx.graphics.g3d.decals.Decal: int Z4
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: com.badlogic.gdx.math.Interpolation animateInterpolation
com.badlogic.gdx.graphics.glutils.PixmapTextureData: boolean disposePixmap
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LOOKUPSWITCH
com.badlogic.gdx.backends.android.AndroidFragmentApplication: void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
com.badlogic.gdx.utils.IntIntMap
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 rotateRad(float)
com.badlogic.gdx.backends.android.AndroidApplication: long getJavaHeap()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: void getChars(int,int,char[],int)
androidx.appcompat.widget.SearchView$SearchAutoComplete
com.badlogic.gdx.scenes.scene2d.ui.SplitPane
com.badlogic.gdx.utils.viewport.Viewport: void setScreenHeight(int)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.esotericsoftware.kryo.serializers.MapSerializer: void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])
com.badlogic.gdx.net.HttpStatus: int SC_HTTP_VERSION_NOT_SUPPORTED
com.badlogic.gdx.assets.loaders.SoundLoader: java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: com.badlogic.gdx.utils.Array actions
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: ByteVector(int)
com.esotericsoftware.kryo.util.IdentityMap: int pushIterations
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float maxWidth
com.badlogic.gdx.utils.I18NBundle: java.lang.String format(java.lang.String,java.lang.Object[])
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
com.esotericsoftware.kryonet.util.ObjectIntMap: boolean containsKey(java.lang.Object)
com.gameanalytics.sdk.http.EGAHTTPApiResponse: com.gameanalytics.sdk.http.EGAHTTPApiResponse valueOf(java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_cameraNearFar
com.badlogic.gdx.maps.objects.TextureMapObject: float getScaleY()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy()
com.badlogic.gdx.math.WindowedMean: int last_value
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int BlueOffset
com.badlogic.gdx.maps.objects.TextureMapObject: void setRotation(float)
com.badlogic.gdx.utils.JsonValue: void set(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void a(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String)
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.graphics.Color color
com.esotericsoftware.kryo.util.IntMap$Entries: void reset()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence()
com.badlogic.gdx.assets.loaders.TextureLoader: com.badlogic.gdx.graphics.Texture loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config: boolean ignoreUnimplemented
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void readPacket()
com.badlogic.gdx.math.Matrix4: int M23
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue transparencyValue
com.badlogic.gdx.scenes.scene2d.Actor: boolean setZIndex(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode
com.badlogic.gdx.net.HttpStatus: int SC_REQUEST_TIMEOUT
com.badlogic.gdx.scenes.scene2d.ui.Button: com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer
com.badlogic.gdx.backends.android.AndroidAudioDevice: boolean isMono()
com.badlogic.gdx.scenes.scene2d.ui.List: void setCullingArea(com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.utils.reflect.Annotation: java.lang.Class getAnnotationType()
com.badlogic.gdx.utils.ScreenUtils: byte[] getFrameBufferPixels(int,int,int,int,boolean)
com.badlogic.gdx.graphics.g3d.model.data.ModelNode: java.lang.String id
com.badlogic.gdx.utils.IntFloatMap: float remove(int,float)
com.badlogic.gdx.math.Vector2: boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.physics.box2d.joints.RopeJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.utils.JsonValue: void indent(int,com.badlogic.gdx.utils.StringBuilder)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glStencilOpSeparate(int,int,int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: com.badlogic.gdx.utils.Array getTextureAttachments()
com.badlogic.gdx.math.MathUtils: long clamp(long,long,long)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int kNumMoveReducingBits
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter: boolean acceptChar(com.badlogic.gdx.scenes.scene2d.ui.TextField,char)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int getTapCount()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.Pools: Pools()
androidx.appcompat.widget.ActionBarOverlayLayout: ActionBarOverlayLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setCutoffAngle(float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
com.HyperSphere.Connection.PacketObjects.Entities.CreatureFactors: int texture
com.badlogic.gdx.scenes.scene2d.ui.TextField: float selectionWidth
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: void ensureVerticesCapacity(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glEnable(int)
androidx.fragment.app.Fragment: int ATTACHED
com.badlogic.gdx.graphics.g3d.ModelBatch: com.badlogic.gdx.graphics.Camera getCamera()
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor[] $VALUES
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop
androidx.fragment.app.Fragment: boolean hasOptionsMenu()
com.badlogic.gdx.math.Interpolation: Interpolation()
com.badlogic.gdx.utils.ArrayMap: java.util.Iterator iterator()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: void a(double)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.graphics.Color debugCellColor
com.badlogic.gdx.utils.IntMap$Keys: void remove()
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension
com.badlogic.gdx.graphics.GL20: void glBindFramebuffer(int,int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.utils.IntArray: void reverse()
com.badlogic.gdx.maps.tiled.TiledMap: com.badlogic.gdx.utils.Array ownedResources
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.lang.Class elementClass
com.badlogic.gdx.graphics.GL20: int GL_MAX_CUBE_MAP_TEXTURE_SIZE
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector A
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration: void allocateChannels()
com.badlogic.gdx.graphics.g3d.ModelInstance: com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.esotericsoftware.kryo.util.FastestStreamFactory: com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)
com.badlogic.gdx.input.GestureDetector: boolean panning
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction: void reset()
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: int numFaces
com.badlogic.gdx.utils.PropertiesUtils: int IGNORE
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void start()
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.utils.Array addedRects
com.badlogic.gdx.graphics.GL20: int glGenRenderbuffer()
com.esotericsoftware.reflectasm.FieldAccess: short getShort(java.lang.Object,int)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getPadLeft()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config: BillboardParticleBatch$Config()
com.badlogic.gdx.scenes.scene2d.Actor: void setY(float)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,float,float,float,float)
com.google.android.material.card.MaterialCardView: float getRadius()
com.badlogic.gdx.graphics.GL20: int GL_COLOR_ATTACHMENT0
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: boolean hasColor
com.badlogic.gdx.scenes.scene2d.Actor: java.lang.String name
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector2 rotate(float)
com.badlogic.gdx.utils.ObjectIntMap$Keys: ObjectIntMap$Keys(com.badlogic.gdx.utils.ObjectIntMap)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMinor()
com.badlogic.gdx.utils.reflect.Method: boolean isProtected()
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil: long getObjectFieldOffset(java.lang.reflect.Field)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: ModelInfluencer$Random(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: PolygonSpriteBatch(int,com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.jsonbeans.JsonReader: java.util.ArrayList lastChild
com.badlogic.gdx.physics.box2d.Body: void setAngularDamping(float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setVariableSizeKnobs(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table debugActor()
com.badlogic.gdx.graphics.Texture: int getNumManagedTextures()
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color WHITE
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)
com.badlogic.gdx.Application: void setLogLevel(int)
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void jniSetAngularOffset(long,float)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1: com.esotericsoftware.reflectasm.ConstructorAccess val$access
com.badlogic.gdx.backends.android.AndroidInput: boolean gyroscopeAvailable
com.badlogic.gdx.backends.android.AndroidZipFileHandle: com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters: boolean useIndexes
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation circleOut
com.esotericsoftware.kryo.io.Output: void writeAscii_slow(java.lang.String,int)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.utils.XmlWriter: void flush()
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.math.collision.BoundingBox: float getWidth()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: void onPause()
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glBindFramebuffer(int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LXOR
com.google.android.material.textfield.TextInputLayout: void setErrorIconDrawable(android.graphics.drawable.Drawable)
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl: FieldSerializerUnsafeUtilImpl(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.GL20: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup expand()
com.badlogic.gdx.utils.ObjectFloatMap$Entries: ObjectFloatMap$Entries(com.badlogic.gdx.utils.ObjectFloatMap)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: float endY
com.badlogic.gdx.scenes.scene2d.ui.Window: void setResizable(boolean)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: org.objenesis.strategy.InstantiatorStrategy fallbackStrategy
androidx.appcompat.widget.FitWindowsLinearLayout: FitWindowsLinearLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.math.Matrix4: float det()
com.badlogic.gdx.math.Matrix4: void prj(float[],float[])
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: com.badlogic.gdx.utils.Array faces
com.badlogic.gdx.scenes.scene2d.ui.Tree: void drawExpandIcon(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,float,float)
com.badlogic.gdx.backends.android.AndroidInput: boolean isCatchKey(int)
com.badlogic.gdx.InputEventQueue: int TOUCH_DOWN
com.badlogic.gdx.utils.compression.rangecoder.Encoder: int GetPrice(int,int)
com.badlogic.gdx.graphics.GL30: int GL_MAX_SAMPLES
com.badlogic.gdx.graphics.glutils.ETC1TextureData: void consumeCustomData(int)
com.badlogic.gdx.files.FileHandle: java.lang.String name()
com.badlogic.gdx.Input$Keys: int BUTTON_A
com.esotericsoftware.kryonet.KryoSerialization: int readLength(java.nio.ByteBuffer)
com.badlogic.gdx.physics.box2d.Body: void setFixedRotation(boolean)
com.badlogic.gdx.graphics.profiling.GLInterceptor: int shaderSwitches
com.badlogic.gdx.Input
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_PEDANTIC
com.badlogic.gdx.utils.Queue$QueueIterable: com.badlogic.gdx.utils.Queue queue
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell uniformY()
com.esotericsoftware.jsonbeans.Json: void toJson(java.lang.Object,java.io.File)
com.badlogic.gdx.physics.box2d.Fixture: void setFilterData(com.badlogic.gdx.physics.box2d.Filter)
com.google.android.material.card.MaterialCardView: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2 GetDecoder(int,byte)
com.badlogic.gdx.input.GestureDetector$1: com.badlogic.gdx.input.GestureDetector this$0
com.badlogic.gdx.graphics.glutils.IndexData: void unbind()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_FACE_FLAG_CID_KEYED
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.math.Vector3: boolean isCollinear(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle: ScrollPane$ScrollPaneStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$BounceOut bounceOut
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: InstanceBufferObjectSubData(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.badlogic.gdx.physics.box2d.World: void getJoints(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.scenes.scene2d.utils.Selection: java.lang.Object lastSelected
com.badlogic.gdx.backends.android.AndroidInput: void addKeyListener(android.view.View$OnKeyListener)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: int glType
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: int getLevel()
com.esotericsoftware.kryonet.Serialization: int readLength(java.nio.ByteBuffer)
com.badlogic.gdx.assets.loaders.ShaderProgramLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.math.EarClippingTriangulator: com.badlogic.gdx.utils.ShortArray computeTriangles(float[],int,int)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute copy()
com.esotericsoftware.kryonet.UdpConnection: void bind(java.nio.channels.Selector,java.net.InetSocketAddress)
com.esotericsoftware.kryo.Kryo: void setAutoReset(boolean)
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator: com.esotericsoftware.jsonbeans.JsonValue next()
com.badlogic.gdx.graphics.g2d.SpriteBatch: SpriteBatch(int)
com.badlogic.gdx.physics.box2d.Body: float getLinearDamping()
com.badlogic.gdx.math.Matrix4: float getScaleY()
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer instance()
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.google.android.material.appbar.MaterialToolbar: MaterialToolbar(android.content.Context,android.util.AttributeSet)
com.HyperSphere.Connection.PacketObjects.Misc.ParticleEffectPacket: java.lang.String effectID
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: java.lang.String vertexShader
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: boolean rangeSelect
com.badlogic.gdx.graphics.glutils.KTXTextureData: KTXTextureData(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: float amountX
com.google.android.material.floatingactionbutton.FloatingActionButton: void setShadowPaddingEnabled(boolean)
com.badlogic.gdx.net.NetJavaServerSocketImpl: NetJavaServerSocketImpl(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
com.esotericsoftware.kryo.serializers.MapSerializer: com.esotericsoftware.kryo.Serializer keySerializer
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder: int getBindCount()
com.badlogic.gdx.graphics.GL30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.utils.viewport.Viewport: float getWorldHeight()
com.badlogic.gdx.physics.box2d.EdgeShape: com.badlogic.gdx.physics.box2d.Shape$Type getType()
com.badlogic.gdx.net.HttpStatus: int SC_UNAUTHORIZED
com.badlogic.gdx.math.WindowedMean: float mean
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18: GLSurfaceView20API18(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue rotationValue
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_RENDER_MODE_LIGHT
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer)
androidx.appcompat.widget.AppCompatTextView: AppCompatTextView(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.physics.box2d.ChainShape: void setPrevVertex(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.io.File)
com.badlogic.gdx.scenes.scene2d.ui.Dialog: Dialog(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod
com.badlogic.gdx.utils.StringBuilder: void replace0(int,int,java.lang.String)
com.google.android.material.chip.Chip: void setCheckableResource(int)
com.badlogic.gdx.graphics.GL30: int GL_TRANSFORM_FEEDBACK_BUFFER
com.badlogic.gdx.physics.box2d.WorldManifold: int getNumberOfContactPoints()
com.badlogic.gdx.graphics.g3d.decals.Decal: void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.esotericsoftware.jsonbeans.JsonReader: JsonReader()
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Matrix4 globalTransform
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: boolean IsShortRep()
com.badlogic.gdx.math.Intersector: boolean intersectRayPlane(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.utils.DataBuffer: byte[] toArray()
com.badlogic.gdx.scenes.scene2d.ui.Label: boolean setText(int)
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries: OrderedMap$OrderedMapEntries(com.badlogic.gdx.utils.OrderedMap)
com.badlogic.gdx.physics.box2d.World
com.badlogic.gdx.graphics.g2d.Sprite: void setY(float)
com.badlogic.gdx.graphics.GL30: void glUniform4uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.glutils.FloatTextureData: int type
com.badlogic.gdx.graphics.GL30: void glEnableVertexAttribArray(int)
com.badlogic.gdx.utils.PooledLinkedList: int size()
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader: com.badlogic.gdx.math.EarClippingTriangulator triangulator
com.badlogic.gdx.utils.IntIntMap$Values
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter: com.badlogic.gdx.files.FileHandle file
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.collision.Ray cpy()
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getOverscrollDistance()
com.badlogic.gdx.backends.android.AndroidApplication: void onPause()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glTexParameteri(int,int,int)
com.badlogic.gdx.math.Matrix4: float det(float[])
com.badlogic.gdx.graphics.g2d.NinePatch: int BOTTOM_CENTER
com.badlogic.gdx.graphics.glutils.FrameBuffer: void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void switchTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g2d.BitmapFont: com.badlogic.gdx.graphics.Color getColor()
com.esotericsoftware.kryo.util.IntMap$MapIterator: int INDEX_ZERO
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void setUVRange(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.Net$Protocol: com.badlogic.gdx.Net$Protocol[] values()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void clampSplitAmount()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: android.text.InputFilter[] getFilters()
com.badlogic.gdx.graphics.glutils.FacedCubemapData: com.badlogic.gdx.graphics.TextureData[] data
com.esotericsoftware.minlog.Log: void TRACE()
com.badlogic.gdx.assets.AssetLoadingTask: void handleSyncLoader()
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData: java.nio.FloatBuffer getBuffer()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int MAX_VERTICES_PER_MESH
androidx.lifecycle.ReportFragment$LifecycleCallbacks
com.badlogic.gdx.utils.compression.lzma.Base: int kAlignTableSize
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: FocusListener$FocusEvent$Type(java.lang.String,int)
com.google.android.material.chip.Chip: void setRippleColorResource(int)
androidx.lifecycle.SavedStateHandleController$1
com.badlogic.gdx.utils.StringBuilder: int lastIndexOf(java.lang.String)
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver
com.esotericsoftware.minlog.Log: boolean DEBUG
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetBooleanv(int,java.nio.Buffer)
com.badlogic.gdx.utils.ShortArray: void removeRange(int,int)
com.badlogic.gdx.math.Circle: boolean contains(float,float)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: boolean scrollY
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: int[] getRenderBounds()
com.badlogic.gdx.backends.android.AndroidSound: void pause()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.TextureData: boolean isManaged()
com.badlogic.gdx.graphics.GL20: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.Json: void writeField(java.lang.Object,java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.GL20: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.utils.compression.lzma.Encoder: int[] _matchDistances
com.badlogic.gdx.backends.android.AndroidApplicationBase: com.badlogic.gdx.Graphics getGraphics()
com.badlogic.gdx.graphics.g2d.NinePatch: com.badlogic.gdx.graphics.Texture getTexture()
com.badlogic.gdx.backends.android.AndroidTouchHandler: void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput)
com.badlogic.gdx.scenes.scene2d.Group: void addActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector3 position
com.badlogic.gdx.scenes.scene2d.ui.Skin$1: java.lang.String parentFieldName
com.badlogic.gdx.physics.box2d.joints.MouseJointDef: float frequencyHz
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList selectBoxList
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setRotation(float)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int c(byte[],int)
com.badlogic.gdx.utils.LongMap: boolean containsValue(java.lang.Object,boolean)
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: java.util.Locale create(java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.utils.Timer$TimerThread: com.badlogic.gdx.utils.Array instances
com.badlogic.gdx.scenes.scene2d.ui.Table: void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
androidx.appcompat.view.menu.ActionMenuItemView: void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: int b
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform viewTrans
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec depthRenderBufferSpec
androidx.fragment.app.Fragment: boolean performPrepareOptionsMenu(android.view.Menu)
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[] transientFields
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc obtain(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4: Dialog$4(com.badlogic.gdx.scenes.scene2d.ui.Dialog,int,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: com.badlogic.gdx.graphics.g3d.particles.ParticleSorter getSorter()
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType JGLFW
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getWidth()
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void setDepthMask(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform projViewWorldTrans
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder replace(char,java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: com.badlogic.gdx.utils.Array validators
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: com.esotericsoftware.kryonet.Connection connection
com.badlogic.gdx.assets.AssetManager: java.lang.String getDiagnostics()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int getDefaultDepthFunc()
com.badlogic.gdx.graphics.PerspectiveCamera: void update(boolean)
com.badlogic.gdx.scenes.scene2d.ui.List: List(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int vertexIdx
com.google.android.material.chip.Chip: void setCloseIconResource(int)
com.badlogic.gdx.scenes.scene2d.ui.Window$3: float startX
com.badlogic.gdx.backends.android.AndroidMusic: void dispose()
androidx.coordinatorlayout.widget.CoordinatorLayout: androidx.core.view.WindowInsetsCompat getLastWindowInsets()
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener: void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor)
com.google.android.material.textfield.TextInputLayout: com.google.android.material.internal.CheckableImageButton getEndIconToUpdateDummyDrawable()
com.badlogic.gdx.utils.Array$ArrayIterable
com.esotericsoftware.kryo.io.Output: void writeDoubles(double[])
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide[] $VALUES
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: float vScale
com.badlogic.gdx.utils.Align: java.lang.String toString(int)
com.esotericsoftware.kryo.util.MapReferenceResolver: com.esotericsoftware.kryo.util.IdentityObjectIntMap writtenObjects
com.badlogic.gdx.math.Shape2D
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float)
com.badlogic.gdx.graphics.g2d.Animation: Animation(float,com.badlogic.gdx.utils.Array)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LSHL
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: AndroidOnscreenKeyboard$1(android.content.Context)
com.badlogic.gdx.graphics.g3d.model.Node: int getChildCount()
com.badlogic.gdx.graphics.glutils.ShaderProgram: int vertexShaderHandle
com.badlogic.gdx.physics.box2d.World: int getProxyCount()
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.graphics.TextureArrayData: void prepare()
com.badlogic.gdx.graphics.g2d.Batch: int U2
com.badlogic.gdx.graphics.GL20: void glClear(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2: com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportImageTintList()
com.badlogic.gdx.utils.GdxBuild: GdxBuild()
com.badlogic.gdx.utils.IntIntMap: boolean containsKeyStash(int)
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction: RotateToAction()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup rowRight()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField
com.badlogic.gdx.maps.MapRenderer: void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float)
com.badlogic.gdx.math.Matrix4: float getScaleXSquared()
androidx.fragment.app.Fragment: void unregisterForContextMenu(android.view.View)
com.badlogic.gdx.utils.IntMap: int findKey(java.lang.Object,boolean,int)
com.esotericsoftware.kryo.io.KryoObjectInput: KryoObjectInput(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.utils.Json: void setTypeName(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData: com.badlogic.gdx.utils.Array getPages()
com.badlogic.gdx.Input$Keys: int BUTTON_B
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction: boolean capture
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute()
com.badlogic.gdx.utils.CharArray: int indexOf(char)
com.badlogic.gdx.math.Interpolation$10: Interpolation$10()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Frame: void b(int)
androidx.fragment.app.Fragment: java.lang.String mTargetWho
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec: GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec(int)
com.badlogic.gdx.scenes.scene2d.ui.Container: void setActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.esotericsoftware.kryo.io.ByteBufferInput: long readLong()
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusBottomStart()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField: AsmCacheFields$AsmByteField()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel()
com.badlogic.gdx.Application: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void init()
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer
com.google.android.material.chip.ChipGroup: void setDividerDrawableVertical(android.graphics.drawable.Drawable)
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getChipIcon()
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle: int offsetY
com.badlogic.gdx.graphics.glutils.FloatTextureData: void consumeCustomData(int)
com.badlogic.gdx.assets.loaders.PixmapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean isDrawContacts()
com.badlogic.gdx.utils.Array: void removeRange(int,int)
com.badlogic.gdx.graphics.VertexAttributes: int size()
com.badlogic.gdx.scenes.scene2d.ui.Image: float getImageWidth()
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration: DynamicsModifier$PolarAcceleration()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights0color
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
androidx.appcompat.widget.Toolbar
com.badlogic.gdx.math.Ellipse: long serialVersionUID
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: float x
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: com.badlogic.gdx.utils.Array usedGroups
com.badlogic.gdx.utils.compression.lzma.Encoder: int _numFastBytesPrev
com.badlogic.gdx.graphics.g2d.Animation$PlayMode: Animation$PlayMode(java.lang.String,int)
com.badlogic.gdx.utils.compression.lz.InWindow: void SetStream(java.io.InputStream)
com.google.android.material.appbar.AppBarLayout: void setStatusBarForegroundResource(int)
com.badlogic.gdx.utils.ByteArray: void sort()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: FreeType$SizeMetrics(long)
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: java.lang.String getName()
com.badlogic.gdx.graphics.GL20: int GL_NUM_SHADER_BINARY_FORMATS
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder: void Init()
com.badlogic.gdx.backends.android.AndroidInput: void onPause()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void afterGroup(int)
com.badlogic.gdx.backends.android.ZipResourceFile: ZipResourceFile(java.lang.String)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: BlendingAttribute(int,int,float)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField: ObjectField$ObjectShortField(com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor Arrow
com.badlogic.gdx.utils.JsonValue: char[] asCharArray()
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool
com.badlogic.gdx.graphics.PixmapIO$PNG: byte COLOR_ARGB
com.badlogic.gdx.utils.ComparableTimSort: ComparableTimSort(java.lang.Object[])
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer
com.badlogic.gdx.utils.IntMap$Entry: int key
com.badlogic.gdx.utils.XmlReader: int xml_en_main
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight: DirectionalLight()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(java.lang.String)
com.badlogic.gdx.maps.tiled.TiledMapTile: void setBlendMode(com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode)
com.esotericsoftware.kryo.io.Output: void write(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])
com.badlogic.gdx.graphics.GL20: int GL_BLEND_DST_RGB
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int dirLightsDirectionOffset
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int readInt(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label[] getLabels()
com.badlogic.gdx.physics.box2d.joints.GearJoint: float jniGetRatio(long)
com.badlogic.gdx.backends.android.AndroidInputFactory: com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.graphics.GL30: int GL_BUFFER_MAP_OFFSET
com.badlogic.gdx.utils.IntIntMap$Entries: com.badlogic.gdx.utils.IntIntMap$Entry next()
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue: void calculateWeights()
com.badlogic.gdx.backends.android.AndroidGraphics: float getPpiY()
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer: DefaultSerializers$TimeZoneSerializer()
com.badlogic.gdx.utils.compression.lzma.Encoder: int backRes
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: float startX
com.badlogic.gdx.utils.ObjectMap: void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp0
com.esotericsoftware.kryo.io.Output: void writeString(java.lang.CharSequence)
com.badlogic.gdx.utils.BufferUtils: void copy(byte[],int,java.nio.Buffer,int)
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction: void update(float)
com.badlogic.gdx.utils.compression.lz.OutWindow: void Create(int)
com.badlogic.gdx.scenes.scene2d.Actor: void removeAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.utils.Json: void copyFields(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void enableBlending()
com.badlogic.gdx.utils.NumberUtils: long doubleToLongBits(double)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer: java.util.Set read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: void onMeasure(int,int)
com.badlogic.gdx.utils.BufferUtils: void transformV4M4Jni(float[],int,int,float[],int)
com.badlogic.gdx.utils.BinaryHeap: void clear()
com.badlogic.gdx.math.collision.Sphere: float PI_4_3
com.badlogic.gdx.net.HttpStatus: int SC_REQUEST_URI_TOO_LONG
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 X
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.math.Rectangle getRect(java.lang.String)
com.badlogic.gdx.utils.compression.lz.InWindow: int GetMatchLen(int,int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal: void MakeAsShortRep()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.graphics.g2d.BitmapFont font
com.badlogic.gdx.graphics.GL20: int GL_FUNC_SUBTRACT
com.badlogic.gdx.utils.IntArray: int removeIndex(int)
com.badlogic.gdx.graphics.g3d.model.Animation
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page: float width
com.badlogic.gdx.scenes.scene2d.Stage: boolean keyDown(int)
com.badlogic.gdx.graphics.g3d.particles.ParallelArray: com.badlogic.gdx.utils.Array arrays
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.utils.Select: int fastMax(java.lang.Object[],java.util.Comparator,int)
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: AmbientCubemap(com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap)
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Values values()
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Keys keys1
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.graphics.g2d.GlyphLayout prefSizeLayout
com.badlogic.gdx.graphics.g2d.TextureAtlas: java.util.Comparator indexComparator
com.badlogic.gdx.utils.IntFloatMap$Entry: int key
androidx.appcompat.widget.ButtonBarLayout: void setAllowStacking(boolean)
com.badlogic.gdx.graphics.GL20: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void render()
com.badlogic.gdx.graphics.g3d.model.Animation: com.badlogic.gdx.utils.Array nodeAnimations
com.badlogic.gdx.scenes.scene2d.Group: boolean swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.compression.lz.InWindow: byte[] _bufferBase
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: DefaultSerializers$CalendarSerializer()
com.google.android.material.chip.ChipGroup: int getChipSpacingVertical()
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1: void dispose()
com.badlogic.gdx.assets.loaders.TextureLoader
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getHeight()
com.badlogic.gdx.utils.Array: boolean containsAll(com.badlogic.gdx.utils.Array,boolean)
com.badlogic.gdx.utils.Array: int indexOf(java.lang.Object,boolean)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: android.text.method.MovementMethod getDefaultMovementMethod()
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Net getNet()
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType WheelJoint
com.badlogic.gdx.physics.box2d.Manifold: com.badlogic.gdx.math.Vector2 getLocalPoint()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
com.esotericsoftware.kryonet.rmi.ObjectSpace: int getRegisteredID(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.utils.DragListener: int getButton()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceBottomValue()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,float,float,int)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short,boolean[])
com.badlogic.gdx.utils.Json: java.lang.String prettyPrint(java.lang.String)
androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue root
com.esotericsoftware.kryonet.rmi.ObjectSpace$1: void received(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: com.badlogic.gdx.math.Vector3 TMP_V3
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter
com.badlogic.gdx.math.Vector: boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
androidx.appcompat.widget.Toolbar: void setTitleTextColor(android.content.res.ColorStateList)
com.badlogic.gdx.physics.box2d.Joint: boolean getCollideConnected()
com.badlogic.gdx.backends.android.AndroidGL20: void glColorMask(boolean,boolean,boolean,boolean)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: boolean hasGlyph(char)
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: MoveByAction()
com.badlogic.gdx.physics.box2d.Body: float jniGetAngle(long)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getMinWidth()
com.badlogic.gdx.utils.OrderedMap: java.lang.Object removeIndex(int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillTriangle(long,int,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: AndroidFragmentApplication()
com.badlogic.gdx.math.Matrix3
com.esotericsoftware.kryonet.FrameworkMessage$DiscoverHost
com.badlogic.gdx.graphics.g2d.NinePatch: void setBottomHeight(float)
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createReflection(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
com.badlogic.gdx.InputEventQueue: boolean touchDragged(int,int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue spawnShapeValue
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.scenes.scene2d.Actor dragActor
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType[] values()
com.badlogic.gdx.graphics.g3d.ModelCache: com.badlogic.gdx.utils.FlushablePool renderablesPool
com.badlogic.gdx.input.GestureDetector$VelocityTracker: void start(float,float,long)
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: void setFilters(android.text.InputFilter[])
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService: AndroidLiveWallpaperService()
com.badlogic.gdx.maps.objects.PolylineMapObject: void setPolyline(com.badlogic.gdx.math.Polyline)
androidx.appcompat.view.menu.ListMenuItemView: void setForceShowIcon(boolean)
com.esotericsoftware.kryo.util.DefaultStreamFactory
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer: java.util.Locale read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.math.Interpolation$9: Interpolation$9()
com.badlogic.gdx.physics.box2d.Body: void jniResetMassData(long)
com.badlogic.gdx.Input: float getAccelerometerY()
com.badlogic.gdx.utils.PooledLinkedList$1: java.lang.Object newObject()
com.esotericsoftware.minlog.Log: void info(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.math.GridPoint3: long serialVersionUID
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table right()
com.badlogic.gdx.math.Ellipse: void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeInts(int[])
com.badlogic.gdx.physics.box2d.World: void preSolve(long,long)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: BitmapFontCache(com.badlogic.gdx.graphics.g2d.BitmapFont,boolean)
com.badlogic.gdx.utils.Array: void insert(int,java.lang.Object)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: UnsafeMemoryOutput(int,int)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumPosStatesBitsEncodingMax
com.badlogic.gdx.backends.android.AndroidGL30: void glGenVertexArrays(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute: com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription
com.badlogic.gdx.graphics.g3d.particles.ParticleController
com.esotericsoftware.reflectasm.FieldAccess: void set(java.lang.Object,java.lang.String,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.String toString()
com.badlogic.gdx.utils.BooleanArray: int hashCode()
com.badlogic.gdx.graphics.glutils.IndexArray: void setIndices(java.nio.ShortBuffer)
com.badlogic.gdx.utils.SnapshotArray: void set(int,java.lang.Object)
com.badlogic.gdx.utils.compression.lz.InWindow: int _bufferOffset
com.badlogic.gdx.math.Intersector: boolean intersectPolygonEdges(com.badlogic.gdx.utils.FloatArray,com.badlogic.gdx.utils.FloatArray)
com.badlogic.gdx.graphics.VertexAttributes: long getMaskWithSizePacked()
com.google.android.material.appbar.HeaderScrollingViewBehavior: HeaderScrollingViewBehavior(android.content.Context,android.util.AttributeSet)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector e
com.badlogic.gdx.physics.box2d.Body: void setAngularVelocity(float)
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField getField(java.lang.String)
com.esotericsoftware.kryo.io.KryoDataOutput: void write(byte[],int,int)
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.util.IdentityMap getOriginalToCopyMap()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int JSR
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: int NUM_VALUES
com.badlogic.gdx.graphics.g3d.ModelCache: boolean building
com.badlogic.gdx.scenes.scene2d.ui.Table: int columns
com.esotericsoftware.kryonet.util.ObjectIntMap: int getStash(java.lang.Object,int)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: float newHighValue()
com.badlogic.gdx.graphics.Pixmap: void fillRectangle(int,int,int,int)
com.badlogic.gdx.utils.BooleanArray: BooleanArray(boolean,int)
com.badlogic.gdx.audio.AudioDevice: void writeSamples(float[],int,int)
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute: boolean is(long)
com.badlogic.gdx.scenes.scene2d.Stage: void cancelTouchFocusExcept(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void dispose()
com.badlogic.gdx.math.Interpolation$10
com.badlogic.gdx.Version: boolean isLower(int,int,int)
com.badlogic.gdx.Input$Keys: int PICTSYMBOLS
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.badlogic.gdx.graphics.g2d.Sprite: void setColor(float,float,float,float)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector cubic_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryonet.Listener$LagListener$1: com.esotericsoftware.kryonet.Listener$LagListener this$0
com.badlogic.gdx.input.GestureDetector: void reset()
com.google.android.material.internal.NavigationMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer: DefaultSerializers$TreeSetSerializer()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: long Ambient
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries: java.lang.Object next()
com.badlogic.gdx.graphics.g2d.ParticleEffect: com.badlogic.gdx.utils.Array getEmitters()
com.badlogic.gdx.graphics.g2d.ParticleEffectPool: void free(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getSplitAmount()
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: int getHeight()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.io.Output: Output(java.io.OutputStream,int)
com.badlogic.gdx.graphics.glutils.FacedCubemapData: com.badlogic.gdx.graphics.TextureData getTextureData(com.badlogic.gdx.graphics.Cubemap$CubemapSide)
com.badlogic.gdx.InputEventQueue: int next(int,int)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float deltaX
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField: UnsafeCacheFields$UnsafeIntField(java.lang.reflect.Field)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int BALOAD
com.badlogic.gdx.backends.android.APKExpansionSupport
com.badlogic.gdx.scenes.scene2d.ui.Window: boolean isResizable()
com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory: UnsafeCachedFieldFactory()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
com.google.firebase.messaging.FirebaseMessagingRegistrar
com.badlogic.gdx.graphics.GL20: int GL_CULL_FACE_MODE
com.HyperSphere.Connection.PacketObjects.Entities.Monster: boolean Default
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: int getMaxListCount()
com.esotericsoftware.kryo.io.KryoDataInput: short readShort()
com.badlogic.gdx.graphics.GLTexture: void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache: int id
com.badlogic.gdx.utils.ObjectMap: void resize(int)
com.badlogic.gdx.Net$HttpRequest: void setTimeOut(int)
com.badlogic.gdx.graphics.g2d.TextureRegion
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.assets.AssetErrorListener listener
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction: CountdownEventAction(java.lang.Class,int)
com.badlogic.gdx.physics.box2d.joints.GearJoint: com.badlogic.gdx.physics.box2d.Joint joint2
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteRenderbuffer(int)
com.badlogic.gdx.scenes.scene2d.InputListener: void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.IntFloatMap$Keys: com.badlogic.gdx.utils.IntArray toArray()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitAttribute(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute)
com.badlogic.gdx.math.Rectangle: float getWidth()
com.badlogic.gdx.graphics.GL20: void glUniform3f(int,float,float,float)
com.badlogic.gdx.physics.box2d.ChainShape: void setNextVertex(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single: com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single copy()
com.badlogic.gdx.scenes.scene2d.ui.Container: void setRound(boolean)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int getH()
androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6: ParticleShader$Setters$6()
com.badlogic.gdx.scenes.scene2d.ui.Table: int getAlign()
com.badlogic.gdx.backends.android.AndroidGL30: void glSamplerParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STYLE_FLAG_ITALIC
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: com.badlogic.gdx.math.Affine2 tmpAffine
com.badlogic.gdx.utils.IntFloatMap: IntFloatMap(com.badlogic.gdx.utils.IntFloatMap)
com.badlogic.gdx.math.Rectangle: Rectangle()
com.google.android.material.checkbox.MaterialCheckBox: void setUseMaterialThemeColors(boolean)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: float depthRangeFar
com.badlogic.gdx.Net$HttpRequest: java.io.InputStream getContentStream()
com.badlogic.gdx.graphics.glutils.PixmapTextureData: int getWidth()
com.google.firebase.provider.FirebaseInitProvider
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.math.Intersector$SplitTriangle: boolean frontCurrent
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.utils.Timer$Task resetTask
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void drawScrollBars(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.utils.compression.lz.BinTree: int kBT2HashSize
com.badlogic.gdx.graphics.Mesh: float[] getVertices(int,int,float[])
androidx.appcompat.widget.AppCompatImageButton: AppCompatImageButton(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.ObjectSet: void shrink(int)
com.badlogic.gdx.graphics.g3d.Renderable: Renderable()
com.badlogic.gdx.utils.ObjectIntMap: int size
com.badlogic.gdx.graphics.VertexAttributes: com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable
com.badlogic.gdx.utils.DataBuffer: com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream outStream
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode valueOf(java.lang.String)
com.badlogic.gdx.utils.PerformanceCounter: void reset()
com.badlogic.gdx.utils.ArrayMap$Keys: boolean valid
com.badlogic.gdx.backends.android.AndroidGraphics: boolean isGL30Available()
com.esotericsoftware.jsonbeans.JsonReader: int json_error
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 localToScreenCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.SnapshotArray: java.lang.Object[] setSize(int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void remove(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.esotericsoftware.kryo.io.Input: long readLong()
androidx.appcompat.widget.ActionMenuView
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
com.google.android.material.textfield.TextInputLayout: void setErrorTextAppearance(int)
com.badlogic.gdx.net.HttpRequestHeader: java.lang.String CacheControl
com.badlogic.gdx.math.CumulativeDistribution: int size()
com.badlogic.gdx.graphics.glutils.ETC1: void formatHeader(java.nio.ByteBuffer,int,int,int)
com.badlogic.gdx.graphics.g3d.utils.ShapeCache: com.badlogic.gdx.graphics.Mesh mesh
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug cell
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(float)
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: short[] triangles
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int q
com.badlogic.gdx.Net$HttpRequest: void reset()
com.badlogic.gdx.graphics.FPSLogger
com.badlogic.gdx.graphics.GL30: void glUseProgram(int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.fasterxml.jackson.annotation.PropertyAccessor: com.fasterxml.jackson.annotation.PropertyAccessor[] values()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform4fv(int,int,java.nio.FloatBuffer)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: ClassVisitor(int)
com.HyperSphere.Connection.PacketObjects.Misc.Item: int texture
com.esotericsoftware.kryonet.util.TcpIdleSender: void start()
androidx.recyclerview.widget.RecyclerView: void setLayoutFrozen(boolean)
com.badlogic.gdx.graphics.g3d.Attributes: Attributes()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper mGLWrapper
com.badlogic.gdx.backends.android.AndroidGL20: int glCreateProgram()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser: com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0
com.badlogic.gdx.utils.compression.lz.InWindow: byte GetIndexByte(int)
com.badlogic.gdx.utils.compression.lz.InWindow: void Create(int,int,int)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,long)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void addLifecycleListener(com.badlogic.gdx.LifecycleListener)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$1: TooltipManager$1(com.badlogic.gdx.scenes.scene2d.ui.TooltipManager)
com.esotericsoftware.kryo.io.UnsafeInput: void setVarIntsEnabled(boolean)
com.badlogic.gdx.graphics.GL30: int GL_MAX_TEXTURE_LOD_BIAS
com.badlogic.gdx.graphics.GL20: int GL_LOW_FLOAT
com.badlogic.gdx.InputEventQueue: boolean touchDown(int,int,int,int)
androidx.appcompat.widget.AppCompatImageButton
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: Tree$Node(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation: com.badlogic.gdx.utils.Array scaling
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter: com.badlogic.gdx.graphics.Camera camera
com.badlogic.gdx.graphics.GL20: int GL_BLEND_EQUATION_ALPHA
com.badlogic.gdx.graphics.GL30: int GL_MAX_SERVER_WAIT_TIMEOUT
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setRotation(int)
com.badlogic.gdx.graphics.glutils.KTXTextureData: boolean isPrepared()
com.badlogic.gdx.graphics.g2d.Batch: void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
com.google.android.material.internal.VisibilityAwareImageButton
com.badlogic.gdx.maps.objects.PolygonMapObject: PolygonMapObject()
com.badlogic.gdx.graphics.glutils.KTXTextureData: boolean useMipMaps
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer bottomi
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2: com.badlogic.gdx.backends.android.AndroidFragmentApplication this$0
com.badlogic.gdx.utils.compression.lz.InWindow: void Init()
com.badlogic.gdx.utils.OrderedSet: boolean remove(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void setCancelTouchFocus(boolean)
com.badlogic.gdx.math.Path
com.esotericsoftware.kryo.util.UnsafeUtil: java.nio.ByteBuffer getDirectBufferAt(long,int)
com.badlogic.gdx.utils.TextFormatter: TextFormatter(java.util.Locale,boolean)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float capHeight
com.badlogic.gdx.utils.BooleanArray: BooleanArray()
com.esotericsoftware.kryo.io.FastOutput
com.badlogic.gdx.graphics.g3d.decals.Decal: int U3
com.badlogic.gdx.physics.box2d.Body: boolean jniIsSleepingAllowed(long)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.Texture$TextureWrap wrapU
com.badlogic.gdx.backends.android.AndroidSound: int soundId
com.badlogic.gdx.graphics.g3d.Attribute: com.badlogic.gdx.graphics.g3d.Attribute copy()
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.graphics.Pixmap pixmap
com.badlogic.gdx.graphics.g3d.ModelBatch: void render(com.badlogic.gdx.graphics.g3d.RenderableProvider,com.badlogic.gdx.graphics.g3d.Environment)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.Graphics$GraphicsType: Graphics$GraphicsType(java.lang.String,int)
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType Internal
com.badlogic.gdx.graphics.g2d.Batch: int getBlendDstFunc()
androidx.appcompat.widget.ActionBarContextView: void setCustomView(android.view.View)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo)
com.badlogic.gdx.graphics.GL30: java.lang.String glGetStringi(int,int)
com.badlogic.gdx.scenes.scene2d.ui.List$2: com.badlogic.gdx.scenes.scene2d.ui.List this$0
com.esotericsoftware.jsonbeans.Json$FieldMetadata: java.lang.Class elementType
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.files.FileHandle: void emptyDirectory()
com.esotericsoftware.kryonet.Client: void dispose()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGenerateMipmap(int)
com.badlogic.gdx.utils.DataInput
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: SelectBox(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.badlogic.gdx.graphics.g3d.ModelCache$2: ModelCache$2(com.badlogic.gdx.graphics.g3d.ModelCache)
com.badlogic.gdx.utils.compression.rangecoder.Decoder: Decoder()
com.badlogic.gdx.graphics.g3d.ModelInstance: void invalidate(com.badlogic.gdx.graphics.g3d.model.Node)
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer: BatchTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.utils.JsonValue: void set(long,java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4: DefaultShader$Setters$4()
com.badlogic.gdx.graphics.g2d.SpriteCache: float getPackedColor()
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter: com.badlogic.gdx.graphics.Texture$TextureWrap wrapV
com.badlogic.gdx.physics.box2d.World: void jniDestroyFixture(long,long,long)
com.badlogic.gdx.backends.android.AndroidInputThreePlus: AndroidInputThreePlus(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.esotericsoftware.kryo.io.KryoDataInput: KryoDataInput(com.esotericsoftware.kryo.io.Input)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction
com.badlogic.gdx.graphics.GL30: int GL_NUM_EXTENSIONS
com.badlogic.gdx.math.Vector3: Vector3(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator: int currentIndex
com.badlogic.gdx.graphics.g3d.decals.Decal: com.badlogic.gdx.math.Vector2 scale
com.esotericsoftware.kryo.serializers.MapSerializer: java.util.Map createCopy(com.esotericsoftware.kryo.Kryo,java.util.Map)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glLineWidth(float)
com.badlogic.gdx.graphics.g3d.utils.RenderContext: int depthFunc
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void draw(com.badlogic.gdx.graphics.Texture,float[],int,int)
com.badlogic.gdx.scenes.scene2d.ui.Value: Value()
com.badlogic.gdx.net.NetJavaImpl: void removeFromConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest)
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData: ParticleControllerRenderData()
androidx.fragment.app.Fragment: boolean equals(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.Files getFiles()
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: DepthTestAttribute(long,int,float,float,boolean)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void setVertices(float[],int,int)
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection: java.lang.Object rangeStart
com.badlogic.gdx.scenes.scene2d.ui.TextField: float renderOffset
com.badlogic.gdx.backends.android.AndroidGL20: void glClearDepthf(float)
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1: void stageToLocalAmount(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.io.Input: int limit()
androidx.fragment.app.Fragment: void initLifecycle()
androidx.fragment.app.Fragment: void performDestroyView()
com.badlogic.gdx.utils.IntIntMap$Values: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: void setInterpolation(com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.utils.compression.lz.BinTree: int GetMatches(int[])
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_SAMPLER_2D
com.badlogic.gdx.graphics.g2d.SpriteBatch: int blendDstFuncAlpha
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: VertexBufferObjectSubData(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
com.esotericsoftware.kryo.Generics: java.util.Map getMappings()
com.badlogic.gdx.graphics.GL20: void glUniformMatrix3fv(int,int,boolean,float[],int)
com.badlogic.gdx.math.Polygon
com.badlogic.gdx.utils.CharArray: void truncate(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float getSum(float[],int)
com.badlogic.gdx.utils.Predicate$PredicateIterable: com.badlogic.gdx.utils.Predicate$PredicateIterator iterator
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int NumBenchmarkPasses
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter: FreetypeFontLoader$FreeTypeFontLoaderParameter()
com.badlogic.gdx.utils.IntSet: int PRIME1
com.badlogic.gdx.graphics.g2d.PolygonSprite: void setSize(float,float)
com.google.android.material.textfield.TextInputLayout: void setHintInternal(java.lang.CharSequence)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp7
com.HyperSphere.Connection.PacketObjects.Map.MapObject: void render(int,int,float,float,com.HyperSphere.Graphics.Graphic.Batch.AbstractGraphic)
com.badlogic.gdx.backends.android.AndroidGraphics: void clearManagedCaches()
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform3uiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidInput: void setInputProcessor(com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ensureIndices(int)
com.badlogic.gdx.graphics.g2d.Animation$1: int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$Animation$PlayMode
com.badlogic.gdx.utils.XmlReader$Element: int getInt(java.lang.String,int)
com.badlogic.gdx.graphics.GLTexture: int getWidth()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: int getAlign()
com.esotericsoftware.kryo.io.Output: int writeLong(long,boolean)
com.badlogic.gdx.utils.PauseableThread: void onResume()
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction: boolean delegate(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ByteVector: ByteVector()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.GL30: int GL_FRAGMENT_SHADER_DERIVATIVE_HINT
com.badlogic.gdx.utils.LongArray: LongArray(com.badlogic.gdx.utils.LongArray)
com.badlogic.gdx.InputEventQueue: void drain()
com.badlogic.gdx.math.MathUtils: float PI2
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp4
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle getStyle()
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean useMemRegions
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: com.badlogic.gdx.math.Matrix4 projModelView
com.badlogic.gdx.net.HttpParametersUtils: java.lang.String parameterSeparator
com.badlogic.gdx.InputEventQueue: boolean scrolled(int)
com.esotericsoftware.kryo.KryoException: java.lang.String getMessage()
com.esotericsoftware.kryonet.Listener$ThreadedListener: java.util.concurrent.ExecutorService threadPool
com.esotericsoftware.kryo.serializers.FieldSerializer: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[] fields
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread
com.badlogic.gdx.backends.android.AndroidMusic: com.badlogic.gdx.backends.android.AndroidAudio audio
com.esotericsoftware.jsonbeans.Json: java.lang.String prettyPrint(java.lang.String,int)
com.badlogic.gdx.graphics.glutils.InstanceData: com.badlogic.gdx.graphics.VertexAttributes getAttributes()
com.badlogic.gdx.audio.Sound: long play(float,float,float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: boolean shadowMap
com.badlogic.gdx.utils.TimeUtils: long millis()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell growX()
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_NAME_LENGTH
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParticleController controller
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue)
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings: com.badlogic.gdx.utils.JsonWriter$OutputType outputType
com.badlogic.gdx.math.Interpolation$9: float apply(float)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int internalFormat
com.badlogic.gdx.assets.AssetManager: boolean isLoaded(com.badlogic.gdx.assets.AssetDescriptor)
com.badlogic.gdx.utils.JsonValue: boolean isObject()
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters
com.badlogic.gdx.utils.StreamUtils: void closeQuietly(java.io.Closeable)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,float,float)
com.google.android.material.chip.ChipGroup: void setChipSpacingVerticalResource(int)
com.badlogic.gdx.utils.ReflectionPool: ReflectionPool(java.lang.Class)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color)
com.esotericsoftware.kryonet.ConnectionValues: ConnectionValues()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
com.badlogic.gdx.scenes.scene2d.actions.AddAction: void setAction(com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.scenes.scene2d.ui.Button: Button(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7
com.badlogic.gdx.graphics.glutils.ShapeRenderer: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType
com.esotericsoftware.kryonet.TcpConnection: void writeOperation()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.ReferenceResolver referenceResolver
com.esotericsoftware.jsonbeans.ObjectMap: ObjectMap(com.esotericsoftware.jsonbeans.ObjectMap)
com.badlogic.gdx.graphics.g2d.NinePatch: float getPadLeft()
com.badlogic.gdx.graphics.GL30: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.HyperSphere.Connection.PacketObjects.Map.Shop
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle: com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle label
com.badlogic.gdx.utils.LongMap: int EMPTY
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: void setDrawContacts(boolean)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: float subsequentTime
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch: void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle getStyle()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void triangle(float,float,float,float,float,float)
com.badlogic.gdx.math.GridPoint2: com.badlogic.gdx.math.GridPoint2 sub(com.badlogic.gdx.math.GridPoint2)
com.badlogic.gdx.graphics.g2d.NinePatch: void setLeftWidth(float)
com.badlogic.gdx.utils.Logger: void error(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean middle(int)
com.esotericsoftware.reflectasm.FieldAccess: java.lang.Object get(java.lang.Object,int)
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: void setPosition(float,float)
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: float[] temp
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue durationValue
com.esotericsoftware.kryo.util.IntMap: int hash3(int)
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: float[] colors
com.badlogic.gdx.graphics.glutils.IndexArray: java.nio.ShortBuffer getBuffer()
com.badlogic.gdx.Net$HttpResponse: java.lang.String getHeader(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.TextArea: void drawSelection(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float)
com.badlogic.gdx.graphics.Mesh: void transform(com.badlogic.gdx.math.Matrix4,float[],int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap: FreeTypeFontGenerator$GlyphAndBitmap(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator)
com.badlogic.gdx.Input$Keys: int META_ALT_ON
com.badlogic.gdx.Input$Keys: int L
com.badlogic.gdx.utils.compression.lzma.Base: int kNumPosStatesMax
com.badlogic.gdx.utils.ObjectMap$Values: com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.input.RemoteInput: boolean connected
com.badlogic.gdx.graphics.Pixmap: int getWidth()
com.badlogic.gdx.graphics.g2d.PixmapPacker: PixmapPacker(int,int,com.badlogic.gdx.graphics.Pixmap$Format,int,boolean,com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: boolean isDirect
com.badlogic.gdx.graphics.GL30: void glUniformMatrix3fv(int,int,boolean,float[],int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1iv(int,int,int[],int)
com.badlogic.gdx.graphics.g3d.decals.Decal: int U1
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy: FillResolutionStrategy()
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void fillVerticesGPU(int[])
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: float unitScale
androidx.appcompat.widget.Toolbar: void setContentInsetEndWithActions(int)
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float getLength()
com.badlogic.gdx.utils.ObjectFloatMap: com.badlogic.gdx.utils.ObjectFloatMap$Values values()
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector2 ep1
com.badlogic.gdx.utils.IntMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: float shininess
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler: int timeoutMillis
com.badlogic.gdx.graphics.GL30: int glGenFramebuffer()
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral RotationVector
com.badlogic.gdx.scenes.scene2d.utils.Selection: void add(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setHigh(float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glValidateProgram(int)
com.badlogic.gdx.input.RemoteInput: int[] deltaY
androidx.fragment.app.Fragment: boolean mDetached
com.badlogic.gdx.backends.android.AndroidFiles: java.lang.String sdcard
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef
com.badlogic.gdx.graphics.GL20: int GL_INVALID_VALUE
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.Graphics$GraphicsType getType()
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float getDampingRatio()
com.badlogic.gdx.scenes.scene2d.ui.Skin: Skin(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.GL30: void glFlushMappedBufferRange(int,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int s
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setBackgroundResource(int)
com.badlogic.gdx.math.MathUtils: int ceil(float)
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup: void add(com.badlogic.gdx.scenes.scene2d.ui.Button[])
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: int rotation
com.badlogic.gdx.backends.android.AndroidPreferences: boolean getBoolean(java.lang.String,boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int FALOAD
com.badlogic.gdx.graphics.GL20: void glStencilOpSeparate(int,int,int,int)
com.HyperSphere.Connection.PacketObjects.Entities.Player: short rank
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Interpolation6
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3: ScrollPane$3(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: TiledDrawable()
com.badlogic.gdx.graphics.profiling.GLInterceptor: boolean glIsShader(int)
com.esotericsoftware.kryo.Kryo: Kryo(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean supportsDisplayModeChange()
com.badlogic.gdx.physics.box2d.World: void jniSetGravity(long,float,float)
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_RGB8_ETC2
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.math.Rectangle tempScissors
com.badlogic.gdx.utils.JsonValue: boolean has(java.lang.String)
com.badlogic.gdx.maps.MapLayer: void setOffsetX(float)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: Attribute(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: float height
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: void setHighMin(float)
com.badlogic.gdx.graphics.GLTexture: void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter)
com.esotericsoftware.jsonbeans.JsonValue: double getDouble(int)
com.badlogic.gdx.utils.compression.rangecoder.Encoder: void FlushData()
com.badlogic.gdx.graphics.g2d.freetype.FreetypeBuild
com.badlogic.gdx.utils.Array: java.lang.String toString(java.lang.String)
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef: void initialize(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox
com.badlogic.gdx.graphics.GL30: int GL_MAX_VARYING_COMPONENTS
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawCircle(long,int,int,int,int)
com.badlogic.gdx.graphics.g2d.PolygonBatch: void draw(com.badlogic.gdx.graphics.Texture,float,float)
com.badlogic.gdx.math.BSpline
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer
com.badlogic.gdx.assets.loaders.I18NBundleLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.utils.IdentityMap$Values: java.lang.Object next()
com.badlogic.gdx.math.Bresenham2$1: com.badlogic.gdx.math.GridPoint2 newObject()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void expandTo()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int getMinParticleCount()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int mBlueSize
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue)
com.badlogic.gdx.math.GeometryUtils: float triangleQuality(float,float,float,float,float,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap: int getWidth(long)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27: DefaultShader$Setters$27()
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: Throwable()
com.esotericsoftware.reflectasm.FieldAccess: void set(java.lang.Object,int,java.lang.Object)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField: AsmCacheFields$AsmBooleanField()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer: double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
androidx.fragment.app.Fragment: void setNextAnim(int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: java.lang.String glGetShaderInfoLog(int)
com.esotericsoftware.kryo.util.IntMap$Entry: IntMap$Entry()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: com.esotericsoftware.kryo.util.ObjectMap javaSerializerByType
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetSpringFrequencyHz(long)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: void sendPacket(short,int[])
com.google.android.material.internal.BaselineLayout: int getBaseline()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.kryo.io.ByteBufferOutput: java.nio.ByteBuffer niobuffer
com.badlogic.gdx.physics.box2d.utils.Box2DBuild
androidx.appcompat.widget.AppCompatTextView: androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParamsCompat()
com.badlogic.gdx.utils.Predicate$PredicateIterator: java.lang.Object next
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction: void begin()
com.esotericsoftware.kryo.serializers.ExternalizableSerializer
com.badlogic.gdx.utils.BufferUtils: java.nio.ByteBuffer newUnsafeByteBuffer(int)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: void buildVertices()
com.badlogic.gdx.backends.android.AndroidGL30: boolean glUnmapBuffer(int)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void initialize(int)
com.badlogic.gdx.graphics.g2d.NinePatch: com.badlogic.gdx.graphics.Color tmpDrawColor
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: DefaultShader(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config,java.lang.String,java.lang.String,java.lang.String)
com.badlogic.gdx.scenes.scene2d.Actor: float getY(int)
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType[] $VALUES
com.badlogic.gdx.scenes.scene2d.actions.ColorAction: void reset()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getMinWidthValue()
com.badlogic.gdx.utils.SerializationException: SerializationException(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.scenes.scene2d.ui.Skin
com.badlogic.gdx.graphics.glutils.KTXTextureData: boolean useMipMaps()
com.badlogic.gdx.graphics.profiling.GLInterceptor: int getTextureBindings()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable: java.lang.Appendable append(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.scenes.scene2d.ui.Table$5
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec: int internalFormat
com.badlogic.gdx.scenes.scene2d.ui.List$1: boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)
com.badlogic.gdx.math.Vector2: com.badlogic.gdx.math.Vector scl(float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec: int type
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue parent()
com.badlogic.gdx.utils.BooleanArray: void addAll(boolean[],int,int)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean translateTarget
com.badlogic.gdx.utils.Json: void toJson(java.lang.Object,java.io.Writer)
com.badlogic.gdx.graphics.g2d.ParticleEffect: ParticleEffect(com.badlogic.gdx.graphics.g2d.ParticleEffect)
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior
com.badlogic.gdx.scenes.scene2d.ui.TextArea: float prefRows
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDrawElements(int,int,int,int)
com.badlogic.gdx.assets.AssetLoadingTask: boolean asyncDone
com.esotericsoftware.jsonbeans.JsonReader: int json_first_final
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector linear(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.physics.box2d.JointDef: JointDef()
com.badlogic.gdx.graphics.glutils.InstanceBufferObject: void updateInstanceData(int,java.nio.FloatBuffer,int,int)
com.badlogic.gdx.math.BSpline: float d6
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter: com.badlogic.gdx.graphics.Texture$TextureFilter minFilter
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard: android.content.Context context
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction: float amount
com.badlogic.gdx.math.Interpolation$11: float apply(float)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: boolean complete
androidx.fragment.app.Fragment: int CREATED
com.badlogic.gdx.utils.ByteArray: void add(byte,byte)
com.badlogic.gdx.backends.android.AndroidApplicationBase: void debug(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: int CPU_POSITION_OFFSET
com.HyperSphere.Connection.PacketObjects.Misc.SpecialString: SpecialString()
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.Action action(java.lang.Class)
com.badlogic.gdx.physics.box2d.Body: void jniGetWorldPoint(long,float,float,float[])
com.badlogic.gdx.scenes.scene2d.ui.Tree: void selectNodes(com.badlogic.gdx.utils.Array,float,float)
com.HyperSphere.Connection.PacketObjects.Map.Mark: Mark(int,int,int,int,short,java.lang.String)
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.collision.Ray mul(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.assets.AssetDescriptor: java.lang.String toString()
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.utils.FloatArray: FloatArray(boolean,float[],int,int)
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: com.esotericsoftware.kryo.Generics buildGenericsScope(java.lang.Class,java.lang.Class[])
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1: boolean handle(com.badlogic.gdx.scenes.scene2d.Event)
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data: boolean hasPKMHeader()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setStartIconDrawable(android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float)
com.esotericsoftware.kryonet.Listener$ReflectionListener
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float)
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int button
com.badlogic.gdx.physics.box2d.joints.MotorJoint: void jniGetLinearOffset(long,float[])
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g2d.ParticleEffect: void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String)
com.badlogic.gdx.graphics.g2d.GlyphLayout: com.badlogic.gdx.utils.Array colorStack
com.badlogic.gdx.math.Interpolation$Elastic: float apply(float)
com.badlogic.gdx.graphics.glutils.VertexData: void setVertices(float[],int,int)
com.badlogic.gdx.utils.JsonValue: int size()
com.badlogic.gdx.math.Circle: float circumference()
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer: PixmapIO$PNG$ChunkBuffer(java.io.ByteArrayOutputStream,java.util.zip.CRC32)
com.badlogic.gdx.math.Intersector: float distanceLinePoint(float,float,float,float,float,float)
com.badlogic.gdx.graphics.Camera: Camera()
com.google.android.material.chip.Chip: void setCloseIcon(android.graphics.drawable.Drawable)
com.google.android.material.chip.Chip: void setCloseIconStartPadding(float)
com.badlogic.gdx.utils.Array: void addAll(java.lang.Object[],int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: java.lang.String fragmentShader
androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Vector2 localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup: float getMaxWidth()
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)
com.badlogic.gdx.physics.box2d.ChainShape: boolean isLooped()
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,float,float,float,float)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,int)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.badlogic.gdx.math.Circle: void setPosition(float,float)
com.badlogic.gdx.backends.android.AndroidInput: void getRotationMatrix(float[])
com.badlogic.gdx.graphics.GL20: void glDisableVertexAttribArray(int)
com.badlogic.gdx.utils.IntIntMap: com.badlogic.gdx.utils.IntIntMap$Values values1
com.badlogic.gdx.graphics.g2d.NinePatch: int BOTTOM_RIGHT
com.badlogic.gdx.physics.box2d.MassData: MassData()
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior: AppBarLayout$ScrollingViewBehavior()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button)
com.badlogic.gdx.backends.android.AndroidInput: com.badlogic.gdx.utils.IntSet keysToCatch
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: boolean keepWithinStage
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun: java.lang.String toString()
com.badlogic.gdx.LifecycleListener
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.util.IdentityMap: int stashCapacity
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25: DefaultShader$Setters$25()
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int capacity
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable: float getBottomHeight()
com.google.android.material.chip.Chip: void setCloseIconEndPadding(float)
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
com.badlogic.gdx.utils.JsonValue: void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.AndroidGL30: void glGetUniformuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable knobDown
com.esotericsoftware.minlog.Log: int LEVEL_NONE
com.badlogic.gdx.graphics.GL20: void glUniform3i(int,int,int,int)
com.badlogic.gdx.utils.LittleEndianInputStream: void readFully(byte[])
com.badlogic.gdx.graphics.glutils.IndexArray: void unbind()
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: java.lang.String[] imagePaths
com.badlogic.gdx.scenes.scene2d.actions.IntAction: IntAction()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable: BaseDrawable()
com.badlogic.gdx.math.Vector2: float crs(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.net.HttpRequestBuilder: int defaultTimeout
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])
com.badlogic.gdx.physics.box2d.joints.MotorJoint: com.badlogic.gdx.math.Vector2 getLinearOffset()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getMaxSplitAmount()
com.badlogic.gdx.net.HttpResponseHeader: java.lang.String Upgrade
com.badlogic.gdx.graphics.g2d.ParticleEmitter: boolean isComplete()
com.badlogic.gdx.backends.android.InputProcessorLW
com.HyperSphere.Connection.PacketObjects.Entities.Creature: Creature()
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: IsometricTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D: DynamicsModifier$Rotational3D(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D)
com.badlogic.gdx.utils.compression.lzma.Base: int kStartPosModelIndex
com.badlogic.gdx.graphics.g2d.PixmapPacker: void setPageWidth(int)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void patch(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker: int padding
com.esotericsoftware.kryonet.rmi.ObjectSpace$2: int compare(java.lang.reflect.Method,java.lang.reflect.Method)
com.badlogic.gdx.Graphics: void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
com.badlogic.gdx.backends.android.AndroidApplication: com.badlogic.gdx.ApplicationListener getApplicationListener()
com.badlogic.gdx.utils.ArrayMap$Entries: int index
com.badlogic.gdx.scenes.scene2d.ui.TextField: TextField(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getSpawnWidth()
com.badlogic.gdx.audio.Sound: void dispose()
com.badlogic.gdx.Gdx
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D: float EPSILON
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float padLeft
com.esotericsoftware.kryo.serializers.DeflateSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle: Window$WindowStyle(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.Application$ApplicationType getType()
com.badlogic.gdx.backends.android.AndroidInput: float getGyroscopeY()
com.badlogic.gdx.backends.android.AndroidInput: boolean[] touched
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: float value
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int newMethodType(java.lang.String)
com.badlogic.gdx.utils.Json: java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.backends.android.AndroidAudio: com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy: void afterGroups()
com.badlogic.gdx.utils.JsonValue: JsonValue(com.badlogic.gdx.utils.JsonValue$ValueType)
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.math.Interpolation$Bounce: Interpolation$Bounce(float[],float[])
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo: java.lang.String filename
com.badlogic.gdx.math.Vector2: boolean isZero()
com.badlogic.gdx.graphics.g2d.Animation: int lastFrameNumber
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: boolean isDirty
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean continueCursor(int,int)
com.badlogic.gdx.graphics.g3d.Model: void loadAnimations(java.lang.Iterable)
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle: com.badlogic.gdx.graphics.Color fontColor
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format RGBA8888
com.badlogic.gdx.graphics.GL20: void glPolygonOffset(float,float)
com.badlogic.gdx.utils.SortedIntList$Iterator: com.badlogic.gdx.utils.SortedIntList this$0
com.google.android.material.textfield.TextInputLayout: void setPlaceholderTextAppearance(int)
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder _repMatchLenEncoder
com.badlogic.gdx.scenes.scene2d.Actor: void addAction(com.badlogic.gdx.scenes.scene2d.Action)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: androidx.core.graphics.PathParser$PathDataNode[] getPathData()
com.esotericsoftware.kryo.util.IdentityMap: IdentityMap()
com.google.android.material.transformation.FabTransformationScrimBehavior: FabTransformationScrimBehavior(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator: int currentIndex
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setIndices(short[])
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean drawInactiveBodies
com.badlogic.gdx.backends.android.AndroidVisibilityListener
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: com.badlogic.gdx.graphics.Color SHAPE_NOT_AWAKE
com.badlogic.gdx.scenes.scene2d.ui.Value$9: float val$percent
com.badlogic.gdx.maps.objects.TextureMapObject: float scaleY
com.badlogic.gdx.utils.IntFloatMap$Entries: com.badlogic.gdx.utils.IntFloatMap$Entry entry
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer: com.esotericsoftware.kryo.KryoSerializable read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int yCalc
com.badlogic.gdx.scenes.scene2d.ui.Window: void setMovable(boolean)
com.badlogic.gdx.scenes.scene2d.Actor: float originX
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: float ascent
com.badlogic.gdx.utils.Queue: java.lang.Object first()
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder: short[] m_Choice
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: VertexBufferObjectSubData(boolean,int,com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.backends.android.AndroidGraphics: com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config
com.gameanalytics.sdk.http.EGAHTTPApiResponse: com.gameanalytics.sdk.http.EGAHTTPApiResponse[] values()
com.badlogic.gdx.utils.StringBuilder: int lastIndexOf(java.lang.String,int)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glDeleteFramebuffer(int)
com.badlogic.gdx.scenes.scene2d.ui.Tree: void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.utils.Array,float,float)
com.badlogic.gdx.graphics.GL30: void glDeleteRenderbuffer(int)
com.badlogic.gdx.utils.BooleanArray: void add(boolean,boolean)
com.badlogic.gdx.utils.SnapshotArray: java.lang.Object[] snapshot
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter: com.badlogic.gdx.utils.Array batches
com.badlogic.gdx.utils.IntMap: boolean containsKey(int)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetMaxMotorTorque(long,float)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: void scale(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform shininess
com.badlogic.gdx.scenes.scene2d.ui.Window$3: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.scenes.scene2d.Stage: boolean keyTyped(char)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetUpperLimit(long)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3: com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1
com.google.android.material.floatingactionbutton.FloatingActionButton: void setShowMotionSpecResource(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread: boolean mSizeChanged
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: java.lang.String getClassName()
com.badlogic.gdx.scenes.scene2d.actions.AddAction: com.badlogic.gdx.scenes.scene2d.Action getAction()
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper: android.view.SurfaceHolder getSurfaceHolder()
com.badlogic.gdx.Screen: void dispose()
com.badlogic.gdx.utils.JsonValue: int getInt(int)
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: int y
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser: int EGL_OPENGL_ES2_BIT
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData: int width
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue: boolean isActive()
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef: float maxForce
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void clear()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.google.android.material.bottomappbar.BottomAppBar: int getFabAlignmentMode()
com.badlogic.gdx.graphics.GL30: int GL_RGBA8
com.badlogic.gdx.graphics.VertexAttributes: java.util.Iterator iterator()
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Values values2
com.google.android.material.card.MaterialCardView: void setStrokeColor(android.content.res.ColorStateList)
com.esotericsoftware.kryo.io.Output: void writeFloat(float)
com.badlogic.gdx.graphics.TextureArray: void reload()
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$PowIn slowFast
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode
com.esotericsoftware.kryonet.JsonSerialization: com.esotericsoftware.kryo.io.ByteBufferOutputStream byteBufferOutputStream
com.badlogic.gdx.math.Vector3: float y
com.badlogic.gdx.backends.android.AndroidGL30: void glRenderbufferStorageMultisample(int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.decals.DecalBatch: void flush()
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
com.badlogic.gdx.graphics.glutils.InstanceData: void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: java.lang.Object next()
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: com.esotericsoftware.kryo.serializers.BeanSerializer this$0
com.badlogic.gdx.backends.android.AndroidGL30: void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
androidx.fragment.app.Fragment: void initState()
com.badlogic.gdx.utils.SnapshotArray: void sort(java.util.Comparator)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: RegionInfluencer$Single()
com.badlogic.gdx.graphics.GL30: int GL_PRIMITIVE_RESTART_FIXED_INDEX
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceRightValue()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1
com.badlogic.gdx.scenes.scene2d.ui.Tree: void collapseAll(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.serializers.DefaultSerializers
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: float startY
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.utils.ObjectSet: void clear(int)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padTop(float)
com.badlogic.gdx.input.RemoteInput: float getPressure(int)
com.badlogic.gdx.utils.BinaryHeap: com.badlogic.gdx.utils.BinaryHeap$Node remove(int)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.utils.MeshBuilder getBuilder(com.badlogic.gdx.graphics.VertexAttributes)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData: boolean isBreakChar(char)
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder method(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3iv(int,int,int[],int)
com.badlogic.gdx.utils.reflect.Field: boolean isTransient()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: int e
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setBlendFunction(int,int)
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent: long timeStamp
com.badlogic.gdx.graphics.GL20: int GL_GREATER
com.badlogic.gdx.utils.reflect.ClassReflection: com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations(java.lang.Class)
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer: IsometricTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap)
com.badlogic.gdx.utils.LongMap: void putAll(com.badlogic.gdx.utils.LongMap)
com.badlogic.gdx.utils.JsonValue$JsonIterator: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float getPrefWidth()
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1: PixmapPacker$GuillotineStrategy$1(com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy)
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: void writeInts(int[],boolean)
com.google.android.material.appbar.AppBarLayout: int getLiftOnScrollTargetViewId()
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1: void resume()
com.badlogic.gdx.utils.JsonValue: boolean isFlat(com.badlogic.gdx.utils.JsonValue)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart: java.lang.String materialId
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3,boolean)
com.badlogic.gdx.scenes.scene2d.ui.Table: int getRow(float)
com.badlogic.gdx.utils.viewport.Viewport: void setScreenX(int)
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet set(short,int[])
com.badlogic.gdx.graphics.GL30: void glDeleteFramebuffer(int)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.scenes.scene2d.Stage getStage()
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer: boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup fill()
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int)
com.badlogic.gdx.utils.IntMap: IntMap(int)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int OBJECT
com.badlogic.gdx.physics.box2d.joints.WeldJoint: void jniSetFrequency(long,float)
com.badlogic.gdx.graphics.g3d.particles.ResourceData: com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData getSaveData(java.lang.String)
com.badlogic.gdx.graphics.GL30: int GL_DYNAMIC_READ
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle: com.badlogic.gdx.scenes.scene2d.utils.Drawable knobAfter
com.badlogic.gdx.InputMultiplexer: InputMultiplexer()
com.google.android.material.chip.Chip: float getCloseIconStartPadding()
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue)
com.badlogic.gdx.utils.StringBuilder: void append0(char[],int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder: com.badlogic.gdx.utils.compression.lz.BinTree _matchFinder
com.badlogic.gdx.graphics.GL20: int GL_FASTEST
com.badlogic.gdx.utils.Pool: Pool(int,int)
com.badlogic.gdx.utils.IntArray: void shuffle()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[])
com.badlogic.gdx.utils.compression.Lzma$CommandLine: int MatchFinder
com.esotericsoftware.kryonet.util.ObjectIntMap: int pushIterations
com.badlogic.gdx.maps.tiled.TmxMapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters)
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int)
com.esotericsoftware.kryonet.Server: void run()
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable
com.google.android.material.internal.CheckableImageButton: void setChecked(boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.math.Bresenham2: com.badlogic.gdx.utils.Array line(int,int,int,int,com.badlogic.gdx.utils.Pool,com.badlogic.gdx.utils.Array)
androidx.fragment.app.Fragment: boolean mUserVisibleHint
com.esotericsoftware.kryo.Generics: Generics(java.util.Map)
com.badlogic.gdx.assets.loaders.CubemapLoader: void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.backends.android.AndroidInput$2: AndroidInput$2(com.badlogic.gdx.backends.android.AndroidInput,int,int)
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source
com.badlogic.gdx.utils.Sort: void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.graphics.VertexAttribute: int getKey()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform regionSize
com.badlogic.gdx.graphics.glutils.VertexArray: com.badlogic.gdx.graphics.VertexAttributes attributes
androidx.cardview.widget.CardView: float getMaxCardElevation()
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight: float halfDepth
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int mAlphaSize
com.badlogic.gdx.utils.IntFloatMap: int hash2(int)
com.badlogic.gdx.scenes.scene2d.actions.EventAction: java.lang.Class eventClass
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: void end(int,int,int,int)
com.esotericsoftware.kryo.io.ByteBufferOutput: byte[] toBytes()
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: UnsafeMemoryOutput(int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: com.badlogic.gdx.graphics.g3d.Material currentMaterial
com.esotericsoftware.kryo.util.ObjectMap$MapIterator: int nextIndex
com.badlogic.gdx.physics.box2d.Body: void applyLinearImpulse(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean)
com.badlogic.gdx.utils.ArrayMap$Entries: ArrayMap$Entries(com.badlogic.gdx.utils.ArrayMap)
com.esotericsoftware.kryo.util.IdentityObjectIntMap: int stashCapacity
com.badlogic.gdx.graphics.g2d.SpriteBatch: void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void setColor(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion tmp2
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: void insert(int,com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.HyperSphere.Connection.PacketObjects.Misc.Item: int type
com.esotericsoftware.kryonet.rmi.ObjectSpace$4: ObjectSpace$4()
com.badlogic.gdx.net.HttpStatus
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void ellipse(float,float,float,float,int,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextField: java.lang.StringBuilder passwordBuffer
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: void setRound(boolean)
com.esotericsoftware.kryo.util.IdentityMap
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Keys keys()
com.badlogic.gdx.math.Polyline: float getOriginX()
com.badlogic.gdx.scenes.scene2d.Actor: float x
com.badlogic.gdx.graphics.GL30: void glDetachShader(int,int)
com.badlogic.gdx.math.Quaternion: float len(float,float,float,float)
androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)
com.badlogic.gdx.Input$Keys: int NUMPAD_9
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6: boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int)
com.badlogic.gdx.physics.box2d.joints.RopeJoint: float getMaxLength()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassVisitor: void visitAttribute(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute)
com.badlogic.gdx.utils.PerformanceCounter: com.badlogic.gdx.math.FloatCounter time
androidx.fragment.app.Fragment: boolean mPerformedCreateView
com.badlogic.gdx.input.RemoteInput: float getAzimuth()
com.google.android.material.chip.Chip: void setChipDrawable(com.google.android.material.chip.ChipDrawable)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: float padTop
com.badlogic.gdx.graphics.Cubemap: void invalidateAllCubemaps(com.badlogic.gdx.Application)
com.badlogic.gdx.backends.android.AndroidInput: void updateOrientation()
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField
com.badlogic.gdx.utils.LongMap: java.lang.Object put(long,java.lang.Object)
com.esotericsoftware.kryonet.Server: java.lang.Thread updateThread
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: com.esotericsoftware.kryo.serializers.FieldSerializer serializer
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth
com.google.android.material.textfield.MaterialAutoCompleteTextView: void setAdapter(android.widget.ListAdapter)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single: RegionInfluencer$Single(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType DistanceJoint
com.badlogic.gdx.utils.ShortArray: ShortArray(int)
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type valueOf(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2i(int,int,int)
com.badlogic.gdx.backends.android.AndroidPreferences: long getLong(java.lang.String)
com.esotericsoftware.jsonbeans.JsonReader: void string(java.lang.String,java.lang.String)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object[] valueTable
com.badlogic.gdx.graphics.OrthographicCamera: float zoom
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector setLength(float)
com.esotericsoftware.kryo.io.FastOutput: FastOutput(byte[])
com.badlogic.gdx.net.HttpRequestBuilder: com.badlogic.gdx.net.HttpRequestBuilder content(java.io.InputStream,long)
com.badlogic.gdx.utils.ShortArray: short random()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: void startActivity(android.content.Intent)
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute: int compareTo(java.lang.Object)
com.badlogic.gdx.utils.JsonReader: byte[] _json_range_lengths
com.badlogic.gdx.backends.android.AndroidNet
com.badlogic.gdx.graphics.g2d.NinePatch: int middleLeft
com.badlogic.gdx.scenes.scene2d.ui.Tree: java.lang.Object getSelectedValue()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial: int hashCode()
com.google.android.material.textfield.TextInputLayout: void setErrorIconTintMode(android.graphics.PorterDuff$Mode)
com.esotericsoftware.kryonet.rmi.RemoteObject: com.esotericsoftware.kryonet.Connection getConnection()
com.badlogic.gdx.input.RemoteInput: com.badlogic.gdx.InputProcessor getInputProcessor()
com.badlogic.gdx.backends.android.AndroidInput: int lookUpPointerIndex(int)
com.esotericsoftware.kryo.io.ByteBufferOutputStream: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.backends.android.AndroidDaydream: com.badlogic.gdx.utils.SnapshotArray lifecycleListeners
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Shape$Type getType()
com.esotericsoftware.kryo.io.KryoObjectInput: int read()
com.badlogic.gdx.scenes.scene2d.utils.Selection: java.lang.Object getLastSelected()
com.badlogic.gdx.InputMultiplexer: void removeProcessor(com.badlogic.gdx.InputProcessor)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void setColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Matrix4 localTransform
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: com.badlogic.gdx.graphics.TextureData$TextureDataType getType()
com.badlogic.gdx.graphics.GL30: int GL_UNSIGNED_INT_VEC2
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer: char[] copy(com.esotericsoftware.kryo.Kryo,char[])
com.badlogic.gdx.graphics.g2d.Batch: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.utils.Array getCells()
com.HyperSphere.Connection.PacketObjects.Map.Tile: int[] getRenderBound()
com.HyperSphere.Connection.PacketObjects.Map.Obstacle: void setCollisionBounds(java.util.ArrayList)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getVisualValue()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.esotericsoftware.kryo.io.FastOutput: FastOutput(int,int)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumLenToPosStates
com.badlogic.gdx.utils.BufferUtils: java.nio.DoubleBuffer newDoubleBuffer(int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniSetMotorSpeed(long,float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter: com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue yOffsetValue
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.Array getChildrenByNameRecursively(java.lang.String)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE15
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1: void pause()
com.badlogic.gdx.graphics.TextureArray: int getWidth()
androidx.cardview.widget.CardView: void setUseCompatPadding(boolean)
com.badlogic.gdx.utils.BufferUtils: long find(float[],int,int,float[],int,int,float)
com.badlogic.gdx.Input$Keys: int MEDIA_NEXT
com.badlogic.gdx.graphics.GLTexture: void delete()
com.hyperspherestudio.kryonet.Packets.CommonPacket: int getPacketValue()
com.badlogic.gdx.maps.objects.TextureMapObject: float getOriginX()
com.badlogic.gdx.graphics.g3d.utils.RenderContext: RenderContext(com.badlogic.gdx.graphics.g3d.utils.TextureBinder)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: void rebuildReferences(com.badlogic.gdx.graphics.g3d.Model)
com.badlogic.gdx.graphics.glutils.KTXTextureData: boolean disposePixmap()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawPixmap(long,long,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_shadowTexture
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20: java.lang.String TAG
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: void setDebugFlags(int)
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.esotericsoftware.kryo.io.Input: int readUtf8Length_slow(int)
com.google.android.material.chip.Chip: void setChipIconSizeResource(int)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeStepGranularity()
androidx.appcompat.widget.ActionBarOverlayLayout: java.lang.CharSequence getTitle()
com.esotericsoftware.jsonbeans.JsonValue
com.badlogic.gdx.math.Intersector: boolean intersectPolygons(com.badlogic.gdx.utils.FloatArray,com.badlogic.gdx.utils.FloatArray)
com.esotericsoftware.jsonbeans.JsonValue: float[] asFloatArray()
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.scenes.scene2d.Actor findActor(java.lang.String)
com.esotericsoftware.kryo.io.KryoDataInput: byte readByte()
com.badlogic.gdx.utils.FloatArray: void insert(int,float)
com.badlogic.gdx.utils.JsonWriter$JsonObject: com.badlogic.gdx.utils.JsonWriter this$0
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.Mesh copy(boolean,boolean,int[])
com.badlogic.gdx.utils.FloatArray: float pop()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Table buttonTable
com.esotericsoftware.kryonet.TcpConnection: boolean writeToSocket()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper: com.badlogic.gdx.ApplicationLogger applicationLogger
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext)
com.badlogic.gdx.scenes.scene2d.ui.List$2: boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.esotericsoftware.jsonbeans.JsonValue: boolean isString()
com.badlogic.gdx.scenes.scene2d.ui.List: com.badlogic.gdx.scenes.scene2d.utils.ArraySelection selection
com.badlogic.gdx.utils.UBJsonWriter: void close()
com.badlogic.gdx.backends.android.AndroidZipFileHandle: boolean exists()
com.badlogic.gdx.utils.ShortArray: ShortArray(boolean,int)
com.badlogic.gdx.backends.android.AndroidGraphics: android.view.View view
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem: com.badlogic.gdx.utils.Array getBatches()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: android.os.Handler handler
com.badlogic.gdx.graphics.GL30: void glUniform4iv(int,int,int[],int)
androidx.appcompat.widget.Toolbar: int getContentInsetEndWithActions()
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: void setInstant(boolean)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: void onHide(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.graphics.GL30: int GL_BUFFER_MAPPED
com.badlogic.gdx.utils.ByteArray: int removeIndex(int)
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform: com.badlogic.gdx.math.Quaternion rotation
com.google.android.material.bottomappbar.BottomAppBar: float getFabTranslationY()
com.badlogic.gdx.utils.IntMap$Entries: void remove()
com.badlogic.gdx.math.collision.Sphere: com.badlogic.gdx.math.Vector3 center
com.badlogic.gdx.math.DelaunayTriangulator: void sort(float[],int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void dispose()
com.google.android.material.textfield.TextInputLayout: void setErrorContentDescription(java.lang.CharSequence)
com.badlogic.gdx.InputMultiplexer
com.badlogic.gdx.assets.AssetManager: boolean updateTask()
com.badlogic.gdx.scenes.scene2d.ui.Table: void invalidate()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float)
com.badlogic.gdx.Preferences: int getInteger(java.lang.String,int)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle getStyle()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: float spawnHeightDiff
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters: com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter specularUVTransform
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void applyNodeAnimationBlending(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,com.badlogic.gdx.utils.ObjectMap,com.badlogic.gdx.utils.Pool,float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table$4: Table$4()
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: com.badlogic.gdx.utils.Array trackedTextures
com.badlogic.gdx.graphics.PixmapIO$CIM: void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
androidx.core.graphics.drawable.IconCompat: IconCompat()
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy: java.util.Comparator comparator
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D
com.badlogic.gdx.maps.tiled.TiledMapTileSet: java.util.Iterator iterator()
com.esotericsoftware.kryonet.rmi.TimeoutException: TimeoutException(java.lang.String,java.lang.Throwable)
com.badlogic.gdx.math.BSpline: float approximate(com.badlogic.gdx.math.Vector,int)
com.esotericsoftware.kryo.io.Output: int longLength(long,boolean)
com.esotericsoftware.kryo.io.Output: void writeString(java.lang.String)
com.badlogic.gdx.graphics.glutils.IndexArray: boolean empty
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter: int compare(java.lang.Object,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.Stage: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debugTableUnderMouse
com.google.android.material.chip.Chip: void setBackgroundTintList(android.content.res.ColorStateList)
com.badlogic.gdx.utils.ArrayMap: int indexOfKey(java.lang.Object)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.math.Vector2 getPosition()
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(android.graphics.drawable.Drawable)
com.badlogic.gdx.utils.Align: boolean isCenterVertical(int)
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject: com.esotericsoftware.jsonbeans.JsonWriter this$0
com.badlogic.gdx.scenes.scene2d.ui.TextField: float fontOffset
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue: float spawnWidth
com.badlogic.gdx.scenes.scene2d.ui.Touchpad: com.badlogic.gdx.math.Circle touchBounds
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.utils.Json: java.lang.Class getClass(java.lang.String)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: int GROUP_OPAQUE
com.badlogic.gdx.utils.ObjectMap: int hashShift
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region: int index
com.badlogic.gdx.physics.box2d.ContactFilter
com.esotericsoftware.kryo.util.FastestStreamFactory
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: void setCamera(com.badlogic.gdx.graphics.Camera)
com.esotericsoftware.jsonbeans.JsonReader: char[] init__json_trans_keys_0()
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup
com.badlogic.gdx.math.Vector3: float len2()
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single: void activateParticles(int,int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter: void write(char[],int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: ParticleShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.esotericsoftware.kryonet.KryoNetException: KryoNetException()
com.esotericsoftware.kryonet.ClientDiscoveryHandler$1: ClientDiscoveryHandler$1()
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_LOAD_NO_AUTOHINT
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty: BeanSerializer$CachedProperty(com.esotericsoftware.kryo.serializers.BeanSerializer)
com.badlogic.gdx.graphics.glutils.FileTextureData: boolean isPrepared
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: int numBones
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1: SelectBox$SelectBoxList$1(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle,com.badlogic.gdx.scenes.scene2d.ui.SelectBox)
com.esotericsoftware.kryonet.Listener: void received(com.esotericsoftware.kryonet.Connection,java.lang.Object)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color CYAN
com.badlogic.gdx.graphics.Mesh: boolean isVertexArray
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToRotationRad(float,float,float,float)
com.badlogic.gdx.graphics.GL20: int GL_MAX_VERTEX_ATTRIBS
com.badlogic.gdx.physics.box2d.World: float reportRayFixture(long,float,float,float,float,float)
com.badlogic.gdx.utils.IntIntMap: int zeroValue
com.badlogic.gdx.audio.Music: boolean isPlaying()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel particleControllerChannel
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: void drawAdjusted(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.Event: void setTarget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.net.ServerSocket: com.badlogic.gdx.Net$Protocol getProtocol()
com.badlogic.gdx.math.Quaternion: float len2()
com.badlogic.gdx.graphics.glutils.FileTextureData: com.badlogic.gdx.files.FileHandle file
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper: void destroySurface()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Type: int SHORT
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef
com.esotericsoftware.kryo.io.UnsafeOutput: void writeFloats(float[])
com.badlogic.gdx.graphics.GL30: int GL_READ_FRAMEBUFFER_BINDING
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getMaxHeight()
com.badlogic.gdx.graphics.GL30: int GL_MAX_ELEMENT_INDEX
com.badlogic.gdx.math.GeometryUtils: boolean isClockwise(float[],int,int)
com.badlogic.gdx.utils.ObjectMap: void shrink(int)
com.badlogic.gdx.net.ServerSocketHints: ServerSocketHints()
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: MoveToAction()
com.badlogic.gdx.math.Vector2: boolean isUnit()
com.esotericsoftware.kryonet.rmi.ObjectSpace: java.util.concurrent.Executor executor
com.badlogic.gdx.files.FileHandle: java.io.File file()
com.badlogic.gdx.graphics.GL30: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
com.esotericsoftware.kryo.StreamFactory: com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)
com.badlogic.gdx.utils.ObjectMap: java.lang.Object dummy
com.badlogic.gdx.physics.box2d.WorldManifold: com.badlogic.gdx.math.Vector2 normal
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColors(float)
androidx.fragment.app.Fragment: void setSharedElementReturnTransition(java.lang.Object)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent: void reset()
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: void applyAnimation(com.badlogic.gdx.utils.ObjectMap,com.badlogic.gdx.utils.Pool,float,com.badlogic.gdx.graphics.g3d.model.Animation,float)
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rect(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniform3fv(int,float[],int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool: BillboardParticleBatch$RenderablePool(com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch)
com.badlogic.gdx.Input$Keys: int F2
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse: java.lang.String getHeader(java.lang.String)
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.math.Vector3 position
androidx.fragment.app.Fragment: int RESUMED
com.esotericsoftware.kryo.util.IdentityObjectIntMap: void clear()
com.badlogic.gdx.graphics.g2d.PixmapPacker: com.badlogic.gdx.graphics.Pixmap$Format pageFormat
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction: void reset()
com.badlogic.gdx.maps.MapObject: java.lang.String getName()
com.badlogic.gdx.graphics.g2d.ParticleEffect: void loadEmitters(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.backends.android.AndroidPreferences: com.badlogic.gdx.Preferences putInteger(java.lang.String,int)
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: CpuSpriteBatch()
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void layout()
com.badlogic.gdx.Graphics$Monitor: int virtualY
com.esotericsoftware.kryonet.EndPoint
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: java.lang.String toString()
com.badlogic.gdx.graphics.Mesh: void dispose()
com.badlogic.gdx.graphics.g3d.utils.AnimationController: com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.Texture$TextureWrap wrapV
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters: com.badlogic.gdx.graphics.Texture$TextureFilter magFilter
com.badlogic.gdx.utils.Pool$Poolable
com.google.android.material.datepicker.Month: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.utils.Queue$QueueIterator: java.util.Iterator iterator()
com.badlogic.gdx.utils.Bits: boolean equals(java.lang.Object)
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer: DefaultSerializers$DateSerializer()
com.badlogic.gdx.graphics.Texture$1: void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetMotorForce(long,float)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float flingTime
com.badlogic.gdx.graphics.CubemapData
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue: ScaledNumericValue()
com.badlogic.gdx.graphics.GL20: int GL_SAMPLE_COVERAGE
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_ambientCubemap
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: float lastPrefHeight
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int V1_4
com.badlogic.gdx.graphics.Camera: com.badlogic.gdx.math.Vector3 direction
com.badlogic.gdx.scenes.scene2d.ui.Cell: float actorHeight
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padTop(float)
com.badlogic.gdx.utils.XmlReader$Element
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode: com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode Enabled
com.badlogic.gdx.math.CumulativeDistribution: void clear()
com.esotericsoftware.kryo.Registration: Registration(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1: java.lang.Object val$target
com.badlogic.gdx.utils.ObjectIntMap: com.badlogic.gdx.utils.ObjectIntMap$Entries entries()
androidx.fragment.app.Fragment$2
com.badlogic.gdx.utils.JsonReader: char[] init__json_trans_keys_0()
com.badlogic.gdx.backends.android.AndroidApplication: android.view.Window getApplicationWindow()
com.esotericsoftware.kryo.util.IdentityMap$Values: java.util.Iterator iterator()
com.badlogic.gdx.maps.MapLayers: void remove(int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void scrollTo(float,float,float,float,boolean,boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VelocityStrengthStartOffset
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToScaling(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.Array: boolean notEmpty()
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.jsonbeans.Json: java.lang.Object fromJson(java.lang.Class,java.io.InputStream)
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle: com.badlogic.gdx.graphics.Color fontColor
com.esotericsoftware.jsonbeans.JsonReader
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 scl(float)
com.badlogic.gdx.physics.box2d.Body: void applyForceToCenter(com.badlogic.gdx.math.Vector2,boolean)
com.badlogic.gdx.graphics.g2d.SpriteBatch: int maxSpritesInBatch
com.badlogic.gdx.scenes.scene2d.ui.Button$2
com.badlogic.gdx.utils.LongMap: java.lang.Object getStash(long,java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: void setTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue lifeOffsetValue
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener: void keyTyped(com.badlogic.gdx.scenes.scene2d.ui.TextField,char)
com.esotericsoftware.kryo.serializers.CollectionSerializer: java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g2d.Animation: float getFrameDuration()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.esotericsoftware.kryo.util.ObjectMap: java.lang.Object removeStash(java.lang.Object)
com.badlogic.gdx.utils.UBJsonWriter: void checkName()
com.badlogic.gdx.math.Interpolation$Exp: float scale
com.badlogic.gdx.scenes.scene2d.ui.Skin$3
com.badlogic.gdx.assets.AssetManager: java.lang.Object finishLoadingAsset(java.lang.String)
com.badlogic.gdx.files.FileHandle: java.lang.String toString()
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task postTask(com.badlogic.gdx.utils.Timer$Task)
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetRepPrice(int,int,int,int)
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter: SkinLoader$SkinParameter(java.lang.String,com.badlogic.gdx.utils.ObjectMap)
com.badlogic.gdx.scenes.scene2d.ui.Tree: java.lang.Object getOverValue()
com.badlogic.gdx.math.Vector: com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService: JobInfoSchedulerService()
com.esotericsoftware.kryo.io.UnsafeInput: int readInt(boolean)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling none
com.badlogic.gdx.utils.Predicate$PredicateIterator: Predicate$PredicateIterator(java.lang.Iterable,com.badlogic.gdx.utils.Predicate)
com.badlogic.gdx.graphics.g3d.Material: Material(com.badlogic.gdx.graphics.g3d.Material)
com.badlogic.gdx.graphics.Mesh: int getNumIndices()
com.badlogic.gdx.scenes.scene2d.Actor: void setDebug(boolean)
com.esotericsoftware.jsonbeans.ObjectMap: ObjectMap()
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: java.lang.Class read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.kryo.io.Output: void setBuffer(byte[],int)
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent: com.badlogic.gdx.math.Quaternion TMP_Q2
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilMask(int)
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V4
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_GB2312
com.badlogic.gdx.utils.IntArray: int get(int)
com.esotericsoftware.jsonbeans.OutputType: java.util.regex.Pattern minimalNamePattern
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int button
com.badlogic.gdx.utils.JsonValue
com.HyperSphere.Connection.PacketObjects.BasePacket.Packet: com.HyperSphere.Connection.PacketObjects.BasePacket.Packet obtain()
com.esotericsoftware.jsonbeans.JsonValue$ValueType: com.esotericsoftware.jsonbeans.JsonValue$ValueType valueOf(java.lang.String)
com.HyperSphere.Connection.PacketObjects.Misc.PathProgress: PathProgress()
com.esotericsoftware.kryonet.util.ObjectIntMap: void clear(int)
com.badlogic.gdx.backends.android.AndroidInput$3$1$1: com.badlogic.gdx.backends.android.AndroidInput$3$1 this$2
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.esotericsoftware.minlog.Log: void error(java.lang.String)
com.badlogic.gdx.utils.SnapshotArray: SnapshotArray(boolean,int,java.lang.Class)
com.google.android.gms.common.internal.zzb: android.os.Parcelable$Creator CREATOR
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory: GLSurfaceViewAPI18$DefaultContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1)
com.badlogic.gdx.graphics.GL30: void glEnable(int)
com.badlogic.gdx.utils.Json: boolean readDeprecated
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction: float amountHeight
com.badlogic.gdx.utils.ObjectSet: int mask
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer: com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: boolean hasNext()
com.badlogic.gdx.scenes.scene2d.ui.TextField: boolean focusTraversal
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_STROKER_LINECAP_SQUARE
com.esotericsoftware.minlog.Log: void error(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.GL20: void glUniform2iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: java.lang.String getDefaultVertexShader()
com.badlogic.gdx.graphics.Mesh: com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int)
com.badlogic.gdx.physics.box2d.Fixture: com.badlogic.gdx.physics.box2d.Body body
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void begin(com.badlogic.gdx.math.Matrix4,int)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int pressedPointer
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy: com.badlogic.gdx.utils.ObjectMap materialGroups
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform1fv(int,int,float[],int)
com.badlogic.gdx.math.WindowedMean: void addValue(float)
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries: com.badlogic.gdx.utils.Array keys
androidx.fragment.app.Fragment: void setOnStartEnterTransitionListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType: com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType[] $VALUES
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction: boolean ran
com.badlogic.gdx.graphics.Pixmap: Pixmap(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.utils.BufferUtils: void copyJni(long[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.ScreenAdapter: void hide()
com.badlogic.gdx.utils.compression.lzma.Base: int kNumMidLenBits
com.badlogic.gdx.graphics.GL30: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.scenes.scene2d.Stage: boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.badlogic.gdx.net.NetJavaSocketImpl: void dispose()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: void visitVarInsn(int,int)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float getHeight()
com.badlogic.gdx.graphics.GL20: int GL_RENDERBUFFER_HEIGHT
com.badlogic.gdx.graphics.g2d.freetype.FreeType: int FT_ENCODING_SJIS
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: com.badlogic.gdx.math.Vector3 TMP_V1
com.badlogic.gdx.graphics.GL20: int GL_FRAMEBUFFER_COMPLETE
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float getScrollY()
com.badlogic.gdx.graphics.g2d.PolygonSprite: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: boolean isDisabled()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.utils.Array$ArrayIterable: boolean allowRemove
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute Normal()
com.badlogic.gdx.utils.ObjectFloatMap$Keys: void remove()
com.badlogic.gdx.utils.Logger: int getLevel()
com.badlogic.gdx.graphics.GL30: void glHint(int,int)
androidx.fragment.app.Fragment: int INITIALIZING
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int[] mValue
com.badlogic.gdx.utils.compression.lz.OutWindow: void CopyBlock(int,int)
com.badlogic.gdx.ApplicationListener: void render()
com.badlogic.gdx.utils.LongMap: boolean notEmpty()
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,long[])
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile: int id
com.esotericsoftware.kryonet.Server: void acceptOperation(java.nio.channels.SocketChannel)
com.badlogic.gdx.graphics.g3d.model.Node: com.badlogic.gdx.math.Matrix4 calculateLocalTransform()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBlendEquation(int)
com.badlogic.gdx.utils.LongArray: boolean ordered
com.esotericsoftware.kryo.io.ByteBufferInput: ByteBufferInput()
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver
com.badlogic.gdx.utils.IntIntMap: int getAndIncrementStash(int,int,int)
com.badlogic.gdx.backends.android.AndroidNet: com.badlogic.gdx.net.NetJavaImpl netJavaImpl
com.badlogic.gdx.math.Bezier: com.badlogic.gdx.math.Vector quadratic(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
com.google.android.material.textfield.TextInputLayout: void setEnabled(boolean)
com.google.android.material.chip.Chip: void setTextAppearance(int)
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion add(com.badlogic.gdx.math.Quaternion)
com.badlogic.gdx.graphics.GL30: void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL20: int GL_STENCIL_WRITEMASK
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer: java.util.Calendar copy(com.esotericsoftware.kryo.Kryo,java.util.Calendar)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void index(short,short)
com.badlogic.gdx.graphics.GL20: java.lang.String glGetShaderInfoLog(int)
com.badlogic.gdx.graphics.profiling.GLErrorListener$1: void onError(int)
com.esotericsoftware.kryo.serializers.ExternalizableSerializer: com.esotericsoftware.kryo.io.KryoObjectInput objectInput
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue: void setLow(float,float)
com.badlogic.gdx.graphics.Pixmap: com.badlogic.gdx.graphics.Pixmap$Format getFormat()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getBitmapLeft()
com.badlogic.gdx.utils.viewport.Viewport: void setWorldHeight(float)
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight setPosition(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.utils.DelayedRemovalArray getListeners()
com.esotericsoftware.kryo.Generics: com.esotericsoftware.kryo.Generics parentScope
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter: TextureAtlasLoader$TextureAtlasParameter()
com.HyperSphere.Connection.PacketObjects.Map.MapObject: float[] getScaling()
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: int forwardKey
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter
androidx.fragment.app.Fragment: boolean mRetainInstance
com.badlogic.gdx.utils.IntFloatMap: float loadFactor
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.utils.Drawable background
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundResource(int)
com.badlogic.gdx.graphics.GL30: void glFramebufferTexture2D(int,int,int,int,int)
com.badlogic.gdx.utils.ShortArray: void addAll(com.badlogic.gdx.utils.ShortArray)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch: int sizeAndRotationUsage
com.badlogic.gdx.utils.ArrayMap$Values: com.badlogic.gdx.utils.ArrayMap map
com.badlogic.gdx.graphics.GL30: int GL_INT_SAMPLER_2D_ARRAY
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute: java.lang.String NormalAlias
com.badlogic.gdx.utils.SnapshotArray: java.lang.Object[] recycled
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter: void setMinParticleCount(int)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion,boolean)
com.badlogic.gdx.graphics.g2d.BitmapFont: float getLineHeight()
com.badlogic.gdx.utils.ArrayMap: void removeIndex(int)
com.badlogic.gdx.graphics.glutils.MipMapTextureData: int getWidth()
com.esotericsoftware.kryo.serializers.BlowfishSerializer$1: BlowfishSerializer$1(com.esotericsoftware.kryo.serializers.BlowfishSerializer,java.io.OutputStream,int)
com.badlogic.gdx.math.Vector3: float dst(float,float,float,float,float,float)
com.badlogic.gdx.utils.Array: java.lang.Object removeIndex(int)
com.badlogic.gdx.graphics.g2d.PolygonSprite: float height
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser: int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int)
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader: void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction: void setAmount(float,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean getPreserveEGLContextOnPause()
com.badlogic.gdx.math.Vector3: float dst2(com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryonet.Client: java.net.InetAddress discoverHost(int,int)
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction: TemporalAction()
com.badlogic.gdx.graphics.Camera: float far
com.esotericsoftware.kryo.io.Output: void writeLongs(long[])
com.badlogic.gdx.assets.loaders.ModelLoader: com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.utils.TextureProvider,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters)
com.badlogic.gdx.scenes.scene2d.ui.Skin$1
com.badlogic.gdx.utils.Queue$QueueIterable: Queue$QueueIterable(com.badlogic.gdx.utils.Queue)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver: com.badlogic.gdx.assets.AssetManager assetManager
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyNodes(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.Renderable: java.lang.Object userData
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial: com.badlogic.gdx.graphics.Color specular
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1: PixmapPacker$Page$1(com.badlogic.gdx.graphics.g2d.PixmapPacker$Page,com.badlogic.gdx.graphics.TextureData)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder: void begin()
com.badlogic.gdx.math.Rectangle: boolean contains(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter
com.esotericsoftware.kryo.util.UnsafeUtil: long charArrayBaseOffset
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer: boolean has3dAngularVelocity
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: float getPrefHeight()
com.badlogic.gdx.math.Polyline: float scaledLength
com.badlogic.gdx.physics.box2d.joints.WheelJoint: com.badlogic.gdx.math.Vector2 getLocalAxisA()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: void resetIds()
com.badlogic.gdx.utils.LongMap$MapIterator: void findNextIndex()
com.badlogic.gdx.math.Quaternion: float dot(com.badlogic.gdx.math.Quaternion)
com.esotericsoftware.kryo.Kryo: int getNextRegistrationId()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField: java.lang.Object getField(java.lang.Object)
com.badlogic.gdx.backends.android.AndroidGraphics: boolean isContinuous
com.badlogic.gdx.physics.box2d.EdgeShape: void jniSetVertex3(long,float,float)
com.badlogic.gdx.utils.DelayedRemovalArray: void insert(int,java.lang.Object)
com.esotericsoftware.jsonbeans.JsonReader: void number(java.lang.String,long)
com.badlogic.gdx.input.GestureDetector$VelocityTracker: float lastX
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getValue()
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page: com.badlogic.gdx.graphics.Pixmap getPixmap()
com.badlogic.gdx.scenes.scene2d.ui.TextField: long lastChangeTime
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: int rows
com.badlogic.gdx.Input$Keys: int CONTROL_LEFT
com.badlogic.gdx.backends.android.AndroidGraphics: boolean pause
com.esotericsoftware.kryo.io.KryoDataOutput: void writeDouble(double)
com.badlogic.gdx.graphics.g2d.Batch: void flush()
com.badlogic.gdx.scenes.scene2d.ui.Cell: int getRow()
com.badlogic.gdx.graphics.PixmapIO$PNG
com.badlogic.gdx.math.Quaternion: float getAngleAroundRad(float,float,float)
com.badlogic.gdx.utils.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random: RegionInfluencer$Random(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random)
com.badlogic.gdx.graphics.GL30: int GL_PROGRAM_BINARY_RETRIEVABLE_HINT
com.badlogic.gdx.backends.android.AndroidApplicationLogger: void error(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.math.Circle: float radius
com.esotericsoftware.kryo.util.IntMap$Values: void remove()
com.badlogic.gdx.utils.IdentityMap: java.lang.Object get(java.lang.Object)
com.badlogic.gdx.math.Vector2: boolean equals(java.lang.Object)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo lerp(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,float)
com.badlogic.gdx.math.Matrix4: java.lang.String toString()
com.badlogic.gdx.physics.box2d.Body: void applyLinearImpulse(float,float,float,float,boolean)
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToRotation(float)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label: void a(long,int)
com.badlogic.gdx.utils.ShortArray: void truncate(int)
com.badlogic.gdx.Application: com.badlogic.gdx.ApplicationListener getApplicationListener()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int LOR
com.esotericsoftware.kryo.io.KryoDataOutput: void writeBytes(java.lang.String)
com.badlogic.gdx.graphics.g3d.Renderable: com.badlogic.gdx.math.Matrix4 worldTransform
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction: float endY
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: java.lang.String getDefaultVertexShader()
com.badlogic.gdx.utils.compression.lz.BinTree: int _matchMaxLen
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: Encoder$LenPriceTableEncoder(com.badlogic.gdx.utils.compression.lzma.Encoder)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue)
com.google.android.material.button.MaterialButton: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer: java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.ui.Tree$2: Tree$2(com.badlogic.gdx.scenes.scene2d.ui.Tree)
com.badlogic.gdx.Input$Keys: int BUTTON_R1
com.badlogic.gdx.graphics.profiling.GL30Interceptor: boolean glIsRenderbuffer(int)
com.badlogic.gdx.utils.IdentityMap: int hash2(int)
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(java.lang.String,float)
com.badlogic.gdx.maps.MapObject: void setOpacity(float)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.math.collision.Segment
com.esotericsoftware.kryo.io.ByteBufferOutput: void write(byte[],int,int)
com.badlogic.gdx.utils.IntMap: IntMap(int,float)
com.badlogic.gdx.scenes.scene2d.ui.Skin: com.badlogic.gdx.graphics.g2d.TextureAtlas atlas
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetReferenceAngle(long)
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidFiles files
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator: java.lang.Object[] array
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.input.RemoteInput: float[] compass
com.esotericsoftware.kryo.ReferenceResolver: void reset()
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton: void setExtendMotionSpec(com.google.android.material.animation.MotionSpec)
androidx.appcompat.widget.SearchView: int getPreferredWidth()
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide: com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide[] $VALUES
com.badlogic.gdx.utils.BooleanArray: java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder: int _state
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureWrap uWrap
com.badlogic.gdx.graphics.GL30: int GL_BLUE
com.badlogic.gdx.math.Path: float approximate(java.lang.Object)
com.badlogic.gdx.math.RandomXS128: int next(int)
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy: void afterGroups()
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: com.badlogic.gdx.math.Vector3 vTmp
com.badlogic.gdx.graphics.GL30: int GL_FLOAT_MAT3x4
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.utils.Drawable getIcon()
com.badlogic.gdx.math.collision.Sphere: Sphere(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager: void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread)
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer: void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Currency)
com.badlogic.gdx.graphics.g3d.environment.PointLight: com.badlogic.gdx.graphics.g3d.environment.PointLight set(com.badlogic.gdx.graphics.Color,float,float,float,float)
com.badlogic.gdx.graphics.g2d.Sprite: Sprite(com.badlogic.gdx.graphics.Texture,int,int,int,int)
com.esotericsoftware.kryo.io.Output: byte[] getBuffer()
com.badlogic.gdx.graphics.glutils.ShaderProgram: void setUniformf(int,float,float,float)
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider: com.badlogic.gdx.graphics.g3d.Shader createShader(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.Input$Keys: int S
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ICONST_M1
com.badlogic.gdx.physics.box2d.ContactImpulse: float[] tmp
com.badlogic.gdx.utils.TimSort: int minGallop
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visitEnd()
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache: float getSmoothingFactor()
com.badlogic.gdx.utils.Timer$Task: void cancel()
com.esotericsoftware.jsonbeans.ObjectMap$Entries: void reset()
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.ui.Label: com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle style
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
com.badlogic.gdx.utils.XmlReader$Element: com.badlogic.gdx.utils.Array children
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int getBlendSrcFuncAlpha()
com.badlogic.gdx.Graphics: long getFrameId()
com.badlogic.gdx.graphics.g2d.BitmapFont: int PAGES
com.badlogic.gdx.utils.LongArray: boolean isEmpty()
com.badlogic.gdx.utils.IntMap$MapIterator: int INDEX_ILLEGAL
com.badlogic.gdx.math.Interpolation$7
com.badlogic.gdx.math.Vector3: float len(float,float,float)
com.badlogic.gdx.utils.Json: java.lang.Object newInstance(java.lang.Class)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container height(float)
com.esotericsoftware.kryo.io.ByteBufferInputStream: ByteBufferInputStream(int)
com.esotericsoftware.kryonet.Listener$QueuedListener$2: Listener$QueuedListener$2(com.esotericsoftware.kryonet.Listener$QueuedListener,com.esotericsoftware.kryonet.Connection)
com.badlogic.gdx.math.CatmullRomSpline: com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector)
com.badlogic.gdx.assets.loaders.ParticleEffectLoader: ParticleEffectLoader(com.badlogic.gdx.assets.loaders.FileHandleResolver)
com.esotericsoftware.minlog.Log: void info(java.lang.String,java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect
com.badlogic.gdx.backends.android.AndroidInput: int getX(int)
com.badlogic.gdx.scenes.scene2d.Actor: void setOrigin(int)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle: float angle
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
com.badlogic.gdx.graphics.GL30: int GL_RGB16UI
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: float[] renderSize
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: boolean useWakelock
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 setZero()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder insert(int,char[],int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: Gdx2DPixmap(java.nio.ByteBuffer,long[])
com.badlogic.gdx.utils.IdentityMap: int hashCode()
com.badlogic.gdx.utils.IntMap$Values: boolean hasNext()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder: BoxShapeBuilder()
com.badlogic.gdx.physics.box2d.joints.RopeJoint: void setMaxLength(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleController: void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Label
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer: long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.utils.viewport.Viewport: void apply()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration: com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration copy()
com.google.android.material.chip.Chip: void setCloseIconHovered(boolean)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setFitsSystemWindows(boolean)
com.badlogic.gdx.graphics.GL30: int GL_UNIFORM_BLOCK_BINDING
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void scrollX(float)
com.esotericsoftware.kryo.serializers.FieldSerializer: java.lang.Class[] generics
com.badlogic.gdx.utils.ObjectMap: void clear()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap: com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(float,float,float)
com.badlogic.gdx.math.collision.Ray: com.badlogic.gdx.math.collision.Ray set(float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef: float dampingRatio
com.badlogic.gdx.utils.IdentityMap: IdentityMap(int,float)
com.badlogic.gdx.files.FileHandle: java.io.BufferedReader reader(int)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle style
com.esotericsoftware.kryo.io.Input: void skip(int)
com.badlogic.gdx.maps.MapLayer: com.badlogic.gdx.maps.MapObjects getObjects()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: int getVersion()
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1: android.text.Editable getEditableText()
com.badlogic.gdx.Input$Keys: int W
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion: TextureAtlas$AtlasRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.backends.android.AndroidInput$4: AndroidInput$4(com.badlogic.gdx.backends.android.AndroidInput,boolean)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane: void setSecondWidget(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser: int mRedSize
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer: boolean[] deprecated
com.badlogic.gdx.utils.Json: java.lang.String convertToString(java.lang.Enum)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: boolean checkEqual(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Affine2)
com.badlogic.gdx.utils.Bits: void clear(int)
com.badlogic.gdx.graphics.GL20: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.GL30: int GL_RGB9_E5
com.google.android.material.snackbar.SnackbarContentLayout: SnackbarContentLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction: float start
com.badlogic.gdx.scenes.scene2d.utils.Selection: boolean hasItems()
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch: int blendSrcFuncAlpha
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion
com.esotericsoftware.kryo.util.MapReferenceResolver: java.lang.Object getReadObject(java.lang.Class,int)
com.badlogic.gdx.graphics.g2d.BitmapFontCache: void setColors(float,int,int)
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy: int GROUP_BLEND
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
com.badlogic.gdx.math.Quaternion: Quaternion(com.badlogic.gdx.math.Vector3,float)
com.google.android.material.chip.Chip: void setSingleLine(boolean)
com.badlogic.gdx.graphics.GL20: void glUniform1f(int,float)
com.badlogic.gdx.graphics.glutils.PixmapTextureData
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution: java.lang.String folder
com.badlogic.gdx.physics.box2d.WorldManifold: float[] getSeparations()
com.badlogic.gdx.physics.box2d.Joint: boolean isActive()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics: int getHeight(long)
com.badlogic.gdx.scenes.scene2d.ui.Cell: Cell()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: java.lang.String ReflectionAlias
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container padTop(float)
com.esotericsoftware.kryo.io.ByteBufferInput: java.nio.ByteBuffer niobuffer
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch: boolean adjustNeeded
com.badlogic.gdx.graphics.g3d.environment.SpotLight: com.badlogic.gdx.graphics.g3d.environment.SpotLight setIntensity(float)
com.badlogic.gdx.utils.JsonValue: long longValue
com.esotericsoftware.kryo.io.KryoObjectInput: int read(byte[],int,int)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random: com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random copy()
com.esotericsoftware.kryo.io.ByteBufferInput: float[] readFloats(int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniform1i(int,int)
com.badlogic.gdx.utils.ShortArray: short removeIndex(int)
com.badlogic.gdx.graphics.GL30: void glVertexAttribIPointer(int,int,int,int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glUniform2f(int,float,float)
com.badlogic.gdx.utils.ObjectIntMap: int get(java.lang.Object,int)
com.esotericsoftware.kryo.DefaultSerializer
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior: ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior()
com.badlogic.gdx.utils.ObjectMap$MapIterator: boolean valid
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintList(android.content.res.ColorStateList)
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.utils.IntMap$MapIterator: void findNextIndex()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void setAdditive(boolean)
com.badlogic.gdx.physics.box2d.FixtureDef: boolean isSensor
com.esotericsoftware.jsonbeans.JsonReader: com.esotericsoftware.jsonbeans.JsonValue parse(char[],int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: int register(com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData
com.badlogic.gdx.backends.android.AndroidInput$SensorListener
com.badlogic.gdx.graphics.g3d.ModelInstance: void copyAnimation(com.badlogic.gdx.graphics.g3d.model.Animation)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener: int getButton()
com.badlogic.gdx.graphics.g2d.ParticleEffect: void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String)
com.badlogic.gdx.graphics.GL20: void glShaderSource(int,java.lang.String)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config: int defaultCullFace
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color CLEAR
com.badlogic.gdx.utils.viewport.Viewport: void setScreenBounds(int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap
com.badlogic.gdx.scenes.scene2d.ui.Button: com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup buttonGroup
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: PrismaticJoint(com.badlogic.gdx.physics.box2d.World,long)
com.badlogic.gdx.graphics.GL30: void glUniformMatrix4fv(int,int,boolean,float[],int)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: java.lang.String toString(java.lang.Object)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue: MeshSpawnShapeValue()
com.badlogic.gdx.graphics.g2d.TextureRegion: float v
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getStrokeColor()
com.badlogic.gdx.utils.SortedIntList$Iterator: com.badlogic.gdx.utils.SortedIntList$Node position
com.badlogic.gdx.utils.IntArray: int pop()
com.badlogic.gdx.graphics.TextureArray: com.badlogic.gdx.files.FileHandle[] getInternalHandles(java.lang.String[])
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue)
com.HyperSphere.Connection.PacketObjects.Entities.Monster: int questID
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue: float[] timeline
com.badlogic.gdx.graphics.glutils.VertexBufferObject: int getNumVertices()
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder: void box(float,float,float,float,float,float)
com.esotericsoftware.kryo.util.IdentityMap: com.esotericsoftware.kryo.util.IdentityMap$Entries entries
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer
com.badlogic.gdx.scenes.scene2d.ui.Skin$5: Skin$5(com.badlogic.gdx.scenes.scene2d.ui.Skin)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setOnClickListener(android.view.View$OnClickListener)
com.badlogic.gdx.maps.tiled.TiledMapTile: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode getBlendMode()
com.badlogic.gdx.graphics.GL30: void glUniformMatrix2fv(int,int,boolean,float[],int)
com.badlogic.gdx.utils.ObjectSet: void push(java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.math.collision.BoundingBox: com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20: void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes)
com.google.android.material.appbar.AppBarLayout: int getPendingAction()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader: com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color FIREBRICK
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType)
com.google.android.material.chip.Chip: void setCloseIconPressed(boolean)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute a
com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField: void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation: com.badlogic.gdx.utils.Array translation
com.badlogic.gdx.graphics.Mesh: int getMaxIndices()
com.badlogic.gdx.scenes.scene2d.Group: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: int getCircularRevealScrimColor()
com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField: void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(java.lang.String)
com.badlogic.gdx.physics.box2d.ContactImpulse: void jniGetTangentImpulses(long,float[])
com.badlogic.gdx.input.RemoteInput: void setOnscreenKeyboardVisible(boolean)
com.esotericsoftware.reflectasm.FieldAccess: float getFloat(java.lang.Object,int)
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil: java.lang.Class getTypeVarConcreteClass(java.lang.Class[],int,java.lang.String)
com.badlogic.gdx.graphics.Cursor$SystemCursor: com.badlogic.gdx.graphics.Cursor$SystemCursor[] values()
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node: PixmapPacker$GuillotineStrategy$Node()
com.badlogic.gdx.graphics.g3d.utils.RenderContext: void setDepthTest(int,float,float)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: int[] readInts(int,boolean)
com.badlogic.gdx.utils.ByteArray: ByteArray(boolean,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: IndexBufferObjectSubData(boolean,int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void texCoord(float,float)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph: int getTop(long)
com.badlogic.gdx.utils.reflect.Method: java.lang.reflect.Method method
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration: void allocateChannels()
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction: void setX(float)
com.badlogic.gdx.InputEventQueue
com.badlogic.gdx.graphics.glutils.KTXTextureData: int numberOfArrayElements
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable
com.esotericsoftware.jsonbeans.Json: void writeField(java.lang.Object,java.lang.String,java.lang.String)
com.esotericsoftware.kryonet.Listener$ThreadedListener: void queue(java.lang.Runnable)
com.badlogic.gdx.utils.compression.lzma.Base: int kNumStates
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6: com.badlogic.gdx.math.Matrix4 temp
com.badlogic.gdx.utils.FloatArray: boolean contains(float)
com.badlogic.gdx.physics.box2d.ChainShape: int jniGetVertexCount(long)
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.esotericsoftware.kryo.io.UnsafeMemoryInput: short[] readShorts(int)
com.badlogic.gdx.utils.Json: java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.Reader)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter: boolean acceptChar(com.badlogic.gdx.scenes.scene2d.ui.TextField,char)
com.badlogic.gdx.physics.box2d.Body: com.badlogic.gdx.utils.Array getJointList()
com.badlogic.gdx.physics.box2d.ChainShape: float[] verts
com.badlogic.gdx.physics.box2d.joints.MouseJoint: com.badlogic.gdx.math.Vector2 target
com.badlogic.gdx.maps.MapLayer: com.badlogic.gdx.maps.MapProperties getProperties()
com.esotericsoftware.kryo.io.ByteBufferInput: long readVarLong(boolean)
com.badlogic.gdx.Graphics: float getPpiX()
com.badlogic.gdx.scenes.scene2d.actions.AfterAction: void restart()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item: java.lang.String i
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector nor()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getActorY()
com.badlogic.gdx.backends.android.AndroidGL20: void glBindRenderbuffer(int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.math.RandomXS128: boolean nextBoolean()
androidx.appcompat.widget.Toolbar: void setSubtitle(java.lang.CharSequence)
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.Actor actor
com.badlogic.gdx.graphics.g3d.particles.ParticleShader: boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable)
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int CurrentLifeOffset
com.badlogic.gdx.math.Interpolation: com.badlogic.gdx.math.Interpolation$ElasticIn elasticIn
com.esotericsoftware.kryo.util.ObjectMap$Values: void reset()
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels: int VelocityThetaDiffOffset
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: short[] getIndices()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glBindFramebuffer(int,int)
com.badlogic.gdx.utils.IntIntMap: int threshold
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: int getAscender()
com.badlogic.gdx.scenes.scene2d.Actor: com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.BSpline: com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector)
com.esotericsoftware.kryo.util.IdentityMap: int threshold
com.badlogic.gdx.scenes.scene2d.ui.Slider$1: void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer: void flush()
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table pad(float)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: java.nio.ByteBuffer byteBuffer
com.badlogic.gdx.utils.IntIntMap: int hashCode()
com.google.android.material.chip.Chip: void setChipIconResource(int)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Quaternion quat2
com.badlogic.gdx.graphics.g2d.PixmapPacker
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle getStyle()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE_WRAP_S
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type Circle
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction: boolean visible
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData: int getWidth()
com.badlogic.gdx.utils.JsonWriter$JsonObject
com.badlogic.gdx.Input$Keys: int BACK
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Keys keys2
com.badlogic.gdx.utils.IntSet: void addAll(int[],int,int)
com.badlogic.gdx.graphics.GL20: int GL_COLOR_WRITEMASK
com.badlogic.gdx.audio.Music: void setLooping(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.input.RemoteInput$KeyEvent: int KEY_TYPED
com.esotericsoftware.kryo.ClassResolver: void reset()
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter: com.badlogic.gdx.graphics.Pixmap$Format format
com.badlogic.gdx.utils.ArrayMap$Values: boolean valid
com.badlogic.gdx.graphics.VertexAttribute: com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked()
com.badlogic.gdx.utils.JsonReader: com.badlogic.gdx.utils.Array lastChild
com.google.android.material.textfield.TextInputLayout: float getHintCollapsedTextHeight()
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint: com.badlogic.gdx.physics.box2d.Manifold this$0
com.badlogic.gdx.graphics.GL30: int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
com.badlogic.gdx.backends.android.AndroidAudio: com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter: RegularEmitter()
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float)
com.badlogic.gdx.utils.OrderedMap: java.lang.String toString()
com.badlogic.gdx.graphics.g3d.Model: com.badlogic.gdx.graphics.g3d.Material convertMaterial(com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial,com.badlogic.gdx.graphics.g3d.utils.TextureProvider)
com.badlogic.gdx.assets.AssetManager: com.badlogic.gdx.utils.ObjectSet injected
com.esotericsoftware.kryonet.util.ObjectIntMap: void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)
com.badlogic.gdx.utils.Json$ReadOnlySerializer: Json$ReadOnlySerializer()
androidx.appcompat.view.menu.ListMenuItemView: void setSubMenuArrowVisible(boolean)
com.badlogic.gdx.Application: com.badlogic.gdx.utils.Clipboard getClipboard()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer
com.esotericsoftware.kryonet.Client: void removeListener(com.esotericsoftware.kryonet.Listener)
com.badlogic.gdx.Input$Keys: int CONTROL_RIGHT
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: void end()
com.badlogic.gdx.backends.android.AndroidGraphics: boolean running
com.esotericsoftware.kryo.io.Input: char[] readChars(int)
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer: void clear()
com.badlogic.gdx.graphics.g2d.Sprite: boolean dirty
com.badlogic.gdx.graphics.GL30: void glVertexAttribI4i(int,int,int,int,int)
com.badlogic.gdx.utils.ArrayMap: com.badlogic.gdx.utils.ArrayMap$Keys keys1
com.esotericsoftware.jsonbeans.JsonValue: float getFloat(java.lang.String)
com.badlogic.gdx.backends.android.AndroidGraphics: float getDeltaTime()
com.badlogic.gdx.Input$Keys: int TAB
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_spotLights0intensity
com.badlogic.gdx.graphics.g3d.particles.ParallelArray
com.badlogic.gdx.scenes.scene2d.utils.Layout: void setLayoutEnabled(boolean)
com.esotericsoftware.kryo.io.InputChunked: void rewind()
com.badlogic.gdx.utils.IntSet: com.badlogic.gdx.utils.IntSet$IntSetIterator iterator()
com.badlogic.gdx.Graphics: com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
com.google.android.material.transformation.ExpandableBehavior: ExpandableBehavior()
com.badlogic.gdx.math.Matrix4: void mul(float[],float[])
com.google.firebase.installations.FirebaseInstallationsRegistrar
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 interpolate(com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent: int KEY_DOWN
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator: int pixelHeight
com.badlogic.gdx.scenes.scene2d.Actor: boolean isVisible()
com.badlogic.gdx.graphics.GL30: void glUniform1f(int,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean mPreserveEGLContextOnPause
com.badlogic.gdx.graphics.glutils.FacedCubemapData: FacedCubemapData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy: com.badlogic.gdx.graphics.g2d.PixmapPacker$Page pack(com.badlogic.gdx.graphics.g2d.PixmapPacker,java.lang.String,com.badlogic.gdx.math.Rectangle)
com.badlogic.gdx.scenes.scene2d.ui.Cell: com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean)
com.google.android.material.textfield.TextInputLayout: void setErrorIconTintList(android.content.res.ColorStateList)
com.badlogic.gdx.backends.android.AndroidGraphics: java.lang.String LOG_TAG
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: void color(float)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder: void build(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
com.gameanalytics.sdk.events.EGASdkErrorAction: com.gameanalytics.sdk.events.EGASdkErrorAction[] values()
com.badlogic.gdx.backends.android.AndroidInput: int getDeltaY(int)
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute: int hashCode()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: ImmediateModeRenderer20(boolean,boolean,int)
com.esotericsoftware.kryo.io.KryoObjectOutput: com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.math.Affine2: com.badlogic.gdx.math.Affine2 setToTrnRotScl(float,float,float,float,float)
com.badlogic.gdx.graphics.GL20: int glGenTexture()
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationWriter: int b
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2: java.lang.Class val$type
com.badlogic.gdx.ApplicationListener
com.HyperSphere.Connection.PacketObjects.Misc.Throwable: void updatePosition()
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController: com.badlogic.gdx.utils.Pool transformPool
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar: float getKnobPosition()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Attribute J
com.google.android.material.chip.Chip: com.google.android.material.animation.MotionSpec getHideMotionSpec()
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float)
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite: int cols
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver: com.badlogic.gdx.assets.loaders.FileHandleResolver baseResolver
com.badlogic.gdx.backends.android.AndroidGL20: void glDepthMask(boolean)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glHint(int,int)
com.esotericsoftware.kryo.ReferenceResolver: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.utils.ObjectMap: java.lang.Object findKey(java.lang.Object,boolean)
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer: java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table debugCell()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void generateLifeOffsetValues()
com.badlogic.gdx.math.Quaternion: float getYawRad()
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle
com.badlogic.gdx.utils.ObjectFloatMap$Entry: java.lang.String toString()
androidx.recyclerview.widget.RecyclerView: void setClipToPadding(boolean)
com.badlogic.gdx.Input$Keys: int Y
com.badlogic.gdx.graphics.g2d.BitmapFont: BitmapFont()
com.hyperspherestudio.kryonet.Packets.EncryptedPacket: byte[] data
com.badlogic.gdx.physics.box2d.EdgeShape: void getVertex2(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float)
com.badlogic.gdx.math.EarClippingTriangulator: int previousIndex(int)
com.badlogic.gdx.scenes.scene2d.ui.Slider: com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle getStyle()
com.esotericsoftware.kryonet.util.ObjectIntMap: ObjectIntMap()
com.badlogic.gdx.graphics.GL20: int GL_FUNC_REVERSE_SUBTRACT
com.badlogic.gdx.scenes.scene2d.ui.SelectBox: float getPrefHeight()
com.esotericsoftware.jsonbeans.ObjectMap: java.lang.String toString()
com.badlogic.gdx.utils.Timer$Task: boolean isScheduled()
com.badlogic.gdx.scenes.scene2d.ui.Cell: java.lang.Integer expandX
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.utils.LongMap$Entries: java.util.Iterator iterator()
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: void Init()
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer: BillboardRenderer(com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch)
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction
com.badlogic.gdx.scenes.scene2d.ui.Tooltip: com.badlogic.gdx.scenes.scene2d.Actor targetActor
com.esotericsoftware.kryo.io.UnsafeMemoryOutput: UnsafeMemoryOutput(java.io.OutputStream)
com.badlogic.gdx.graphics.GL20: int GL_STATIC_DRAW
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData: void bufferChanged()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop: com.badlogic.gdx.utils.ObjectMap sourceListeners
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration: int touchSleepTime
com.badlogic.gdx.utils.I18NBundle: com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String)
com.badlogic.gdx.math.Path: java.lang.Object derivativeAt(java.lang.Object,float)
com.HyperSphere.Connection.PacketObjects.Map.Tile: Tile()
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder: com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2[] m_Coders
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue: void spawnAux(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18: boolean LOG_RENDERER_DRAW_FRAME
com.esotericsoftware.kryo.StreamFactory: void setKryo(com.esotericsoftware.kryo.Kryo)
com.badlogic.gdx.math.Matrix3: com.badlogic.gdx.math.Matrix3 scale(float,float)
com.google.android.material.chip.Chip: void setOnCheckedChangeListenerInternal(android.widget.CompoundButton$OnCheckedChangeListener)
com.badlogic.gdx.graphics.GL30: void glDrawElementsInstanced(int,int,int,int,int)
com.esotericsoftware.kryo.serializers.FieldSerializer$Optional
com.badlogic.gdx.scenes.scene2d.Actor: boolean clipBegin(float,float,float,float)
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation: java.lang.String id
com.badlogic.gdx.graphics.g2d.SpriteCache: com.badlogic.gdx.graphics.Color getColor()
com.badlogic.gdx.scenes.scene2d.ui.Tree: void remove(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_diffuseColor
com.badlogic.gdx.graphics.g2d.ParticleEffect: void setEmittersCleanUpBlendFunction(boolean)
com.google.android.material.chip.Chip: void setChipCornerRadius(float)
com.badlogic.gdx.scenes.scene2d.Touchable: Touchable(java.lang.String,int)
com.badlogic.gdx.utils.IntFloatMap: void clear()
com.esotericsoftware.kryo.serializers.ObjectCachedFieldFactory: com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer: boolean isCached()
com.badlogic.gdx.assets.loaders.ParticleEffectLoader: com.badlogic.gdx.graphics.g2d.ParticleEffect load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter)
com.badlogic.gdx.graphics.g3d.utils.CameraInputController: boolean touchUp(int,int,int,int)
com.badlogic.gdx.InputEventQueue: int KEY_UP
com.badlogic.gdx.InputAdapter: InputAdapter()
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float jniGetMaxTorque(long)
com.badlogic.gdx.math.Vector3: boolean epsilonEquals(com.badlogic.gdx.math.Vector3)
com.esotericsoftware.kryo.util.ObjectMap: ObjectMap(com.esotericsoftware.kryo.util.ObjectMap)
com.badlogic.gdx.scenes.scene2d.actions.Actions: com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float,com.badlogic.gdx.math.Interpolation)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier: com.badlogic.gdx.math.Vector3 TMP_V2
com.badlogic.gdx.graphics.GL20: int GL_ATTACHED_SHADERS
com.badlogic.gdx.math.Quaternion: com.badlogic.gdx.math.Quaternion setFromCross(float,float,float,float,float,float)
com.badlogic.gdx.graphics.GL20: int GL_NONE
com.hyperspherestudio.kryonet.Packets.EncryptedPacket
com.badlogic.gdx.physics.box2d.EdgeShape: float[] vertex
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int H_PUTFIELD
com.badlogic.gdx.utils.TextFormatter: com.badlogic.gdx.utils.StringBuilder buffer
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glDeleteQueries(int,java.nio.IntBuffer)
com.esotericsoftware.jsonbeans.JsonValue: long asLong()
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup expand()
com.badlogic.gdx.scenes.scene2d.ui.Dialog: com.badlogic.gdx.scenes.scene2d.ui.Table contentTable
com.badlogic.gdx.utils.IntMap$MapIterator: void remove()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Pointer: long address
com.badlogic.gdx.utils.AtomicQueue
com.badlogic.gdx.graphics.GL20: void glReleaseShaderCompiler()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: int UPDATE_SPRITE
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction: boolean act(float)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void update()
com.badlogic.gdx.scenes.scene2d.actions.Actions: Actions()
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer: java.util.TimeZone read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.scenes.scene2d.Actor: boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)
com.badlogic.gdx.backends.android.AndroidDaydream: void hideStatusBar(com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
com.badlogic.gdx.graphics.g3d.model.Node: void calculateTransforms(boolean)
com.badlogic.gdx.utils.IntArray: int lastIndexOf(int)
com.badlogic.gdx.utils.UBJsonReader: com.badlogic.gdx.utils.JsonValue parseObject(java.io.DataInputStream)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float getLowerLimit()
com.badlogic.gdx.backends.android.AndroidFragmentApplication: com.badlogic.gdx.backends.android.AndroidAudio audio
com.badlogic.gdx.graphics.g2d.TextureRegion: TextureRegion(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.utils.IntFloatMap: com.badlogic.gdx.utils.IntFloatMap$Keys keys1
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel: void setCapacity(int)
com.esotericsoftware.kryo.io.ByteBufferOutput: ByteBufferOutput()
com.badlogic.gdx.scenes.scene2d.utils.UIUtils: boolean isMac
com.badlogic.gdx.utils.ShortArray: short[] items
com.badlogic.gdx.graphics.GL30: void glDeleteTransformFeedbacks(int,int[],int)
com.badlogic.gdx.math.collision.Segment: long serialVersionUID
com.badlogic.gdx.scenes.scene2d.Group: com.badlogic.gdx.math.Matrix4 computedTransform
com.badlogic.gdx.graphics.profiling.GL20Interceptor: void glCompileShader(int)
androidx.appcompat.widget.AppCompatRadioButton: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint
com.esotericsoftware.kryo.io.ByteBufferInput: void release()
com.badlogic.gdx.graphics.g2d.ParticleEmitter: void scaleMotion(float)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder: void transformNormal(float[],int,int,com.badlogic.gdx.math.Matrix3)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: int f
com.badlogic.gdx.physics.box2d.Body: void setLinearDamping(float)
com.esotericsoftware.kryo.util.ObjectMap$Entry: java.lang.Object value
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassReader: int a(int,char[],java.lang.String,com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.AnnotationVisitor)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group: boolean hasUVs
androidx.appcompat.widget.AppCompatSpinner: void setDropDownVerticalOffset(int)
com.badlogic.gdx.graphics.Color: com.badlogic.gdx.graphics.Color VIOLET
com.badlogic.gdx.graphics.glutils.FrameBuffer: FrameBuffer()
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ACC_VARARGS
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader: void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryonet.Connection: void updateReturnTripTime()
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void rect(float,float,float,float)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: int framebufferHandle
com.badlogic.gdx.graphics.g2d.ParticleEmitter: float getY()
com.badlogic.gdx.utils.async.AsyncExecutor$2: com.badlogic.gdx.utils.async.AsyncExecutor this$0
com.badlogic.gdx.math.Intersector: boolean intersectSegmentPlane(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.graphics.GL20: int GL_VIEWPORT
com.badlogic.gdx.utils.IntFloatMap$Entries: com.badlogic.gdx.utils.IntFloatMap$Entry next()
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$1
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener flickScrollListener
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrapSpace(float)
com.badlogic.gdx.scenes.scene2d.ui.Container: com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(float)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: long startTime
com.badlogic.gdx.graphics.glutils.ETC1TextureData: ETC1TextureData(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory: javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object)
com.badlogic.gdx.scenes.scene2d.ui.Cell: float actorWidth
com.badlogic.gdx.utils.StringBuilder: void setLength(int)
com.badlogic.gdx.utils.reflect.ClassReflection: java.lang.Object newInstance(java.lang.Class)
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef: com.badlogic.gdx.math.Vector2 localAnchorB
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer: IsometricStaggeredTiledMapRenderer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch)
com.esotericsoftware.kryo.util.IntMap$Keys: com.esotericsoftware.kryo.util.IntArray toArray()
com.esotericsoftware.kryonet.util.InputStreamSender: byte[] chunk
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int ISHL
com.badlogic.gdx.graphics.GL20: int GL_RED_BITS
com.esotericsoftware.kryonet.rmi.ObjectSpace$4: java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool
com.badlogic.gdx.utils.IntMap$Values: com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE7
com.esotericsoftware.kryonet.Server: void sendToUDP(int,java.lang.Object)
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 sub(float,float,float)
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell: int ROTATE_270
com.badlogic.gdx.math.Vector3: com.badlogic.gdx.math.Vector3 setFromSpherical(float,float)
com.badlogic.gdx.utils.IdentityMap$Values: void reset()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting: com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting AutoFull
com.badlogic.gdx.scenes.scene2d.Actor: float getOriginX()
com.badlogic.gdx.physics.box2d.World: void endContact(long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: boolean setPixelSizes(int,int)
com.badlogic.gdx.graphics.profiling.GL30Interceptor: void glLinkProgram(int)
com.badlogic.gdx.net.HttpParametersUtils
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite: com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region
com.badlogic.gdx.utils.Array$ArrayIterable: com.badlogic.gdx.utils.Array$ArrayIterator iterator1
com.badlogic.gdx.scenes.scene2d.ui.Tree: void setPadding(float,float)
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glUniform1iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.math.Polygon: float getRotation()
com.google.android.material.button.MaterialButton: int getIconGravity()
com.badlogic.gdx.graphics.profiling.GLInterceptor: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.esotericsoftware.kryo.io.Input: double readDouble()
androidx.recyclerview.widget.RecyclerView: void setLayoutTransition(android.animation.LayoutTransition)
com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField: void copy(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.GL20: int GL_TEXTURE23
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatPressedTranslationZResource(int)
androidx.fragment.app.Fragment: void onSaveInstanceState(android.os.Bundle)
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager: com.badlogic.gdx.scenes.scene2d.ui.Tooltip showTooltip
com.badlogic.gdx.physics.box2d.joints.MotorJoint: float getMaxTorque()
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool: java.lang.Object newObject()
com.badlogic.gdx.graphics.glutils.VertexBufferObject: void setVertices(float[],int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face: com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size getSize()
com.badlogic.gdx.physics.box2d.joints.RopeJoint: float jniGetMaxLength(long)
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo: com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setUV(float,float)
com.badlogic.gdx.scenes.scene2d.ui.Table: com.badlogic.gdx.scenes.scene2d.ui.Table padRight(float)
com.badlogic.gdx.backends.android.AndroidInput: boolean[] resize(boolean[])
com.google.firebase.iid.FirebaseInstanceIdReceiver
com.badlogic.gdx.physics.box2d.joints.RopeJoint: void jniGetLocalAnchorA(long,float[])
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder: com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
com.badlogic.gdx.Graphics$DisplayMode: java.lang.String toString()
com.badlogic.gdx.graphics.GL30: int GL_DRAW_BUFFER1
com.badlogic.gdx.utils.JsonWriter: java.io.Writer getWriter()
com.esotericsoftware.kryo.serializers.FieldSerializer: boolean fixedFieldTypes
com.google.android.material.internal.BaselineLayout: BaselineLayout(android.content.Context,android.util.AttributeSet)
com.badlogic.gdx.scenes.scene2d.Event: Event()
com.badlogic.gdx.graphics.profiling.GL20Interceptor: int glCheckFramebufferStatus(int)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetReferenceAngle(long)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.utils.XmlReader: byte[] _xml_key_offsets
com.badlogic.gdx.utils.StreamUtils: java.lang.String copyStreamToString(java.io.InputStream)
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable
com.badlogic.gdx.graphics.glutils.ShapeRenderer: void x(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.Net$HttpRequest: boolean getIncludeCredentials()
com.esotericsoftware.kryo.serializers.DeflateSerializer: void setCompressionLevel(int)
com.badlogic.gdx.graphics.glutils.FacedCubemapData
com.badlogic.gdx.graphics.g3d.shaders.BaseShader: boolean set(int,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 best
com.badlogic.gdx.utils.compression.CRC: int[] Table
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder: int[] _prices
com.badlogic.gdx.utils.SnapshotArray: java.lang.Object[] begin()
com.badlogic.gdx.graphics.glutils.KTXTextureData: int getHeight()
com.badlogic.gdx.utils.async.AsyncExecutor$1: AsyncExecutor$1(com.badlogic.gdx.utils.async.AsyncExecutor,java.lang.String)
com.badlogic.gdx.utils.XmlReader: com.badlogic.gdx.utils.XmlReader$Element parse(java.io.InputStream)
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder
com.esotericsoftware.kryo.io.KryoDataInput: int readUnsignedShort()
com.badlogic.gdx.graphics.GL20: int GL_COMPILE_STATUS
com.badlogic.gdx.utils.ObjectFloatMap$Values: float next()
com.badlogic.gdx.maps.MapProperties: MapProperties()
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField: AsmCacheFields$AsmIntField()
androidx.appcompat.widget.AppCompatTextView: void setLastBaselineToBottomHeight(int)
com.badlogic.gdx.backends.android.AndroidInput$2: java.lang.Object newObject()
com.badlogic.gdx.utils.JsonWriter: boolean named
com.esotericsoftware.kryonet.util.ObjectIntMap
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO: int getNumMaxVertices()
com.esotericsoftware.kryo.util.IntMap$Entry: java.lang.Object value
com.badlogic.gdx.scenes.scene2d.ui.Table: boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer: boolean isDrawJoints()
com.badlogic.gdx.graphics.g2d.SpriteCache: void beginCache(int)
com.esotericsoftware.kryo.util.ObjectMap: void putStash(java.lang.Object,java.lang.Object)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData: void unbind()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter
com.esotericsoftware.kryo.io.Input: double readDouble(double,boolean)
com.badlogic.gdx.graphics.g3d.loader.ObjLoader: com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters)
com.badlogic.gdx.utils.IntSet: int size
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20: int normalOffset
com.badlogic.gdx.math.MathUtils: float radFull
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1: com.badlogic.gdx.math.Vector3 newObject()
com.badlogic.gdx.graphics.GLTexture: com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap()
com.badlogic.gdx.utils.StringBuilder: com.badlogic.gdx.utils.StringBuilder append(int,int)
com.badlogic.gdx.utils.UBJsonWriter: com.badlogic.gdx.utils.UBJsonWriter value(int[])
com.badlogic.gdx.utils.ShortArray: short[] ensureCapacity(int)
com.badlogic.gdx.utils.Timer: com.badlogic.gdx.utils.Array tasks
com.badlogic.gdx.graphics.g2d.PolygonRegion: short[] getTriangles()
com.badlogic.gdx.scenes.scene2d.ui.Button: com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup getButtonGroup()
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node: com.badlogic.gdx.scenes.scene2d.ui.Tree getTree()
com.badlogic.gdx.audio.Sound: long loop(float)
com.badlogic.gdx.graphics.g3d.shaders.DepthShader: java.lang.String getDefaultVertexShader()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source: com.badlogic.gdx.scenes.scene2d.Actor actor
com.esotericsoftware.kryonet.util.ObjectIntMap: void put(java.lang.Object,int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Item b(java.lang.String)
com.badlogic.gdx.math.Polyline: float[] getVertices()
com.badlogic.gdx.backends.android.AndroidApplicationBase: int getLogLevel()
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle: float x2
com.badlogic.gdx.backends.android.AndroidGL30: void glBindTransformFeedback(int,int)
com.badlogic.gdx.utils.compression.lzma.Encoder: int GetPosLenPrice(int,int,int)
com.esotericsoftware.kryonet.util.ObjectIntMap: int PRIME1
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPadRight()
com.badlogic.gdx.graphics.GL20: void glPixelStorei(int,int)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton: ImageTextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle)
com.badlogic.gdx.Input: boolean isTouched()
com.badlogic.gdx.backends.android.AndroidApplication$2
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup bottom()
com.badlogic.gdx.Preferences: com.badlogic.gdx.Preferences putFloat(java.lang.String,float)
com.esotericsoftware.kryo.io.ByteBufferInputStream: ByteBufferInputStream(java.nio.ByteBuffer)
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener: com.badlogic.gdx.utils.Timer$Task scrollDown
com.badlogic.gdx.utils.IntMap: com.badlogic.gdx.utils.IntMap$Keys keys2
com.badlogic.gdx.utils.IntMap$MapIterator: boolean hasNext
com.badlogic.gdx.math.Ellipse: Ellipse(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle: com.badlogic.gdx.graphics.Color focusedFontColor
com.badlogic.gdx.graphics.g2d.ParticleEmitter: java.lang.String readString(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder: void ensureIndicesCapacity(int)
com.esotericsoftware.kryo.serializers.BeanSerializer$1: BeanSerializer$1(com.esotericsoftware.kryo.serializers.BeanSerializer)
com.badlogic.gdx.graphics.g3d.utils.TextureBinder: int getReuseCount()
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.graphics.g3d.decals.Decal: int X4
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: float fadeDelaySeconds
com.badlogic.gdx.math.Polygon: float[] getTransformedVertices()
com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class)
com.badlogic.gdx.utils.TimeUtils: long timeSinceMillis(long)
com.badlogic.gdx.math.MathUtils$Sin: float[] table
com.google.android.material.chip.Chip: void setChipIconVisible(int)
com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes: int DUP_X2
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues: com.badlogic.gdx.utils.Array keys
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection: DynamicsModifier$FaceDirection()
com.badlogic.gdx.utils.JsonReader: void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue)
com.google.android.material.chip.Chip: void setLines(int)
com.badlogic.gdx.utils.FloatArray: void add(float,float,float,float)
com.badlogic.gdx.math.Intersector: com.badlogic.gdx.math.Vector3 tmp1
com.badlogic.gdx.utils.ArrayMap: int indexOfValue(java.lang.Object,boolean)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect: void update(float)
com.HyperSphere.Connection.PacketObjects.Map.MapObject: int getY()
com.badlogic.gdx.graphics.g2d.freetype.FreetypeBuild: void main(java.lang.String[])
com.badlogic.gdx.math.RandomXS128: RandomXS128(long)
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine: float xOffsetStep
com.badlogic.gdx.physics.box2d.Shape: void jniDispose(long)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable: void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float)
com.badlogic.gdx.graphics.GL30: int GL_MAX_FRAGMENT_UNIFORM_BLOCKS
com.badlogic.gdx.utils.async.AsyncResult: java.lang.Object get()
com.badlogic.gdx.scenes.scene2d.ui.Cell: float getPadY()
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle: ImageButton$ImageButtonStyle()
com.badlogic.gdx.utils.JsonValue: com.badlogic.gdx.utils.JsonValue get(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance: void qsort(int,int)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane: void scrollY(float)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader: int u_dirLights1color
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction: boolean act(float)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2: void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)
com.badlogic.gdx.math.Quaternion: Quaternion()
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute: com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createSpecular(float,float,float,float)
com.google.android.material.chip.Chip: void setCheckedIcon(android.graphics.drawable.Drawable)
com.esotericsoftware.kryo.util.ObjectMap: boolean containsValue(java.lang.Object,boolean)
com.badlogic.gdx.math.Matrix4: com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getHelperText()
com.badlogic.gdx.utils.ObjectMap$Entries: com.badlogic.gdx.utils.ObjectMap$Entry entry
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot: int getBitmapTop()
com.esotericsoftware.kryo.io.ByteBufferOutput: void writeShorts(short[])
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5: DefaultShader$Setters$5()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1: com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler this$0
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch: void allocIndices()
com.esotericsoftware.kryonet.ClientDiscoveryHandler
